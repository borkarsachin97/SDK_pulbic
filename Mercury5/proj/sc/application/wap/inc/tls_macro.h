
#ifndef __TLS_MACRO_H__
#define __TLS_MACRO_H__

#ifdef __cplusplus
extern "C" {
#endif

#define SSL_DEFAULT_CON_COUNT 10          /**< default connection count */
#define SSL_IP_ADDR_LEN   4               /**< the ip addr lenth (bytes) */
#define SSL_SEQ_LEN       8               /**< ssl read/write sequence length */
#define SSL_RANDOM_LEN    28              /**< random number length */
#define SSL_MAX_CERT_NUM_FROM_SERVER  20  /**< the max number of certs sent from server */
#define SSL_CLIENT_HELLO_LEN  256         /**< the length of client hello pkt */
#define SSL_SERVER_HELLO_LEN  256         /**< the length of server hello pkt */
#define SSL_SERVER_HELLO_DONE_LEN  16     /**< the length of server hello done pkt */
#define SSL_CLIENT_KEY_EXCHANG_LEN  600   /**< the length of client key exchange pkt */
#define SSL_CLIENT_CHANGE_CIPHER_LEN  1   /**< the length of client change cipher pkt */
#define SSL_FINISH_LEN     256            /**< the length of finish pkt */
#define SSL_ALERT_PKT_LEN  2              /**< alert pkt length */
#define SSL_CHANGE_CIPHER_PKT_LEN  1      /**< change cipher pkt length */
#define SSL_FINISH_HEAD_LEN 4             /**< SSL/TLS finish head len */
#define SSL_TLS_FINISH_LEN  12            /**< TLS finish pkt len */
#define SSL_SSL_FINISH_LEN  36            /**< SSL finish pkt len */

/** ssl recv on data on a secure connection */
#define SSL_RECV_NO_DATA  0

/**< if SSL supports client authenticate */

/* the cipher suites SSL supports */
#define SSL_RSA_WITH_RC4_128_MD5    {0x00, 0x04}  /**< asymmetric alog: RSA, symmtric alog: RC4, MD diagiest: MD5 */
#define SSL_RSA_WITH_RC4_128_SHA    {0x00, 0x05}  /**< asymmetric alog: RSA, symmtric alog: RC4, MD diagiest: SHA */
#define SSL_CIPHER_COUNT    2                     /**< the asymmetic alog count used in SSL */

#define SSL_MAX_PLAIN_LEN       16384                     /**< the maxinum length of plaintext <2^14 from tls 6.2.2> */
#define SSL_MAX_COMPRE_LEN      (1024+SSL_MAX_PLAIN_LEN)  /**< the maxinum length of comprsstext */
#define SSL_MAX_ENCRYPT_LEN     (1024+SSL_MAX_COMPRE_LEN) /**< the maxinum length of ciphertext */
#define SSL_MAX_CIPHERTEXT_BURST_LEN 4096                 /**< the max len sent to lower layer one time */
#define SSL_RECORD_HEAD_LEN     5    /**< the length of ssl pkt head */
#define SSL_MAX_SESSION_NUMBER  100  /**< the maximum session count supported at the same time */
#define SSL_MAX_CONNECT_NUM     100  /**< the maximum connection count supported at the same time */
#define SSL_RANDOM_SIZE         32   /**< the size of random number generated by server and client */
#define SSL_MAX_ERROR_NUM       1024 /**< the max number of errors allowed in one session */
#define SSL_SESS_ID_LEN         32   /**< the length of session id */
#define SSL_MASTER_KEY_LEN      48   /**< the lentgth of master key */
#define ALG_MD_SIZE             36   /**< the size of data in MD compute 36 = 16(md5) + 20(sha) */

/** the size of MD */
#define SSL_MD_MD5_SIZE         16  /**< the size of MD5 */
#define SSL_MD_SHA1_SIZE        20  /**< the size of SHA1 */
#define SSL_MD_SHA_SIZE         20  /**< the size of SHA1 */
#define SSL_MAX_MD_LEN          20  /**< the maximun size of MD */

/** the type of ssl pkt */
#define SSL3_CT_CHANGE_CIPHER_SPEC  20  /**< change cipher */
#define SSL3_CT_ALERT               21  /**< alert */
#define SSL3_CT_HANDSHAKE           22  /**< handshake */
#define SSL3_CT_APP_DATA            23  /**< application */

/** the type of handshake pkt */
#define SSL3_MT_CLIENT_HELLO            1   /**< client hello from client*/
#define SSL3_MT_SERVER_HELLO            2   /**< server hello from server*/
#define SSL3_MT_CERTIFICATE             11  /**< certificate from server */
#define SSL3_MT_CERTIFICATE_REQUEST     13  /**< certificate request from server */
#define SSL3_MT_SERVER_DONE             14  /**< server hello done from server */
#define SSL3_MT_CLIENT_KEY_EXCHANGE     16  /**< client key exchange from client */
#define DSSL3_MT_FINISHED               20  /**< finished both from server and client */

/** the status of buffer in receiving data */
#define SSL_BUF_ENOUGH                  0  /**< buffer has enough space for receving data which cann't reach the tail of buffer */
#define SSL_BUF_NOT_ENOUGH              1  /**< buffer has no enough space for receving data */
#define SSL_BUF_ROLLBACK                2  /**< buffer has enough space for receving data which exceed the tail of buffer */

#define SSL_ENCRYPT_FLAG                0x01  /**< the flag of encryption */
#define SSL_DECRYPT_FLAG                0x02  /**< the flag of decryption */
#define SSL_COMPRESS_FLAG               0x04  /**< the flag of compression */
#define SSL_DECOMPRESS_FLAG             0x08  /**< the flag of decompression */
#define SSL_READ_MAC_FLAG               0x10  /**< the flag of MAC in receiving */
#define SSL_WRITE_MAC_FLAG              0x20  /**< the flag of MAC in transmitting */

/** the status of receiving pkt */
#define SSL_PKT_COMPLETE                0x01  /**< the pkt has received over */
#define SSL_PKT_IS_CIPHER               0x02  /**< the flag of decrypt the received pkt */
#define SSL_PKT_MD_NOT_COMPUTED         0x04  /**< the flag of MAC the received pkt */

/* Change the status of cipher */
#define SSL3_CC_READ        0x01   /**< change cipher for read */
#define SSL3_CC_WRITE       0x02   /**< change cipher for write */
#define SSL3_CC_CLIENT      0x10   /**< change cipher for client */
#define SSL3_CC_SERVER      0x20   /**< change cipher for server */
#define SSL3_CHANGE_CIPHER_CLIENT_WRITE (SSL3_CC_CLIENT|SSL3_CC_WRITE)  /**< change cipher for client write */
#define SSL3_CHANGE_CIPHER_SERVER_READ  (SSL3_CC_SERVER|SSL3_CC_READ)   /**< change cipher for server read */
#define SSL3_CHANGE_CIPHER_CLIENT_READ  (SSL3_CC_CLIENT|SSL3_CC_READ)   /**< change cipher for client read */

/* the type of symmetric cryptograpy  */
#define SSL_STREAM_CIPHER    0x1  /**< stream */
#define SSL_BLOCK_CIPHER     0x2  /**< block */

/* get data operation type */
#define SSL_DATA_GET        1  /**< get data */
#define SSL_DATA_PEEK       2  /**< peek data */

/** the level of alert message */
#define SSL_ALERT_WARNING   1   /**< warning */
#define SSL_ALERT_FATAL     2   /**< fatal */

#define TLS_MD_MAX_CONST_SIZE               20
#define TLS_MD_KEY_EXPANSION_CONST      "key expansion"
#define TLS_MD_KEY_EXPANSION_CONST_SIZE     13
#define TLS_MD_MASTER_SECRET_CONST      "master secret"
#define TLS_MD_MASTER_SECRET_CONST_SIZE     13

/** the padding information */
#define SSL_MD5_PAD_LEN          48  /**< padding len for MD5 */
#define SSL_SHA1_PAD_LEN         40  /**< padding len for SHA */
#define SSL_WRITE_PENDING        1   /**< padding for write */
#define SSL_WRITE_NOPENDING      0   /**< no padding for write */
#define SSL_MAX_PADDING_LEN      8   /**< the maximum padding len */
#define SSL_ALERT_DATA_LEN       2   /**< the length of alert data */

/** the status of connection */
typedef enum
{
  SSL_CLOSED = -99,      /**< the connection is closed */
  SSL_CONNECTING = -98,  /**< the connection is establishing */
  SSL_CONNECTED = -97    /**< the connection is in connecting */
}SSL_CONN_STATE;

#define SSL_DEFAULT_BUF_LEN     (20 * 1024)            /**< the default size of session buffer */

#define SSL_SOCKET_NOT_EXIST  -1

/** check whether connection is timeout */
#define SSLFn_SSL_CHECK_TIMEOUT \
if(( NCCPort_time_getElapsedMs()- ssl_connect->ssl_connect_state.last_active_time) > gssl_config_info.time_out)  \
{  \
    ssl_connect->ssl_connect_is_destroy = 1; \
    sslClose((int32_t)ssl_connect); \
    return SSL_CLOSED; \
}

/** check whether session is exist */
#define SSLFn_SSL_SESSION_CHECK(s) \
if((sslLstFind(&gSSL_SessionList, (T_SSL_Node *)s)) <= 0) \
{ \
    return SSL_CLOSED; \
}

/*----------------------    Struct Definition   ------------------------*/
/** the request events for status machine */
enum DSSL3_REQ{
    SSL_CONNECT_REQ,        /**< establish connection */
    SSL_SEND_DATA_REQ,      /**< transmit data */
    SSL_GET_DATA_REQ,       /**< receive data */
    SSL_CLOSE_REQ           /**< close connection */
};

/** the status of fsm */
enum DSSL3_STATE{
    SSL_FSM_NULL,               /**< IDLE */
    SSL_CLIENT_HELLO,           /**< send client hello */
    SSL_SERVER_HELLO,           /**< waiting for server's hello */
    SSL_SERVER_CERT,            /**< authenticate server */
    SSL_CLIENT_CERT,            /**< authenticate client */
    SSL_GET_CERT_REQ,           /**< waiting for server certificate */
    SSL_SERVER_HELLO_DONE,      /**< waiting for server's hello done */
    SSL_SEND_CLIENT_CERT,       /**< send client certificate */
    SSL_SEND_KEY_EXCHANGE,      /**< send client key exchange */
    SSL_SEND_CERT_VERIFY,       /**< send client certificate verification */
    SSL_SEND_CHANGE_CIPHER,     /**< send client change cipher spec */
    SSL_SEND_FINISH,            /**< send client finished */
    SSL_GET_CHANGE_CIPHER,      /**< waiting for server's change cipher spec */
    SSL_GET_FINISH,             /**< waiting for server's finished */
    SSL_OPENED                  /**< the secure connection has been established succeed */
};

/** the type of alert maessage */
enum
{
    SSL_CLOSE_NOTIFY            = 0,   /**< close connection notify */
    SSL_UNEXPECTED_MESSAGE      = 10,  /**< unexpected message */
    SSL_BAD_RECORD_MAC          = 20,  /**< bad record mac */
    SSL_DECOMPRESSION_FAILURE   = 30,  /**< decompress fail */
    SSL_HANDSHAKE_FAILURE       = 40,  /**< handshake fail */
    SSL_NO_CERTIFICATE          = 41,  /**< no certificate */
    SSL_BAD_CERTIFICATE         = 42,  /**< bad certificate */
    SSL_UNSUPPORTED_CERTIFICATE = 43,  /**< unsupported certificate */
    SSL_CERTIFICATE_REVOKED     = 44,  /**< certificate has revoked */
    SSL_CERTIFICATE_EXPIRED     = 45,  /**< certificate has expired */
    SSL_CERTIFICATE_UNKNOWN     = 46,  /**< unknown certificate */
    SSL_ILLEGAL_PARAMETER       = 47   /**< illegal parameter */
};

/*----------------------Macro Definition    ------------------------*/
#define SSL_LTON(l,c)    (*((c)++)=(uint8_t)(((l)>>24L)&0xff), \
                         *((c)++)=(uint8_t)(((l)>>16L)&0xff), \
                         *((c)++)=(uint8_t)(((l)>> 8L)&0xff), \
                         *((c)++)=(uint8_t)(((l)     )&0xff))

#define SSL_STON(s,c)   ((c[0]=(uint8_t)(((s)>> 8)&0xff), \
                        c[1]=(uint8_t)(((s) )&0xff)), \
                        c+=2)

#define SSL_LTON3(l,c)  ((c[0]=(uint8_t)(((l)>>16)&0xff), \
                        c[1]=(uint8_t)(((l)>> 8)&0xff), \
                        c[2]=(uint8_t)(((l)    )&0xff)), \
                        c+=3)

#define SSL_NTOL3(c,l)  ((l =(((uint32_t)((uint8_t)c[0]))<<16)| \
                        (((uint32_t)((uint8_t)c[1]))<< 8)| \
                        (((uint32_t)((uint8_t)c[2])) )), \
                         c+=3)

#define SSL_NTOS(c,s)   ((s=((((uint8_t)c[0]))<< 8)| \
                        ((((uint8_t)c[1])    ))), \
                        c+=2)

#ifdef __cplusplus
}
#endif

#endif /* __TLS_MACRO_H__ */
