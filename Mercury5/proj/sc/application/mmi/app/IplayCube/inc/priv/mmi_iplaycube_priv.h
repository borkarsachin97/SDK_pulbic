////////////////////////////////////////////////////////////////////////////////
//
// Copyright (c) 2006-2009 MStar Semiconductor, Inc.
// All rights reserved.
//
// Unless otherwise stipulated in writing, any and all information contained
// herein regardless in any format shall remain the sole proprietary of
// MStar Semiconductor Inc. and be kept in strict confidence
// (¡§MStar Confidential Information¡¨) by the recipient.
// Any unauthorized act including without limitation unauthorized disclosure,
// copying, use, reproduction, sale, distribution, modification, disassembling,
// reverse engineering and compiling of the contents of MStar Confidential
// Information is unlawful and strictly prohibited. MStar hereby reserves the
// rights to any and all damages, losses, costs and expenses resulting therefrom.
//
////////////////////////////////////////////////////////////////////////////////

/**
* @file    mmi_IplayCube_priv.h
* @version
* @brief   IplayCube Game applet private header file
*
*/

#ifndef __MMI_IPLAYCUBE_PRIV_H__
#define __MMI_IPLAYCUBE_PRIV_H__

/*=============================================================*/
// Include files
/*=============================================================*/

#include "mmi_baseapplet.h"
#include "mmi_iplaycube.h"

#include "melody_data.h"
#include "mmi_srv_audio.h"

#include "iplaycube_resource.h"

#include "mgl_Egl.h"
#include "mgl_Core_Types.h"

#include "iplaycube.h"
//#include "iplaycube_maps.h"

/*=============================================================*/
// Extern definition
/*=============================================================*/

/*=============================================================*/
// Macro definition
/*=============================================================*/
enum 
{
	IPLAYCUBE_WND_DESKTOP = WND_ID_APP_BASE,
};

enum
{
	IPLAYCUBE_BG_IMAGEWIDGET = APP_WDG_START,
};
/*=============================================================*/
// Data type definition
/*=============================================================*/

// Generated by Map-Gen
#define IPLAYCUBE_MAP_X   8
#define IPLAYCUBE_MAP_Y   7
#define IPLAYCUBE_MAP_NUM  16

#define IPLAYCUBE_FLOOR_TYPE_MASK		        0xF0
#define IPLAYCUBE_FLOOR_COLORID_MASK		    0x0F

//Macro
#define FloorIsEmpty(x) ((x&FLOOR_TYPE_MASK) == IPLAYCUBE_FLOOR_TYPE_EMPTY)
#define ToggleGoal(x) ((x&FLOOR_TYPE_MASK) == IPLAYCUBE_FLOOR_TYPE_GOAL)



enum
{
	IPLAYCUBE_MENU_NEWGAME= 0x00,
	IPLAYCUBE_MENU_CONTINUE,

};

typedef enum
{
	IPLAYCUBE_ARROW_LEFT = 0,
	IPLAYCUBE_ARROW_RIGHT,
    IPLAYCUBE_ARROW_UP,
	IPLAYCUBE_ARROW_DOWN,
    IPLAYCUBE_ARROW_MAX,
    IPLAYCUBE_ARROW_NULL,
} ArrowType_e;

typedef enum
{
	IPLAYCUBE_ANIM_NONE = 0,
	IPLAYCUBE_ANIM_MENU,
    IPLAYCUBE_ANIM_TS,
	IPLAYCUBE_ANIM_ROT_LEFT,
    IPLAYCUBE_ANIM_ROT_RIGHT,
    IPLAYCUBE_ANIM_ROT_UP,
    IPLAYCUBE_ANIM_ROT_DOWN,
	IPLAYCUBE_ANIM_LOAD,
	IPLAYCUBE_ANIM_WIN,
	IPLAYCUBE_ANIM_STAGEPAGE,
	IPLAYCUBE_ANIM_COMPLETE,
	IPLAYCUBE_ANIM_SHOW_HELP,
} IplayCubeAnimType_e;

enum
{
    IPLAYCUBE_FACE_FRONT = 0,
    IPLAYCUBE_FACE_BACK,
    IPLAYCUBE_FACE_TOP,
    IPLAYCUBE_FACE_BOTTOM,
    IPLAYCUBE_FACE_LEFT,
    IPLAYCUBE_FACE_RIGHT,
    IPLAYCUBE_FACE_ALL,
    IPLAYCUBE_FACE_MAX = IPLAYCUBE_FACE_ALL,
};
typedef u16 IplayCubeBoxFaceType_e;

enum
{
	IPLAYCUBE_FLOOR_TYPE_EMPTY = 0x00,			//Empty floor : The block can't stand on these anytime.
    IPLAYCUBE_FLOOR_TYPE_NORMAL = 0x10,			//Normal floor :.
	IPLAYCUBE_FLOOR_TYPE_GOAL = 0x20,			//Goal floor : max: four goal floor based on [0:3] idx.
};
typedef u16 IplayCubeFloorType_e;

enum
{
	IPLAYCUBE_COLOR_TYPE_0 = 0x0,
    IPLAYCUBE_COLOR_TYPE_1,
	IPLAYCUBE_COLOR_TYPE_2,
    IPLAYCUBE_COLOR_TYPE_3,
    IPLAYCUBE_COLOR_TYPE_UFOCUS,
    IPLAYCUBE_COLOR_TYPE_MAX = IPLAYCUBE_COLOR_TYPE_UFOCUS,
};
typedef u16 IplayCubeColorType_e;

typedef enum
{
    IPLAYCUBE_NODE_FLOOR,
    IPLAYCUBE_NODE_BOX_0,
    IPLAYCUBE_NODE_BOX_1,
    IPLAYCUBE_NODE_BOX_2,
    IPLAYCUBE_NODE_BOX_3,
    IPLAYCUBE_NODE_ARROW_L,
    IPLAYCUBE_NODE_ARROW_R,
    IPLAYCUBE_NODE_ARROW_U,
    IPLAYCUBE_NODE_ARROW_D,
    IPLAYCUBE_NODE_BG,
    IPLAYCUBE_NODE_SCORE,
    IPLAYCUBE_NODE_MENU,
    IPLAYCUBE_NODE_CONGRATS,
	IPLAYCUBE_NODE_SHOW_HELP,
    IPLAYCUBE_NODE_MAX_NUM,
} IplayCubeNode_Type_e;

typedef enum
{
    IPLAYCUBE_ITEMS_NEWGAME,
    IPLAYCUBE_ITEMS_CONTINUE,
    IPLAYCUBE_ITEMS_HELP,
	IPLAYCUBE_ITEMS_EXIT,	
    IPLAYCUBE_ITEMS_MAX,
} Item_Type_e;

typedef struct
{
	Vertex3D PosIDX;
	IplayCubeBoxFaceType_e  ColorFaceType;
    mgl_u8 u8ArrowStatus;
    mgl_boolean isVisible;
    mgl_boolean isConnect;
    mgl_u8 u8CubeOri[IPLAYCUBE_FACE_MAX];
}CubeInfos_t;

typedef struct
{
	Vertex2D Pos;
	IplayCubeFloorType_e FloorType;
    IplayCubeColorType_e ColorType;
}FloorType_t;

/*=============================================================*/
// Variable definition
/*=============================================================*/

typedef struct
{
	APPLET_BASE_ELEMENTS;
    mgl_boolean	bTouched;
	mgl_u16     u16SceneHandleId;
	mgl_s16     s16TextureHandleId;
	mgl_u32     nodeID[IPLAYCUBE_NODE_MAX_NUM];
	mgl_s32     nTS_CurrentX, nTS_CurrentY;
	mgl_float   fForce_rotX, fForce_rotY;
	mgl_float   rotx_step, roty_step;
    mgl_float   fGlobal_alpha;
    mgl_float   fPlane_startX, fPlane_startY;
	mgl_float   rotX, rotY;
	mgl_u32	    u32RotStep;
    mgl_u8      u8FocusBoxIDX;
    mgl_u8      u8ToogleArrowIDX;
    mgl_u8      u8GoalCnt;	
    mgl_u8		u8level;
    mgl_u16     u16Amin_type;
	mgl_u16     u16MenuItem_type;
	Vertex3D    fRotate_offset;
    
    mgl_boolean bMove;
    mgl_boolean bViewturn;
    CubeInfos_t CubeInfo[IPLAYCUBE_COLOR_TYPE_MAX];
    FloorType_t FloorType[IPLAYCUBE_MAP_Y][IPLAYCUBE_MAP_X];

	mgl_float	menu_rot;

    boolean bSuspendMode;
    boolean bDraw;
	boolean bMusic;
	boolean bExit;
	boolean bPause;
	boolean item_select;
	boolean home_select;

	//ICFGSrv *pICFGSrv;
#ifndef __G3D_MMI__
	IWidget *pBgImgWdg;
#endif

	mgl_u8 iplaycube_cur_level;
	u32 cfg_data;

}IplayCubeApp_t;

MAE_Ret  IplayCubeApp_Ctor (IplayCubeApp_t *pThis);
MAE_Ret  IplayCubeApp_Dtor (IplayCubeApp_t *pThis);
boolean  IplayCubeApp_DefHandleEvent (IplayCubeApp_t *pWdg, u32 evt, u32 P1, u32 P2);
void     IplayCubeApp_Draw (IplayCubeApp_t *pWdg);

/*=============================================================*/
// Global function definition
/*=============================================================*/

MAE_Ret IplayCubeGameConstructor(IApplet *pApplet, u32 nEvt, u32 nParam1, u32 nParam2);
MAE_Ret IplayCubeGameDestructor(IApplet *pApplet, u32 nEvt, u32 nParam1, u32 nParam2);
boolean IplayCubeGameStartCb(IApplet *pApplet, u32 nEvt, u32 nParam1, u32 nParam2);
boolean IplayCubeGameStopCb(IApplet *pApplet, u32 nEvt, u32 nParam1, u32 nParam2);
boolean IplayCubeGameIsFOCb(IApplet *pApplet, u32 nEvt, u32 nParam1, u32 nParam2);
boolean IplayCubeGameKeyPressCb(IApplet *pApplet, u32 nEvt, u32 nParam1, u32 nParam2);
boolean IplayCubeGameTSCb(IApplet *pApplet, u32 nEvt, u32 nParam1, u32 nParam2);
//void	IplayCubeGameTimeoutCb(void* pUserData);

boolean IplayCubeGameHookDraw(IApplet *pApplet, u32 nEvt, u32 nParam1, u32 nParam2);
boolean IplayCubeGameIsFullOpaque(IApplet *pApplet, u32 nEvt, u32 nParam1, u32 nParam2);
boolean IplayCubeGameGetInvalidateRect(IApplet *pApplet, u32 u32DisplayInfo, u32 param1, u32 param2);

MAE_Ret IplayCubeWndDesktopHdl(void *pCusHandle, const WindowMsg_t *pWndMsg, void *pWndData, u32 nWndInitParam);
MAE_Ret IplayCubeWndCreate(void *pCusHandle, void *pWndData, u32 nWndInitParam);

#endif 
