/**
* @file mmi_emuapp_priv.h
*
* State Machine Application - EMUAPP
* Generated by XFSM v1.0, CodeVer=v0.24
*
* Class Id: CLSID_EMUAPP
*
*
* @version $Id$
*/
#ifndef __MMI_EMUAPP_PRIV_H__
#define __MMI_EMUAPP_PRIV_H__

/*-------------------------------------------------------------------------*/
#include "mmi_baseapplet.h"
#include "mmi_emuapp.h"
/*-------------------------------------------------------------------------*/
#include "mmi_emu.h"
#include "mmi_common_cfg.h"
#include "mmi_wdg_headers.h"
#include "mmi_common_vtm.h"
#include "mmi_srv_header.h"
#include "ABL_gss.h"
#include "mmi_emuapp_id.h"
#include "emuapp_resource.h"
#include "emuapp_view.h"
#include "mmi_emuapp_custom.h"
#include "mmi_emuapp_keypad.h"
#include "mmi_launcher_emu.h"

//************************************
// EMU use storage enum
//************************************
typedef enum
{
    EMU_USE_STORAGE_NONE,
    EMU_USE_STORAGE_PHONE,
    EMU_USE_STORAGE_CARD,
    EMU_USE_STORAGE_CARD2,
    EMU_USE_STORAGE_MAX
} EmuUseStorageType_e;

//************************************
// EMU virtual keypad definition
//************************************
#define EMU_VIRTUAL_KEYPAD_JOYSTICK_INNER_BOUND_RATIO      (0.27f)
#define EMU_VIRTUAL_KEYPAD_JOYSTICK_OUTER_BOUND_RATIO      (0.85f)

#define EMU_VIRTUAL_KEY_SET_KEYCODE(__p, __offset, __v) (((__p) + (__offset))->nEmuKey = __v)
#define EMU_VIRTUAL_KEY_KEYCODE(__p, __offset)          (((__p) + (__offset))->nEmuKey)
#define EMU_VIRTUAL_KEY_IS_VISIBLE(__p, __offset)       (((__p) + (__offset))->bIsVisible)
#define EMU_VIRTUAL_KEY_IS_CONFIGURABLE(__p, __offset)  (((__p) + (__offset))->bIsConfigurable)

#define EMU_VIRTUAL_KEYPAD_COMBO_MAX_NUM        (2)
#define EMU_VIRTUAL_KEYPAD_UNPRESSED_VALUE      (0xFFFFFFFF)

#define EMU_VIRTUAL_KEYPAD_DEFAULT_BUTTON_SHADOW    (FADEOUT_LEVEL_1)

#define EMU_KEYPAD_TRANSPARENCY_OPAQUE          (255)
#define EMU_KEYPAD_TRANSPARENCY_DEFAULT         (120)
#define EMU_KEYPAD_TRANSPARENCY_DECREASE_GRADE  (5)

#if (90 == __EMU_DISPLAY_ROTATION_ANGLE__)
#define EMU_DISPLAY_MODE        (DISPMODE_LANDSCAPE_ONLY)
#else
#define EMU_DISPLAY_MODE        (DISPMODE_PORTRAIT_ONLY)
#endif

#define EMU_KEYPAD_FADE_OUT_START_TIMER (3000)
#define EMU_KEYPAD_FADING_OUT_TIMER     (50)

// define keypad mapping table name
#define EMU_KEYPAD_TABLE_EMU_8BIT       "KEYTBL_EMUGAME_8BIT"
#define EMU_KEYPAD_TABLE_EMU_16BIT      "KEYTBL_EMUGAME_16BIT"

// define this to save game state and release EMU engine when the applet is suspended
#define __EMU_SAVE_GAME_STATE__

// the buffer size to store game state
#define EMU_STATE_BUFFER_SIZE (33 * 1024)

// default sound/volume setting
#define EMU_CFG_SOUND_DEFAULT  (TRUE)
#define EMU_CFG_VOLUME_DEFAULT (VOLUME_LEVEL_3)

typedef enum
{
    EMU_SETTING_IDX_SOUND = 0,
    EMU_SETTING_IDX_VOLUME,
    EMU_SETTING_IDX_MAX
} EmuSettingIdx_e;


#define EMU_IDLE        (0 << 0)
#define EMU_INIT        (1 << 0)
#define EMU_READY       (1 << 1)
#define EMU_START       (1 << 2)
#define EMU_RUNNING     (1 << 3)
#define EMU_INTERRUPT   (1 << 4)
#define EMU_SUSPEND     (1 << 5)
#define EMU_END         (1 << 6)

typedef u16 Emu_State_e;

#define EMU_IS_STATE(__x, __v)      (((__x) == (__v))? TRUE : FALSE)
#define EMU_HAS_STATE(__x, __v)     (((__x) & (__v))? TRUE : FALSE)
#define EMU_STATE_SET(__x, __v)     ((__x) |= (__v))
#define EMU_STATE_CLEAR(__x, __v)   ((__x) &= ~(__v))
#define EMU_STATE_CHANGE(__x, __p, __n)     EMU_STATE_CLEAR(__x, __p); EMU_STATE_SET(__x, __n)

enum
{
    EMU_DIALOG_NONE = 0,
    EMU_DIALOG_FS_ERROR,
    EMU_DIALOG_FAIL,
    EMU_DIALOG_INIT_FAIL,
    EMU_DIALOG_NO_MEMORY,
    EMU_DIALOG_BT_ON,
    EMU_DIALOG_BT_OPP,
    EMU_DIALOG_FILE_SIZE_LIMIT,
    EMU_DIALOG_DELETE_CONFIRM,
    EMU_DIALOG_DELETE_DONE,
    EMU_DIALOG_DELETE_FAIL,
    EMU_DIALOG_RENAME_DENIED,
    EMU_DIALOG_RENAME_DONE,
    EMU_DIALOG_RENAME_FAIL,
    EMU_DIALOG_INCORRECT_BIN,
    EMU_DIALOG_NO_BIN,
    EMU_DIALOG_FORMAT_NOT_SUPPORT,
    EMU_DIALOG_KEYPAD_SETTINGS_DEFAULT,
    EMU_DIALOG_KEYPAD_SETTINGS_CANCEL,
    EMU_DIALOG_KEYPAD_SETTINGS_END
};

enum
{
    EMU_STOP_NONE = 0,
    EMU_STOP_NORMAL,            // EMU game is stopped normally by user
    EMU_STOP_BY_AP_SUSPEND,     // EMU game is stopped for applet suspend request from APM.
    EMU_STOP_BY_RESMGR_SUSPEND, // EMU game is stopped by ResMgr suspend
    EMU_STOP_BY_AP_CLOSE        // EMU game is stopped for applet close request from APM
};
typedef u8 Emu_Stop_e;

/* Version control */
#define EMU_VER_PRIMARY_MASK    0xf0000000
#define EMU_VER_SECONDARY_MASK  0x0fff0000
#define EMU_VER_SERIAL_MASK     0x0000ffff

#define EMU_GET_PRIMARY_VER(_Ver) \
    (u16)((_Ver & EMU_VER_PRIMARY_MASK) >> 28)
#define EMU_GET_SECONDARY_VER(_Ver) \
    (u16)((_Ver & EMU_VER_SECONDARY_MASK) >> 16)
#define EMU_GET_SERIAL_VER(_Ver) \
    (u16)(_Ver & EMU_VER_SERIAL_MASK)

// e.g., v4.2.8 --> 4:primary, 2:secondary, 8:serial
static const MAE_WChar EMUAPP_VERSION_STRING[] = L"v%d.%d.%d";
/*-------------------------------------------------------------------------*/

#if defined(__EMU_VIRTUAL_KEYPAD_ENABLE__)
typedef struct _EMU_VIRTUAL_KEYPAD_MANAGER_TAG_
{
    EmuAppVirtualKeypadFingerInfo_t tFingerInfo;
    EmuAppVirtualKeypadBase_t *pKeypadObjList[EMU_VIRTUAL_KEYPAD_NUM];
} EmuAppVirtualKeypadManager_t;
#endif // __EMU_VIRTUAL_KEYPAD_ENABLE__

/**
* Application structure
*/
typedef struct EmuAppData_tag
{
    APPLET_BASE_ELEMENTS;

    EmuRom_t    tEmuRom;    // Emu rom file path

    u16         nKeyBuf[2];
    u8          *pStateBuf; // buffer to store current game state
    u16         nEmuState; // state of emulator
    boolean     bSoundOn;
    u8          nVolume;

    Emu_Stop_e  eStopFlag;
    u16         nKeyCounter[EMU_KEY_NUM];   // Count the pressed number of each key

    u32         nDialogReason; // Dialog

    u32         nStatusSize;
    boolean     bSessionClosed;

    EmuAppGameType_e eLaunchGameType;
    EmuAppGameType_e ePlayingGameType;

#if defined(__EMU_VIRTUAL_KEYPAD_ENABLE__)
    s32         nTransparency;
    boolean     bKeypadFadeOutEnable;
    EmuAppVirtualKeypadLayoutStyle_e eKeypadLayoutStyle;
    EmuAppVirtualKeypad_t *pKeypadSettings;
    EmuAppVirtualKeypadSettings_t *pKeypadSettingsAll;
    EmuAppVirtualKeypadManager_t tVirtualKeypadMgr;
#endif // __EMU_VIRTUAL_KEYPAD_ENABLE__

    EmuLaunchMode_e eLaunchMode;
    EmuUseStorageType_e eBinFileStorage;
    EmuUseStorageType_e eRomFileStorage;

    MediaSrvEmuEngineType_e eEngineType;
    u32 nMaxRomSize;
    const MAE_WChar *pEngineFileName;
    u32 nEngineFileNameLen;

    boolean bIsFirstStart;
} EmuAppData_t;


typedef struct EmuWndSettingsData_TAG
{
    IWidget     *pMenuWdg;
    u16         nSettingHighlightedIdx;     // current highlighted index in game setting menu
} EmuWndSettingsData_t;

#if defined(__EMU_VIRTUAL_KEYPAD_ENABLE__)
#if defined(__GAME_ENGINE_EMU_16BIT__)
typedef struct EmuWndSelectKeypadData_TAG
{
    EmuSelectKeypadViewWdgList_t tWdgList;
} EmuWndSelectKeypadData_t;
#endif // __GAME_ENGINE_EMU_16BIT__

typedef struct EmuWndKeypadSettingsData_TAG
{
    EmuKeypadSettingsViewWdgList_t tWdgList;
    u32 nKeyCounter;    // number of the selected button
    u32 nKeySelected[EMU_VIRTUAL_KEYPAD_COMBO_MAX_NUM];  // record the selected buttons
    EmuAppVirtualKeypad_e eSettingKeypadID;
} EmuWndKeypadSettingsData_t;

typedef struct EmuWndGameData_tag_
{
    EmuM2LibViewWdgList_t tWdgList;
} EmuWndGameData_t;
#endif // __EMU_VIRTUAL_KEYPAD_ENABLE__

// Window handlers
static MAE_Ret _EmuWndGameHdl(void *pCusHandle, const WindowMsg_t *pWndMsg, void *pWndData, u32 nWndInitParam);
static MAE_Ret _EmuWndHelpHdl(void *pCusHandle, const WindowMsg_t *pWndMsg, void *pWndData, u32 nWndInitParam);
static MAE_Ret _EmuWndSettingsHdl(void *pCusHandle, const WindowMsg_t *pWndMsg, void *pWndData, u32 nWndInitParam);
static MAE_Ret _EmuWndVolumeHdl(void *pCusHandle, const WindowMsg_t *pWndMsg, void *pWndData, u32 nWndInitParam);
#if defined(__EMU_VIRTUAL_KEYPAD_ENABLE__)
#if defined(__GAME_ENGINE_EMU_16BIT__)
static MAE_Ret _EmuWndSelectKeypadHdl(void *pCusHandle, const WindowMsg_t *pWndMsg, void *pWndData, u32 nWndInitParam);
#endif // __GAME_ENGINE_EMU_16BIT__
static MAE_Ret _EmuWndKeypadSettingsHdl(void *pCusHandle, const WindowMsg_t *pWndMsg, void *pWndData, u32 nWndInitParam);
#endif // __EMU_VIRTUAL_KEYPAD_ENABLE__

static void _EmuGameCreate(EmuAppData_t *pThis);
#if defined(__EMU_VIRTUAL_KEYPAD_ENABLE__)
static void _EmuGameShow(EmuAppData_t *pThis);
static void _EmuGameHide(EmuAppData_t *pThis);
static void _EmuGameDestroy(EmuAppData_t *pThis);
#endif // __EMU_VIRTUAL_KEYPAD_ENABLE__
static void _EmuHelpCreate(EmuAppData_t *pThis, void *pWndData);
static void _EmuHelpConvert(EmuAppData_t *pThis, void *pWndData);
static void _EmuSettingsCreate(EmuAppData_t *pThis);
static void _EmuSettingsDestroy(EmuAppData_t *pThis);
static void _EmuSettingConvert(EmuAppData_t *pThis);
static void _EmuVolumeCreate(EmuAppData_t *pThis, void *pWndData);
static void _EmuVolumeDestroy(EmuAppData_t *pThis);
static void _EmuVolumeConvert(EmuAppData_t *pThis, void *pWndData);
#if defined(__EMU_VIRTUAL_KEYPAD_ENABLE__)
#if defined(__GAME_ENGINE_EMU_16BIT__)
static void _EmuSelectKeypadCreate(EmuAppData_t *pThis, void *pWndData);
static void _EmuSelectKeypadDestroy(EmuAppData_t *pThis, void *pWndData);
#if defined(__AUTO_ROTATE_DISPLAY__) || defined(__MULTI_THEMES_ENABLED__)
static void _EmuSelectKeypadConvert(EmuAppData_t *pThis, void *pWndData);
#endif // __AUTO_ROTATE_DISPLAY__ || __MULTI_THEMES_ENABLED__
#endif // __GAME_ENGINE_EMU_16BIT__
static void _EmuKeypadSettingsCreate(EmuAppData_t *pThis, void *pWndData);
static void _EmuKeypadSettingsDestroy(EmuAppData_t *pThis, void *pWndData);
#endif // __EMU_VIRTUAL_KEYPAD_ENABLE__

// Event callbacks
static MAE_Ret _EmuAppConstructor(IApplet *pApplet, u32 nEvt, u32 nParam1, u32 nParam2);
static MAE_Ret _EmuAppDestructor(IApplet *pApplet, u32 nEvt, u32 nParam1, u32 nParam2);
static boolean _EmuAppStartCb(IApplet *pApplet, u32 nEvt, u32 nParam1, u32 nParam2);
static boolean _EmuAppStopCb(IApplet *pApplet, u32 nEvt, u32 nParam1, u32 nParam2);
static boolean _EmuAppKeyPressCb(IApplet *pApplet, u32 nEvt, u32 nParam1, u32 nParam2);
static boolean _EmuAppKeyReleaseCb(IApplet *pApplet, u32 nEvt, u32 nParam1, u32 nParam2);
static boolean _EmuAppSuspendCb(IApplet *pApplet, u32 nEvt, u32 nParam1, u32 nParam2);
static boolean _EmuAppResumeCb(IApplet *pApplet, u32 nEvt, u32 nParam1, u32 nParam2);
#if defined(__EMU_VIRTUAL_KEYPAD_ENABLE__)
static boolean _EmuAppTSEventCb(IApplet *pApplet, u32 nEvt, u32 nParam1, u32 nParam2);
static boolean _EmuAppTSEventPreHandle(EmuAppData_t *pThis, u32 nEvt, u32 nParam1, u32 nParam2);
#ifdef __MULTI_TOUCH__
static boolean _EmuAppTSMultiTouchEventCb(IApplet *pApplet, u32 nEvt, u32 nParam1, u32 nParam2);
static boolean _EmuAppTSMultiTouchEventPreHandle(EmuAppData_t *pThis, u32 nEvt, u32 nParam1, u32 nParam2);
#endif // __MULTI_TOUCH__
#ifdef __EMU_VIRTUAL_KEYPAD_DEBUG_INFO__
static void _EmuAppVirtualKeypadInfoLog(EmuAppData_t *pThis);
#endif // __EMU_VIRTUAL_KEYPAD_DEBUG_INFO__
#endif // __EMU_VIRTUAL_KEYPAD_ENABLE__

void EmuAppVolumeViewInterruptCb(void *pData, u32 nCusData, MediaSrvInterruptStatus_e eStatus);
static void _EmuInterruptNotifyCb(void *pUserData, void *pEvtInfo);
static void _EmuInterruptSuspendHdl(IApplet *pApplet);
static void _EmuInterruptResumeHdl(IApplet *pApplet);

// Play mode
static void _EmuHdlGameKeyPress(EmuAppData_t *pThis, u32 nEvt, u32 nParam1, u32 nParam2);

static void _EmuAccessoryPlugStatusCb(void *pData, ACCDeviceType_e eDevice, boolean bPlug, ExtCardAccInfo_e eCardinfo);
static void _EmuUSBStatusIndCb(void *pData, MMI_USB_STATUS_E eUSBStatus);
#if defined(__APP_MMI_CHECKDISK__)
void _EmuCheckDiskStatusListener(char *pSbjName, SubjectStatus_e nSbjStatus, void *pUser);
#endif
static MAE_Ret _EmuGetSoundSetting(EmuAppData_t *pThis);

static MAE_Ret _EmuCheckEngine(EmuAppData_t *pThis, u32 nEngineSize);
static MAE_Ret _EmuCreateEngine(EmuAppData_t *pThis);
static MAE_Ret _EmuGetGameFromFileByUrl(EmuAppData_t *pThis, const MAE_WChar *pUrl);
static MAE_Ret _EmuCheckFileSize(EmuAppData_t *pThis);
static MAE_Ret _EmuCheckPlay(EmuAppData_t *pThis);
static MAE_Ret _EmuGetCapability(EmuAppData_t *pThis);

static void _EmuStartGame(EmuAppData_t *pThis);
static void _EmuStopGame(EmuAppData_t *pThis, Emu_Stop_e eStopReason);
static void _EmuGetInfo(EmuAppData_t *pThis);
static void _EmuGetInfoCb(void *pUserData, MediaSrvErrCode_e eErrCode, u32 nEmuInfo);
static void _EmuStartPlay(EmuAppData_t *pThis);
static void _EmuPlayCb(void *pUserData, MediaSrvErrCode_e eErrCode);
static void _EmuStopCb(void *pUserData, MediaSrvErrCode_e eErrCode, CodecSrvEmuDataBuf_t *pStateData);
static void _EmuSetBacklight(EmuAppData_t *pThis, boolean bPersistOn);

static MAE_Ret _EmuCreateDialog(EmuAppData_t *pThis, u32 nDialogReason, MAE_WChar *pArg);
static MAE_Ret _EmuDialogCb(void *pData, MAEEvent_t nEvt, u32 nParam1, u32 nParam2);

boolean _EmuSetKey(EmuAppData_t *pThis, EmuKey_t nEmuKey, boolean bSet);
boolean _EmuSwitchKey(EmuAppData_t *pThis, EmuKey_t nEmuKeySet, EmuKey_t nEmuKeyClear);
static void _EmuStateChange(EmuAppData_t *pThis, Emu_State_e ePreState, Emu_State_e ePostState);
static void _EmuStateSet(EmuAppData_t *pThis, Emu_State_e eState);
static void _EmuStateClear(EmuAppData_t *pThis, Emu_State_e eState);

#if defined(__EMU_VIRTUAL_KEYPAD_ENABLE__)
static void _EmuGameKeypadTransparencyChange(EmuAppData_t *pThis, u8 nTransparency, boolean bFadeOut);
static void _EmuGameKeypadFadeOutTimerCb(void *pUser);

static void _EmuLoadKeypadConfiguration(EmuAppData_t *pThis);
static void _EmuSaveKeypadConfiguration(EmuAppData_t *pThis);
static boolean _EmuIsKeypadConfigurationChanged(EmuAppData_t *pThis);
static boolean _EmuIsDefaultKeypadSettings(EmuAppData_t *pThis);
static void _EmuLoadDefaultKeypadSettings(EmuAppData_t *pThis);

static void _EmuKeypadSettingsControllerKeypadClickCb(void *pApplet, void *pUsrData, WidgetEvtCode_t nEvtCode, u32 dwParam, IWidget *pWidget);
static void _EmuKeypadSettingsControllerSettingClickCb(void *pApplet, void *pUsrData, WidgetEvtCode_t nEvtCode, u32 dwParam, IWidget *pWidget);
static void _EmuKeypadSettingsKeypadClickCb(void *pApplet, void *pUsrData, WidgetEvtCode_t nEvtCode, u32 dwParam, IWidget *pWidget);
static void _EmuKeypadSettingsSettingClickCb(void *pApplet, void *pUsrData, WidgetEvtCode_t nEvtCode, u32 dwParam, IWidget *pWidget);
static void _EmuKeypadSettingsSelectKeypadStyleClickCb(void *pApplet, void *pUsrData, WidgetEvtCode_t nEvtCode, u32 dwParam, IWidget *pWidget);
static void _EmuKeypadSettingsToDefault(EmuAppData_t *pThis);
static void _EmuKeypadSettingsConfirmChange(EmuAppData_t *pThis);
static void _EmuKeypadSettingsCancel(EmuAppData_t *pThis, boolean bBackToIdle);
static void _EmuKeypadSettingsUpdateAllButtons(EmuAppData_t *pThis);
static void _EmuUpdateKeypadTextImage(EmuAppData_t *pThis, EmuAppVirtualKeypad_e eKeypadID, EmuWndId_e eWinID);
#endif // __EMU_VIRTUAL_KEYPAD_ENABLE__

static void _EmuGetDataStartIndexAndSizeInTable(EmuAppData_t *pThis, const u32 aTable[][2], u32 nBreakID, u32 nJudgeID, u32 *pStartIndex, u32 *pSize);

static boolean _EmuCheckResConflict(void *pUser);
static boolean _EmuMemorySubjectRequest(EmuAppData_t *pThis);
static boolean _EmuMemorySubjectRelease(EmuAppData_t *pThis);


// Menu mode
static void _EmuSettingListAdaptGet(WdgDynamicMenuItemPtr_t *pItemDataPtr, HWIN hWin, WdgMenuItemType_e eItemType, IWidget *pMenu, u32 nIndex);
static void _EmuSettingListFreeItem(WdgDynamicMenuItemPtr_t *pItemDataPtr, HWIN hWin, WdgMenuItemType_e eItemType);

#if defined(__EMU_VIRTUAL_KEYPAD_ENABLE__)
#if defined(__GAME_ENGINE_EMU_16BIT__)
static void _EmuSelectKeypadFreeItem(WdgDynamicMenuItemPtr_t *pItemDataPtr, HWIN hWin, WdgMenuItemType_e eItemType);
static void _EmuSelectKeypadGetItem(WdgDynamicMenuItemPtr_t *pItemDataPtr, HWIN hWin, WdgMenuItemType_e eItemType, IWidget *pMenu, u32 nIndex);
static void _EmuSelectKeypadGenerateMenuItem(EmuAppData_t *pThis, u32 nItemIndex, WdgDynamicMenuItemPtr_t *pItemDataPtr);

static void _EmuSelectKeypadSoftkeyCb(void *pApplet, void *pUsrData, WidgetEvtCode_t nEvtCode, HistoryInfo_t *pHistoryInfo, IWidget *pWidget);
#endif // __GAME_ENGINE_EMU_16BIT__
#endif // __EMU_VIRTUAL_KEYPAD_ENABLE__

static void _EmuSettingsKeyCb(void *pApplet, void *pUsrData, WidgetEvtCode_t nEvtCode, HistoryInfo_t *pHistoryInfo, IWidget *pWidget);
static void _EmuSettingsOnFocusCb(void *pApplet, void *pUsrData, WidgetEvtCode_t nEvtCode, FocusInfo_t *pFocusInfo, IWidget *pWidget);

static void _EmuSwitchSoundSetting(EmuAppData_t *pThis);
static void _EmuSettingGenMenuItem(EmuAppData_t *pThis, EmuSettingIdx_e eItemIdx, WdgDynamicMenuItemPtr_t *pItemDataPtr);

static void _EmuVolumeChangeCb(void *pApplet, void *pUsrData, WidgetEvtCode_t nEvtCode, u32 nCurrentLevel, IWidget *pWidget);
static void _EmuVolumePlaySound(EmuAppData_t *pThis);
static void _EmuVolumeStopSound(void);
static void _EmuSetVolume(EmuAppData_t *pThis, boolean bStore);

// Launch
static boolean _EmuAppLaunch(UrlSrvUrlHdl_t pUrl, void *pvUserData, void **ppvLaunchObj, CmnAppLaunchRspCbInfo_t *psRspCbInfo);
static boolean _EmuUrlHandler(UrlSrvUrlHdl_t pUrl, void *pvUserData, void **ppvLaunchObj, CmnAppLaunchRspCbInfo_t *psRspCbInfo);
static void _EmuUrlHandlerFree(IBase *pIssuer, u32 nParam);

/*-------------------------------------------------------------------------*/
#endif /* __MMI_EMUAPP_PRIV_H__ */
