/**
* @file mmi_mapapp_priv.h
*
* State Machine Application - MAPAPP
* Generated by XFSM v1.0, CodeVer=v0.24
*
* Class Id: CLSID_MAPAPP
*
*
* @version $Id$
*/
#ifndef __MMI_MAPAPP_PRIV_H__
#define __MMI_MAPAPP_PRIV_H__

/*-------------------------------------------------------------------------*/
#include "mmi_mapapp.h"

#include "mmi_ccapp.h"
#include "ven_setting.h"
#include "db_poi.h"
#include "mmi_srv_header.h"
#include "mmi_mmsrv_def.h"
#include "mmi_baseapplet.h"
#include "mmi_launcher_sendvia.h"
#include "mmi_common_display.h"
#include "mmi_common_vtm.h"
#include "mmi_mapapp_id.h"
#include "mapapp_resource.h"

#ifndef ARR_SIZE
#define ARR_SIZE(a)  (sizeof((a))/sizeof((a[0])))
#endif


#define MAPVIEW_GPS_TIMER                           1000
#define MAPVIEW_GPS_SEARCH_TIMER                    600 * MAPVIEW_GPS_TIMER    //Time-out for connecting GPS, 10 minutes.
#define MAPVIEW_GPS_NO_FIXED_SIGNAL_TIMER           1000
#define MAP_DIAlOG_RELEASE_TIMER                    1000
#define MAP_OPTMDL_SIZE_MAX                         13
#define MAPVIEW_LBS_FILE_LIST_NUM                   16
#define MAPVIEW_LBS_HYPERLINK_NUM                   16
#define MAPVIEW_LBS_MAX_HYPERLINK_HISTORY           MAPVIEW_LBS_HYPERLINK_NUM
#define MAPVIEW_LBS_DEFAULT_URL_TIMER               20000                     // 20 sec. time-out
#define MAPVIEW_SDCARD_MIN_FREE_SPACE               20*1024                   // Unit is kByte
#define MAPVIEW_SDCARD_SPACE_CHECK_DIAlOG_TIMER     2000
#define MAPVIEW_LBS_CONNECTING_TIMER                1000
#define MAPVIEW_MMS_SUSPEND_TIMER                   1000

enum
{
    MAPVIEW_POI_FAVORIT_EDITOR_ITEM_NAME    = 0,
    MAPVIEW_POI_FAVORIT_EDITOR_ITEM_CATEGORY,
    MAPVIEW_POI_FAVORIT_EDITOR_ITEM_PHONE,
    MAPVIEW_POI_FAVORIT_EDITOR_ITEM_ADDRESS,
    MAPVIEW_POI_FAVORIT_EDITOR_ITEM_NOTE,
    MAPVIEW_POI_FAVORIT_EDITOR_ITEM_MAX = MAPVIEW_POI_FAVORIT_EDITOR_ITEM_NOTE,
};

typedef enum settingsEditorItem_Tag
{
    MAPVIEW_SETTING_EDITOR_ITEM_CITY    = 0,
    MAPVIEW_SETTING_EDITOR_ITEM_POI_ON_MAP,
    MAPVIEW_SETTING_EDITOR_ITEM_MAP_COLOR,
    MAPVIEW_SETTING_EDITOR_ITEM_MAX = MAPVIEW_SETTING_EDITOR_ITEM_MAP_COLOR,
}SettingsEditorItem;

typedef enum MapViewState_Tag
{
    MAPVIEW_UNKNOWN_STATE,
    MAPVIEW_INIT,
    MAPVIEW_NORMAL,
    MAPVIEW_SEARCH_POI,
    MAPVIEW_NEARBY_POI,
    MAPVIEW_ADD_TO_FAVORITE,
    MAPVIEW_SEND,
    MAPVIEW_SEARCH_LIST,
    MAPVIEW_HISTORY,
    MAPVIEW_MY_FAVORITE,
    MAPVIEW_WHERE_AM_I,
    MAPVIEW_SETTINGS,
    MAPVIEW_MAKECALL,
    MAPVIEW_SERVICE,
    MAPVIEW_LBS,
    MAPVIEW_SUSPEND,
    MAPVIEW_SELECTCARDLIST,
    MAPVIEW_OPTION_MENU,
    MAPVIEW_MULTI_FIELD_INPUT,
    MAPVIEW_THUMB_POI
}MapViewState;

typedef enum MapAppState_Tag
{
    MAPAPP_UNKNOWN_STATE,
    MAPAPP_INIT,
    MAPAPP_MAPVIEW,
    MAPAPP_SEARCH_POI,
    MAPAPP_NEARBY_POI,
    MAPAPP_ADD_TO_FAVORITE,
    MAPAPP_SEND,
    MAPAPP_SEARCH_LIST,
    MAPAPP_HISTORY,
    MAPAPP_MY_FAVORITE,
    MAPAPP_WHERE_AM_I,
    MAPAPP_SETTINGS,
    MAPAPP_MAKECALL,
    MAPAPP_SERVICE,
    MAPAPP_LBS,
    MAPAPP_SUSPEND,
    MAPAPP_SELECT_CARD_LIST,
    MAPAPP_OPTION_MENU,
    MAPAPP_MULTI_FIELD_INPUT,
    MAPAPP_THUMB_POI,
    MAPAPP_DATA_LIST,
    MAPAPP_KEYWORD_INPUT,
    MAPAPP_SHOW_NOTICE
}MapAppState_e;

typedef enum MapViewZoomLevel_Tag
{
    MAPVIEW_ZOOM_LEVEL_50M = 0,
    MAPVIEW_ZOOM_LEVEL_100M,
    MAPVIEW_ZOOM_LEVEL_200M,
    MAPVIEW_ZOOM_LEVEL_500M,
    MAPVIEW_ZOOM_LEVEL_1KM,
    MAPVIEW_ZOOM_LEVEL_2KM,
    MAPVIEW_ZOOM_LEVEL_5KM,
    MAPVIEW_ZOOM_LEVEL_10KM,
    MAPVIEW_ZOOM_LEVEL_20KM,
    MAPVIEW_ZOOM_LEVEL_50KM,
    MAPVIEW_ZOOM_LEVEL_100KM,
    MAPVIEW_ZOOM_LEVEL_200KM,
    MAPVIEW_ZOOM_LEVEL_500KM,
    MAPVIEW_ZOOM_LEVEL_1000KM,
    MAPVIEW_ZOOM_LEVEL_MAX
}MapViewZoomLevel;

typedef enum MapViewWidgetFrom_Tag
{
    MAPVIEW_FROM_UNKNOWN_WIDGET,
    MAPVIEW_FROM_DATA_LIST,
    MAPVIEW_FROM_OPTION_MENU,
    MAPVIEW_FROM_SHOW_NOTICE,
    MAPVIEW_FROM_MULTI_FIELD_INPUT,
    MAPVIEW_FROM_THUMB_POI,
    MAPVIEW_FROM_KEYWORD_INPUT
}MapViewWidgetFrom;

typedef enum DataListSubState_Tag
{
    DATALIST_UNKNOWN_SUBSTATE,
    DATALIST_CATEGORY,
    DATALIST_POI,
    DATALIST_ITEM,
    DATALIST_MYFAVORITE_CATEGORY1,
    DATALIST_MYFAVORITE_CATEGORY2,
}DataListSubState;

typedef enum ShowNoticeItem_Tag
{
    SHOW_NOTICE_UNKNOWN,
    SHOW_NOTICE_NO_SD,
    SHOW_NOTICE_DB_NOT_FOUND,
    SHOW_NOTICE_NOT_ENOUGH_MEMORY,
    SHOW_NOTICE_WRONG_DB_VERSION,
    SHOW_NOTICE_SD_NOT_ENOUGH_SPACE,
    SHOW_NOTICE_NO_SEARCH_POI_DATA,
    SHOW_NOTICE_NO_NEARBY_POI_DATA,
    SHOW_NOTICE_FAVORITE_FULL_DATA,
    SHOW_NOTICE_ON_OFF_GPS,
    SHOW_NOTICE_SEARCH_GPS,
    SHOW_NOTICE_FIXED_GPS_SIGNAL,
    SHOW_NOTICE_NO_FIXED_GPS_SIGNAL,
    SHOW_NOTICE_CONFIRM_DELETE,
    SHOW_NOTICE_DONE,
    SHOW_NOTICE_NO_NETWORK_PROFILE,
    SHOW_NOTICE_NETWORK_INIT_FAILED,
    SHOW_NOTICE_ACTION_RSP_TIMEOUT,
    SHOW_NOTICE_LBS_ALLOW_USE_NETWORK,
    SHOW_NOTICE_LBS_RESUME_CONTENT,
    SHOW_NOTICE_LBS_DOWNLOADING_DATA,
    SHOW_NOTICE_LBS_DOWNLOAD_ERROR,
    SHOW_NOTICE_ACTIVATE_SIM_FIRST,
    SHOW_NOTICE_NO_SIM_CARD_INSERTED,
    SHOW_NOTICE_SIM_FAILURE,
    SHOW_NOTICE_SUSPEND_MMS,
    SHOW_NOTICE_MMS_BUSY,
    SHOW_NOTICE_SUSPEND_MMS_WAITING,
}ShowNoticeItem;

typedef struct MAPAPP_POIInfo_TAG
{
    u32  u32POIID;
    u16  *pPOIText;
}MAPAPP_POIInfo_t;

/* The data structure is used for storing the variables of the list view. */
typedef struct MAPAPP_MAPLISTVIEW_TAG
{
    IMenuModel* pIMenuModel;
    ModelListener_t viewModelListener;
} MAPAPP_MAPLISTVIEW_t;

typedef struct MAP_SETTING_MENU_MAPPING_TAG
{
    MenuItemId_e    ItemId;
    u32             nTextId;
}MAP_SETTING_MENU_MAPPING_t;

typedef struct MAP_POI_MAPPING_TAG
{
    u8   enumPOI;
    u32  nTextId;
    u32  nImageId;
} MAP_POI_MAPPING_t;

typedef struct MAP_SETTINGS_CITY_IMGGRID_MAPPING_TAG
{
    MenuItemId_e    ItemId;
    u8              enumCity;
    u32             nTextId;
    u32             PosX;
    u32             PosY;
}MAP_SETTINGS_CITY_IMGGRID_MAPPING_t;

typedef struct MAP_FAOVRITE_MAPPING_TAG
{
    u32 nTextId;
    u32 nGroupImgId;
    u32 nImageId;
}MAP_FAOVRITE_MAPPING_t;

typedef enum MAP_POI_PLACE_NAME_TAG
{
    MAP_POI_PLACE_NAME_PLACE_NAME = 0,
    MAP_POI_PLACE_NAME_OTHER_LANDMARK,
    MAP_POI_PLACE_NAME_BUILDING,
    MAP_POI_PLACE_NAME_HOUSE,
}MAP_POI_PLACE_NAME;

typedef enum MAP_POI_GOVERNMENT_TAG
{
    MAP_POI_GOVERNMENT_GOVERNMENT = 0,
    MAP_POI_GOVERNMENT_FIRE_DEPARTMENT,
    MAP_POI_GOVERNMENT_JUDICIARY,
    MAP_POI_GOVERNMENT_NOTARY,
    MAP_POI_GOVERNMENT_CUSTOMS,
    MAP_POI_GOVERNMENT_FOREIGN_AFFAIRS,
    MAP_POI_GOVERNMENT_FOREIGN_INSTITUTE,
    MAP_POI_GOVERNMENT_SOCIAL_COMMUNITY,
    MAP_POI_GOVERNMENT_COMPANY,
}MAP_POI_GOVERNMENT;

typedef enum MAP_POI_EDUCATION_TAG
{
    MAP_POI_EDUCATION_BOOK_STORE = 0,
    MAP_POI_EDUCATION_MUSEUM,
    MAP_POI_EDUCATION_CULTURE_UTILITIES,
    MAP_POI_EDUCATION_CULTURE_CENTER,
    MAP_POI_EDUCATION_SCHOOL,
    MAP_POI_EDUCATION_OTHER_CULTURE_UTILITIES,
}MAP_POI_EDUCATION;

typedef enum MAP_POI_TRANSPORT_TAG
{
    MAP_POI_TRANSPORT_AIRPORT = 0,
    MAP_POI_TRANSPORT_RAILWAY_STATION,
    MAP_POI_TRANSPORT_BUS_TERMINAL,
    MAP_POI_TRANSPORT_FERRY_TERMINAL,
    MAP_POI_TRANSPORT_TICKET_OFFICE,
    MAP_POI_TRANSPORT_HIGHWAY_SERVICE,
    MAP_POI_TRANSPORT_TOLL_GATE,
    MAP_POI_TRANSPORT_PARKING,
    MAP_POI_TRANSPORT_GAS_STATION,
    MAP_POI_TRANSPORT_CAR_SERVICE,
    MAP_POI_TRANSPORT_CAR_MALL,
    MAP_POI_TRANSPORT_CAR_SALE,
    MAP_POI_TRANSPORT_CAR_REPAIR,
    MAP_POI_TRANSPORT_CAR_EXAMINE,
    MAP_POI_TRANSPORT_OTHER_CAR_SERVICE,
}MAP_POI_TRANSPORT;

typedef enum MAP_POI_BANK_TAG
{
    MAP_POI_BANK_BANK = 0,
    MAP_POI_BANK_ATM,
    MAP_POI_BANK_CREDIT_UNION,
    MAP_POI_BANK_CERTIFICATES,
    MAP_POI_BANK_INSURANCE_COMPANY,
    MAP_POI_BANK_OTHER_FINANCE,
}MAP_POI_BANK;

typedef enum MAP_POI_RESTAURANT_TAG
{
    MAP_POI_RESTAURANT_CHINESE_FOOD = 0,
    MAP_POI_RESTAURANT_INTERNATIONAL_CUISINE,
    MAP_POI_RESTAURANT_HOTPOT_FOOD,
    MAP_POI_RESTAURANT_COMMON_FOOD,
    MAP_POI_RESTAURANT_BUFFET,
    MAP_POI_RESTAURANT_FAST_FOOD,
}MAP_POI_RESTAURANT;

typedef enum MAP_POI_SHOPPING_TAG
{
    MAP_POI_SHOPPING_DEPARTMENT_STORE = 0,
    MAP_POI_SHOPPING_CONVENIENCE_STORE,
    MAP_POI_SHOPPING_SUPERMARKET,
    MAP_POI_SHOPPING_SPECIAL_STORE,
}MAP_POI_SHOPPING;

typedef enum MAP_POI_HOSPITAL_TAG
{
    MAP_POI_HOSPITAL_HOSPITAL = 0,
    MAP_POI_HOSPITAL_SPECIALIZE_HOSPITAL,
    MAP_POI_HOSPITAL_EMERGENCY,
    MAP_POI_HOSPITAL_CLINIC,
    MAP_POI_HOSPITAL_DRUGSTORE,
    MAP_POI_HOSPITAL_REHAB_CENTER,
    MAP_POI_HOSPITAL_EPIDEMIC_CENTER,
    MAP_POI_HOSPITAL_BLOOD_CENTER,
    MAP_POI_HOSPITAL_ANIMAL_HOSPITAL,
}MAP_POI_HOSPITAL;

typedef enum MAP_POI_TRAVEL_TAG
{
    MAP_POI_TRAVEL_PARK = 0,
    MAP_POI_TRAVEL_ZOO,
    MAP_POI_TRAVEL_BOTANICAL_GARDEN,
    MAP_POI_TRAVEL_AQUARIUM,
    MAP_POI_TRAVEL_NATURE_PARK,
    MAP_POI_TRAVEL_MEMORIAL_SITE,
    MAP_POI_TRAVEL_HISTORICAL_SITE,
    MAP_POI_TRAVEL_TEMPLE,
    MAP_POI_TRAVEL_CITY_LANDMARK,
    MAP_POI_TRAVEL_CHARACTERISTIC_STREET,
}MAP_POI_TRAVEL;

typedef enum MAP_POI_LEISURE_TAG
{
    MAP_POI_LEISURE_BOWLING_CENTER = 0,
    MAP_POI_LEISURE_SWIMMING_POOL,
    MAP_POI_LEISURE_RINK,
    MAP_POI_LEISURE_SOCCER_FIELD,
    MAP_POI_LEISURE_BASEBALL_FIELD,
    MAP_POI_LEISURE_OTHER_BALL_FIELD,
    MAP_POI_LEISURE_OTHER_FIELD,
    MAP_POI_LEISURE_GOLF_COURSE,
    MAP_POI_LEISURE_GYMNASIUM,
    MAP_POI_LEISURE_THEATER,
    MAP_POI_LEISURE_ENTERTAINMENT,
    MAP_POI_LEISURE_AMUSEMENT_PLACE,
}MAP_POI_LEISURE;

typedef enum MAP_POI_HOTEL_TAG
{
    MAP_POI_HOTEL_FIVE_STAR_HOTEL = 0,
    MAP_POI_HOTEL_FOUR_STAR_HOTEL,
    MAP_POI_HOTEL_THREE_STAR_HOTEL,
    MAP_POI_HOTEL_COMMON_HOTEL,
    MAP_POI_HOTEL_CHAIN_HOTEL,
    MAP_POI_HOTEL_ENTERTAIN_HOTEL,
    MAP_POI_HOTEL_RESORT_HOTEL,
}MAP_POI_HOTEL;

typedef enum MAP_POI_SERVICE_TAG
{
    MAP_POI_SERVICE_POWER_COMPANY = 0,
    MAP_POI_SERVICE_POST_OFFICE,
    MAP_POI_SERVICE_BROADCAST_COMPANY,
    MAP_POI_SERVICE_NEWSPAPER_PUBLISHER,
    MAP_POI_SERVICE_WELFARE_FOUNDATION,
    MAP_POI_SERVICE_AFFAIR_OFFICE,
    MAP_POI_SERVICE_PUBLIC_TOILET,
    MAP_POI_SERVICE_OTHER_SERVICE,
}MAP_POI_SERVICE;

typedef enum MAP_HISTORY_ITEM_TAG
{
    MAP_HISTORY_ITEM_MAIN = 0,
    MAP_HISTORY_ITEM_POI,
    MAP_HISTORY_ITEM_MYLOCATION,
}MAP_HISTORY_ITEM;

typedef struct MAP_GpsLocationInfo_TAG
{
    boolean bGpsIsFixed;    /* GPS is fixed or still searching */
    u32     u32Latitude;    /* GPS Latitude */
    u32     u32Longitude;   /* GPS Longitude */
}MAP_GpsLocationInfo_t;

typedef enum LBS_View_State_Tag
{
    LBS_View_State_Default  = 0,
    LBS_View_State_ContentView,
    LBS_View_State_MenuView
}LBS_View_State;

typedef enum LBS_Template_State_Tag
{
    LBS_View_Template_Default   = 0,
    LBS_View_Template_Custom,
    LBS_View_Template_Menu,
    LBS_View_Template_ImageText,
    LBS_View_Template_2LMenu,
    LBS_View_Template_IconMenu,
    LBS_View_Template_Custom_MultiPages,
}LBS_Template_State;

typedef enum LBS_A_Tag_Type_Tag
{
    LBS_A_Tag_Type_Default  = 0,
    LBS_A_Tag_Type_DialTo,
    LBS_A_Tag_Type_PanTo,
}LBS_A_Tag_Type;

typedef struct LBS_HyperLink_TAG
{
    u16             *pLBSURL;
    Rect_t          tArea;
    LBS_A_Tag_Type  tLBS_A_Tag_Type;
    u16             *pPhoneNumber;
    u32             u32Location_X;
    u32             u32Location_Y;
}LBS_HyperLink;

typedef struct LBS_HyperLink_History_TAG
{
    u16         *pLBSURL;
    u16         *pLBSURL_Redirected;
    boolean     bLBSURL_IsReDirected;
}LBS_HyperLink_History;

typedef enum LBS_Active_SIM_TAG
{
    LBS_ACTIVE_SIM_UNKNOWN = 0,
    LBS_ACTIVE_SIM_MASTER,
    LBS_ACTIVE_SIM_SLAVE,
}LBS_Active_SIM;

typedef enum LBS_Network_State_TAG
{
    LBS_NETWORK_UNKNOWN = -1,
    LBS_NETWORK_INIT = 0,
    LBS_NETWORK_CONNECTING,
    LBS_NETWORK_CONNECTED,
    LBS_NETWORK_FINAL,
}LBS_Network_State;

typedef enum MapView_Display_Mode_TAG
{
    MAPVIEW_DISPLAY_MODE_DEFAULT = 0,
    MAPVIEW_DISPLAY_MODE_ABOUT_INFO,
    MAPVIEW_DISPLAY_MODE_LBS_PAGE,
    MAPVIEW_DISPLAY_MODE_LBS_LANDMARK,
}MapView_Display_Mode;

typedef enum MapView_Init_State_TAG
{
   MAPVIEW_INIT_SUCCESS = 0,
   MAPVIEW_INIT_FAIL_DB_NOT_FOUND,
   MAPVIEW_INIT_FAIL_NOT_ENOUGH_MEMORY,
   MAPVIEW_INIT_FAIL_WRONG_DB_VERSION,
} MapView_Init_State;

/*-------------------------------------------------------------------------*/

typedef struct
{
    IWidget     *pTitleBarWdg;
    IWidget     *pTitleTextWdg;
    IWidget     *pContainer;
    IWidget     *pCenterFocusWdg;
    IWidget     *pZoomWdg;
    IWidget     *pZoomStatusWdg;
    IWidget     *pZoomInWdg;
    IWidget     *pZoomOutWdg;
    IWidget     *pIMenuWdgVertical;
    IWidget     *pNoticeBGWdg;
    IWidget     *pPrevModeWdg;
    IWidget     *pTextModeWdg;
    IWidget     *pNextModeWdg;

    IWidget     *pLBSLeftArrowWdg;
    IWidget     *pLBSRightArrowWdg;

    boolean     bLBSAllowUseNetwork;
    u16         *pLBSUrl;
    u16         *pNextLBSUrl;
    u16         *pLBSFileList[MAPVIEW_LBS_FILE_LIST_NUM];
    u16         *pLastValidLBSUrl;
    u16         *pTitleStr;
    u16         *pLiTagLBSUrl;

    boolean      bLBSContent_ContentView;
    boolean      bLBSContent_MenuView;

    u32          u32LBSContent_ContentViewPageNumber;
    u32          u32LBSContent_MenuViewPageNumber;
    boolean      bLBSContent_IsContentView;
    u32          u32LBSContent_CurrentPage;
    u32          u32LBSContent_HyperLinkNumber;
    u32          u32LBSContent_CurrentHyperLink;
    u32          u32LBSContent_CurrentHyperLinkHistory;
    u32          u32LBSContent_CurrentWidgetX;
    u32          u32LBSContent_CurrentWidgetY;
    u32          u32LBSContent_CurrentWidgetW;
    u32          u32LBSContent_CurrentWidgetH;
    u32          u32LBSContent_CurrentWidgetSize;
    u32          u32LBSContent_CurrentWidgetColor;
    u32          u32LBSExpirationInSec_UTC;
    u32          u32LBSCurrServerTimeInSec_UTC;
    u32          u32LBSDefualtURLIndex_ForHyperlinkHist;
    u8           u8LBSContent_Color_R;
    u8           u8LBSContent_Color_G;
    u8           u8LBSContent_Color_B;
    u8           u8LBSContent_Color2_R;
    u8           u8LBSContent_Color2_G;
    u8           u8LBSContent_Color2_B;
    u8           u8LBSContent_Color3_R;
    u8           u8LBSContent_Color3_G;
    u8           u8LBSContent_Color3_B;
    u8           u8LBSContent_Color4_R;
    u8           u8LBSContent_Color4_G;
    u8           u8LBSContent_Color4_B;
    u8           u8LBSContent_ColorPgNo_R;
    u8           u8LBSContent_ColorPgNo_G;
    u8           u8LBSContent_ColorPgNo_B;
    boolean      bLBSContent_DrawBorder;
    boolean      bLBSContent_UseDefaultPgUpArrow;
    boolean      bLBSContent_UseDefaultPgDnArrow;

    boolean      bLBSContent_IgnoreView;
    boolean      bLBSContent_IgnorePage;
    boolean      bLBSContent_IsLiTag;
    boolean      bLBSContent_IsATag;
    boolean      bLBSContent_IsBrTag;
    boolean      bLBSContent_IsFirstHyperLink;
    boolean      bLBSContent_IsLastHyperLink;
    boolean      bLBSContent_IsHighlightedHyperLink;
    boolean      bLBSContent_IsSingleHyperLinkInPage;
    boolean      bLBSContent_IsXmlFile;
    boolean      bLBSContent_IsReDirectHttp;
    boolean      bLBSContent_IsMissingXmlItems;
    boolean      bLBSContent_IsDownloadNewXml;
    boolean      bLBSContent_IsCancelDownload;
    boolean      bIsDownloadLBSDefualtURL;
    boolean      bIsDownloadLBSHelpPage;
    boolean      bIsRefreshXmlPage;
    boolean      bIsSuspendFromService;
    boolean      bLBSContent_IsDownloadIncomplete;
    boolean      bLastValidLBSUrlIsDefualtUrl;

    LBS_Template_State      tLBSContent_Template_State;
    LBS_View_State          tLBSContent_View_State;
    LBS_HyperLink           tHyperlinkRect[MAPVIEW_LBS_HYPERLINK_NUM];
    LBS_HyperLink_History   tHyperlinkHistory[MAPVIEW_LBS_MAX_HYPERLINK_HISTORY];

} MapWndMapData;

typedef struct {
    u16         *pMultiFieldStrData1;
    u16         *pMultiFieldStrData2;
    u16         *pMultiFieldStrData3;
    u16         *pMultiFieldStrData4;
    u32         u32MultiFiledU32Data1;
    u32         u32MultiFiledU32Data2;
    u32         u32MultiFiledU32Data3;
    u32         u32MultiFiledU32Data4;
    u32         u32SettingsPoiOnMapData;
    s32         s32DataListSize;
    boolean     *bMenuCheckStatus;
    boolean     bDatalistMark;
    boolean     bIsEditMyFavorite;
} MapWndMultiFieldInputData;


typedef struct {
    boolean     bMmsChkStatus;
    boolean     bMmsSuspend;
    boolean     bMmsResume;
    boolean     bMmsRegNotification;
    boolean     bMmsSuspended_ReadyToExit;
    boolean     bPopMMSWaitingDialog;
} MapMmsData;

/**
* Application structure
*/
typedef struct MapAppData_tag {

    APPLET_BASE_ELEMENTS;

	MAE_DispId_t	nDispId;
    /* for "Where Am I" */
    Vertex_st       tWhereAmIPt;

    IBitmap         *pIBmpSrc;
    IWidget   *pBiMapWdg;

    /* Favorite Location */
    Vertex_st           tFavoriteLoc;
    SettingsEditorItem  settingsEditorItem;
    MapAppState_e       appState;
    MapViewState        mapViewState;
    MapViewWidgetFrom   mapViewWidgetFrom;
    DataListSubState    dataListSubState;
    ShowNoticeItem      showNoticeItem;

    /* for title id selection */
    u32             u32TitleID;

    /* Map window related data */
    MapWndMapData               WndMap;

    /* Multi-field input window related data */
    MapWndMultiFieldInputData   WndMFInput;

    /* for option menu start */
    IWidget         *pOptMenuWdg;   // option menu wdg
    /* for option menu end */

    /* for keyword input start */
    IWidget         *pInputWdg;
    /* for keyword input end */

    /* for data list start */
    IWidget*        pIMenuWidget;
    /* for data list end */

    /* for list menu start */
    MAPAPP_MAPLISTVIEW_t *pMapListView;
    /* for list menu end */

    /* for keyword input start */
    u16         *pInputKeywordText;
    /* for keyword input end */

    /* for POI info start */
    MAPAPP_POIInfo_t   *pPOIInfo;
    /* for POI info end */

    /* for phone number start */
    u8          *pPhoneNumber;
    /* for phone number end */

    POIGroup_et mapGroupPOI;
    POIType_et  mapTypePOI;
    s8          mapCategoryPOIIndex;
    s8          mapPOITypeIndex;
    u8          mapPOIIndex;
    u32         mapPOIImgId;

    boolean     bPanningMap;        /* Is Panning Map or not. */
    boolean     bPressForPanMap;    /* Is press screen or not */

    u32         u32PanningX;
    u32         u32PanningY;

    /* for Nearby POI/POI Keyword Search */
    Vertex_st   atMapOrigin;
    u32         mapPOICount;            /* POI Count for Nearby POI/POI Keyword Search */
    u32         FindPOIResultIndex;

    /* for POI Keyword Search */
    u16             *pPOIKeywordText;
    POIDistrict_et  eDistrictForKeywordSearch;

    /* for History POI ID */
    u32                     historyPOIResultID;

    MAP_GpsLocationInfo_t   *pGpsLocationInfo;
    boolean                 bIsGpsPowerOn;
    boolean                 bIsGpsTimer;

    /* for Network profile Start */
    LBS_Network_State               networkState;
    ven_setting_network_profile_t   *pNetworkProfile;
    /* for Network profile End */

    /* for SIM selection start */
    LBS_Active_SIM  active_SIM;
    /* SIM selection end */

    /* for USB mass storage start */
    boolean         bPCLinkActivated;
    /* for USB mass storage end */

    boolean         bIsAppletExit;
    boolean         bIsAppletStop;

    /* MMS related data */
    MapMmsData      Mms;

    /* for IP call start */
    MMI_CC_AP_FID_E eCallType;
    /* for IP call end */

    /* for map view start */
    MapView_Display_Mode    eMapView_Display_Mode;
    /* for map view end */

    WidgetHandler_t stNavKeyHandler;

} MapAppData_t;

// Window handlers


//--------------------------------------------------------------------------------------------------

void _MapDoMakeCall(MapAppData_t* pThis);
void _MapDoEnterLBS(MapAppData_t* pThis);
void _MapDoService(MapAppData_t* pThis);
void _MapDoSearchPOI(MapAppData_t* pThis);
void _MapDoNearByPOI(MapAppData_t* pThis);
void _MapDoSearchList(MapAppData_t* pThis);
void _MapDoHistory(MapAppData_t* pThis);
void _MapDoMyFavorite(MapAppData_t* pThis);
void _MapDoAddToFavorite(MapAppData_t* pThis);
void _MapDoSend(MapAppData_t* pThis);
void _MapDoWhereAmI(MapAppData_t* pThis);
void _MapDoSettings(MapAppData_t* pThis);

void _MapDoMapView(MapAppData_t* pThis);
void _MapDoDataList(MapAppData_t* pThis);
void _MapDoKeywordInput(MapAppData_t* pThis);
void _MapDoMultiFieldInput(MapAppData_t* pThis);
void _MapDoThumbPOI(MapAppData_t* pThis);

void _MapDoFindPOI(MapAppData_t* pThis);
void _MapDoDualSIM(MapAppData_t* pThis);
void _MapDoSKBack(MapAppData_t* pThis);
void _MapDoSKSelect(MapAppData_t* pThis);
void _MapDoOptionMenu(MapAppData_t* pThis);
void _MapDoSuspend(MapAppData_t* pThis);

//--------------------------------------------------------------------------------------------------

void _MapShowOSDVerticalMenu(MapAppData_t* pThis, boolean enable);
void _MapShowOSDZoomInOut(MapAppData_t* pThis, boolean enable);
void _MapShowOSDTitleBar(MapAppData_t* pThis, boolean enable);
void _MapShowOSDLBS(MapAppData_t* pThis, boolean enable);
void _MapShowOSDNoticeBar(MapAppData_t* pThis, boolean enable);
void _MapShowLBSNoticeBar(MapAppData_t* pThis, boolean enable);

void _MapShowSoftKey(MapAppData_t* pThis, IWidget* pIMenuWidget, Softkey_Type type, SoftkeyID id);

//--------------------------------------------------------------------------------------------------

static MAE_Ret _MapDataListContentSearchNearByPOI(MapAppData_t* pThis, IWidget* pIMenuWidget, MAPAPP_MAPLISTVIEW_t* pMapListView);
static MAE_Ret _MapDataListContentMyFavorite(MapAppData_t* pThis, IWidget* pIMenuWidget, MAPAPP_MAPLISTVIEW_t* pMapListView);
static MAE_Ret _MapDataListContentMyFavoriteShow(MapAppData_t* pThis, IWidget* pIMenuWidget, MAPAPP_MAPLISTVIEW_t* pMapListView);
static MAE_Ret _MapDataListContentAddToFavorite(MapAppData_t* pThis, IWidget* pIMenuWidget, MAPAPP_MAPLISTVIEW_t* pMapListView);
static MAE_Ret _MapDataListContentSearchList(MapAppData_t* pThis, IWidget* pIMenuWidget, MAPAPP_MAPLISTVIEW_t* pMapListView);
static MAE_Ret _MapDataListContentHistory(MapAppData_t* pThis, IWidget* pIMenuWidget, MAPAPP_MAPLISTVIEW_t* pMapListView);
static MAE_Ret _MapDataListContentHistoryShow(MapAppData_t* pThis, IWidget* pIMenuWidget, MAPAPP_MAPLISTVIEW_t* pMapListView);
static MAE_Ret _MapDataListContentSettings(MapAppData_t* pThis, IWidget* pIMenuWidget, MAPAPP_MAPLISTVIEW_t* pMapListView);

static void _MapDataListHandleSearchPOI(MapAppData_t* pThis, WidgetEvtCode_t nEvtCode, HistoryInfo_t *pHistoryInfo, boolean* handled);
static void _MapDataListHandleNearByPOI(MapAppData_t* pThis, WidgetEvtCode_t nEvtCode, HistoryInfo_t *pHistoryInfo, boolean* handled);
static void _MapDataListHandleSearchList(MapAppData_t* pThis, WidgetEvtCode_t nEvtCode, HistoryInfo_t *pHistoryInfo, boolean* handled);
static void _MapDataListHandleHistory(MapAppData_t* pThis, WidgetEvtCode_t nEvtCode, HistoryInfo_t *pHistoryInfo, boolean* handled);
static void _MapDataListHandleMyFavorite(MapAppData_t* pThis, WidgetEvtCode_t nEvtCode, HistoryInfo_t *pHistoryInfo, boolean* handled);
static void _MapDataListHandleAddToFavorite(MapAppData_t* pThis, WidgetEvtCode_t nEvtCode, HistoryInfo_t *pHistoryInfo, boolean* handled);
static void _MapDataListHandleSettings(MapAppData_t* pThis, WidgetEvtCode_t nEvtCode, HistoryInfo_t *pHistoryInfo, boolean* handled);
static void _MapDataListHandleSettings_PoiOnMap(MapAppData_t* pThis, WidgetEvtCode_t nEvtCode, HistoryInfo_t *pHistoryInfo, boolean* handled);
static void _MapDataListHandleSettings_MapColor(MapAppData_t* pThis, WidgetEvtCode_t nEvtCode, HistoryInfo_t *pHistoryInfo, boolean* handled);

static void _DataListAdaptGetSearchNearByPOI(WdgDynamicMenuItemPtr_t *pItemDataPtr, HWIN hWin, WdgMenuItemType_e eItemType, IWidget *pMenu, u32 u32Index);
static MAE_Ret _DataListAdaptGetSearchPOI(MapAppData_t* pThis, ImageTextInfo* pImageTextInfo, u16 nIndex, boolean* handled);
static MAE_Ret _DataListAdaptGetNearByPOI(MapAppData_t* pThis, ImageTextInfo* pImageTextInfo, u16 nIndex, boolean* handled);
static void _DataListAdaptGetSearchList(WdgDynamicMenuItemPtr_t *pItemDataPtr, HWIN hWin, WdgMenuItemType_e eItemType, IWidget *pMenu, u32 u32Index);
static void _DataListAdaptGetHistory(WdgDynamicMenuItemPtr_t *pItemDataPtr, HWIN hWin, WdgMenuItemType_e eItemType, IWidget *pMenu, u32 u32Index);
static void _DataListAdaptGetMyFavorite(WdgDynamicMenuItemPtr_t *pItemDataPtr, HWIN hWin, WdgMenuItemType_e eItemType, IWidget *pMenu, u32 u32Index);
static void _DataListAdaptGetAddToFavorite(WdgDynamicMenuItemPtr_t *pItemDataPtr, HWIN hWin, WdgMenuItemType_e eItemType, IWidget *pMenu, u32 u32Index);
static void _DataListAdaptGetSettings(WdgDynamicMenuItemPtr_t *pItemDataPtr, HWIN hWin, WdgMenuItemType_e eItemType, IWidget *pMenu, u32 u32Index);
static void _DataListAdaptGetSettingsPoiOnMap(MapAppData_t* pThis, WdgDynamicMenuItemPtr_t* pItemDataPtr, u16 nIndex);
static void _DataListAdaptGetSettingsMapColor(MapAppData_t* pThis, WdgDynamicMenuItemPtr_t *pItemDataPtr, u16 nIndex);

static void _DataListItemDataFree(WdgDynamicMenuItemPtr_t *pItemDataPtr, HWIN hWin, WdgMenuItemType_e eItemType);

//--------------------------------------------------------------------------------------------------

static void _MapKeywordInputGetContext(MapAppData_t *pThis);
static void _MapKeywordInputOptionMenuFree(void* pUserData);
static void _MapKeywordInputHandle(MapAppData_t* pThis, u32 nKeyCode);
static void _MapKeywordInputHandleSearchPOI(MapAppData_t* pThis, u32 nKeyCode);
static void _MapKeywordInputHandleAddToFavorite(MapAppData_t* pThis, u32 nKeyCode);

//--------------------------------------------------------------------------------------------------

static MAE_Ret _MapMultiFieldInputContentAddToFavorite(MapAppData_t* pThis, IWidget* pIMenuWidget, MAPAPP_MAPLISTVIEW_t* pMapListView);
static MAE_Ret _MapMultiFieldInputContentSettings(MapAppData_t* pThis, IWidget* pIMenuWidget, MAPAPP_MAPLISTVIEW_t* pMapListView);

static void _MapMultiFieldInputHandleAddToFavorite(MapAppData_t* pThis, WidgetEvtCode_t nEvtCode, HistoryInfo_t *pHistoryInfo);
static void _MapMultiFieldInputHandleSettings(MapAppData_t* pThis, WidgetEvtCode_t nEvtCode, HistoryInfo_t *pHistoryInfo);

static void _MultiFieldInputContentAdaptGetAddToFavorite(WdgDynamicMenuItemPtr_t *pItemDataPtr, HWIN hWin, WdgMenuItemType_e eItemType, IWidget *pMenu, u32 u32Index);
static void _MultiFieldInputContentAdaptGetSettings(WdgDynamicMenuItemPtr_t *pItemDataPtr, HWIN hWin, WdgMenuItemType_e eItemType, IWidget *pMenu, u32 u32Index);

static void _MultiFieldInputContentItemDataFree(WdgDynamicMenuItemPtr_t *pItemDataPtr, HWIN hWin, WdgMenuItemType_e eItemType);

//--------------------------------------------------------------------------------------------------

static void _MapImgGridHandleSearchPOI(MapAppData_t* pThis, WidgetEvtCode_t nEvtCode, HistoryInfo_t *pHistoryInfo);
static void _MapImgGridHandleSettings(MapAppData_t* pThis, WidgetEvtCode_t nEvtCode, HistoryInfo_t *pHistoryInfo);
static void _MapImgGridCitySelected(MapAppData_t* pThis, u32 nSelectedID, boolean saveconfig);

//--------------------------------------------------------------------------------------------------

static void _MapIGpsOpenCallback(void *pUserData, GPSSrvErrCode_e eRet);
static void _MapIGpsCloseCallback(void *pUserData, GPSSrvErrCode_e eRet);
static void _MapIGpsGetDataCallback(void *pUserData, GPSSrvErrCode_e eRet, GPSSrvData_t *pData);

static void _MapOpenGps(MapAppData_t* pThis);
static void _MapCloseGps(MapAppData_t* pThis);
static void _MapGpsEnableTimer(MapAppData_t *pThis, boolean enable);
static void _MapGpsTimerCallback(void *pData);
static void _MapGpsGetData(MapAppData_t *pThis, GPSSrvData_t *pGPSData);
static boolean _MapGpsGetGPRMCStatus(MapAppData_t *pThis, GPSSrvData_t *pGPSData);
static void _MapGpsGetPosition(MapAppData_t *pThis, GPSSrvData_t *pGPSData);
static void _MapGpsSearchSignalDialog(void* pData);

//--------------------------------------------------------------------------------------------------

MapAppData_t* GetMapAppObj(void);

/*-------------------------------------------------------------------------*/
#endif /* __MMI_MAPAPP_PRIV_H__ */
