/**
* @file mmi_secapp_priv.h
*
* State Machine Application - SECAPP
* Generated by XFSM v1.0, CodeVer=v0.24
*
* Class Id: CLSID_SECAPP
*
*
* @version $Id: mmi_secapp_priv.h 37694 2009-08-12 14:25:43Z otto.wu $
*/
#ifndef __MMI_SECAPP_PRIV_H__
#define __MMI_SECAPP_PRIV_H__

#include "mmi_secapp.h"
#include "mmi_secapp_view_id.h"
#include "mmi_if_sim.h"
#include "mmi_common_cfg.h"
#include "mmi_common_dialog.h"
#include "mmi_common_popup_id.h"
#include "mmi_secapp_custom.h"
#include "mmi_common_sms.h"
#include "mmi_baseapplet.h"
#include "mmi_launcher_off.h"
#include "mmi_UrlSrvClientHelper.h"
#include "mmi_UrlSrvUtilUrl.h"

#include "mmi_common_vtm.h"
#include "mmi_secapp_id.h"
#include "secapp_resource.h"


#define SECAPP_TXT_PML_N_NETWORK_LOCK_WAIT_NO_TIMER (TXT_PML_N_NETWORK_LOCK_WAIT+0x10000)
#define MMI_SEC_IMEI_BUF_SIZE            (18)

#ifdef __SMSBLACKLIST_MMI__
#include "mmi_launcher_phb.h"
#endif
#if defined(__SIMUSIM_LOCK_MMI__)||(__NETWORK_LOCK_MMI__)||(__NETWORKSUBSET_LOCK_MMI__)||(__SERVICEPROVIDER_LOCK_MMI__)||(__CORPORATE_LOCK_MMI__)
#define __SEC_NETWORKLOCK__ (1)
#endif
#ifndef MEMCMP
#define MEMCMP(s,t,n) memcmp(s,t,n)
#endif

typedef enum
{
	cSECAPP_MODE_SecApp                                                     ,//0
	cSECAPP_MODE_Idle                                                       ,//1
	cSECAPP_MODE_Active                                                     ,//2
	cSECAPP_MODE_Active_Init                                                ,//3
	cSECAPP_MODE_Active_CheckStartReason                                    ,//4
	cSECAPP_MODE_Active_SecurityMenu                                        ,//5
	cSECAPP_MODE_Active_SecurityMenu_ShowSecurityMenu                       ,//6
	cSECAPP_MODE_Active_SecurityMenu_PINMenu                                ,//7
	cSECAPP_MODE_Active_SecurityMenu_PINMenu_ShowPINMenu                    ,//8
	cSECAPP_MODE_Active_SecurityMenu_PINMenu_ChangePINStatus                ,//9
	cSECAPP_MODE_Active_SecurityMenu_PINMenu_VerifyPINOrPIN2Lock            ,//10
	cSECAPP_MODE_Active_SecurityMenu_PINMenu_ChangePINOrPIN2Code            ,//11
	cSECAPP_MODE_Active_SecurityMenu_PhoneOrSIMMenu                         ,//12
	cSECAPP_MODE_Active_SecurityMenu_PhoneOrSIMMenu_ShowPhoneOrSIMMenu      ,//13
	cSECAPP_MODE_Active_SecurityMenu_PhoneOrSIMMenu_ChangePhoneOrSIMStatus  ,//14
	cSECAPP_MODE_Active_SecurityMenu_PhoneOrSIMMenu_VerifyPhoneOrSIMLock    ,//15
	cSECAPP_MODE_Active_SecurityMenu_PhoneOrSIMMenu_ChangePhoneOrSIMCode    ,//16
	cSECAPP_MODE_Active_SecurityMenu_AutoKeypadLockMenu                     ,//17
	cSECAPP_MODE_Active_PowerOnChecking                                     ,//18
	cSECAPP_MODE_Active_PowerOnChecking_CheckSequence                       ,//19
	cSECAPP_MODE_Active_PowerOnChecking_VerifyPINLock                       ,//20
	cSECAPP_MODE_Active_PowerOnChecking_VerifySIMLock                       ,//21
	cSECAPP_MODE_Active_PowerOnChecking_VerifyNetworkLock                   ,//22
	cSECAPP_MODE_Active_PowerOnChecking_VerifyNetworkLock_PrepareData       ,//23
	cSECAPP_MODE_Active_PowerOnChecking_VerifyNetworkLock_CheckLock         ,//24
	cSECAPP_MODE_Active_PowerOnChecking_VerifyPhoneLock                     ,//25
	cSECAPP_MODE_Active_PowerOnChecking_DeactivateSIM                       ,//26
	cSECAPP_MODE_Active_PowerOnChecking_VerifyMasterCode                    ,//27
	cSECAPP_MODE_Active_VerifyLockForAP                                     ,//28
	cSECAPP_MODE_Active_VerifyLockForAP_VerifyPIN2Lock                      ,//29
	cSECAPP_MODE_Active_VerifyLockForAP_VerifyPhoneLock                     ,//30
	cSECAPP_MODE_Active_SIMSecurityCode                                     ,//31
	cSECAPP_MODE_Active_SIMSecurityCode_CheckCodeFormat                     ,//32
	cSECAPP_MODE_Active_SIMSecurityCode_ChangePINByOldPIN                   ,//33
	cSECAPP_MODE_Active_SIMSecurityCode_ChangePINByPUK                      ,//34
	cSECAPP_MODE_LockBlocked                                                ,//35
	cSECAPP_MODE_LockBlocked_UnblockPIN                                     ,//36
	cSECAPP_MODE_LockBlocked_PUKBlocked                                     ,//37
	cSECAPP_MODE_LockBlocked_NetworkLockBlocked                             ,//38
	cSECAPP_MODE_UnblockPIN2                                                ,//39
	cSECAPP_MODE_EmergencyCall                                              ,//40
	cSECAPP_MODE_SIMError                                                   ,//41
	cSECAPP_MODE_Stop                                                       ,//42
	cSECAPP_MODE_AntiSteal                                                  ,//43
	cSECAPP_MODE_Active_SecurityMenu_SMSBlacklistMenu                       ,//44
}SecMode_e;

#define SECAPP_EVT_CallEnd              (CLSID_SECAPP << 16 | 1)
#define SECAPP_EVT_Menu_Back            (CLSID_SECAPP << 16 | 2)
#define SECAPP_EVT_Menu_Select          (CLSID_SECAPP << 16 | 3)
#define SECAPP_EVT_Menu_Cancel          (CLSID_SECAPP << 16 | 4)
#define SECAPP_EVT_SK_SOS               (CLSID_SECAPP << 16 | 5)
#define SECAPP_EVT_SK_OK                (CLSID_SECAPP << 16 | 6)
#define SECAPP_EVT_SK_Cancel            (CLSID_SECAPP << 16 | 7)
#define SECAPP_EVT_LongPressENDKey      (CLSID_SECAPP << 16 | 8)
#define SECAPP_EVT_DialogEnd            (CLSID_SECAPP << 16 | 9)
#define SECAPP_EVT_TimerExpired         (CLSID_SECAPP << 16 | 10)
#define SECAPP_EVT_PIN2LockSuccess      (CLSID_SECAPP << 16 | 11)
#define SECAPP_EVT_PIN2LockFail         (CLSID_SECAPP << 16 | 12)
#define SECAPP_EVT_PIN2LockCancel       (CLSID_SECAPP << 16 | 13)
#define SECAPP_EVT_PhoneLockSuccess     (CLSID_SECAPP << 16 | 14)
#define SECAPP_EVT_PhoneLockFail        (CLSID_SECAPP << 16 | 15)
#define SECAPP_EVT_PhoneLockCancel      (CLSID_SECAPP << 16 | 16)
#define SECAPP_EVT_OnLockCancel         (CLSID_SECAPP << 16 | 17)
#define SECAPP_EVT_OnNetworkLockSuccess (CLSID_SECAPP << 16 | 18)
#define SECAPP_EVT_SK_Master            (CLSID_SECAPP << 16 | 19)
#define SECAPP_EVT_SK_Slave             (CLSID_SECAPP << 16 | 20)
#define SECAPP_EVT_SK_Exit              (CLSID_SECAPP << 16 | 21)
#define SECAPP_EVT_SENDKey              (CLSID_SECAPP << 16 | 22)
#define SECAPP_EVT_SEND2Key             (CLSID_SECAPP << 16 | 23)
#define SECAPP_EVT_HashKey              (CLSID_SECAPP << 16 | 24)
#define SECAPP_EVT_ENDKey               (CLSID_SECAPP << 16 | 25)
#define SECAPP_EVT_Menu_Change          (CLSID_SECAPP << 16 | 26)

#define SECAPP_IEVT_Exit                      (CLSID_SECAPP << 16 | 27)
#define SECAPP_IEVT_PINBlocked                (CLSID_SECAPP << 16 | 28)
#define SECAPP_IEVT_PUKBlocked                (CLSID_SECAPP << 16 | 29)
#define SECAPP_IEVT_NetworkLockBlocked        (CLSID_SECAPP << 16 | 30)
#define SECAPP_IEVT_UnblockPIN2               (CLSID_SECAPP << 16 | 31)
#define SECAPP_IEVT_Cancel                    (CLSID_SECAPP << 16 | 32)
#define SECAPP_IEVT_Success                   (CLSID_SECAPP << 16 | 33)
#define SECAPP_IEVT_Fail                      (CLSID_SECAPP << 16 | 34)
#define SECAPP_IEVT_LaunchSecurityMenu        (CLSID_SECAPP << 16 | 35)
#define SECAPP_IEVT_PowerOnChecking           (CLSID_SECAPP << 16 | 36)
#define SECAPP_IEVT_SIMSecurityCode           (CLSID_SECAPP << 16 | 37)
#define SECAPP_IEVT_ChangeStatus              (CLSID_SECAPP << 16 | 38)
#define SECAPP_IEVT_ChangePassword            (CLSID_SECAPP << 16 | 39)
#define SECAPP_IEVT_OnVerifyPINLock           (CLSID_SECAPP << 16 | 40)
#define SECAPP_IEVT_OnVerifySIMLock           (CLSID_SECAPP << 16 | 41)
#define SECAPP_IEVT_OnVerifyPhoneLock         (CLSID_SECAPP << 16 | 42)
#define SECAPP_IEVT_OnVerifyNetworkLock       (CLSID_SECAPP << 16 | 43)
#define SECAPP_IEVT_VerifyPIN2LockForAP       (CLSID_SECAPP << 16 | 44)
#define SECAPP_IEVT_VerifyPhoneLockForAP      (CLSID_SECAPP << 16 | 45)
#define SECAPP_IEVT_SecurityCode04Or042       (CLSID_SECAPP << 16 | 46)
#define SECAPP_IEVT_SecurityCode05Or052       (CLSID_SECAPP << 16 | 47)
#define SECAPP_IEVT_LockBlocked               (CLSID_SECAPP << 16 | 48)
#define SECAPP_IEVT_LaunchPINMenu             (CLSID_SECAPP << 16 | 49)
#define SECAPP_IEVT_LaunchPhoneOrSIMMenu      (CLSID_SECAPP << 16 | 50)
#define SECAPP_IEVT_LaunchAutoKeypadLockMenu  (CLSID_SECAPP << 16 | 51)
#define SECAPP_IEVT_CheckNetworkLock          (CLSID_SECAPP << 16 | 52)
#define SECAPP_IEVT_CheckNetworkSubsetLock    (CLSID_SECAPP << 16 | 53)
#define SECAPP_IEVT_CheckSPLock               (CLSID_SECAPP << 16 | 54)
#define SECAPP_IEVT_CheckCorporateLock        (CLSID_SECAPP << 16 | 55)
#define SECAPP_IEVT_CheckSIMUSIMLock          (CLSID_SECAPP << 16 | 56)
#define SECAPP_IEVT_VerifyCode                (CLSID_SECAPP << 16 | 57)
#define SECAPP_IEVT_Back                      (CLSID_SECAPP << 16 | 58)
#define SECAPP_IEVT_SIMError                  (CLSID_SECAPP << 16 | 59)
#define SECAPP_IEVT_OnVerifyMasterCode        (CLSID_SECAPP << 16 | 60)

#ifndef SECDBG_GETCHAR
#define SECDBG_GETCHAR(idx,len,str) (((idx)<(len))?(str[idx]):('0'))
#endif

typedef enum
{
    SecLockType_PIN = 0,
    SecLockType_PIN2,
    SecLockType_SIM,
    SecLockType_Phone,
    SecLockType_MasterCode,
    SecLockType_NetworkLock,
    SecLockType_NetworkSubsetLock,
    SecLockType_SPLock,
    SecLockType_CorporateLock,
    SecLockType_SIMUSIMLock,
    SecLockType_AllNetworkLocksDone,
    SecLockType_AntiSteal,
} SecLockType_e;

typedef enum
{
    Mode_None = 0,
    Mode_PowerOnChecking ,                    /* from power on checking mode. */
    Mode_LockBlocked,                         /* from lock blocked mode. */
    Mode_VerifyNetworkLock_VerifyPassword,    /* from verify network lock mode while verifying password. */
    Mode_VerifyNetworkLock_WaitingDialog      /* from verify network lock mode while displaying waiting dialog. */
} SecModeFrom_e;

typedef enum
{
    Result_Cancel = 0,    /* cancel unblcok operation. */
    Result_Success,       /* unblock success. */
    Result_Fail           /* unblock fail. */
} SecUnblockPIN2Result_e;

typedef enum
{
    TextInputItem_Verify = 1, // 1st text input item.
    TextInputItem_New,        // 2nd text input item.
    TextInputItem_Confirm     // 3rd text input item.
} SecTextInputItem_e;

typedef enum
{
    SecMenuItemIndex_Status_On = 0,
    SecMenuItemIndex_Status_Off
} SecMenuItemIndex_e;

typedef enum
{
    SecLaunchMenuType_New = 0,  //Create new menu, highlight 1st item.
    SecLaunchMenuType_Previous  //Back from other menu view, use 2nd top history to hightlight item.(pop top history)
} SecLaunchMenuType_e;

typedef enum
{
    SecTextInputSK_NONE = 0,  //Enable LSK=SK_NONE and CSK=SK_NONE when input digits is less than minimal digits
    SecTextInputSK_OK,        //Enable LSK=SK_OK_TEXT and CSK=SK_OK when input digits match minimal digits => ready to process next step
    SecTextInputSK_SOS        //Enable LSK=SK_SOS and CSK=SK_NONE when input numbers is ECC number
} SecTextInputSKType_e;

typedef struct
{
    u8 strVerifyCode[COMMON_IMEI_NUM_LENGTH+1];
    u8 strNewCode[EIGHT_DIGITS_PASSWORD_LEN+1];
    u8 strConfirmCode[EIGHT_DIGITS_PASSWORD_LEN+1];
} SecPINCodeGroup_t;

typedef union
{
    PopUpInputWdgList_t tPopupInputWdgList;
    PopUpSelectWdgList_t tPopUpSelectWdgList;
    MenuWdgList_t tMenuWdgList;
}SecCurtWndWdgList_t;

#ifdef __SMSBLACKLIST_MMI__
typedef struct SettingBlackListWndData_t_
{
	MenuWdgList_t tWdgList;
} SettingBlackListWndData_t;

typedef struct BlackListWndData_t_
{
    IWidget *pMenuWidget;
    WidgetSize_t stWidgetSize;
} BlackListWndData_t;

typedef struct BlackListOptionWndData_t_
{
    OptionMenuWdgList_t pWdgList ;
    OptionMenuCB_t  pCB ;
} BlackListOptionWndData_t;

typedef struct BlackListInputWndData_t_
{
    PopUpInputWdgList_t pWdgList ;
} BlackListInputWndData_t;

typedef struct BlackListKeywordInputWndData_t_
{
    InputVtmWdgList_t pWdgList ;
} BlackListKeywordInputWndData_t;

typedef struct McaBlackListFlag_t_
{
    u32 Flag ;
    MAE_WChar Number[PHB_NUMBER_LEN+1];
} McaBlackListFlag_t;

typedef struct McaBlackListKeywordFlag_t_
{
    u32 Flag ;
    MAE_WChar Keyword[SECAPP_BLACKLIST_KEYWORD_LENGTH+1];
} McaBlackListKeywordFlag_t;
#endif

typedef struct
{
    APPLET_BASE_ELEMENTS;
    IWidget *pIMenuWdg; //for keeping menu widget.
    VectorClass_t* pMenuHistoryStack;  // to keep menu history
    SecAppStart_t sSecStart; //store start information.
    COMMON_TotalEccList_t sEMCallList; //store emergency call numbers list. It is used when making emergency call.
    SecTextInputSKType_e  eSKType;  //The softkey type while lock checking.
    boolean bIsBackFromPINBlocked;    //check if mode transition is from PIN blocked mode.
    boolean bIsBackFromPIN2Blocked; //check if mode transition is from PIN2 blocked mode.
    boolean bWaitCnf;       //check if Waiting confirm.
    u32 nSelectedID;  //store selected menu item.
    u32 nCurrentWinID;  //store current view id for model listener.
    u32 nEmergencyCallFrom; //store which mode shoule be active after emergency call is finished.
    u32 nDialog;    //store text label id of dialog.
    SecUnblockPIN2Result_e eUnblockPIN2Result; //store result of unblock PIN2.
    SecPINCodeGroup_t sPINCodeGroup; //store PIN value.
    COMMON_SecurityCodeFormat_e   eSecurityCodeFormat;  //store security code format.
    SecLockType_e eNotMatchLock;  //store the reason for new and confirm not match dialog.
    SecLockType_e eNetworkCheckingLock; //store current checking network lock.
    SecLaunchMenuType_e eLaunchMenuType;  //store launch menu type for highlight item of menu.
    u8 au8SIMIMSI[MAX_IMSI_LEN]; //store SIM IMSI.
    MccMnc_t  sMccMnc; //store MccMnc.
    u8 *pGID1;  //store GID1.
    u8 *pGID2;  //store GID2.  
    NetworkLockInfo_t sNetworkLockInfo;  //store netwokr lock status information.
    NetworkLockTable_t  sNetworkLockTable; //store network lock information.
    SIMSRV_SIM_FILE_ID_e  eReadingFileID; //store which file is under reading.
    SecurityLockStatus_e  eNetworkBlockStatus;    //check if need to show network lock block dialog when network lock.
    SIMSRV_SIM_ID_e   eActiveSIM; //current active SIM card;
    LockCheckPoint_e    eLockCheckPoint; //store power cut lock check point
    boolean bCloseSelf; //check if close itself;
    boolean bIsDialogView;      //check if previous view is a dialog view. Need to pop dialog view to prevent memory leak.
    boolean bWithEmergencyNumber;
    boolean bLongPressENDKey; //for checking if user long press END key.
    boolean bVerifyPhoneLockWhenPowercut; //store power cut lock check point for no sim.
    boolean bWaitMFReady; //Check if waiting Master file ready for power on PIN verify.
    boolean bPowerOnVerifyLock;
    boolean bHandleEndKey;
    boolean bEmbedClose;
    MAE_DateTime_t tCurrentUtcTime;
    HWIN hWin; //for keeping window handle.
    u8 u8PrevMode;
    u8 u8CurrentMode;
    HistoryInfo_t sMenuHistory; // to record last menu history
    HistoryInfo_t sSecMenuHistory; // to record security menu history
    //boolean bReDrawPINLockMenu;
    SecCurtWndWdgList_t tCurrentWndWdgList;
	boolean bDecisionKeyPressed;
#ifdef __ANTI_STEAL_MMI__
    u8 u8Time;
    MAE_DualMode_t eDualMode;
#endif
#ifdef __SMSBLACKLIST_MMI__
    u16  u16BlackListNumIdx;
    u16  u16BlackListFirstIdx;
    u16  u16OptSelectedID;
    u32  u32OptSelectedRAIID;
#endif
    u8 u8NetworkLockMode;
} SecAppData_t;

typedef struct
{
    u32   nBinary1;
    u32   nBinary2;
} SecUserInfo_t;

typedef struct
{
    IWidget *pAbsContainer;
    IWidget *pTxtDouble;
    IWidget *pTxtInput;
} SecPowerOnVerifyMasterCodeWdgList_e;

MAE_Ret SecConstructor(IApplet *pApplet, u32 nEvt, u32 nParam1, u32 nParam2);
MAE_Ret SecDestructor(IApplet *pApplet, u32 nEvt, u32 nParam1, u32 nParam2);
boolean SecStartCB(IApplet *pApplet, u32 nEvt, u32 nParam1, u32 nParam2);
boolean SecStopCB(IApplet *pApplet, u32 nEvt, u32 nParam1, u32 nParam2);
boolean SecKeyPressCB(IApplet *pApplet, u32 nEvt, u32 nParam1, u32 nParam2);
boolean SecKeyLongPressCB(IApplet *pApplet, u32 nEvt, u32 nParam1, u32 nParam2);
boolean SecSuspendCB(IApplet *pApplet, u32 nEvt, u32 nParam1, u32 nParam2);
boolean SecResumeCB(IApplet *pApplet, u32 nEvt, u32 nParam1, u32 nParam2);
boolean SecEmbeddedApClose(IApplet *pApplet, u32 nEvt, u32 param1, u32 param2);
static void _SecCreateTimer(SecAppData_t* pThis, u32 uTimePeriod, PfnMAE_Notify fnCallBack);
static void _SecCancelTimer(SecAppData_t* pThis, PfnMAE_Notify fnCallBack);
static void _SecTimerCallBack(void *pHandler);
static void _SecTimerCallBackDialog(void *pHandler);
#ifdef __SEC_NETWORKLOCK__
static const NetworkLockCusSetting_t* _SecGetNetworkLockCusSet(u8 u8SetNum);
#endif
static void _SecShowDialog(SecAppData_t* pThis, u16 ViewID, u32 TextLabelID, SoftkeyID_e LSK, SoftkeyID_e CSK, SoftkeyID_e RSK);
static void _SecCreatePowerOnVerifyMasterCodeWnd(SecAppData_t* pThis, void* pWndData);
static void _SecSetPowerOnVerifyMasterCodeWnd(SecAppData_t* pThis, void* pWndData);
static void _SecCreatePowerOnVerifyPinCodeWnd(SecAppData_t* pThis, void* pWndData);
static void _SecSetPowerOnVerifyPinCodeWnd(SecAppData_t* pThis, u32 WinID,void* pWndData);
static void _SecCreatePowerOnVerifySIMCodeWnd(SecAppData_t* pThis, void* pWndData);
static void _SecSetPowerOnVerifySIMCodeWnd(SecAppData_t* pThis, u32 WinID, void* pWndData);
static void _SecCreateAllChangeAndConfirmAndUnblockWnd(SecAppData_t* pThis, u16 WinID, void* pWndData);
static void _SecSetAllChangeAndConfirmAndUnblockWnd(SecAppData_t* pThis, u16 WinID, void* pWndData);
static void _SecCreateEmergencyCallListWnd(SecAppData_t* pThis, void* pWndData);
static void _SecSetEmergencyCallListWnd(SecAppData_t* pThis, void* pWndData);
static void _SecCreateSecurityMenuWnd(SecAppData_t* pThis, void* pWndData);
static void _SecSetSecurityMenuWnd(SecAppData_t* pThis, void* pWndData);
static void _SecCreatePINCodeMenuWnd(SecAppData_t* pThis, void* pWndData);
static void _SecSetPINCodeMenuWnd(SecAppData_t* pThis, void* pWndData);
static void _SecCreatePhoneLockMenuWnd(SecAppData_t* pThis, void* pWndData);
static void _SecSetPhoneLockMenuWnd(SecAppData_t* pThis, void* pWndData);
static void _SecCreateSIMLockMenuWnd(SecAppData_t* pThis, void* pWndData);
static void _SecSetSIMLockMenuWnd(SecAppData_t* pThis, void* pWndData);
static void _SecCreateAutoKeypadLockMenuWnd(SecAppData_t* pThis, void* pWndData);
static void _SecSetAutoKeypadLockMenuWnd(SecAppData_t* pThis, void* pWndData);
static void _SecCreatePINStatusMenuWnd(SecAppData_t* pThis, void* pWndData);
static void _SecSetPINStatusMenuWnd(SecAppData_t* pThis, void* pWndData);
static void _SecCreatePhoneLockStatusMenuWnd(SecAppData_t* pThis, void* pWndData);
static void _SecSetPhoneLockStatusMenuWnd(SecAppData_t* pThis, void* pWndData);
static void _SecCreateSIMLockStatusMenuWnd(SecAppData_t* pThis, void* pWndData);
static void _SecSetSIMLockStatusMenuWnd(SecAppData_t* pThis, void* pWndData);
static void _SecCreateAllVerifyAndPowerOnWnd(SecAppData_t* pThis, u16 WinID, void* pWndData);
static void _SecSetAllVerifyAndPowerOnWnd(SecAppData_t* pThis, u16 WinID, void* pWndData);
static void _SecCreateAllChangeAndConfirmWnd(SecAppData_t* pThis, u16 WinID, void* pWndData);
static void _SecSetAllChangeAndConfirmWnd(SecAppData_t* pThis, u16 WinID, void* pWndData);
static void _SecCreateUnBlockPINCodeWnd(SecAppData_t* pThis, u16 WinID, void* pWndData);
static void _SecSetUnBlockPINCodeWnd(SecAppData_t* pThis, u16 WinID, void* pWndData);
static void _SecShowView(SecAppData_t* pThis, u16 ViewID, void* pWndData);
static void _SecConvertView(SecAppData_t* pThis, u16 WinID, void* pWndData);
static void  _SecFreeIF(void *pData);
static void _SecFreeItem(void *pData, void *pUseData);
static void _SecFreeMenuItem(void *pData, IBase *pOwner);
static void _SecMenuListener(void *pApplet, void *pUsrData, WidgetEvtCode_t nEvtCode, HistoryInfo_t *pHistoryInfo, IWidget *pWidget);
static void _SecVerifyItemTextInputListener(void *pApplet, void *pUsrData, WidgetEvtCode_t nEvtCode, TextInfo *pTextInfo, IWidget *pWidget);
static void _SecNewTextInputListener(void *pApplet, void *pUsrData, WidgetEvtCode_t nEvtCode, TextInfo *pTextInfo, IWidget *pWidget);
static void _SecConfirmTextInputListener(void *pApplet, void *pUsrData, WidgetEvtCode_t nEvtCode, TextInfo *pTextInfo, IWidget *pWidget);
static void _SecUpdateTextInputSK(SecAppData_t* pThis, SecTextInputSKType_e eSecSKType);
static void _SecReleaseTextInputResource(SecAppData_t* pThis);
static void _SecConfigLockEditView(SecAppData_t* pThis, u16 ViewID);
static void _SecConfigTextInputItem(SecAppData_t* pThis, u16 ViewID, u32 TextInputWdgID, SecTextInputItem_e eItem);
static void _SecSetVerifyTextInputItemLabel(SecAppData_t* pThis, u16 ViewID, IWidget *pTtitleWdg);
static void _SecSetNewTextInputItemLabel(SecAppData_t* pThis, u16 ViewID, IWidget *pTtitleWdg);
static void _SecSetConfirmTextInputItemLabel(SecAppData_t* pThis, u16 ViewID,IWidget *pTtitleWdg);
static void _SecCheckUnblockPin(SecAppData_t* pThis, u32 nEvt, u32 nParam1, u32 nParam2, SIMSRV_PIN_TYPE_e PINType);
static void _SecSimCnfDialog(SecAppData_t* pThis,u32 nEvt, u32 nParam1, u32 nParam2);
static void _SecVerifyPinLock(SecAppData_t* pThis, u32 nEvt, u32 nParam1, u32 nParam2, SIMSRV_PIN_TYPE_e PINType);
static void _SecParseSecurityCode(SecAppData_t* pThis, u8* pstrSecurityCode);
static void _SecSecurityCodeCnfDialog(SecAppData_t* pThis, u32 nEvt, u32 nParam1, u32 nParam2);
static boolean _SecEncryptCode(u8 *pstrDes, u8 *pstrSrc, u8 nstrSrclen);
static boolean _SecDecryptCode(u8 *pstrDes, u8 *pstrSrc, u8 nstrSrclen);
static void _SecSavePinCode(SecAppData_t* pThis, u8 *pstrPINCode, SIMSRV_SIM_ID_e eSIMID);
static MAE_Ret _SecGetIMEICode(SIMSRV_SIM_ID_e eSIMID, u8*pIMEI);
#if defined(__NETWORK_LOCK_MMI__)
static boolean _SecEncryptIMEICode(u8 *pstrDes, u8 *pstrSrc);
#endif
static void _SecVerifyLock(SecAppData_t* pThis, u32 nEvt, u32 nParam1, u32 nParam2 , SecLockType_e eLockType, boolean bPowerOn,u32* bIEvt);
#ifdef __SEC_NETWORKLOCK__
static u32 _SecGetNetworkLockDelayTimePeriod(SecAppData_t *pThis);
#endif
#if defined(__NETWORK_LOCK_MMI__)
static boolean _SecCheckMccMnc(SecAppData_t *pThis);
#endif
#if defined(__NETWORKSUBSET_LOCK_MMI__)	
static boolean _SecCheckImsiDigits6and7(SecAppData_t *pThis);
#endif
#if defined(__SERVICEPROVIDER_LOCK_MMI__)	
static boolean _SecCheckGid1(SecAppData_t *pThis);
#endif
#if defined(__CORPORATE_LOCK_MMI__)	
static boolean _SecCheckGid1AndGid2(SecAppData_t *pThis);
#endif
#if defined(__SIMUSIM_LOCK_MMI__)	
static boolean _SecCheckImsiDigits8to15(SecAppData_t *pThis);
#endif
static MAE_Ret _SecSaveSimLockImsi(SecAppData_t *pThis, SIMSRV_SIM_ID_e eSIMID);
static void _SecSecurityCodeChangePinByOldPin(SecAppData_t* pThis, u32 nEvt, u32 nParam1, u32 nParam2,u32* nInterEvt);
static void _SecSecurityCodeChangePinByPuk(SecAppData_t* pThis, u32 nEvt, u32 nParam1, u32 nParam2,u32* nInterEvt);
static MAE_Ret _SecVerifyMasterCode(SecAppData_t* pThis, u8 * pSecurityMasterCode);
static MAE_Ret _SecGenerateMasterKey(SecAppData_t* pThis, u8 * pSecurityMasterKey);
static u8 _SecGenerateStringValue(const char secSymbol1, const char secSymbol2);
static boolean _SecGenerateMasterCode(u8 *pMasterKey, u8 *pCustomerKey, u8 * pIMEI, u8 *pMasterCode);
static void  _SecFreeLauncherRspData(SecurityLaunchRspData_t *pData);
static void _SecPopMenuHistory(SecAppData_t* pThis);
static void _SecShutdown(SecAppData_t* pThis);
static void _SecSaveLockCheckPoint(SecAppData_t* pThis, LockCheckPoint_e eLockCheckPoint);
static void _SecSavePhoneLockCheckPoint(SecAppData_t* pThis, u32 nEvt, u32 nParam1, u32 nParam2);
static void _SecRequestBacklight(SecAppData_t* pThis);
void _SecSetCommonInputViewOnlyandSkNone(SecAppData_t* pThis);
void _SecSimSetSIMMasterFileReadyCB(void *pThis, u8 nActiveSIM) ;
void _SecSimSetSIMIMSIFileReadyCB(void *pThis, u8 nActiveSIM) ;
void _SecSimSetSIMErrorIndCB(void *pThis, u8 nActiveSIM) ;
#ifdef __SIM_NO_RSP_HANDLING__
void _SecSIMNoRspCB(void *pApplet, u8 nActiveSIM);
#endif //__SIM_NO_RSP_HANDLING__
void _SecSimEnablePINCnfCB(void *pThis, SIM_PIN_STATUS_e ePinStatus, SIMSRV_SIM_ID_e eSIMID) ;
void _SecSimDisablePINCnfCB(void *pThis, SIM_PIN_STATUS_e ePinStatus, SIMSRV_SIM_ID_e eSIMID) ;
void _SecSimVerifyPINCnfCB(void *pThis, SIM_PIN_STATUS_e ePinStatus, SIMSRV_SIM_ID_e eSIMID) ;
#ifdef __SEC_NETWORKLOCK__
void _SecSimReadyIndCb(void *pApplet, u8 nActiveSIM);
void _SecSimReadSIMFileCnfCB(void *pThis, SIMSRV_FileReadCnf_t *tFileReadCnf, SIMSRV_SIM_ID_e eSIMID) ;
#endif
void _SecSimUnblockPINCnfCB(void *pThis, SIM_PIN_STATUS_e ePinStatus, SIMSRV_SIM_ID_e eSIMID) ;
void _SecSimChangePINCnfCB(void *pThis, SIM_PIN_STATUS_e ePinStatus, SIMSRV_SIM_ID_e eSIMID) ;
void _SecAppStartApFree(IBase *pIssuer, u32 Param);
void _SecEventEnd(SecAppData_t *pThis, u32 nEvt, u32 nParam1, u32 nParam2) ;
void _SecEventOk(SecAppData_t *pThis, u32 nEvt, u32 nParam1, u32 nParam2) ;
void _SecEventSos(SecAppData_t *pThis, u32 nEvt, u32 nParam1, u32 nParam2) ;
void _SecEventCancel(SecAppData_t *pThis, u32 nEvt, u32 nParam1, u32 nParam2) ;
void _SecEventMaster(SecAppData_t *pThis, u32 nEvt, u32 nParam1, u32 nParam2) ;
void _SecEventSlave(SecAppData_t *pThis, u32 nEvt, u32 nParam1, u32 nParam2) ;
void _SecEventTimeExpired(SecAppData_t *pThis, u32 nEvt, u32 nParam1, u32 nParam2) ;
void _SecEventMenuChange(SecAppData_t *pThis, u32 nEvt, u32 nParam1, u32 nParam2) ;
void _SecEventMenuSelect(SecAppData_t *pThis, u32 nEvt, u32 nParam1, u32 nParam2) ;
void _SecEventMenuCancel(SecAppData_t *pThis, u32 nEvt, u32 nParam1, u32 nParam2) ;
void _SecEventMenuBack(SecAppData_t *pThis, u32 nEvt, u32 nParam1, u32 nParam2) ;
void _SecEventDialogEnd(SecAppData_t *pThis, u32 nEvt, u32 nParam1, u32 nParam2) ;
boolean _SecIsModeActive(SecAppData_t *pThis, u8 nMode);
void _SecActiveActA(SecAppData_t* pThis,u32 nEvt, u32 nParam1, u32 nParam2);
void _SecActiveInitEntry(SecAppData_t* pThis, u32 nEvt, u32 nParam1, u32 nParam2);
void _SecActiveCheckStartReasonEntry(SecAppData_t* pThis, u32 nEvt, u32 nParam1, u32 nParam2);
void _SecActiveSecurityMenuShowSecurityMenuEntry(SecAppData_t* pThis,u32 nEvt,u32 nParam1,u32 nParam2);
void _SecActiveSecurityMenuShowSecurityMenuActA(SecAppData_t* pThis,u32 nEvt,u32 nParam1,u32 nParam2);
void _SecActiveSecurityMenuShowSecurityMenuActB(SecAppData_t* pThis,u32 nEvt,u32 nParam1,u32 nParam2);
void _SecActiveSecurityMenuShowSecurityMenuActC(SecAppData_t* pThis,u32 nEvt,u32 nParam1,u32 nParam2);
void _SecActiveSecurityMenuShowSecurityMenuActD(SecAppData_t* pThis,u32 nEvt,u32 nParam1,u32 nParam2);
void _SecActiveSecurityMenuShowSecurityMenuActE(SecAppData_t* pThis,u32 nEvt,u32 nParam1,u32 nParam2);
void _SecActiveSecurityMenuPinMenuShowPinMenuEntry(SecAppData_t* pThis,u32 nEvt,u32 nParam1,u32 nParam2);
void _SecActiveSecurityMenuPinMenuShowPinMenuActA(SecAppData_t* pThis,u32 nEvt,u32 nParam1,u32 nParam2);
void _SecActiveSecurityMenuPinMenuShowPinMenuActB(SecAppData_t* pThis,u32 nEvt,u32 nParam1,u32 nParam2);
void _SecActiveSecurityMenuPinMenuShowPinMenuActC(SecAppData_t* pThis,u32 nEvt,u32 nParam1,u32 nParam2);
void _SecActiveSecurityMenuPinMenuChangePinStatusEntry(SecAppData_t* pThis,u32 nEvt,u32 nParam1,u32 nParam2);
void _SecActiveSecurityMenuPinMenuChangePinStatusActA(SecAppData_t* pThis,u32 nEvt,u32 nParam1,u32 nParam2);
void _SecActiveSecurityMenuPinMenuChangePinStatusActB(SecAppData_t* pThis,u32 nEvt,u32 nParam1,u32 nParam2);
void _SecActiveSecurityMenuPinMenuVerifyPinOrPin2LockEntry(SecAppData_t* pThis,u32 nEvt,u32 nParam1,u32 nParam2);
void _SecActiveSecurityMenuPinMenuVerifyPinOrPin2LockExit(SecAppData_t* pThis,u32 nEvt,u32 nParam1,u32 nParam2);
void _SecActiveSecurityMenuPinMenuVerifyPinOrPin2LockActA(SecAppData_t* pThis,u32 nEvt,u32 nParam1,u32 nParam2);
void _SecActiveSecurityMenuPinMenuVerifyPinOrPin2LockActB(SecAppData_t* pThis,u32 nEvt,u32 nParam1,u32 nParam2);
void _SecActiveSecurityMenuPinMenuVerifyPinOrPin2LockActC(SecAppData_t* pThis,u32 nEvt,u32 nParam1,u32 nParam2);
void _SecActiveSecurityMenuPinMenuVerifyPinOrPin2LockActD(SecAppData_t* pThis,u32 nEvt,u32 nParam1,u32 nParam2);
void _SecActiveSecurityMenuPinMenuChangePinOrPin2CodeEntry(SecAppData_t* pThis,u32 nEvt,u32 nParam1,u32 nParam2);
void _SecActiveSecurityMenuPinMenuChangePinOrPin2CodeExit(SecAppData_t* pThis,u32 nEvt,u32 nParam1,u32 nParam2);
void _SecActiveSecurityMenuPinMenuChangePinOrPin2CodeActA(SecAppData_t* pThis,u32 nEvt,u32 nParam1,u32 nParam2);
void _SecActiveSecurityMenuPinMenuChangePinOrPin2CodeActB(SecAppData_t* pThis,u32 nEvt,u32 nParam1,u32 nParam2);
void _SecActiveSecurityMenuPinMenuChangePinOrPin2CodeActC(SecAppData_t* pThis,u32 nEvt,u32 nParam1,u32 nParam2);
void _SecActiveSecurityMenuPhoneOrSimMenuShowPhoneOrSimMenuEntry(SecAppData_t* pThis,u32 nEvt,u32 nParam1,u32 nParam2);
void _SecActiveSecurityMenuPhoneOrSimMenuShowPhoneOrSimMenuActA(SecAppData_t* pThis,u32 nEvt,u32 nParam1,u32 nParam2);
void _SecActiveSecurityMenuPhoneOrSimMenuShowPhoneOrSimMenuActB(SecAppData_t* pThis,u32 nEvt,u32 nParam1,u32 nParam2);
void _SecActiveSecurityMenuPhoneOrSimMenuShowPhoneOrSimMenuActC(SecAppData_t* pThis,u32 nEvt,u32 nParam1,u32 nParam2);
void _SecActiveSecurityMenuPhoneOrSimMenuChangePhoneOrSimStatusEntry(SecAppData_t* pThis,u32 nEvt,u32 nParam1,u32 nParam2);
void _SecActiveSecurityMenuPhoneOrSimMenuChangePhoneOrSimStatusActA(SecAppData_t* pThis,u32 nEvt,u32 nParam1,u32 nParam2);
void _SecActiveSecurityMenuPhoneOrSimMenuChangePhoneOrSimStatusActB(SecAppData_t* pThis,u32 nEvt,u32 nParam1,u32 nParam2);
void _SecActiveSecurityMenuPhoneOrSimMenuVerifyPhoneOrSimLockEntry(SecAppData_t* pThis,u32 nEvt,u32 nParam1,u32 nParam2);
void _SecActiveSecurityMenuPhoneOrSimMenuVerifyPhoneOrSimLockExit(SecAppData_t* pThis,u32 nEvt,u32 nParam1,u32 nParam2);
void _SecActiveSecurityMenuPhoneOrSimMenuVerifyPhoneOrSimLockActA(SecAppData_t* pThis,u32 nEvt,u32 nParam1,u32 nParam2);
void _SecActiveSecurityMenuPhoneOrSimMenuVerifyPhoneOrSimLockActB(SecAppData_t* pThis,u32 nEvt,u32 nParam1,u32 nParam2);
void _SecActiveSecurityMenuPhoneOrSimMenuVerifyPhoneOrSimLockActC(SecAppData_t* pThis,u32 nEvt,u32 nParam1,u32 nParam2);
void _SecActiveSecurityMenuPhoneOrSimMenuChangePhoneOrSimCodeEntry(SecAppData_t* pThis,u32 nEvt,u32 nParam1,u32 nParam2);
void _SecActiveSecurityMenuPhoneOrSimMenuChangePhoneOrSimCodeExit(SecAppData_t* pThis,u32 nEvt,u32 nParam1,u32 nParam2);
void _SecActiveSecurityMenuPhoneOrSimMenuChangePhoneOrSimCodeActA(SecAppData_t* pThis,u32 nEvt,u32 nParam1,u32 nParam2);
void _SecActiveSecurityMenuPhoneOrSimMenuChangePhoneOrSimCodeActB(SecAppData_t* pThis,u32 nEvt,u32 nParam1,u32 nParam2);
void _SecActiveSecurityMenuAutoKeypadLockMenuEntry(SecAppData_t* pThis,u32 nEvt,u32 nParam1,u32 nParam2);
void _SecActiveSecurityMenuAutoKeypadLockMenuExit(SecAppData_t* pThis,u32 nEvt,u32 nParam1,u32 nParam2);
void _SecActiveSecurityMenuAutoKeypadLockMenuActA(SecAppData_t* pThis,u32 nEvt,u32 nParam1,u32 nParam2);
s32  _SecActivePowerOnCheckingCndA(SecAppData_t* pThis,u32 nEvt,u32 nParam1,u32 nParam2);
s32  _SecActivePowerOnCheckingCndB(SecAppData_t* pThis,u32 nEvt,u32 nParam1,u32 nParam2);
s32  _SecActivePowerOnCheckingCndC(SecAppData_t* pThis,u32 nEvt,u32 nParam1,u32 nParam2);
void _SecActivePowerOnCheckingActA(SecAppData_t* pThis,u32 nEvt,u32 nParam1,u32 nParam2);
void _SecActivePowerOnCheckingActB(SecAppData_t* pThis,u32 nEvt,u32 nParam1,u32 nParam2);
void _SecActivePowerOnCheckingActC(SecAppData_t* pThis,u32 nEvt,u32 nParam1,u32 nParam2);
void _SecActivePowerOnCheckingCheckSequenceEntry(SecAppData_t* pThis, u32 nEvt, u32 nParam1, u32 nParam2);
void _SecActivePowerOnCheckingVerifyPinLockEntry(SecAppData_t* pThis,u32 nEvt,u32 nParam1,u32 nParam2);
void _SecActivePowerOnCheckingVerifyPinLockActA(SecAppData_t* pThis,u32 nEvt,u32 nParam1,u32 nParam2);
void _SecActivePowerOnCheckingVerifyPinLockActB(SecAppData_t* pThis,u32 nEvt,u32 nParam1,u32 nParam2);
void _SecActivePowerOnCheckingVerifyPinLockActC(SecAppData_t* pThis,u32 nEvt,u32 nParam1,u32 nParam2);
void _SecActivePowerOnCheckingVerifyPinLockActD(SecAppData_t* pThis,u32 nEvt,u32 nParam1,u32 nParam2);
void _SecActivePowerOnCheckingVerifyPinLockActE(SecAppData_t* pThis,u32 nEvt,u32 nParam1,u32 nParam2);
void _SecActivePowerOnCheckingVerifySimLockEntry(SecAppData_t* pThis,u32 nEvt,u32 nParam1,u32 nParam2);
s32  _SecActivePowerOnCheckingVerifySimLockCndA(SecAppData_t* pThis,u32 nEvt,u32 nParam1,u32 nParam2);
void _SecActivePowerOnCheckingVerifySimLockActA(SecAppData_t* pThis,u32 nEvt,u32 nParam1,u32 nParam2);
void _SecActivePowerOnCheckingVerifySimLockActB(SecAppData_t* pThis,u32 nEvt,u32 nParam1,u32 nParam2);
void _SecActivePowerOnCheckingVerifySimLockActC(SecAppData_t* pThis,u32 nEvt,u32 nParam1,u32 nParam2);
#ifdef __SEC_NETWORKLOCK__
void _SecActivePowerOnCheckingVerifyNetworkLockPrepareDataEntry(SecAppData_t* pThis,u32 nEvt,u32 nParam1,u32 nParam2);
void _SecActivePowerOnCheckingVerifyNetworkLockPrepareDataActA(SecAppData_t* pThis,u32 nEvt,u32 nParam1,u32 nParam2);
void _SecActivePowerOnCheckingVerifyNetworkLockCheckLockEntry(SecAppData_t* pThis,u32 nEvt,u32 nParam1,u32 nParam2);
void _SecActivePowerOnCheckingVerifyNetworkLockCheckLockExit(SecAppData_t* pThis,u32 nEvt,u32 nParam1,u32 nParam2);
void _SecActivePowerOnCheckingVerifyNetworkLockCheckLockActA(SecAppData_t* pThis,u32 nEvt,u32 nParam1,u32 nParam2);
void _SecActivePowerOnCheckingVerifyNetworkLockCheckLockActB(SecAppData_t* pThis,u32 nEvt,u32 nParam1,u32 nParam2);
void _SecActivePowerOnCheckingVerifyNetworkLockCheckLockActC(SecAppData_t* pThis,u32 nEvt,u32 nParam1,u32 nParam2);
void _SecActivePowerOnCheckingVerifyNetworkLockCheckLockActD(SecAppData_t* pThis,u32 nEvt,u32 nParam1,u32 nParam2);
#endif
void _SecActivePowerOnCheckingVerifyPhoneLockEntry(SecAppData_t* pThis,u32 nEvt,u32 nParam1,u32 nParam2);
void _SecActivePowerOnCheckingVerifyPhoneLockActA(SecAppData_t* pThis,u32 nEvt,u32 nParam1,u32 nParam2);
void _SecActivePowerOnCheckingVerifyPhoneLockActB(SecAppData_t* pThis,u32 nEvt,u32 nParam1,u32 nParam2);
void _SecActivePowerOnCheckingDeactivateSimEntry(SecAppData_t* pThis,u32 nEvt,u32 nParam1,u32 nParam2);
void _SecActivePowerOnCheckingDeactivateSimActA(SecAppData_t* pThis,u32 nEvt,u32 nParam1,u32 nParam2);
void _SecActivePowerOnCheckingDeactivateSimActB(SecAppData_t* pThis,u32 nEvt,u32 nParam1,u32 nParam2);
void _SecActivePowerOnCheckingVerifyMasterCodeEntry(SecAppData_t* pThis,u32 nEvt,u32 nParam1,u32 nParam2);
void _SecActivePowerOnCheckingVerifyMasterCodeActA(SecAppData_t* pThis,u32 nEvt,u32 nParam1,u32 nParam2);
void _SecActivePowerOnCheckingVerifyMasterCodeActB(SecAppData_t* pThis,u32 nEvt,u32 nParam1,u32 nParam2);
void _SecActiveVerifyLockForApVerifyPin2LockEntry(SecAppData_t* pThis,u32 nEvt,u32 nParam1,u32 nParam2);
void _SecActiveVerifyLockForApVerifyPin2LockActA(SecAppData_t* pThis,u32 nEvt,u32 nParam1,u32 nParam2);
void _SecActiveVerifyLockForApVerifyPin2LockActB(SecAppData_t* pThis,u32 nEvt,u32 nParam1,u32 nParam2);
void _SecActiveVerifyLockForApVerifyPin2LockActC(SecAppData_t* pThis,u32 nEvt,u32 nParam1,u32 nParam2);
void _SecActiveVerifyLockForApVerifyPin2LockActD(SecAppData_t* pThis,u32 nEvt,u32 nParam1,u32 nParam2);
void _SecActiveVerifyLockForApVerifyPhoneLockEntry(SecAppData_t* pThis,u32 nEvt,u32 nParam1,u32 nParam2);
void _SecActiveVerifyLockForApVerifyPhoneLockActA(SecAppData_t* pThis,u32 nEvt,u32 nParam1,u32 nParam2);
void _SecActiveVerifyLockForApVerifyPhoneLockActB(SecAppData_t* pThis,u32 nEvt,u32 nParam1,u32 nParam2);
void _SecActiveVerifyLockForApVerifyPhoneLockActC(SecAppData_t* pThis,u32 nEvt,u32 nParam1,u32 nParam2);
void _SecActiveSimSecurityCodeCheckCodeFormatEntry(SecAppData_t* pThis,u32 nEvt,u32 nParam1,u32 nParam2);
void _SecActiveSimSecurityCodeChangePinByOldPinEntry(SecAppData_t* pThis,u32 nEvt,u32 nParam1,u32 nParam2);
void _SecActiveSimSecurityCodeChangePinByOldPinActA(SecAppData_t* pThis,u32 nEvt,u32 nParam1,u32 nParam2);
void _SecActiveSimSecurityCodeChangePinByOldPinActB(SecAppData_t* pThis,u32 nEvt,u32 nParam1,u32 nParam2);
void _SecActiveSimSecurityCodeChangePinByOldPinActC(SecAppData_t* pThis,u32 nEvt,u32 nParam1,u32 nParam2);
void _SecActiveSimSecurityCodeChangePinByOldPinActD(SecAppData_t* pThis,u32 nEvt,u32 nParam1,u32 nParam2);
void _SecActiveSimSecurityCodeChangePinByOldPinActE(SecAppData_t* pThis,u32 nEvt,u32 nParam1,u32 nParam2);
void _SecActiveSimSecurityCodeChangePinByPukEntry(SecAppData_t* pThis,u32 nEvt,u32 nParam1,u32 nParam2);
void _SecActiveSimSecurityCodeChangePinByPukActA(SecAppData_t* pThis,u32 nEvt,u32 nParam1,u32 nParam2);
void _SecActiveSimSecurityCodeChangePinByPukActB(SecAppData_t* pThis,u32 nEvt,u32 nParam1,u32 nParam2);
void _SecActiveSimSecurityCodeChangePinByPukActC(SecAppData_t* pThis,u32 nEvt,u32 nParam1,u32 nParam2);
void _SecActiveSimSecurityCodeChangePinByPukActD(SecAppData_t* pThis,u32 nEvt,u32 nParam1,u32 nParam2);
#ifdef __ANTI_STEAL_MMI__
void _SecActivePowerOnCheckingVerifyAntiSteal(SecAppData_t* pThis,u32 nEvt,u32 nParam1,u32 nParam2);
void _SecActivePowerOnCheckingVerifyAntiStealEntry(SecAppData_t* pThis,u32 nEvt,u32 nParam1,u32 nParam2);
MAE_Ret _SecActivePowerOnCheckingVerifyAntiStealSendMgs(SecAppData_t* pThis, MAE_DualMode_t eDualMode, u32 nParam1, u32 nParam2);
#endif

void _SecLockBlockedEntry(SecAppData_t* pThis,u32 nEvt,u32 nParam1,u32 nParam2);
void _SecLockBlockedExit(SecAppData_t* pThis,u32 nEvt,u32 nParam1,u32 nParam2);
s32  _SecLockBlockedCndA(SecAppData_t* pThis,u32 nEvt,u32 nParam1,u32 nParam2);
s32  _SecLockBlockedCndB(SecAppData_t* pThis,u32 nEvt,u32 nParam1,u32 nParam2);
void _SecLockBlockedActA(SecAppData_t* pThis,u32 nEvt,u32 nParam1,u32 nParam2);
void _SecLockBlockedActB(SecAppData_t* pThis,u32 nEvt,u32 nParam1,u32 nParam2);
void _SecLockBlockedActC(SecAppData_t* pThis,u32 nEvt,u32 nParam1,u32 nParam2);
void _SecLockBlockedActD(SecAppData_t* pThis,u32 nEvt,u32 nParam1,u32 nParam2);
void _SecLockBlockedUnblockPinEntry(SecAppData_t* pThis,u32 nEvt,u32 nParam1,u32 nParam2);
s32  _SecLockBlockedUnblockPinCndA(SecAppData_t* pThis,u32 nEvt,u32 nParam1,u32 nParam2);
void _SecLockBlockedUnblockPinActA(SecAppData_t* pThis,u32 nEvt,u32 nParam1,u32 nParam2);
void _SecLockBlockedUnblockPinActB(SecAppData_t* pThis,u32 nEvt,u32 nParam1,u32 nParam2);
void _SecLockBlockedUnblockPinActC(SecAppData_t* pThis,u32 nEvt,u32 nParam1,u32 nParam2);
void _SecLockBlockedPukBlockedEntry(SecAppData_t* pThis,u32 nEvt,u32 nParam1,u32 nParam2);
void _SecLockBlockedNetworkLockBlockedEntry(SecAppData_t* pThis,u32 nEvt,u32 nParam1,u32 nParam2);
void _SecUnblockPin2Entry(SecAppData_t* pThis,u32 nEvt,u32 nParam1,u32 nParam2);
void _SecUnblockPin2Exit(SecAppData_t* pThis,u32 nEvt,u32 nParam1,u32 nParam2);
s32  _SecUnblockPin2CndA(SecAppData_t* pThis,u32 nEvt,u32 nParam1,u32 nParam2);
void _SecUnblockPin2ActA(SecAppData_t* pThis,u32 nEvt,u32 nParam1,u32 nParam2);
void _SecUnblockPin2ActB(SecAppData_t* pThis,u32 nEvt,u32 nParam1,u32 nParam2);
void _SecUnblockPin2ActC(SecAppData_t* pThis,u32 nEvt,u32 nParam1,u32 nParam2);
void _SecUnblockPin2ActD(SecAppData_t* pThis,u32 nEvt,u32 nParam1,u32 nParam2);
void _SecUnblockPin2ActE(SecAppData_t* pThis,u32 nEvt,u32 nParam1,u32 nParam2);
void _SecUnblockPin2ActF(SecAppData_t* pThis,u32 nEvt,u32 nParam1,u32 nParam2);
void _SecEmergencyCallEntry(SecAppData_t* pThis,u32 nEvt,u32 nParam1,u32 nParam2);
void _SecEmergencyCallExit(SecAppData_t* pThis,u32 nEvt,u32 nParam1,u32 nParam2);
void _SecEmergencyCallActA(SecAppData_t* pThis,u32 nEvt,u32 nParam1,u32 nParam2);
void _SecEmergencyCallActB(SecAppData_t* pThis,u32 nEvt,u32 nParam1,u32 nParam2);
void _SecEmergencyCallActC(SecAppData_t* pThis,u32 nEvt,u32 nParam1,u32 nParam2);
void _SecSimErrorEntry(SecAppData_t* pThis,u32 nEvt,u32 nParam1,u32 nParam2);
void _SecSimErrorActA(SecAppData_t* pThis,u32 nEvt,u32 nParam1,u32 nParam2);
void _SecStopEntry(SecAppData_t* pThis,u32 nEvt, u32 nParam1, u32 nParam2);

MAE_Ret _SecWndHdlSecurityMenu(void *pCusHandle, const WindowMsg_t *pWndMsg, void *pWndData, u32 nWndInitParam);
MAE_Ret _SecWndHdlPinCodeMenu(void *pCusHandle, const WindowMsg_t *pWndMsg, void *pWndData, u32 nWndInitParam);
MAE_Ret _SecWndHdlPinStatusMenu(void *pCusHandle, const WindowMsg_t *pWndMsg, void *pWndData, u32 nWndInitParam);
MAE_Ret _SecWndHdlVerifyPin(void *pCusHandle, const WindowMsg_t *pWndMsg, void *pWndData, u32 nWndInitParam);
MAE_Ret _SecWndHdlVerifyPin2(void *pCusHandle, const WindowMsg_t *pWndMsg, void *pWndData, u32 nWndInitParam);
MAE_Ret _SecWndHdlChangePin(void *pCusHandle, const WindowMsg_t *pWndMsg, void *pWndData, u32 nWndInitParam);
MAE_Ret _SecWndHdlChangePin2(void *pCusHandle, const WindowMsg_t *pWndMsg, void *pWndData, u32 nWndInitParam);
MAE_Ret _SecWndHdlConfirmPin(void *pCusHandle, const WindowMsg_t *pWndMsg, void *pWndData, u32 nWndInitParam);
MAE_Ret _SecWndHdlConfirmPin2(void *pCusHandle, const WindowMsg_t *pWndMsg, void *pWndData, u32 nWndInitParam);
MAE_Ret _SecWndHdlPhoneLockMenu(void *pCusHandle, const WindowMsg_t *pWndMsg, void *pWndData, u32 nWndInitParam);
MAE_Ret _SecWndHdlSimLockMenu(void *pCusHandle, const WindowMsg_t *pWndMsg, void *pWndData, u32 nWndInitParam);
MAE_Ret _SecWndHdlSimLockStatusMenu(void *pCusHandle, const WindowMsg_t *pWndMsg, void *pWndData, u32 nWndInitParam);
MAE_Ret _SecWndHdlPhoneLockStatusMenu(void *pCusHandle, const WindowMsg_t *pWndMsg, void *pWndData, u32 nWndInitParam);
MAE_Ret _SecWndHdlVerifySim(void *pCusHandle, const WindowMsg_t *pWndMsg, void *pWndData, u32 nWndInitParam);
MAE_Ret _SecWndHdlVerifyPhone(void *pCusHandle, const WindowMsg_t *pWndMsg, void *pWndData, u32 nWndInitParam);
MAE_Ret _SecWndHdlUnblockPin(void *pCusHandle, const WindowMsg_t *pWndMsg, void *pWndData, u32 nWndInitParam);
MAE_Ret _SecWndHdlUnblockPin2(void *pCusHandle, const WindowMsg_t *pWndMsg, void *pWndData, u32 nWndInitParam);
MAE_Ret _SecWndHdlUnblockConfirmPin(void *pCusHandle, const WindowMsg_t *pWndMsg, void *pWndData, u32 nWndInitParam);
MAE_Ret _SecWndHdlUnblockConfirmPin2(void *pCusHandle, const WindowMsg_t *pWndMsg, void *pWndData, u32 nWndInitParam);
MAE_Ret _SecWndHdlUnblockChangePin(void *pCusHandle, const WindowMsg_t *pWndMsg, void *pWndData, u32 nWndInitParam);
MAE_Ret _SecWndHdlUnblockChangePin2(void *pCusHandle, const WindowMsg_t *pWndMsg, void *pWndData, u32 nWndInitParam);
MAE_Ret _SecWndHdlChangeSim(void *pCusHandle, const WindowMsg_t *pWndMsg, void *pWndData, u32 nWndInitParam);
MAE_Ret _SecWndHdlChangePhone(void *pCusHandle, const WindowMsg_t *pWndMsg, void *pWndData, u32 nWndInitParam);
MAE_Ret _SecWndHdlConfirmSim(void *pCusHandle, const WindowMsg_t *pWndMsg, void *pWndData, u32 nWndInitParam);
MAE_Ret _SecWndHdlConfirmPhone(void *pCusHandle, const WindowMsg_t *pWndMsg, void *pWndData, u32 nWndInitParam);
MAE_Ret _SecWndHdlAutoKeypadLockMenu(void *pCusHandle, const WindowMsg_t *pWndMsg, void *pWndData, u32 nWndInitParam);
MAE_Ret _SecWndHdlPowerOnVerifyPin(void *pCusHandle, const WindowMsg_t *pWndMsg, void *pWndData, u32 nWndInitParam);
MAE_Ret _SecWndHdlPowerOnVerifySim(void *pCusHandle, const WindowMsg_t *pWndMsg, void *pWndData, u32 nWndInitParam);
MAE_Ret _SecWndHdlPowerOnVerifyNetwork(void *pCusHandle, const WindowMsg_t *pWndMsg, void *pWndData, u32 nWndInitParam);
MAE_Ret _SecWndHdlPowerOnVerifySimusim(void *pCusHandle, const WindowMsg_t *pWndMsg, void *pWndData, u32 nWndInitParam);
MAE_Ret _SecWndHdlPowerOnVerifyCoporate(void *pCusHandle, const WindowMsg_t *pWndMsg, void *pWndData, u32 nWndInitParam);
MAE_Ret _SecWndHdlPowerOnVerifySp(void *pCusHandle, const WindowMsg_t *pWndMsg, void *pWndData, u32 nWndInitParam);
MAE_Ret _SecWndHdlPowerOnVerifyNetworkSubset(void *pCusHandle, const WindowMsg_t *pWndMsg, void *pWndData, u32 nWndInitParam);
MAE_Ret _SecWndHdlPowerOnVerifyPhone(void *pCusHandle, const WindowMsg_t *pWndMsg, void *pWndData, u32 nWndInitParam);
MAE_Ret _SecWndHdlPowerOnVerifyMasterCode(void *pCusHandle, const WindowMsg_t *pWndMsg, void *pWndData, u32 nWndInitParam);
MAE_Ret _SecWndHdlEmergencyCallList(void *pCusHandle, const WindowMsg_t *pWndMsg, void *pWndData, u32 nWndInitParam);
#ifdef __ANTI_STEAL_MMI__
MAE_Ret _SecAppWndCheckPassWordHdl(void *pCusHandle, const WindowMsg_t *pWndMsg, void *pWndData, u32 nWndInitParam);
MAE_Ret _SecWndCreateCheckPassWord(void *pCusHandle, void *pWndData, u32 nWndInitParam);
MAE_Ret _SecWndDestroyCheckPassWord(void *pCusHandle, void *pWndData);
#if defined(__AUTO_ROTATE_DISPLAY__) || defined(__MULTI_THEMES_ENABLED__)
MAE_Ret _SecWndConvertCheckPassWord(void *pCusHandle, void *pWndData);
#endif
static void _SecAppPassWordInputCB(void *pApplet, void *pUsrData, WidgetEvtCode_t nEvtCode, TextInfo *pTextInfo, IWidget *pWidget);
MAE_Ret DoneDialogCB(void *pApplet, MAEEvent_t nEvt, u32 nParam1, u32 nParam2);
MAE_Ret FailDialogCB(void *pApplet, MAEEvent_t nEvt, u32 nParam1, u32 nParam2);
MAE_Ret DoneDialogConfirmHdl(void *pData, MAEEvent_t nEvt, u32 param1, u32 param2);
MAE_Ret FailDialogCloseCB(void *pApplet, MAEEvent_t nEvt, u32 nParam1, u32 nParam2);
#endif

static boolean _SecAppLaunch(UrlSrvUrlHdl_t pUrl, void *pUserData, void **ppvLaunchObj, CmnAppLaunchRspCbInfo_t *psRspCbInfo);
static boolean _SecurityAppLaunchMenuEntryHandler(UrlSrvUrlHdl_t pUrl, void *pvUserData, void **ppvLaunchObj, SecurityLaunchRspCbInfo_t *psResponseInfo);
static boolean _SecurityAppCheckSecurityCodeEntryHandler(UrlSrvUrlHdl_t pUrl, void *pvUserData, void **ppvLaunchObj, SecurityLaunchRspCbInfo_t *psResponseInfo);
static boolean _SecurityAppCheckFromSimEntryHandler(UrlSrvUrlHdl_t pUrl, void *pvUserData, void **ppvLaunchObj, SecurityLaunchRspCbInfo_t *psResponseInfo);
static boolean _SecurityAppCheckAPLockVerificationEntryHandler(UrlSrvUrlHdl_t pUrl, void *pvUserData, void **ppvLaunchObj, SecurityLaunchRspCbInfo_t *psResponseInfo);

void _SecLaunchCcInfo( void *pvUserData,MAE_Ret nRspCode,void *pvRspData,CmnRspDataFreeCb pfnRspFreeCb ) ;
void _SecLaunchOffInfo( void *pvUserData,MAE_Ret nRspCode,void *pvRspData,CmnRspDataFreeCb pfnRspFreeCb ) ;

MAE_Ret _SecVerifyPinOrPin2LockDialogHandler(void *pApplet, MAE_EventId nEvt, u32 nParam1, u32 nParam2);
MAE_Ret _SecSaveConfirmDialogHandler(void *pApplet, MAE_EventId nEvt, u32 nParam1, u32 nParam2);
void _SecOperationExitApplet(SecAppData_t *pThis);
void _SecSimSrvActivateSIMCnfCB(void *pThis, SIMSRV_RESULT_e eResult, SIMSRV_SIM_ID_e eSIMID);
void _SecReDrawShowPinMenu(SecAppData_t* pThis,u32 nEvt,u32 nParam1,u32 nParam2);
static void _SecSetWdgLayout(HWIN hWin, IWidget *pWdg, Pos_t *pPos,WidgetSize_t *pSize); 
#ifdef __SMSBLACKLIST_MMI__
static MAE_Ret _SecWndCreateBlackListOption(void *pCusHandle, void *pWndData, u32 nWndInitParam);
static MAE_Ret _SecWndCreateBlackListKeywordOption(void *pCusHandle, void *pWndData, u32 nWndInitParam);
static MAE_Ret  _SecBlackListAddNewShowView(void *pCusHandle, void *pWndData, u32 nWndInitParam);
#if defined(__AUTO_ROTATE_DISPLAY__) || defined(__MULTI_THEMES_ENABLED__)
MAE_Ret _SecConvertBlackListAddNewShowView(void *pCusHandle, void *pWndData);
#endif
static MAE_Ret  _SecBlackListKeywordAddNewShowView(void *pCusHandle, void *pWndData, u32 nWndInitParam);
#if defined(__AUTO_ROTATE_DISPLAY__) || defined(__MULTI_THEMES_ENABLED__)
MAE_Ret _SecConvertBlackListKeywordAddNewShowView(void *pCusHandle, void *pWndData);
#endif
static MAE_Ret  _SecBlackListKeywordDestoryView(void *pCusHandle, void *pWndData);
static boolean SecSettingBlackListStatus(boolean status);
static boolean _SecHandleAddBlackListKeyPressBlackList(SecAppData_t *pThis, u32 nParam1, u32 nParam2);
static boolean _SecHandleAddBlackListKeywordKeyPress(SecAppData_t *pThis, u32 nParam1, u32 nParam2);
static boolean SecHandleKeyPressBlackList(SecAppData_t *pThis, u32 nParam1, u32 nParam2);
static void _SecDBG_PrtStr(u32 level, u8 *pStr);
MAE_Ret _SecWndHdlSMSBlacklist(void *pCusHandle, const WindowMsg_t *pWndMsg, void *pWndData, u32 nWndInitParam);
MAE_Ret _SecCreateSettingBlackListWnd(void *pWndHandle, void *pWndData, u32 nWndInitParam);
MAE_Ret _SecDestroySettingBlackListWnd(void *pCusHandle, void * pWndData);
#if defined(__AUTO_ROTATE_DISPLAY__) || defined(__MULTI_THEMES_ENABLED__)
static void _SecConvertSettingBlackListWnd(SecAppData_t* pThis, void* pWndData);
#endif
MAE_Ret SecBlackListNumberWndHdl(void *pCusHandle, const WindowMsg_t *pWndMsg, void *pWndData, u32 nWndInitParam);
MAE_Ret _SecCreateBlackListNumberWnd(void *pWndHandle, void *pWndData, u32 nWndInitParam);
#if defined(__AUTO_ROTATE_DISPLAY__) || defined(__MULTI_THEMES_ENABLED__)
static void _SecConvertBlackListNumberWnd(SecAppData_t* pThis, void* pWndData);
#endif
MAE_Ret _SecDestroyBlackListNumberWnd(void *pCusHandle, void * pWndData);
MAE_Ret _SecCreateBlackListKeywordWnd(void *pWndHandle, void *pWndData, u32 nWndInitParam);
#if defined(__AUTO_ROTATE_DISPLAY__) || defined(__MULTI_THEMES_ENABLED__)
static void _SecConvertBlackListKeywordWnd(SecAppData_t* pThis, void* pWndData);
#endif
MAE_Ret _SecDestroyBlackListKeywordWnd(void *pCusHandle, void * pWndData);
MAE_Ret SecBlackListKeywordWndHdl(void *pCusHandle, const WindowMsg_t *pWndMsg, void *pWndData, u32 nWndInitParam);
MAE_Ret _SecWndBlackListOptionHdl(void *pCusHandle, const WindowMsg_t *pWndMsg, void *pWndData, u32 nWndInitParam);
MAE_Ret _SecDestroyBlackListOptionWnd(void *pCusHandle, void * pWndData);
#if defined(__AUTO_ROTATE_DISPLAY__) || defined(__MULTI_THEMES_ENABLED__)
MAE_Ret _SecConvertBlackListOptionWnd(void *pCusHandle, void * pWndData);
#endif
MAE_Ret _SecWndBlackListKeywordOptionHdl(void *pCusHandle, const WindowMsg_t *pWndMsg, void *pWndData, u32 nWndInitParam);
MAE_Ret _SecDestroyBlackListKeywordOptionWnd(void *pCusHandle, void * pWndData);
#if defined(__AUTO_ROTATE_DISPLAY__) || defined(__MULTI_THEMES_ENABLED__)
MAE_Ret _SecConvertBlackListKeywordOptionWnd(void *pCusHandle, void * pWndData);
#endif
MAE_Ret _SecWndBlackListAddNewHdl(void *pCusHandle, const WindowMsg_t *pWndMsg, void *pWndData, u32 nWndInitParam);
MAE_Ret _SecWndBlackListKeywordAddNewHdl(void *pCusHandle, const WindowMsg_t *pWndMsg, void *pWndData, u32 nWndInitParam);
MAE_Ret SecRecipientLaunchPB(SecAppData_t *pThis);
TextInfo SecGetContentInfo(SecAppData_t* pThis);
static void _SecSMSBlackHandleAppResumeStoppingCB(SecAppData_t *pThis);
void _SecActiveSecurityMenuSMSBlacklistMenuEntry(SecAppData_t* pThis,u32 nEvt,u32 nParam1,u32 nParam2);
void _SecActiveSecurityMenuSMSBlacklistMenuExit(SecAppData_t* pThis,u32 nEvt,u32 nParam1,u32 nParam2);
void SecSettingBlackListMenuSelectCB (void *pApplet, void *pUsrData, WidgetEvtCode_t nEvtCode, HistoryInfo_t *pHistoryInfo, IWidget *pWidget);
void _SecAdaptGetBlackList(WdgDynamicMenuItemPtr_t *pItemDataPtr, HWIN hWin, WdgMenuItemType_e eItemType, IWidget *pMenu, u32 u32Index);
void _SecBlacklistFreeMenuItemData(WdgDynamicMenuItemPtr_t *pItemDataPtr, HWIN hWin, WdgMenuItemType_e eItemType);
void _SecAdaptGetBlackListKeyword(WdgDynamicMenuItemPtr_t *pItemDataPtr, HWIN hWin, WdgMenuItemType_e eItemType, IWidget *pMenu, u32 u32Index);
void _SecBlacklistKeywordFreeMenuItemData(WdgDynamicMenuItemPtr_t *pItemDataPtr, HWIN hWin, WdgMenuItemType_e eItemType);
void _SecViewShowMemberListSoftkeyActCB(void *pApplet, void *pUsrData, WidgetEvtCode_t nEvtCode, HistoryInfo_t *pHistoryInfo, IWidget *pWidget);
void _SecViewShowKeywordListSoftkeyActCB(void *pApplet, void *pUsrData, WidgetEvtCode_t nEvtCode, HistoryInfo_t *pHistoryInfo, IWidget *pWidget);
void _SecBlackListOptionSelectCB (void *pApplet, void *pUsrData, WidgetEvtCode_t nEvtCode, HistoryInfo_t *pHistoryInfo, IWidget *pWidget);
void _SecBlackListKeywordOptionSelectCB (void *pApplet, void *pUsrData, WidgetEvtCode_t nEvtCode, HistoryInfo_t *pHistoryInfo, IWidget *pWidget);
void _SecUpdateMenuItemFlag (IWidget *pMenuWdg, u32 nItemId, u32 ItemFlag);
void _SecPhbGetContactCb(void *pvUserData,
					  MAE_Ret nRspCode,
					  PhoneBookGetContactRecord_t *psRspData,
					  PhoneBookGetContactRspDataFreeCb pfnRspDataFreeCb);
static MAE_Ret _SecBlackListHandleConfirmDialogCB( void *pCusHandle, MAEEvent_t nEvt, u32 param1, u32 param2 );
#endif //__SMSBLACKLIST_MMI__
#ifdef __SEC_NETWORKLOCK__
MAE_Ret _SecGetNextNetworkLockCheckSeq(SecAppData_t *pThis, u32 u32CurrentCheckPoint, SecLockType_e* pENextCheckPoint);
#endif
#endif /* __SecAppData_t_PRIV_H__ */
