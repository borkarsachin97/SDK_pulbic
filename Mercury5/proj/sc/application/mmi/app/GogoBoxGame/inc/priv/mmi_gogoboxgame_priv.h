////////////////////////////////////////////////////////////////////////////////
//
// Copyright (c) 2006-2009 MStar Semiconductor, Inc.
// All rights reserved.
//
// Unless otherwise stipulated in writing, any and all information contained
// herein regardless in any format shall remain the sole proprietary of
// MStar Semiconductor Inc. and be kept in strict confidence
// (¡§MStar Confidential Information¡¨) by the recipient.
// Any unauthorized act including without limitation unauthorized disclosure,
// copying, use, reproduction, sale, distribution, modification, disassembling,
// reverse engineering and compiling of the contents of MStar Confidential
// Information is unlawful and strictly prohibited. MStar hereby reserves the
// rights to any and all damages, losses, costs and expenses resulting therefrom.
//
////////////////////////////////////////////////////////////////////////////////

/**
* @file    mmi_gogoboxgame_priv.h
* @version
* @brief   GogoBoxGame applet private header file
*
*/

#ifndef __MMI_GOGOBOXGAME_PRIV_H__
#define __MMI_GOGOBOXGAME_PRIV_H__

/*=============================================================*/
// Include files
/*=============================================================*/

#include "mmi_baseapplet.h"
#include "mmi_gogoboxgame.h"

#include "melody_data.h"
#include "mmi_srv_audio.h"

#include "GogoBoxGame_resource.h"

#include "mgl_Egl.h"
#include "mgl_Core_Types.h"

#include "Gogobox.h"
//#include "Gogobox_maps.h"

/*=============================================================*/
// Extern definition
/*=============================================================*/

/*=============================================================*/
// Macro definition
/*=============================================================*/
enum 
{
	GOGOBOXGAME_WND_DESKTOP = WND_ID_APP_BASE,
};

enum
{
	GOGOBOXGAME_BG_IMAGEWIDGET = APP_WDG_START,
};
/*=============================================================*/
// Data type definition
/*=============================================================*/

// Generated by Map-Gen
#define GOGOBOX_MAP_X		15
#define GOGOBOX_MAP_Z		11
#define GOGOBOX_MAP_NUM		33

#define FLOOR_TYPE_MASK		0xF00
#define FLOOR_CONNECT_MASk	0x0F0
#define FLOOR_ID_MASK		0x00F

//Macro
#define FloorIsEmpty(x) ((x&FLOOR_TYPE_MASK) == GOGOBOX_FLOOR_TYPE_EMPTY)
#define FloorIsDisconnect(x) ((x&(FLOOR_TYPE_MASK|FLOOR_CONNECT_MASk) ) == GOGOBOX_FLOOR_TYPE_BRIDGE)
#define FloorIsBridge(x) ((x&FLOOR_TYPE_MASK) == GOGOBOX_FLOOR_TYPE_BRIDGE)
#define ToggleHLock(x) ((x&FLOOR_TYPE_MASK) == GOGOBOX_FLOOR_TYPE_HLOCK)
#define ToggleVLock(x) ((x&FLOOR_TYPE_MASK) == GOGOBOX_FLOOR_TYPE_VLOCK)
#define ToggleSoftFloor(x) ((x&FLOOR_TYPE_MASK) == GOGOBOX_FLOOR_TYPE_SOFT)

#define GetBrigdeID(x) (x&FLOOR_ID_MASK)
#define GetBrigdeConnectStatus(x) (x&FLOOR_CONNECT_MASk)
#define GetLockType(x) (x&FLOOR_CONNECT_MASk)

#define ForceBrigdeConnect(x) (x |= GOGOBOX_BRIDGE_TYPE_CONNECT)
#define ForceBrigdeDisconnect(x) (x &= (FLOOR_TYPE_MASK|FLOOR_ID_MASK))

//Enum
enum
{
	GOGOBOX_BOX_TYPE_1SC = 0,		//The box stands on a single cell
	GOGOBOX_BOX_TYPE_2HC,			//The box lies on two neighbouring cells, horizontally
	GOGOBOX_BOX_TYPE_2VC,			//The box lies on two neighbouring cells, vertically
};
typedef mgl_u16 Gogobox_BoxType;

typedef struct
{
	Vertex3D BoxPos;
	Gogobox_BoxType BoxType;
}BoxInfos_t;

typedef struct
{
	Vertex3D FloorView;
	//mgl_u32 Map[GOGOBOX_MAP_Z][GOGOBOX_MAP_X];
	mgl_u16 Map[GOGOBOX_MAP_Z][GOGOBOX_MAP_X];
}FloorInfos_t;

enum
{
	GOGOBOX_MENU_NEWGAME= 0x00,
	GOGOBOX_MENU_CONTINUE,
	GOGOBOX_MENU_MUSIC,
	GOGOBOX_MENU_HELP,
	GOGOBOX_MENU_EXIT,
};


enum
{
	GOGOBOX_ANIM_NONE = 0,
	GOGOBOX_ANIM_FAIL_FALLING,
	GOGOBOX_ANIM_SOFT_FALLING,
	GOGOBOX_ANIM_ROTATION,
	GOGOBOX_ANIM_FOCUS,
	GOGOBOX_ANIM_UNFOCUS,
	GOGOBOX_ANIM_CONNECTBRIDGE,
	GOGOBOX_ANIM_STAGEPAGE,
	GOGOBOX_ANIM_MENU,
	GOGOBOX_ANIM_GAME_END,
	GOGOBOX_SHOW_HELP,
};

enum
{
	GOGOBOX_FALLING_LEFT = 0,
	GOGOBOX_FALLING_RIGHT,
	GOGOBOX_FALLING_UP,
	GOGOBOX_FALLING_DOWN,
};

enum
{
	GOGOBOX_LOCK_TYPE_SWITCH = 0x00,
	GOGOBOX_LOCK_TYPE_ENABLE = 0x10,
	GOGOBOX_LOCK_TYPE_DISABLE = 0x20,
};

enum
{
	GOGOBOX_BRIDGE_TYPE_DISCONNECT = 0x00,
	GOGOBOX_BRIDGE_TYPE_CONNECT = 0x10,
};

enum
{
	GOGOBOX_FALL_NULL = 0,
	GOGOBOX_FALL_1SC_RL_0b,
	GOGOBOX_FALL_1SC_RL_1b,

	GOGOBOX_FALL_2HC_RL_0b,

	GOGOBOX_FALL_2VC_RL_0b,
	GOGOBOX_FALL_2VC_RL_u1b,
	GOGOBOX_FALL_2VC_RL_d1b,


	GOGOBOX_FALL_1SC_UD_0b,
	GOGOBOX_FALL_1SC_UD_1b,

	GOGOBOX_FALL_2VC_UD_0b,

	GOGOBOX_FALL_2HC_UD_0b,
	GOGOBOX_FALL_2HC_UD_r1b,
	GOGOBOX_FALL_2HC_UD_l1b,

};

enum
{
	GOGOBOX_FLOOR_TYPE_EMPTY = 0x000,			//Empty floor : The block can't stand on these anytime.
	GOGOBOX_FLOOR_TYPE_SAFE = 0x100,			//Safe Floor : The block can stand on these anytime.
	GOGOBOX_FLOOR_TYPE_SOFT = 0x200,			//Soft Floor : Weaker than safe tiles. The block may only be safe as "GOGOBOX_BOX_TYPE_2HC" and "GOGOBOX_BOX_TYPE_2HC".
	GOGOBOX_FLOOR_TYPE_VLOCK = 0x300,			//Vertical lock Floor : Locked/Un-locked BridgesID## under "GOGOBOX_BOX_TYPE_1SC".
	GOGOBOX_FLOOR_TYPE_HLOCK = 0x400,			//Horizontal lock Floor : Locked/Un-locked BridgesID## under  "GOGOBOX_BOX_TYPE_2HC" and "GOGOBOX_BOX_TYPE_2HC".
	GOGOBOX_FLOOR_TYPE_BRIDGE = 0x500,			//Horizontal lock Floor : Locked/Un-locked BridgesID## under  "GOGOBOX_BOX_TYPE_2HC" and "GOGOBOX_BOX_TYPE_2HC".
	GOGOBOX_FLOOR_TYPE_GOAL = 0x600,			//Goal floor : needs to be on "GOGOBOX_BOX_TYPE_1SC" status in order to finish the game.
};


/*=============================================================*/
// Variable definition
/*=============================================================*/

typedef struct
{
	APPLET_BASE_ELEMENTS;
	boolean	bTouched;
	u16     u16SceneHandleId;
	s16     s16TextureHandleId;
	u32     nodeID[64];
	s32 nTS_CurrentX, nTS_CurrentY;
	s32 nTS_MoveX, nTS_MoveY;


	float rotx_step, rotz_step;
	float Global_Ystep;
	Vertex2D Jump_step;
	float Shake_step, Shake_left, Shake_right;
	float Floor_Ystep[GOGOBOX_MAP_Z][GOGOBOX_MAP_X];
	T_TEXTURE_ATTR_DATA TexAttri;

	int Index;

	boolean bViewturn;
	float rotX, rotY;
	BoxInfos_t BoxInfo;
	FloorInfos_t FloorInfo;
	u16 u16level;
	u32	u32RotStep;
	u16 u16Amin_type;
	u16 u16MenuItem_type;
	u8	u8KeyPadStatus;
	Vertex3D fRotate_offset;
    boolean bSuspendMode;
    boolean bDraw;
	boolean bMusic;
	boolean bExit;
	boolean bPause;
	boolean bMenuSelect;

#ifndef __G3D_MMI__
	IWidget *pBgImgWdg;
#endif

	int menu_anim;
	//boolean showKeyPad = TRUE;
	u32 cfg_data;
	int current_level;
	boolean bkeypay_used;
#ifdef EVENT_QUEUE
	u32 keyBuf[32];
	u32 idx_st, idx_end;
#endif
	int t_score;
	float y_st;
	float logo_y_pos, logo_z_pos, z_offset, menu_x_pos[5];// = {280, 290, 300, 310, 320};

}GogoboxApp_t;

//
static void LoadGogoboxMap(GogoboxApp_t *pThis);
static void ResetGogoboxView(GogoboxApp_t *pThis);
static void SelectGameLevel(GogoboxApp_t *pThis);
static void ChangeBrigdeStatus(mgl_u32 Lockmode, mgl_u32 BridgeID, GogoboxApp_t *pThis);
mgl_u16 CheckBoxFallingStatus(mgl_u16 fs_type, GogoboxApp_t *pThis);
static mgl_u16 CheckLockandConnectBridge(GogoboxApp_t *pThis);

static MAE_Ret ChecWin(GogoboxApp_t *pThis);

MAE_Ret  GogoboxWdg_Ctor (GogoboxApp_t *pThis);
MAE_Ret  GogoboxWdg_Dtor (GogoboxApp_t *pThis);
boolean  GogoboxWdg_DefHandleEvent (GogoboxApp_t *pWdg, u32 evt, u32 P1, u32 P2);
void     GogoboxWdg_Draw (GogoboxApp_t *pWdg);

MAE_Ret GogoboxWdg_New(void **ppObj);
MAE_Ret GogoboxWdg_Release(void *ppObj);


/*=============================================================*/
// Global function definition
/*=============================================================*/

MAE_Ret GogoBoxGameConstructor(IApplet *pApplet, u32 nEvt, u32 nParam1, u32 nParam2);
MAE_Ret GogoBoxGameDestructor(IApplet *pApplet, u32 nEvt, u32 nParam1, u32 nParam2);
boolean GogoBoxGameStartCb(IApplet *pApplet, u32 nEvt, u32 nParam1, u32 nParam2);
boolean GogoBoxGameStopCb(IApplet *pApplet, u32 nEvt, u32 nParam1, u32 nParam2);
boolean GogoBoxGameIsFOCb(IApplet *pApplet, u32 nEvt, u32 nParam1, u32 nParam2);
boolean GogoBoxGameKeyPressCb(IApplet *pApplet, u32 nEvt, u32 nParam1, u32 nParam2);
boolean GogoBoxGameTSCb(IApplet *pApplet, u32 nEvt, u32 nParam1, u32 nParam2);
//void	GogoBoxGameTimeoutCb(void* pUserData);

boolean GogoBoxGameHookDraw(IApplet *pApplet, u32 nEvt, u32 nParam1, u32 nParam2);
boolean GogoBoxGameIsFullOpaque(IApplet *pApplet, u32 nEvt, u32 nParam1, u32 nParam2);
boolean GogoBoxGameGetInvalidateRect(IApplet *pApplet, u32 u32DisplayInfo, u32 param1, u32 param2);

MAE_Ret GogoBoxWndDesktopHdl(void *pCusHandle, const WindowMsg_t *pWndMsg, void *pWndData, u32 nWndInitParam);
MAE_Ret GogoBoxWndCreate(void *pCusHandle, void *pWndData, u32 nWndInitParam);

#endif /* __MMI_MGLDEMOAPP_PRIV_H__ */
