/**
* @file mmi_calendarapp_priv.h
*
* State Machine Application - CALENDARAPP
* Generated by XFSM v1.0, CodeVer=v0.24
*
* Class Id: CLSID_CALENDARAPP
*
*
* @version $Id: mmi_calendarapp_priv.h 38061 2009-08-19 07:32:12Z darry.huang $
*/
#ifndef __MMI_CALENDARAPP_PRIV_H__
#define __MMI_CALENDARAPP_PRIV_H__

/*---------------------------------pr 0126692 -------------------------------*/
#if defined(__TOUCH_SCREEN_MMI__) && !defined(__WIDGET_DISABLE_FINGERCOMMAND__)
#define __CALENDARAPP_FIGURE_COMMAND_COMMAND_DATE_TIME__
#endif

#include "mmi_mae_common_def.h"
#include "mmi_calendarapp.h"
#include "mmi_baseapplet.h"

/*-------------------------------------------------------------------------*/
#include "mmi_common_dialog_id.h"
#include "mmi_common_vtm.h"

#include "mmi_calendarapp_custom.h"
#include "mmi_messagecenterapp.h"
#include "mmi_srv_header.h"
#include "mmi_alarmsrv.h"

#include "mmi_calendarapp_id.h"
#include "calendarapp_resource.h"
#include "mmi_common_encoding.h"

#if defined (__DLM_INDCALENDAR_MMI__) && defined(__TARGET__) && defined(__arm)
#include "sys_sys_dlm_mgr.h"
#endif

/**
* Constant value definition
*/
#define CALENDAR_IMG_CACHE_SIZE       (10)

/* The auto close timer for the transition effect is 0.5 seconds = 500 miliseconds. */
#define CALENDAR_AUTO_CLOSE_TRANSITION_EFFECT_TIMER 500

#define CALENDAR_DELETE_NEXT_ONE_TIMER 100

#define CALENDAR_MONTHLY_GRID_SIZE 42
#define CALENDAR_WEEKLY_EVENT_ITEM_SIZE 7
#define CALENDAR_PREVIEWLINE_ITEM_SIZE 7
#define CALENDAR_MONTHLY_DAYSTR_MAX_LENGTH 3
#define CALENDAR_MONTHLY_WEEKNUM_MAX_LENGTH 3
#define CALENDAR_EVENT_INDICATOR_BORDERSIZE MAKE_BORDER_SIZE(1, 1, 1, 1)
#define CALENDAR_EVENT_INDICATOR_PADDINGSIZE MAKE_PADDING_SIZE(1, 1, 1, 1)

#define CALENDAR_MAX_EVENT_SIZE 532 /* Subject:100, Location:100, Description:200, StartDateTime:4, EndDateTime:4, Category:4, UID:4, AlarmMode:28, RepeatCycle:88 */

#define CALENDAR_MOVE_FOCUS_DOWN		(1)
#define CALENDAR_MOVE_FOCUS_UP		(-1)

/**
* Enum value definition
*/




/* Type of option menu. */
/*
enum
{
    CALENDAR_OPTIONMENU_MONTHLY_VIEW,
    CALENDAR_OPTIONMENU_WEEKLY_VIEW,
    CALENDAR_OPTIONMENU_DAILY_VIEW,
    CALENDAR_OPTIONMENU_EVENT_LIST,
    CALENDAR_OPTIONMENU_TEXT_ENTRY,
    CALENDAR_OPTIONMENU_SEARCH_EVENT

};
typedef u8 CalendarOptionMenu_e;
*/

/* Mode for mode tree of Calendar application. */
/*
enum
{
    CALENDAR_MODE_MONTHLY_VIEW,
    CALENDAR_MODE_WEEKLY_VIEW,
    CALENDAR_MODE_DAILY_VIEW,
    CALENDAR_MODE_NEW_EVENT,
    CALENDAR_MODE_EDIT_EVENT,
    CALENDAR_MODE_SETTINGS,
    CALENDAR_MODE_EVENT_LIST,
    CALENDAR_MODE_TEXT_ENTRY,
    CALENDAR_MODE_SEARCH_EVENT,
    CALENDAR_MODE_IMPORT_EVENT,
    CALENDAR_MODE_DELETE_REPEAT_SELECT

};
typedef u8 CalendarMode_e;
*/

/* Type of modify range while editing a repeat event. */
enum
{
    CALENDAR_REPEAT_ONE_OCCURRENCE,
    CALENDAR_REPEAT_ALL_OCCURRENCE

};
typedef u8 CalendarRepeat_e;

/* Field ids of a calendar event. */
enum
{
    CALENDAR_FIELD_SUBJECT,
    CALENDAR_FIELD_LOCATION,
    CALENDAR_FIELD_START_DATE,
    CALENDAR_FIELD_START_TIME,
    CALENDAR_FIELD_END_DATE,
    CALENDAR_FIELD_END_TIME,
    CALENDAR_FIELD_UNTIL_DATE,
    CALENDAR_FIELD_ALARM,
    CALENDAR_FIELD_REPEAT,
    CALENDAR_FIELD_DESCRIPTION

};
typedef u8 CalendarEventField_e;

/* Item ids of calendar setting items. */
enum
{
    CALENDAR_SETTINGS_DEFAULT_VIEW,
    CALENDAR_SETTINGS_WEEK_START_DAY,
    CALENDAR_SETTINGS_DAY_START_TIME

};
typedef u8 CalendarSettingsItem_e;

enum
{
	CALENDAR_SELECTION_REPEAT = 0,
	CALENDAR_SELECTION_NOTREPEAT
};
typedef u32 Calendar_Repeat_Selection_e;


/* Type of message to be diaplayed on info dialog or warning dialog. */
enum
{
    CALENDAR_MSG_WRONG_ENTRY,
    CALENDAR_MSG_CREATE_EVENT_FAIL,
    CALENDAR_MSG_UPDATE_EVENT_FAIL,
    CALENDAR_MSG_DELETE_EVENT_FAIL,
    CALENDAR_MSG_IMPORT_EVENT_FAIL,
    CALENDAR_MSG_SAVE_SETTING_FAIL,
    CALENDAR_MSG_NO_EVENTS_THIS_MONTH,
    CALENDAR_MSG_NO_EVENTS_THIS_WEEK,
    CALENDAR_MSG_NO_EVENTS_THIS_DAY,
    CALENDAR_MSG_EXCEED_EVENTS_LIMIT,
    CALENDAR_MSG_STORGE_INSUFFICIENT,
    CALENDAR_MSG_IMPORT_EXCEED_EVENTS_LIMIT,
    CALENDAR_MSG_REACH_ALARM_LIMIT,
    CALENDAR_MSG_EVENT_TIME_NOT_ALLOW,
    CALENDAR_MSG_ALERT_TIME_NOT_ALLOW,
    CALENDAR_MSG_PAST_EVENT,
    CALENDAR_MSG_MEMORY_INSUFFICIENT,
    CALENDAR_MSG_INPUT_CONDITION,
    CALENDAR_MSG_SUBJECT_IS_EMPTY,
    CALENDAR_MSG_IMPORT_EVENT,
    CALENDAR_MSG_NOT_SUPPORT_IMPORT_EVENT,
    CALENDAR_MSG_NOT_SUPPORT_EXPORT_EVENT,
    CALENDAR_MSG_CREATE_EVENT_SUCCESS,
    CALENDAR_MSG_UPDATE_EVENT_SUCCESS,
    CALENDAR_MSG_DELETE_EVENT_SUCCESS,
    CALENDAR_MSG_IMPORT_EVENT_SUCCESS,
    CALENDAR_MSG_SAVE_SETTING_SUCCESS,
    CALENDAR_MSG_EXCEPTION_LOST,

};
typedef u8 CalendarMsg_e;

/* To indicate the current switch direction for switch button widget. */
enum
{
    CALENDAR_SWITCH_NONE, /* Default value. */
    CALENDAR_SWITCH_PREVIOUS, /* Switch to previous month, week, or day. */
    CALENDAR_SWITCH_NEXT /* Switch to next month, week, or day. */

};
typedef u8 CalendarSwitchDirection_e;

/**
* Object structure definition
*/

/* This data structure is used to pass the values of field name, event type, or event uid together. */
typedef struct
{
    CalendarEventField_e eFieldName;
    u32 nOtherInfo; /* May be event type or event uid. */

} CalendarFieldData_t;

/* This data structure is used to pass the value of a focused date and the type of date range together. */
typedef struct
{
    MAE_DateTime_t stDelEvtsDate;
    CalendarDelEvtsType_e eDelEvtsType;

} CalendarDelEvtsData_t;

/* This data structure is used to keep the temporary field values of the new event view or edit event view. */
typedef struct
{
    MAE_WChar *pSubject;
    MAE_WChar *pLocation;
    MAE_WChar *pDescription;
    MAE_DateTime_t *pStartDateTime;
    MAE_DateTime_t *pEndDateTime;
	MAE_DateTime_t *pUntilDateTime;
    CalendarAlarmMode_e eAlarmMode;
    VCALFrequency_e eRepeatCycle;

} CalendarEventEntryTmpInfo_t;

/* This data structure is used to keep the temporary field values of the settings view. */
typedef struct
{
    CalInitialView_e eInitialView;
    u8 nWeekStartDay;
} CalendarSettingsTmpInfo_t;

typedef struct
{
    u32 nFirstDayWeekDay; /* The week day of first day of the current month. */
    u32 nLastMonthNumDays; /* The number of days of the last month. */
    u32 nCurrrentMonthNumDays; /* The number of days of the current month. */

} CurrentMonthInfo_t;

/* This data structure is used to keep the data for displaying a grid item of the monthly grid. */
/*
typedef struct
{
	MAE_WChar aDayStr[CALENDAR_MONTHLY_DAYSTR_MAX_LENGTH];
    boolean bDayInCurrentMonth;
    boolean bIsToday;
    boolean bDrawIndicator;

} MonthlyGridItem_t;
*/

/* This data structure is used to keep the data for displaying a preview item of the event preview line. */
typedef struct
{
    ImageTextInfo *pImageTextInfo;
    MAE_WChar *pCountStr;

} EventPreviewItem_t;

typedef struct
{
	IWidget *pPreviewItemImageTextWdg;
	IWidget *pPreviewCountTextWdg;
	ArrayClass_t *pPreviewLineListData;
	u32 nPreviewItemIndex;

} EventPreviewLineInfo_t;

/* This data structure is used to store the basic information of an event. */
typedef struct
{
    IWidget *pIEventWidget;
    EvtTime_t tStartTime;
    EvtTime_t tEndTime;
    u32 nEventUID;
    u32 nOverlapCount; /* The number of overlap events belongs to an event indicator. */

} BasicEventInfo_t;

/* This data structure is used to store the information of an event to be displayed on the weekly view. */
typedef BasicEventInfo_t WeeklyEventInfo_t;

/* This data structure is used to store the information of an event to be displayed on the daily view. */
typedef struct
{
	BasicEventInfo_t stEventInfo;
	MAE_WChar *pSummary;
	u32 nStartDateTimeSecs;
	u32 nEndDateTimeSecs;
    boolean bAlarmExist;

} DailyEventInfo_t;

/* This data structure is used for temporarily keeping the variable values of the calendar event list view. */
typedef struct
{
    ArrayClass_t *pArray;
    MenuWdgList_t eventListMenu;
} CalendarEventListWndData_t;

/* This data structure is used to pass the parameter for create a new event. */
typedef struct
{
    CalendarEvent_t *pCalendarEvent;
    VCALCategory_e eCategory;

} CalendarNewEventParamData_t;

#ifdef __INDIAN_CALENDAR__
typedef struct
{
    IWidget *pIMenuWdg;
} CalendarFestivalListWndData_t;

typedef struct
{
    IWidget *pIMenuWdg;
} CalendarTithiListWndData_t;

typedef struct
{
    PopUpInfoWdgList_t tWdgList;
    u32 Year;
    u16 festival_enum;
} CalendarFestivalListPopUpWndData_t;

typedef struct
{
    PopUpInfoWdgList_t tWdgList;
    u32 Year;
    u32 Month;
    u32 Day;
    u32 eLeapType;
    MAE_DateTime_t tWestDate;
} CalendarTithiDetailPopUpWndData_t;

#endif


enum
{
	CALENDAR_MONTHLYVIEW_MAIN_ABSCONTAINER = APP_WDG_START,
#ifndef __CALENDARAPP_SMALLROM__
	CALENDAR_MONTHLYVIEW_MONTHLYGRID_BG_IMAGEWIDGET,
#else
	CALENDAR_MONTHLYVIEW_TOPBG_TEXTWIDGET,
	CALENDAR_MONTHLYVIEW_BOTTOMBG_TEXTWIDGET,
	CALENDAR_MONTHLYVIEW_GIRDBG_TEXTWIDGET,
#endif
	CALENDAR_MONTHLYVIEW_PREVIOUSMONTH_BUTTONWIDGET,
	CALENDAR_MONTHLYVIEW_FOCUSDAY_TEXTWIDGET,
	CALENDAR_MONTHLYVIEW_NEXTMONTH_BUTTONWIDGET,
	CALENDAR_MONTHLYVIEW_LUNARINFO_TEXTWIDGET,
	CALENDAR_MONTHLYVIEW_INDIANINFO_TEXTWIDGET,
	CALENDAR_MONTHLYVIEW_WEEKDAY_PROPCONTAINER,
	CALENDAR_MONTHLYVIEW_WEEK_TEXTWIDGET,
	CALENDAR_MONTHLYVIEW_WEEKDAY_LISTWIDGET,
	CALENDAR_MONTHLYVIEW_MONTHLYGRID_PROPCONTAINER,
	CALENDAR_MONTHLYVIEW_WEEKNUM_LISTWIDGET,
	CALENDAR_MONTHLYVIEW_MONTHLYGRID_GRIDWIDGET,
	CALENDAR_MONTHLYVIEW_PREVIEWLINE_ABSCONTAINER,
	CALENDAR_MONTHLYVIEW_PREVIEWITEM_IMAGETEXTWIDGET,
	CALENDAR_MONTHLYVIEW_PREVIEWCOUNT_TEXTWIDGET
};

typedef struct
{
	IWidget *pMainAbsContainer;
#ifdef __CALENDARAPP_SMALLROM__
	IWidget *pMonthlyTopBGTextWdg;
	IWidget *pMonthlyBottomBGTextWdg;
	IWidget *pMonthlyGirdBGTextWdg;
#else
	IWidget *pMonthlyGridBgImageWdg;
#endif
	IWidget *pPreviousMonthButtonWdg;
	IWidget *pFocusDayTextWdg;
	IWidget *pNextMonthButtonWdg;
	IWidget *pLunarInfoTextWdg;
#ifdef __INDIAN_CALENDAR__
	IWidget *pIndianInfoTextWdg;
#endif
	IWidget *pWeekDayPropContainer;
	IWidget *pWeekTextWdg;
	IWidget *pWeekDayListWdg;
	IWidget *pWeekDayItemTextWdg;
	IWidget *pMonthlyGridPropContainer;
	IWidget *pWeekNumListWdg;
	IWidget *pWeekNumItemTextWdg;
	IWidget *pMonthlyGridGridWdg;
	IWidget *pDayNumTextWdg;
	IWidget *pPreviewLineAbsContainer;
    IWidget *pFadeOutWdg;

}CalendarMonthlyViewWndWdgList_t;

/* This data structure is used for temporarily keeping the variable values of the calendar monthly view. */
typedef struct
{
	CalendarMonthlyViewWndWdgList_t tWdgList;
	ArrayClass_t *pMonthlyGridData;
	ArrayClass_t *pWeekNumListData;
    VectorClass_t *pIWeekDayListData;
    WidgetHandler_t tGridWidgetHandler;
    CurrentMonthInfo_t *pCurrentMonthInfo;
    u32 nWeekStartDay;
	EventPreviewLineInfo_t tPreviewLineInfo;

} CalendarMonthlyViewWndData_t;


enum
{
	CALENDAR_WEEKLYVIEW_MAIN_ABSCONTAINER = APP_WDG_START,
#ifndef __CALENDARAPP_SMALLROM__
	CALENDAR_WEEKLYVIEW_TIMESLOT_BG_IMAGEWIDGET,

#else
	CALENDAR_WEEKLYVIEW_TIMESLOT_BG_TEXTWIDGET,
	CALENDAR_WEEKLYVIEW_WEEKDAY_IBITMAPWIDGET,
#endif
	CALENDAR_WEEKLYVIEW_PREVIOUSWEEK_BUTTONWIDGET,
	CALENDAR_WEEKLYVIEW_FOCUSDAY_TEXTWIDGET,
	CALENDAR_WEEKLYVIEW_NEXTWEEK_BUTTONWIDGET,
	CALENDAR_WEEKLYVIEW_PERVIOUSHOUR_BUTTONWIDGET,
	CALENDAR_WEEKLYVIEW_NEXTHOUR_BUTTONWIDGET,
	CALENDAR_WEEKLYVIEW_LUNARINFO_TEXTWIDGET,
    CALENDAR_WEEKLYVIEW_INDIANINFO_TEXTWIDGET,
	CALENDAR_WEEKLYVIEW_WEEKDAY_HIGHLIGHTBAR_BITMAPWIDGET,
	CALENDAR_WEEKLYVIEW_CONTENT_ABSCONTAINER,
	CALENDAR_WEEKLYVIEW_EVENTS_ABSCONTAINER,
	CALENDAR_WEEKLYVIEW_TIMESLOT_LISTWIDGET,
	CALENDAR_WEEKLYVIEW_WEEKDAY_LISTWIDGET,
	CALENDAR_WEEKLYVIEW_PREVIEWLINE_ABSCONTAINER,
	CALENDAR_WEEKLYVIEW_PREVIEWITEM_IMAGETEXTWIDGET,
	CALENDAR_WEEKLYVIEW_PREVIEWCOUNT_TEXTWIDGET
};

typedef struct
{
	IWidget *pMainAbsContainer;
#ifndef __CALENDARAPP_SMALLROM__
	IWidget *pTimeSlotBgImageWdg;
#else
	IWidget *pTimeSlotBgTextWdg;
	IWidget *pBitmapImageWdg;
#endif
	IWidget *pPreviousWeekButtonWdg;
	IWidget *pFocusDayTextWdg;
	IWidget *pNextWeekButtonWdg;
        IWidget *pPreviousHourButtonWdg;
        IWidget *pNextHourButtonWdg;
	IWidget *pLunarInfoTextWdg;
#ifdef __INDIAN_CALENDAR__
	IWidget *pIndianInfoTextWdg;
#endif
	IWidget *pWeekDayHighlightBarBitmapWdg;
	IWidget *pContentAbsContainer;
	IWidget *pEventsAbsContainer;
	IWidget *pPreviewLineAbsContainer;
	IWidget *pTimeSlotListWdg;
	IWidget *pTimeSlotHourTextWdg;
	IWidget *pWeekDayListWdg;
	IWidget *pWeekDayNumTextWdg;
	IWidget *pWeekDayDummyTextWdg;
    IWidget *pFadeOutWdg;

}CalendarWeeklyViewWndWdgList_t;

/* This data structure is used for temporarily keeping the variable values of the calendar weekly view. */
typedef struct
{
	CalendarWeeklyViewWndWdgList_t tWdgList;
    VectorClass_t *pIWeekDayListData;
	ArrayClass_t *pTimeSlotListData;
	VectorClass_t *pWeekEventsData;
    WidgetHandler_t tContainerWidgetHandler;
    u32 nWeekStartDay;
	u32 nWeekEvtIndex[COMMON_DAYS_PER_WEEK + 1];
	EventPreviewLineInfo_t tPreviewLineInfo;

} CalendarWeeklyViewWndData_t;


enum
{
	CALENDAR_DAILYVIEW_MAIN_ABSCONTAINER = APP_WDG_START,
#ifndef __CALENDARAPP_SMALLROM__
	CALENDAR_DAILYVIEW_TIMESLOT_BG_IMAGEWIDGET,
#else
	CALENDAR_DAILYVIEW_TIMESLOT_BG_BITMAPWIDGET,
#endif
	CALENDAR_DAILYVIEW_PREVIOUSDAY_BUTTONWIDGET,
	CALENDAR_DAILYVIEW_FOCUSDAY_TEXTWIDGET,
	CALENDAR_DAILYVIEW_NEXTDAY_BUTTONWIDGET,
	CALENDAR_DAILYVIEW_PERVIOUSHOUR_BUTTONWIDGET,
	CALENDAR_DAILYVIEW_NEXTHOUR_BUTTONWIDGET,
	CALENDAR_DAILYVIEW_PREVIEWLINE_ABSCONTAINER,
	CALENDAR_DAILYVIEW_PREVIEWITEM_IMAGETEXTWIDGET,
	CALENDAR_DAILYVIEW_PREVIEWCOUNT_TEXTWIDGET,
	CALENDAR_DAILYVIEW_CONTENT_ABSCONTAINER,
	CALENDAR_DAILYVIEW_EVENTS_ABSCONTAINER,
	CALENDAR_DAILYVIEW_TIMESLOT_LISTWIDGET
};

typedef struct
{
	IWidget *pMainAbsContainer;
#ifndef __CALENDARAPP_SMALLROM__
	IWidget *pTimeSlotBgImageWdg;
#else
	IWidget *pDailyBitmapWdg;
#endif
	IWidget *pPreviousDayButtonWdg;
	IWidget *pFocusDayTextWdg;
	IWidget *pNextDayButtonWdg;
	IWidget *pPreviousHourButtonWdg;
	IWidget *pNextHourButtonWdg;
	IWidget *pPreviewLineAbsContainer;
	IWidget *pContentAbsContainer;
	IWidget *pEventsAbsContainer;
	IWidget *pTimeSlotListWdg;
	IWidget *pTimeSlotHourTextWdg;
	IWidget *pTimeSlotDummyTextWdg;
    IWidget *pFadeOutWdg;

} CalendarDailyViewWndWdgList_t;

/* This data structure is used for temporarily keeping the variable values of the calendar daily view. */
typedef struct
{
	CalendarDailyViewWndWdgList_t tWdgList;
	ArrayClass_t *pTimeSlotListData;
    VectorClass_t *pDayEventsData;
    WidgetHandler_t tContainerWidgetHandler;
    u32 nFocusEvent_StartDateTimeSecs;
    u32 nFocusEvent_EndDateTimeSecs;
	EventPreviewLineInfo_t tPreviewLineInfo;

} CalendarDailyViewWndData_t;


enum
{
	CALENDAR_EVENTENTRY_SCROLLBARWIDGET = APP_WDG_START,
	CALENDAR_EVENTENTRY_MFLCONTAINER,
	CALENDAR_EVENTENTRY_SUBJECT_DOUBLETEXTWIDGET,
	CALENDAR_EVENTENTRY_LOCATION_DOUBLETEXTWIDGET,
	CALENDAR_EVENTENTRY_REPEAT_LINE2INFOPICKWIDGET,
	CALENDAR_EVENTENTRY_STARTDATE_TEXTDATEWIDGET,
	CALENDAR_EVENTENTRY_STARTTIME_TEXTTIMEWIDGET,
	CALENDAR_EVENTENTRY_ENDDATE_TEXTDATEWIDGET,
	CALENDAR_EVENTENTRY_ENDTIME_TEXTTIMEWIDGET,
	CALENDAR_EVENTENTRY_UNTILDATE_TEXTDATEWIDGET,
	CALENDAR_EVENTENTRY_ALARM_LINE2INFOPICKWIDGET,
	CALENDAR_EVENTENTRY_DESCRIPTION_DOUBLETEXTWIDGET
};

typedef struct
{
	IWidget *pScrollBarWdg;
	IWidget *pMflContainer;
	IWidget *pSubjectWdg;
	IWidget *pLocationWdg;
	IWidget *pRepeatWdg;
	IWidget *pStartDateWdg;
	IWidget *pStartTimeWdg;
	IWidget *pEndDateWdg;
	IWidget *pEndTimeWdg;
	IWidget *pUntilDateWdg;
	IWidget *pAlarmWdg;
	IWidget *pDescriptionWdg;

} CalendarEventEntryWndWdgList_t;

/* This data structure is used for temporarily keeping the variable values of the calendar new event or edit event view. */
typedef struct
{
	CalendarEventEntryWndWdgList_t tWdgList;
	CalendarEvent_t *pCalendarEvent;
	u32 nEventUID; // The uid of an event passed from daily view, event list view or edit repeat occurrence selection view.
	s64 nStartEndDateTimeDiff;
	VCALCategory_e eCategory; // The category of an event for determining the fields to be displayed when create or edit an event.
	MAE_WndId nModeType; // Used for distinguish the event entry view is opened for new event or edit event.
	boolean bEditOneOccurrence; // A boolean value passed from the edit repeat occurrence selection view for indicating a edit one occurrence operation of a repeat event.

} CalendarEventEntryWndData_t;


enum
{
	CALENDAR_VIEWEVENT_SCROLLBARWIDGET = APP_WDG_START,
	CALENDAR_VIEWEVENT_VIEWPORTWIDGET,
	CALENDAR_VIEWEVENT_PROPCONTAINER,
	CALENDAR_VIEWEVENT_SUBJECT_TEXTWIDGET,
	CALENDAR_VIEWEVENT_LOCATION_TEXTWIDGET,
	CALENDAR_VIEWEVENT_REPEAT_TEXTWIDGET,
	CALENDAR_VIEWEVENT_STARTDATE_TEXTWIDGET,
	CALENDAR_VIEWEVENT_STARTTIME_TEXTWIDGET,
	CALENDAR_VIEWEVENT_ENDDATE_TEXTWIDGET,
	CALENDAR_VIEWEVENT_ENDTIME_TEXTWIDGET,
	CALENDAR_VIEWEVENT_UNTILDATE_TEXTWIDGET,
	CALENDAR_VIEWEVENT_ALARM_TEXTWIDGET,
	CALENDAR_VIEWEVENT_DESCRIPTION_TEXTWIDGET
};

typedef struct
{
    u32 nEventUID; // The uid of an event passed from daily view, event list view or edit repeat occurrence selection view.
    VCALCategory_e eCategory; // The category of an event for determining the fields to be displayed when create or edit an event.
    IWidget *pVtmInputTextWdg; // The Input Text Widget of VTM to show the content of event
} CalendarViewEventWndData_t;


enum
{
    CALENDAR_SETTINGS_TITLEWIDGET = APP_WDG_START,
    CALENDAR_SETTINGS_MFLCONTAINER,
    CALENDAR_SETTINGS_DEFAULTVIEW_LINE2INFOPICKWIDGET,
    CALENDAR_SETTINGS_WEEKSTARTDAY_LINE2INFOPICKWIDGET
};

typedef struct
{
    IWidget *pDefaultViewWdg;
    IWidget *pWeekStartDayWdg;
    IWidget *pMflContainer;
} CalendarSettingsWndWdgList_t;

typedef struct
{
	CalendarSettingsWndWdgList_t tWdgList;

} CalendarSettingsWndData_t;

#ifndef __CALENDARAPP_FIGURE_COMMAND_COMMAND_DATE_TIME__
enum
{
    CALENDARAPP_GOTODATE_MFLCONTAINER = APP_WDG_START,
    CALENDARAPP_GOTODATE_TEXT_DATE_WIDGET,
};
#endif

/* This data structure is used for temporarily keeping the variable values of the calendar edit repeat range selection view. */
typedef struct
{
    u32 nStartDateTimeSecs; // The start date time in seconds for the one occurrence of a repeat event.
    u32 nEndDateTimeSecs; // The end date time in seconds for the one occurrence of a repeat event.

} CalendarSelectRepeatCycleWndData_t;

/* This data structure is used for temporarily keeping the variable values of the calendar delete processing view. */
typedef struct
{
    u32 nTotalCount; /* The total number of events wait for deleting. */
    u32 nDeleteIndex;
    u32 nStartDateTime; /* The start date time of the search date range for querying event. */
    u32 nEndDateTime; /* The end date time of the search date range for querying event. */
    ArrayClass_t *pArray;

} CalendarDeleteProcessing_t;

typedef struct
{
	IImage *pImages;
	u32     ImgID;
} CalendarImgCache_t;
/*-------------------------------------------------------------------------*/

/**
 * Application structure
 */
typedef struct MMI_CALENDARAPP_TAG {
	APPLET_BASE_ELEMENTS;

    /* Add custom fields below */
    MAE_WChar *pKeyword; // For temporarily keeping the search keyword.
    MAE_WChar *pInputText; // For temporarily keeping the input text of Subject/Description/Location.
    MAE_DateTime_t *pFocusDate;
    u16 nMaxYear;
    u16 nMinYear;
	CalendarDeleteProcessing_t *pCalendarDeleteProcessing;
    CalendarDelEvtsData_t *pCalDelEvtsData; // Contain the delete range and the delete confirm message to be displayed.
    CalendarFieldData_t *pCalFieldData; // Contain the focused field name and the field value to be passed to the radio selection view.
    CalendarEventEntryTmpInfo_t *pCalEventEntryTmpInfo;
    CalendarSettingsTmpInfo_t *pCalSettingsTmpInfo;
    EvtTime_t *pGroupStartTime; // Keep the start time for group events.
    EvtTime_t *pGroupEndTime; // Keep the end time for group events.
    CalendarImgCache_t stImgCache[CALENDAR_IMG_CACHE_SIZE];
    ScrollData_t tScrollData;
	CalendarAppExportEventRspCbInfo_t tRspInfo; //UrlSrvUrlRspInfo_t
    MAE_EventId evt;
    u32 nKeyCode;
    u32 nEventUID; // The uid of a repeat event passed from daily view or event list view.
    MAE_WChar* pFileUrl; // The URL of the vCal file to be imported.
    u32 nFocusIndex; // The focused field index of the settings view.
    u32 nFocusSlotIndex; // The focused time slot index of the daily view or weekly view.
    u32 nFocusEventIndex; // The focused event index of the daily view.
    u32 nHighlightedIndex; // The highlighted index of the event list view.
    MAE_WndId nDailyViewPrevWndId; // Keep the previous scen for "DailyView" scen which is used when scen mgr want to jump from current scen back to previous scen.
    MAE_WndId nGeneralPrevWndId; // Keep the previous scen for "SelectEventType", "NewEvent", "EditRepeatSelect", "EditEvent", "GoToDate", "Settings", "DeleteRepeatSelect", "DeleteConfirmDialog", "DeleteAllconfirmDialog", "DeleteBefore", "DeleteProcessing", "EventList", "MemoryDetails", "SendEvent", "SearchEvent" scen which is used when scen mgr want to jump from current scen back to previous scen.
    MAE_WndId nTextPickPrevWndId; // Keep the previous scen for "InputText" and "SelectMenu" scen which is used when scen mgr want to jump from current scen back to previous scen.
    MAE_WndId nEventListPrevWndId; // Keep the previous scen for "EventList" mode which is used when scen mgr want to jump from current scen back to previous scen.
    CalendarExportFormat_e eExportFormat; // Indicate the export format of calendar event.
    CalendarSwitchDirection_e eSwitchDirection; // Indicate the switch direction for switch button widget.
    SetPhoneTimeFormat_e eTimeFormat;
#ifdef __LUNAR_CALENDAR_MMI__
    SetOnOff_e eLunarCalendar;
#endif
    boolean bEmbeddedMode; // Indicate whether the Calendar application is in embedded mode.
    boolean bFocusOnEvent; // Indicate whether the focus is on an event for daily view.
    boolean bIsDialogPopup; // Indicate the status of warning dialog or info dialog.
    boolean bIsConfirmDialogPopup; // Indicate the status of confirm dialog.
    boolean bIsTransitionEffect; // Indicate the status of transition effect is on or off.
    boolean bIsUpdateView; // Indicate whether or not the view data need to be updated.
    boolean bIsUpdateByDelete; // Force the specified calendar view data to update view data after deleting events.

    OptionMenuWdgList_t optionMenuWdgList; // the widget list of current window
    DateInputWdgList_t toTheDay; // go to a specified day in monthly or weekly view
    PopUpInfoWdgList_t memoryDetail;
    PopUpSelectWdgList_t selectWdgList;
    InputVtmWdgList_t inputWdgList;
	MMI_Common_Location_Type_e eLocType;
} MMI_CALENDARAPP;

/*-------------------------------------------------------------------------*/
MAE_Ret CalendarConstructor(IApplet *pApplet, u32 evt, u32 param1, u32 param2);
MAE_Ret CalendarDestructor(IApplet *pApplet, u32 evt, u32 param1, u32 param2);
boolean CalendarStartCB(IApplet *pApplet, u32 evt, u32 param1, u32 param2);
boolean CalendarStopCB(IApplet *pApplet, u32 evt, u32 param1, u32 param2);
boolean CalendarSuspendCB(IApplet *pApplet, u32 evt, u32 param1, u32 param2);
boolean CalendarResumeCB(IApplet *pApplet, u32 evt, u32 param1, u32 param2);
boolean CalendarPreHookCB(IApplet *pApplet, u32 evt, u32 nParam1, u32 nParam2);
boolean CalendarEmbeddedAppCloseCB(IApplet *pApplet, u32 evt, u32 param1, u32 param2);
boolean CalendarKeyPressCB(IApplet *pApplet, u32 evt, u32 param1, u32 param2);
boolean CalendarKeyRepeatCB(IApplet *pApplet, u32 evt, u32 param1, u32 param2);
boolean CalendarTouchLeftCB(IApplet *pApplet, u32 evt, u32 param1, u32 param2);
boolean CalendarTouchRightCB(IApplet *pApplet, u32 evt, u32 param1, u32 param2);

MAE_Ret CalendarWndMonthlyViewHdl(void *pCusHandle, const WindowMsg_t *pWndMsg, void *pWndData, u32 nWndInitParam);
MAE_Ret CalendarWndWeeklyViewHdl(void *pCusHandle, const WindowMsg_t *pWndMsg, void *pWndData, u32 nWndInitParam);
MAE_Ret CalendarWndDailyViewHdl(void *pCusHandle, const WindowMsg_t *pWndMsg, void *pWndData, u32 nWndInitParam);
MAE_Ret CalendarWndNewEventHdl(void *pCusHandle, const WindowMsg_t *pWndMsg, void *pWndData, u32 nWndInitParam);
MAE_Ret CalendarWndEditEventHdl(void *pCusHandle, const WindowMsg_t *pWndMsg, void *pWndData, u32 nWndInitParam);
MAE_Ret CalendarWndGoToDateHdl(void *pCusHandle, const WindowMsg_t *pWndMsg, void *pWndData, u32 nWndInitParam);
MAE_Ret CalendarWndSettingsHdl(void *pCusHandle, const WindowMsg_t *pWndMsg, void *pWndData, u32 nWndInitParam);
MAE_Ret CalendarWndEventListHdl(void *pCusHandle, const WindowMsg_t *pWndMsg, void *pWndData, u32 nWndInitParam);
MAE_Ret CalendarWndMemoryDetailsHdl(void *pCusHandle, const WindowMsg_t *pWndMsg, void *pWndData, u32 nWndInitParam);
#ifdef __CALENDARAPP_SEARCH_MMI__
MAE_Ret CalendarWndSearchEventHdl(void *pCusHandle, const WindowMsg_t *pWndMsg, void *pWndData, u32 nWndInitParam);
#endif // End of __CALENDARAPP_SEARCH_MMI__
MAE_Ret CalendarWndViewEventHdl(void *pCusHandle, const WindowMsg_t *pWndMsg, void *pWndData, u32 nWndInitParam);
MAE_Ret CalendarWndInputTextHdl(void *pCusHandle, const WindowMsg_t *pWndMsg, void *pWndData, u32 nWndInitParam);
MAE_Ret CalendarWndSelectMenuHdl(void *pCusHandle, const WindowMsg_t *pWndMsg, void *pWndData, u32 nWndInitParam);
MAE_Ret CalendarWndSelectEventTypeHdl(void *pCusHandle, const WindowMsg_t *pWndMsg, void *pWndData, u32 nWndInitParam);
MAE_Ret CalendarWndEditRepeatEventHdl(void *pCusHandle, const WindowMsg_t *pWndMsg, void *pWndData, u32 nWndInitParam);
MAE_Ret CalendarWndDeleteRepeatEventHdl(void *pCusHandle, const WindowMsg_t *pWndMsg, void *pWndData, u32 nWndInitParam);
MAE_Ret CalendarWndDeleteBeforeHdl(void *pCusHandle, const WindowMsg_t *pWndMsg, void *pWndData, u32 nWndInitParam);
MAE_Ret CalendarWndDeleteProcessingHdl(void *pCusHandle, const WindowMsg_t *pWndMsg, void *pWndData, u32 nWndInitParam);
MAE_Ret CalendarWndOptionMenuHdl(void *pCusHandle, const WindowMsg_t *pWndMsg, void *pWndData, u32 nWndInitParam);

MAE_Ret _CalendarWndCreateMonthlyView(void *pCusHandle, void *pWndData, u32 nWndInitParam);
MAE_Ret _CalendarWndShowMonthlyView(void *pCusHandle, void *pWndData);
MAE_Ret _CalendarWndSetMonthlyView(void *pCusHandle, void *pWndData);
MAE_Ret _CalendarWndHideMonthlyView(void *pCusHandle, void *pWndData);
MAE_Ret _CalendarWndDestroyMonthlyView(void *pCusHandle, void *pWndData);
MAE_Ret _CalendarWndCreateWeeklyView(void *pCusHandle, void *pWndData, u32 nWndInitParam);
MAE_Ret _CalendarWndSetWeeklyView(void *pCusHandle, void *pWndData);
MAE_Ret _CalendarWndShowWeeklyView(void *pCusHandle, void *pWndData);
MAE_Ret _CalendarWndHideWeeklyView(void *pCusHandle, void *pWndData);
MAE_Ret _CalendarWndDestroyWeeklyView(void *pCusHandle, void *pWndData);
MAE_Ret _CalendarWndCreateDailyView(void *pCusHandle, void *pWndData, u32 nWndInitParam);
MAE_Ret _CalendarWndSetDailyView(void *pCusHandle, void *pWndData);
MAE_Ret _CalendarWndShowDailyView(void *pCusHandle, void *pWndData);
MAE_Ret _CalendarWndHideDailyView(void *pCusHandle, void *pWndData);
MAE_Ret _CalendarWndDestroyDailyView(void *pCusHandle, void *pWndData);
MAE_Ret _CalendarWndCreateNewEvent(void *pCusHandle, void *pWndData, u32 nWndInitParam);
MAE_Ret _CalendarWndShowNewEvent(void *pCusHandle, void *pWndData);
MAE_Ret _CalendarWndSetNewEvent(void *pCusHandle, void *pWndData);
MAE_Ret _CalendarWndHideNewEvent(void *pCusHandle, void *pWndData);
MAE_Ret _CalendarWndDestroyNewEvent(void *pCusHandle, void *pWndData);
MAE_Ret _CalendarWndCreateEditEvent(void *pCusHandle, void *pWndData, u32 nWndInitParam);
MAE_Ret _CalendarWndShowEditEvent(void *pCusHandle, void *pWndData);
MAE_Ret _CalendarWndSetEditEvent(void *pCusHandle, void *pWndData);
MAE_Ret _CalendarWndHideEditEvent(void *pCusHandle, void *pWndData);
MAE_Ret _CalendarWndDestroyEditEvent(void *pCusHandle, void *pWndData);
MAE_Ret _CalendarWndCreateGoToDate(void *pCusHandle, void *pWndData, u32 nWndInitParam);
MAE_Ret _CalendarWndShowGoToDate(void *pCusHandle, void *pWndData);
MAE_Ret _CalendarWndHideGoToDate(void *pCusHandle, void *pWndData);
MAE_Ret _CalendarWndDestroyGoToDate(void *pCusHandle, void *pWndData);
MAE_Ret _CalendarWndCreateSettings(void *pCusHandle, void *pWndData, u32 nWndInitParam);
MAE_Ret _CalendarWndShowSettings(void *pCusHandle, void *pWndData);
MAE_Ret _CalendarWndHideSettings(void *pCusHandle, void *pWndData);
MAE_Ret _CalendarWndDestroySettings(void *pCusHandle, void *pWndData);
MAE_Ret _CalendarWndConvertSettings(void *pCusHandle, void *pWndData);
MAE_Ret _CalendarWndCreateEventList(void *pCusHandle, void *pWndData, u32 nWndInitParam);
MAE_Ret _CalendarWndShowEventList(void *pCusHandle, void *pWndData);
MAE_Ret _CalendarWndHideEventList(void *pCusHandle, void *pWndData);
MAE_Ret _CalendarWndDestroyEventList(void *pCusHandle, void *pWndData);
MAE_Ret _CalendarWndCreateMemoryDetails(void *pCusHandle, void *pWndData, u32 nWndInitParam);
MAE_Ret _CalendarWndShowMemoryDetails(void *pCusHandle, void *pWndData);
MAE_Ret _CalendarWndHideMemoryDetails(void *pCusHandle, void *pWndData);
MAE_Ret _CalendarWndDestroyMemoryDetails(void *pCusHandle, void *pWndData);
MAE_Ret _CalendarWndCreateSearchEvent(void *pCusHandle, void *pWndData, u32 nWndInitParam);
MAE_Ret _CalendarWndShowSearchEvent(void *pCusHandle, void *pWndData);
MAE_Ret _CalendarWndHideSearchEvent(void *pCusHandle, void *pWndData);
MAE_Ret _CalendarWndDestroySearchEvent(void *pCusHandle, void *pWndData);
MAE_Ret _CalendarWndCreateViewEvent(void *pCusHandle, void *pWndData, u32 nWndInitParam);
MAE_Ret _CalendarWndShowViewEvent(void *pCusHandle, void *pWndData);
MAE_Ret _CalendarWndHideViewEvent(void *pCusHandle, void *pWndData);
MAE_Ret _CalendarWndDestroyViewEvent(void *pCusHandle, void *pWndData);
MAE_Ret _CalendarWndCreateInputText(void *pCusHandle, void *pWndData, u32 nWndInitParam);
MAE_Ret _CalendarWndShowInputText(void *pCusHandle, void *pWndData);
MAE_Ret _CalendarWndHideInputText(void *pCusHandle, void *pWndData);
MAE_Ret _CalendarWndDestroyInputText(void *pCusHandle, void *pWndData);
MAE_Ret _CalendarWndCreateSelectMenu(void *pCusHandle, void *pWndData, u32 nWndInitParam);
MAE_Ret _CalendarWndShowSelectMenu(void *pCusHandle, void *pWndData);
MAE_Ret _CalendarWndHideSelectMenu(void *pCusHandle, void *pWndData);
MAE_Ret _CalendarWndDestroySelectMenu(void *pCusHandle, void *pWndData);
MAE_Ret _CalendarWndCreateSelectEventType(void *pCusHandle, void *pWndData, u32 nWndInitParam);
MAE_Ret _CalendarWndShowSelectEventType(void *pCusHandle, void *pWndData);
MAE_Ret _CalendarWndHideSelectEventType(void *pCusHandle, void *pWndData);
MAE_Ret _CalendarWndDestroySelectEventType(void *pCusHandle, void *pWndData);
MAE_Ret _CalendarWndCreateEditRepeatSelect(void *pCusHandle, void *pWndData, u32 nWndInitParam);
MAE_Ret _CalendarWndShowEditRepeatSelect(void *pCusHandle, void *pWndData);
MAE_Ret _CalendarWndHideEditRepeatSelect(void *pCusHandle, void *pWndData);
MAE_Ret _CalendarWndDestroyEditRepeatSelect(void *pCusHandle, void *pWndData);
MAE_Ret _CalendarWndCreateDeleteRepeatSelect(void *pCusHandle, void *pWndData, u32 nWndInitParam);
MAE_Ret _CalendarWndShowDeleteRepeatSelect(void *pCusHandle, void *pWndData);
MAE_Ret _CalendarWndHideDeleteRepeatSelect(void *pCusHandle, void *pWndData);
MAE_Ret _CalendarWndDestroyDeleteRepeatSelect(void *pCusHandle, void *pWndData);
MAE_Ret _CalendarWndCreateDeleteBefore(void *pCusHandle, void *pWndData, u32 nWndInitParam);
MAE_Ret _CalendarWndShowDeleteBefore(void *pCusHandle, void *pWndData);
MAE_Ret _CalendarWndHideDeleteBefore(void *pCusHandle, void *pWndData);
MAE_Ret _CalendarWndDestroyDeleteBefore(void *pCusHandle, void *pWndData);
MAE_Ret _CalendarWndCreateOptionMenu(void *pCusHandle, void *pWndData, u32 nWndInitParam);
MAE_Ret _CalendarWndShowOptionMenu(void *pCusHandle, void *pWndData);
MAE_Ret _CalendarWndHideOptionMenu(void *pCusHandle, void *pWndData);
MAE_Ret _CalendarWndDestroyOptionMenu(void *pCusHandle, void *pWndData);

static void _CalendarMonthlyViewKeyPress(MMI_CALENDARAPP *pThis, u32 param);
static void _CalendarMonthlyViewKeyRepeat(MMI_CALENDARAPP *pThis, u32 param);
static void _CalendarMonthlyViewTouchLeft(MMI_CALENDARAPP *pThis, u32 param);
static void _CalendarMonthlyViewTouchRight(MMI_CALENDARAPP *pThis, u32 param);
static void _CalendarWeeklyViewKeyPress(MMI_CALENDARAPP *pThis, u32 param);
static void _CalendarWeeklyViewKeyRepeat(MMI_CALENDARAPP *pThis, u32 param);
static void _CalendarWeeklyViewTouchLeft(MMI_CALENDARAPP *pThis, u32 param);
static void _CalendarWeeklyViewTouchRight(MMI_CALENDARAPP *pThis, u32 param);
static void _CalendarDailyViewKeyPress(MMI_CALENDARAPP *pThis, u32 param);
static void _CalendarDailyViewKeyRepeat(MMI_CALENDARAPP *pThis, u32 param);
static void _CalendarDailyViewTouchLeft(MMI_CALENDARAPP *pThis, u32 param);
static void _CalendarDailyViewTouchRight(MMI_CALENDARAPP *pThis, u32 param);
static void _CalendarNewEventKeyPress(MMI_CALENDARAPP *pThis, u32 param);
static void _CalendarEditEventKeyPress(MMI_CALENDARAPP *pThis, u32 param);
static void _CalendarGoToDateKeyPress(MMI_CALENDARAPP *pThis, u32 param);
static void _CalendarSettingsKeyPress(MMI_CALENDARAPP *pThis, u32 param);
static void _CalendarMemoryDetailsKeyPress(MMI_CALENDARAPP *pThis, u32 param);
static void _CalendarSearchEventKeyPress(MMI_CALENDARAPP *pThis, u32 param);
static void _CalendarViewEventKeyPress(MMI_CALENDARAPP *pThis, u32 param);
static void _CalendarInputTextKeyPress(MMI_CALENDARAPP *pThis, u32 param);
static void _CalendarDeleteBeforeKeyPress(MMI_CALENDARAPP *pThis, u32 param);
static void _CalendarLoadVCSImportSuccessDialog(MMI_CALENDARAPP* pThis, u32 nTextID, u8 nCalNum, u8 nToDoNum);
static MAE_Ret _CalendarVCSImportSuccessDialogTimerCB(void *pData, u32 nEvt, u32 nParam1, u32 nParam2);
MAE_Ret CalendarDeleteConfirmDialogKeyPress(void *pApplet, u32 evt, u32 param1, u32 param2);
MAE_Ret CalendarDeleteAllConfirmDialogKeyPress(void *pApplet, u32 evt, u32 param1, u32 param2);
MAE_Ret CalendarPastEventSaveConfirmKeyPress(void *pApplet, u32 evt, u32 param1, u32 param2);
MAE_Ret CalendarNotAllowedSaveConfirmKeyPress(void *pApplet, u32 evt, u32 param1, u32 param2);
MAE_Ret CalendarImportEventConfirmKeyPress(void *pApplet, u32 evt, u32 param1, u32 param2);

void CalendarEventInsertedCB(void *pUserData, u32 nEventID);
void CalendarEventUpdatedCB(void *pUserData, u32 nEventID);
void CalendarEventDeletedCB(void *pUserData, u32 nEventID);
void CalendarMonthlyGridFocusSelectCb(void *pApplet, void *pUserData, WidgetEvtCode_t nEvtCode, HistoryInfo_t *pFocusInfo, IWidget *pWidget);
void CalendarMonthlyGridFocusChangeCb(void *pApplet, void *pUserData, WidgetEvtCode_t nEvtCode, FocusInfo_t *pFocusInfo, IWidget *pWidget);
void CalendarMonthlyGridBoundsNotifyCb(void *pApplet, void *pUserData, WidgetEvtCode_t nEvtCode, HistoryInfo_t *pHistoryInfo, void *pReserve);
void CalendarWeekDayListFocusSelectCb(void *pApplet,void *pUserData, WidgetEvtCode_t nEvtCode, HistoryInfo_t *pFocusInfo, IWidget *pWidget);
void CalendarWeekDayListFocusChangeCb(void *pApplet, void *pUserData, WidgetEvtCode_t nEvtCode, FocusInfo_t *pFocusInfo, IWidget *pWidget);
void CalendarDailyTimeSlotFocusSelectCb(void *pApplet, void *pUserData, WidgetEvtCode_t nEvtCode, HistoryInfo_t *pFocusInfo, IWidget *pWidget);
void CalendarDailyTimeSlotBoundsTopCb(void *pApplet,void *pUserData, WidgetEvtCode_t nEvtCode, HistoryInfo_t *pHistoryInfo, void *pReserve);
void CalendarDailyTimeSlotBoundsBottomCb(void *pApplet,void *pUserData, WidgetEvtCode_t nEvtCode, HistoryInfo_t *pHistoryInfo, void *pReserve);
void CalendarEventIndicatorFocusSelectCB(void *pApplet,void *pUserData, WidgetEvtCode_t nEvtCode, EvtWdgSelectInfo_t *pEventInfo, IWidget *pWidget);
void CalendarEventEntryFocusSelectCb(void *pApplet,void *pUserData, WidgetEvtCode_t nEvtCode, MFLFocusData_t *pMFLFocusData, IWidget *pWidget);
void CalendarEventEntryFocusChangeCb(void *pApplet,void *pUserData, WidgetEvtCode_t nEvtCode, MFLFocusData_t *pMFLFocusData, IWidget *pWidget);
void CalendarPickFocusChangeCB(void *pApplet,void *pUserData, WidgetEvtCode_t nEvtCode, FocusChangeData_t *pFocusChangeData, IWidget *pWidget);
void CalendarStartDateFocusChangeCB(void *pApplet,void *pUserData, WidgetEvtCode_t nEvtCode, u32 nReserve, IWidget *pWidget);
void CalendarEndDateFocusChangeCB(void *pApplet,void *pUserData, WidgetEvtCode_t nEvtCode, u32 nReserve, IWidget *pWidget);
void CalendarStartTimeFocusChangeCb(void *pApplet,void *pUserData, WidgetEvtCode_t nEvtCode, u32 nReserve, IWidget *pWidget);
void CalendarEndTimeFocusChangeCB(void *pApplet,void *pUserData, WidgetEvtCode_t nEvtCode, u32 nReserve, IWidget *pWidget);
void CalendarStartTimeAMPMChangeCb(void *pApplet,void *pUserData, WidgetEvtCode_t nEvtCode, TimePeriod_e eTimePeriod, IWidget *pWidget);
void CalendarEndTimeAMPMChangeCB(void *pApplet,void *pUserData, WidgetEvtCode_t nEvtCode, TimePeriod_e eTimePeriod, IWidget *pWidget);
void CalendarSettingsFocusSelectCb(void *pApplet,void *pUserData, WidgetEvtCode_t nEvtCode, MFLFocusData_t *pMFLFocusData, IWidget *pWidget);
void CalendarSettingsFocusChangeCb(void *pApplet,void *pUserData, WidgetEvtCode_t nEvtCode, MFLFocusData_t *pMFLFocusData, IWidget *pWidget);
void CalendarEventListSoftkeyActCB(void *pApplet,void *pUserData, WidgetEvtCode_t nEvtCode, HistoryInfo_t *pHistoryInfo, IWidget *pWidget);
void CalendarSelectMenuSoftkeyActCB(void *pApplet,void *pUserData, WidgetEvtCode_t nEvtCode, HistoryInfo_t *pHistoryInfo, IWidget *pWidget);
void CalendarSelectEventTypeSoftkeyActCB(void *pApplet,void *pUserData, WidgetEvtCode_t nEvtCode, HistoryInfo_t *pHistoryInfo, IWidget *pWidget);
void CalendarEditRepeatSelectSoftkeyActCB(void *pApplet,void *pUserData, WidgetEvtCode_t nEvtCode, HistoryInfo_t *pHistoryInfo, IWidget *pWidget);
void CalendarDeleteRepeatSelectSoftkeyActCB(void *pApplet,void *pUserData, WidgetEvtCode_t nEvtCode, HistoryInfo_t *pHistoryInfo, IWidget *pWidget);
void CalendarOptionMenuLayer1SelectCB(void *pApplet, void *pUserData, WidgetEvtCode_t nEvtCode, HistoryInfo_t *pHistoryInfo, IWidget *pWidget);
void CalendarOptionMenuLayer1CancelCB(void *pApplet, void *pUserData, WidgetEvtCode_t nEvtCode, HistoryInfo_t *pHistoryInfo, IWidget *pWidget);
void CalendarOptionMenuReqOption2CB(void *pApplet, void *pUserData, WidgetEvtCode_t nEvtCode, HistoryInfo_t *pHistoryInfo, IWidget *pWidget);
void CalendarOptionMenuLayer2SelectCB(void *pApplet, void *pUserData, WidgetEvtCode_t nEvtCode, HistoryInfo_t *pHistoryInfo, IWidget *pWidget);
void CalendarInputTextOptionMenuLayer2SelectCB(void *pApplet, void *pUserData, WidgetEvtCode_t nEvtCode, HistoryInfo_t *pHistoryInfo, IWidget *pWidget);
#ifdef __TOUCH_SCREEN_MMI__
void CalendarPreviousMonthButtonClickCb(void *pApplet, void *pUserData, WidgetEvtCode_t nEvtCode, u32 dwParam, IWidget *pWidget);
void CalendarNextMonthButtonClickCb(void *pApplet, void *pUserData, WidgetEvtCode_t nEvtCode, u32 dwParam, IWidget *pWidget);
void CalendarPreviousWeekButtonClickCb(void *pApplet, void *pUserData, WidgetEvtCode_t nEvtCode, u32 dwParam, IWidget *pWidget);
void CalendarNextWeekButtonClickCb(void *pApplet, void *pUserData, WidgetEvtCode_t nEvtCode, u32 dwParam, IWidget *pWidget);
void CalendarPreviousDayButtonClickCb(void *pApplet, void *pUserData, WidgetEvtCode_t nEvtCode, u32 dwParam, IWidget *pWidget);
void CalendarNextDayButtonClickCb(void *pApplet, void *pUserData, WidgetEvtCode_t nEvtCode, u32 dwParam, IWidget *pWidget);
void CalendarPreviousHourButtonClickCb(void *pApplet, void *pUserData, WidgetEvtCode_t nEvtCode, u32 dwParam, IWidget *pWidget);
void CalendarNextHourButtonClickCb(void *pApplet, void *pUserData, WidgetEvtCode_t nEvtCode, u32 dwParam, IWidget *pWidget);
#endif
void CalendarPlugStatusChangeCB(void *pUserData, ACCDeviceType_e eDevice, boolean bPlug, ExtCardAccInfo_e eCardinfo);
void CalendarUSBStatusIndCB(void *pUserData, MMI_USB_STATUS_E eUSBStatus);
#if defined(__APP_MMI_CHECKDISK__)
void CalendarCheckDiskListener(char *pSbjName, SubjectStatus_e nSbjStatus, void *pUser);
#endif
MAE_Ret CalendarWarningDialogTimerCB(void *pData, u32 nEvt, u32 nParam1, u32 nParam2);
MAE_Ret CalendarInfoDialogTimerCB(void *pData, u32 nEvt, u32 nParam1, u32 nParam2);
static MAE_Ret _CalendarConfDialogTimerCB(void *pData, u32 nEvt, u32 nParam1, u32 nParam2);
static MAE_Ret _SrvVCalStoreUpdateStatus(CalendarEvent_t *pCalendarEvent, EventUpdateParam_t *pUpdateParam, CalendarMsg_e *pCheckResult);

static MAE_Ret _CalendarOpenDefaultView(MMI_CALENDARAPP *pThis);
static MAE_Ret _CalendarOpenEmbeddedMode(MMI_CALENDARAPP *pThis, CalendarEmbedModeInfo_t *pEmbedModeInfo);
static MAE_Ret _CalendarOpenDeleteConfirmDialog(MMI_CALENDARAPP *pThis);
static MAE_Ret _CalendarOpenDeleteAllConfirmDialog(MMI_CALENDARAPP *pThis);
static MAE_Ret _CalendarOpenConfirmDialog(MMI_CALENDARAPP *pThis, CalendarMsg_e eMsg);
static MAE_Ret _CalendarOpenDialog(MMI_CALENDARAPP *pThis, CalendarMsg_e eMsg);
static MAE_Ret _CalendarSendEvent(MMI_CALENDARAPP *pThis);
static MAE_Ret _CalendarSwitchSoftKeyAMPM(MMI_CALENDARAPP *pThis, IWidget *pITimeWidget);
static MAE_Ret _CalendarSwitchTimeWidgetAMPM(IWidget *pITimeWidget);
static MAE_Ret _CalendarSetSoftKey(MMI_CALENDARAPP *pThis, u16 nSoftkeyType, SoftkeyID eSoftkeyID);
static MAE_Ret _CalendarSetTimeWidgetFormat(IWidget* pIWidget, SetPhoneTimeFormat_e eTimeFormat);
static MAE_Ret _CalendarGetFocusSlotIndex(MMI_CALENDARAPP* pThis);
static void _CalendarResetScrollData(ScrollData_t *pScrollData);

void CalendarTransitionEffectTimerCB(void *pUserData);
static void _CalendarFreeEventEntryTmpInfo(MMI_CALENDARAPP* pThis);
static void _CalendarFreeSettingsTmpInfo(MMI_CALENDARAPP* pThis);
static MAE_Ret _CalendarDeleteConfirmDialogGetDeleteTillText(MMI_CALENDARAPP *pThis, MAE_WChar **ppConfirmStr);
static MAE_Ret _CalendarDeleteConfirmDialogGetDeleteAllText(MMI_CALENDARAPP *pThis, MAE_WChar **ppConfirmStr);
static MAE_Ret _CalendarDeleteConfirmDialogGetDeleteConfirmText(MMI_CALENDARAPP *pThis, MAE_WChar **ppConfirmStr);
static MAE_Ret _CalendarStartDeleteProcess(MMI_CALENDARAPP *pThis);
static MAE_Ret _CalendarDeleteProcessingDeleteNext(MMI_CALENDARAPP *pThis);
void CalendarDeleteProcessingWaitingDialogTimerCB(void *pUserData);
void CalendarDeleteProcessingKeepNextDeletionTimerCB(void *pUserData);
static void _CalendarFreeDeleteProcessing(MMI_CALENDARAPP *pThis);
static MAE_Ret _CalendarLoadSelectRepeatCycleView(MMI_CALENDARAPP *pThis, CalendarSelectRepeatCycleWndData_t *pCalendarSelectRepeatCycleWndData, VCALDateRange_t *pDateRange, u32 nTitleTxtId, PfnWdgMenuSoftkeyAct pfnSoftkeyActCB);
static void _CalendarFreeSelectRepeatCycle(MMI_CALENDARAPP *pThis);
static MAE_Ret _CalendarEventEntryLoadEventDefaultValues(MMI_CALENDARAPP *pThis, VCALCategory_e eCategory, CalendarEvent_t *pCalendarEvent);
static MAE_Ret _CalendarEventEntryCheckEventToBeSaved(MMI_CALENDARAPP *pThis, MAE_WndId nMode, CalendarEvent_t *pCalendarEvent, CalendarMsg_e *pCheckResult);
static MAE_Ret _CalendarEventEntryGetWidgetsFromView(MMI_CALENDARAPP *pThis, CalendarEventEntryWndData_t *pCalendarEventEntryWndData);
static MAE_Ret _CalendarEventEntrySetValuesToWidgets(MMI_CALENDARAPP *pThis, CalendarEventEntryWndData_t *pCalendarEventEntryWndData, CalendarEvent_t *pCalendarEvent);
static MAE_Ret _CalendarEventEntryGetValuesFromWidgets(MMI_CALENDARAPP *pThis, CalendarEventEntryWndData_t *pCalendarEventEntryWndData, CalendarEvent_t *pCalendarEvent);
static MAE_Ret _CalendarEventEntrySetValuesToTmpInfo(MMI_CALENDARAPP *pThis, CalendarEventEntryWndData_t *pCalendarEventEntryWndData);
static MAE_Ret _CalendarEventEntrySaveEvent(MMI_CALENDARAPP *pThis, MAE_WndId nMode);
static u32 _CalendarEventEntryGetDateTime(MMI_CALENDARAPP *pThis, CalendarEventEntryWndData_t *pCalendarEventEntryWndData, CalendarEventField_e eCalEventField);
static void _CalendarEventEntrySetDateTime(MMI_CALENDARAPP *pThis, CalendarEventEntryWndData_t *pCalendarEventEntryWndData, CalendarEventField_e eCalEventField, u32 nTimeInSecs);
static void _CalendarFreeEventEntryWndData(MMI_CALENDARAPP *pThis, CalendarEventEntryWndData_t *pCalendarEventEntryWndData);
static MAE_Ret _CalendarViewEventSetValuesToText(MMI_CALENDARAPP *pThis, CalendarViewEventWndData_t *pCalendarViewEventWndData, CalendarEvent_t *pCalendarEvent);
static MAE_Ret _CalendarViewEventPrepareText(u32 nFieldNameID, MAE_WChar *pFieldValue, MAE_WChar **pOutText);
static void _CalendarViewEventScroll(IApplet *pApplet, u32 MAE_KEY_ID);
static MAE_Ret _CalendarSettingsSetValuesToWidgets(MMI_CALENDARAPP *pThis, CalendarSettingsWndWdgList_t *pWdgList);
static MAE_Ret _CalendarSettingsSetValuesToTmpInfo(MMI_CALENDARAPP *pThis, CalendarSettingsWndWdgList_t *pWdgList);
static void _CalendarFreeSettingsWndData(MMI_CALENDARAPP *pThis, CalendarSettingsWndWdgList_t *pWdgList);
void CalendarEventListAdaptGet(WdgDynamicMenuItemPtr_t *pItemDataPtr, HWIN hWin, WdgMenuItemType_e eItemType, IWidget *pMenuWdg, u32 nIndex);
static MAE_Ret _CalendarCreateEventListItemInfo(MMI_CALENDARAPP *pThis, CalendarEvent_t *pCalendarEvent, DateRange_t tDateRange, WdgDynamicMenuItemPtr_t *pItemDataPtr);
void CalendarFreeEventListItemInfo(WdgDynamicMenuItemPtr_t *pItemDataPtr, HWIN hWin, WdgMenuItemType_e eItemType);
static void _CalendarFreeEventList(MMI_CALENDARAPP *pThis, CalendarEventListWndData_t *pCalendarEventListWndData);
static MAE_Ret _CalendarMonthlyViewSetMonthlyGrid(MMI_CALENDARAPP *pThis, CalendarMonthlyViewWndData_t *pCalendarMonthlyViewWndData);
static MAE_Ret _CalendarMonthlyViewSetWeekNumList(MMI_CALENDARAPP *pThis, CalendarMonthlyViewWndData_t *pCalendarMonthlyViewWndData);
static MAE_Ret _CalendarMonthlyViewSetEventIndicator(MMI_CALENDARAPP *pThis, CalendarMonthlyViewWndData_t *pCalendarMonthlyViewWndData);
static MAE_Ret _CalendarMonthlyViewSetEventPreviewLine(MMI_CALENDARAPP *pThis, CalendarMonthlyViewWndData_t *pCalendarMonthlyViewWndData);
#ifdef __TOUCH_SCREEN_MMI__
static MAE_Ret _CalendarMonthlyViewUpdateMonthTitle(MMI_CALENDARAPP *pThis, CalendarMonthlyViewWndData_t *pCalendarMonthlyViewWndData);
#endif
static MAE_Ret _CalendarMonthlyViewUpdateEventIndicator(MMI_CALENDARAPP *pThis, CalendarMonthlyViewWndData_t *pCalendarMonthlyViewWndData);
void CalendarMonthlyViewUpdateEventIndicatorTimerCB(void *pUserData);
static MAE_Ret _CalendarMonthlyViewUpdateViewData(MMI_CALENDARAPP *pThis, CalendarMonthlyViewWndData_t *pCalendarMonthlyViewWndData);
static MAE_Ret _CalendarMonthlyViewMoveDateFocus(MMI_CALENDARAPP *pThis, CalendarMonthlyViewWndData_t *pCalendarMonthlyViewWndData);
boolean CalendarMonthlyViewHandleEvent(void *pUserData, MAE_EventId evt, u32 param1, u32 param2);
void CalendarMonthlyViewWeekDayListAdaptGet(WdgDynamicMenuItemPtr_t *pItemDataPtr, HWIN hWin, WdgMenuItemType_e eItemType, IWidget *pMenuWdg, u32 nIndex);
void CalendarMonthlyViewWeekNumListAdaptGet(WdgDynamicMenuItemPtr_t *pItemDataPtr, HWIN hWin, WdgMenuItemType_e eItemType, IWidget *pMenuWdg, u32 nIndex);
void CalendarMonthlyViewMonthlyGridAdaptGet(WdgDynamicMenuItemPtr_t *pItemDataPtr, HWIN hWin, WdgMenuItemType_e eItemType, IWidget *pMenuWdg, u32 nIndex);
static void _CalendarMonthlyViewUpdateCurrentMonthInfo(MMI_CALENDARAPP *pThis, CalendarMonthlyViewWndData_t *pCalendarMonthlyViewWndData);
void CalendarFreeMonthlyViewEventHandler(MMI_CALENDARAPP *pThis);
static void _CalendarFreeMonthlyViewWndData(MMI_CALENDARAPP *pThis, CalendarMonthlyViewWndData_t *pCalendarMonthlyViewWndData);
static MAE_Ret _CalendarWeeklyViewGetEventsByWeek(MMI_CALENDARAPP *pThis, CalendarWeeklyViewWndData_t *pCalendarWeeklyViewWndData);
static MAE_Ret _CalendarWeeklyViewGetEventsByDay(MMI_CALENDARAPP *pThis, CalendarWeeklyViewWndData_t *pCalendarWeeklyViewWndData, MAE_DateTime_t *pDate);
static MAE_Ret _CalendarWeeklyViewSetEventIndicator(MMI_CALENDARAPP *pThis, CalendarWeeklyViewWndData_t *pCalendarWeeklyViewWndData);
static MAE_Ret _CalendarWeeklyViewSetEventPreviewLine(MMI_CALENDARAPP *pThis, CalendarWeeklyViewWndData_t *pCalendarWeeklyViewWndData);
static MAE_Ret _CalendarWeeklyViewUpdateViewData(MMI_CALENDARAPP *pThis, CalendarWeeklyViewWndData_t *pCalendarWeeklyViewWndData);
static MAE_Ret _CalendarWeeklyViewMoveDateFocus(MMI_CALENDARAPP *pThis, CalendarWeeklyViewWndData_t *pCalendarWeeklyViewWndData);
boolean CalendarWeeklyViewHandleEvent(void* pUserData, MAE_EventId evt, u32 param1, u32 param2);
void CalendarWeeklyViewTimeSlotListAdaptGet(WdgDynamicMenuItemPtr_t *pItemDataPtr, HWIN hWin, WdgMenuItemType_e eItemType, IWidget *pMenuWdg, u32 nIndex);
void CalendarWeeklyViewWeekDayListAdaptGet(WdgDynamicMenuItemPtr_t *pItemDataPtr, HWIN hWin, WdgMenuItemType_e eItemType, IWidget *pMenuWdg, u32 nIndex);
void CalendarFreeWeeklyViewEventModel(void *pData, void *pOwner);
void CalendarFreeWeeklyViewEventHandler(MMI_CALENDARAPP *pThis);
static void _CalendarFreeWeeklyViewWndData(MMI_CALENDARAPP *pThis, CalendarWeeklyViewWndData_t *pCalendarWeeklyViewWndData);
static MAE_Ret _CalendarDailyViewGetEventsByDay(MMI_CALENDARAPP *pThis, CalendarDailyViewWndData_t *pCalendarDailyViewWndData);
static MAE_Ret _CalendarDailyViewSetEventIndicator(MMI_CALENDARAPP *pThis, CalendarDailyViewWndData_t *pCalendarDailyViewWndData);
static void _CalendarDailyViewResetFocusEventInfo(MMI_CALENDARAPP *pThis, CalendarDailyViewWndData_t *pCalendarDailyViewWndData);
static MAE_Ret _CalendarDailyViewMoveFocus(MMI_CALENDARAPP *pThis, CalendarDailyViewWndData_t *pCalendarDailyViewWndData, s8 sDirection);
static MAE_Ret _CalendarDailyViewSetEventPreviewLine(MMI_CALENDARAPP *pThis, CalendarDailyViewWndData_t *pCalendarDailyViewWndData);
static MAE_Ret _CalendarDailyViewUpdateViewData(MMI_CALENDARAPP *pThis, CalendarDailyViewWndData_t *pCalendarDailyViewWndData);
static MAE_Ret _CalendarDailyViewMoveDateFocus(MMI_CALENDARAPP *pThis, CalendarDailyViewWndData_t *pCalendarDailyViewWndData);
boolean CalendarDailyViewHandleEvent(void* pUserData, MAE_EventId evt, u32 param1, u32 param2);
void CalendarDailyViewTimeSlotListAdaptGet(WdgDynamicMenuItemPtr_t *pItemDataPtr, HWIN hWin, WdgMenuItemType_e eItemType, IWidget *pMenuWdg, u32 nIndex);
void CalendarFreeDailyViewEventModel(void *pData, void *pOwner);
static void _CalendarFreeImageTextInfo(void *pData, IBase *pOwner);
void CalendarFreeDailyViewEventHandler(MMI_CALENDARAPP *pThis);
//void CalendarFreeDailyViewMenuItem(WdgDynamicMenuItemPtr_t *pItemDataPtr, HWIN hWin, WdgMenuItemType_e eItemType);
static void _CalendarFreeDailyViewWndData(MMI_CALENDARAPP *pThis, CalendarDailyViewWndData_t *pCalendarDailyViewWndData);
static MAE_Ret _CalendarInitEventPreviewLine(MMI_CALENDARAPP *pThis, EventPreviewLineInfo_t *pCalendarView, u32 nCount);
void CalendarPreviewLineSlideTimerCB(void *pUser, void *pUserData);
static MAE_Ret _CalendarGroupOverlapEvent(VectorClass_t *pIDayEventsModel, u32 nStartIndex, u32 *pEndIndex, boolean bDeleteOverlap);
static MAE_Ret _CalendarLoadSelectMenuView(MMI_CALENDARAPP *pThis, u32 nTitleTxtId, u32 nItemCount, u16 nSelectedIndex, void *pItemData);
static void _CalendarBackToSelectMenuPreviousView(MMI_CALENDARAPP *pThis, u32 nParam);
static MAE_Ret _CalendarLoadInputTextView(MMI_CALENDARAPP *pThis, MAE_WndId nWndId);
static MAE_Ret _CalendarGetInputText(MMI_CALENDARAPP *pThis, MAE_WndId nWndId);
static MAE_Ret _CalendarLoadGoToDateView(MMI_CALENDARAPP *pThis, u32 nTitleTxtId);
static MAE_Ret _CalendarLoadOptionMenu(MMI_CALENDARAPP *pThis, MAE_WndId nWndId);
static void _CalendarDeleteOptionMenuItem(IWidget *pOptionMenuWdg, u32 nMenuId);
static void _CalendarFreeOptionMenu(MMI_CALENDARAPP* pThis);
static void _CalendarOptionMenuSelect(MMI_CALENDARAPP *pThis, u32 nMenuID);
static MAE_Ret _CalendarLoadImage(MMI_CALENDARAPP *pThis, const u32 id, IImage **ppImg);
static void _CalendarGetTimeFromWidget(IWidget *pWdg, MAE_DateTime_t *pTime);
static MAE_WChar* _CalendarCopyStrFromTextWidget(MMI_CALENDARAPP *pThis, IWidget *pIWidget);
static u32 _CalendarGetWndSize(MAE_WndId nWndId);
static PFN_WndFunc _CalendarGetWndHandler(MAE_WndId nWndId);
void CalendarFreeExportData(MAE_WChar *pData);
static IWidget* _GetWidgetFromWindow(MMI_CALENDARAPP *pThis, MAE_WndId nWndId, u16 nWdgId);
static void _CalendarEndDateTimeFocusChangeCBCommon(MMI_CALENDARAPP *pThis, u32 nStartDateTime, u32 nEndDateTime, CalendarEventEntryWndData_t *pCalendarEventEntryWndData, CalendarEventEntryWndWdgList_t *pWdgList);
static void _CalendarUpdateEndTimeByStartTime(void *pApplet);
static void _CalendarEndTimeCheck(void *pApplet);
MAE_Ret _UpdateNextAndPreviousButton(void *pCusHandle, void *pWndData);

/*-------------------------------------------------------------------------*/
#endif /* __MMI_CALENDARAPP_PRIV_H__ */
