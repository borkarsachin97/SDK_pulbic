/**
* @file mmi_cbsettingapp_priv.h
*
* State Machine Application - CBSAPP
* Generated by XFSM v1.0, CodeVer=v0.24
*
* Class Id: CLSID_CBSAPP
*
*
* @version $Id$
*/
#ifndef __MMI_CBSETTINGAPP_PRIV_H__
#define __MMI_CBSETTINGAPP_PRIV_H__

/*-------------------------------------------------------------------------*/
#include "mmi_baseapplet.h"
#include "mmi_cbsettingapp_view_id.h"
#include "mmi_srv_header.h"

#include "mmi_common_cfg.h"
#include "mmi_wdg_headers.h"
#include "mmi_cbsettingapp_id.h"
#include "CbSettingApp_resource.h"

#define	MAXCHANNELLENGTH		5		//for input channel num
#define TITLE_CHANNEL_NUM_LEN	8		// 100/100_ 8 digits.
/* Binary ID start */
    /*e_TOPIC_LIST_OPTION*/

/* Binary ID end */

    /* Binary ID start */


/* Model ID */

enum{
	CBSAPP_DIALOG_TIMER        =          1000,
	CBSAPP_MAX_CHANNEL_NUM	   =		  100,
	CBSAPP_MAX_CHANNEL_VALUE   =		  65535,
	CBSAPP_EMPTY_CHANNEL_VALUE =		  100000
	// We limited user only can input 5 digit, so took 100000 as an empty vaule.
};

enum e_Dialog_Type
{
  CBSAPP_DIALOG_E_START=0x00,
  CBSAPP_DIALOG_E_CONFIRM=0x00,
  CBSAPP_DIALOG_E_INFO,
  CBSAPP_DIALOG_E_WARNING,
  CBSAPP_DIALOG_E_WAITING,
  CBSAPP_DIALOG_E_TOTAL,
};

enum e_Warning_Type
{
  CBSAPP_DIALOG_E_NORMAL,
  CBSAPP_DIALOG_E_MAXIMUM_WARNING,
  CBSAPP_DIALOG_E_CHANNEL_NUM_WARNING
};

typedef struct {
	u32 cfgItemID_RECEPTION;
	u32	cfgItemID_CELLINFO;
	u32 cfgItemID_AUTODISPLAY;
	Msg_CB_Setting_e CB_Reception_Status;
	Msg_CB_Setting_e CB_Information_Status;
	Msg_CB_Setting_e CB_AutoDisplay_Status;
}CBSAPP_Settings_t;

typedef struct {
	IView						*pIView;
	IWidget						*pIMenuWidget;
	IMenuModel					*pIMenuModel;
	IWidget						*pInputWdg;
	IView						*pIEditView;
	ModelListener_t 			tMenuMdl;
	ModelListener_t				tTextMdlLnr;
	u16							u32HighlightIdx;
	Msg_CB_Setting_Topic_Item_t	sCbsTopicItem_tmp;
	u32							u32ToEditMenuId;
}CBSAPP_TopicEdit_t;


typedef struct
{
	ModelListener_t stOptMenuL1MDL;
	ModelListener_t stOptMenuL2MDL; // L2 View Model Listener
	IWidget	    *pOptMenuWdg;
	IMenuModel	*pOptMenuModel;
} CBSAPP_OPTIONMENU_t;

typedef enum CbSettingsActionStatus_e_
{
    CBSETTINGS_ACTION_NONE,
	CBSETTINGS_ACTION_DeleteCbTopic,
	CBSETTINGS_ACTION_DeleteAllCbTopics

}CbSettingsActionStatus_e;

/**
 * Application structure
 */
typedef struct MMI_CBSAPP_TAG {

	APPLET_BASE_ELEMENTS;

	// For view
	ModelListener_t	ViewModelListener;
	IWidget			*pICurrentMenuWdg;
	IMenuModel		*pIMenuModel;
	IWidget			*pOptMenuWdg;
	u32				viewId;
	u32				bEdit;
	u8				chNum;

	CBSAPP_Settings_t	*pCBSAPP_Setting;

	//for Channel Editor View
	IWidget			*pTopicDescriptionWdg;
	IWidget			*pTopicChannelWdg;
	IWidget			*pTopicChannelToWdg;

	CBSAPP_TopicEdit_t	*pTopicEdit;
	CBSAPP_OPTIONMENU_t	*pOptionMenu;

	// For menu
	u16				nFirstIndex;			/* the absolutely index of first item on screen */
	u16				nHighlightedIndex;		/* the absolutely index of the highlighted item */
	u16				nMenuHighlightedIndex;		/* the absolutely index of the highlighted item */
	u32				nSelectedID;

    ICFGSrv *pICFGSrv;
    IMenuModel *pMenuListModel;
    ModelListener_t tMenuMdl;
	ModelListener_t OptionMenuViewMdlListener;
	ModelListener_t OptionMenuL2ViewMdlListener;

	/*process dialog handler*/
    WidgetHandler_t DialogViewHdlData;
    ModelListener_t dialogMdlListener;

	Msg_CB_Setting_Topic_List_t pTopicItemLst;
    Msg_CB_Setting_Language_List_t  pLangItemLst;

	MAE_LangData_t *pstLangPackedBuffer;

	u32 SimModule;
	COMMON_SIM_CARD_STATUS_e eSIMCardStatus;

	u8				bDisplayDialog;

	ITXI *pTXI;

	boolean						bDeleteCbTopic;
	boolean						bSaveCbTopic;
	boolean						bEnableDisableCbTopic;
	CbSettingsActionStatus_e	bDisplayConfirmDialog;

} MMI_CBSAPP;

typedef struct {
    MenuModelData_t pModelData;
    u32 settingValue;

}CBSAPP_MenuItem_t;

const WdgDynamicMenuItem_t MainMenuTable[] =
{
    {{WDG_MENU_ITEM_FLAG_VISABLE,{SK_CHANGE,SK_OK,SK_BACK},MNU_MSG_SET_RECEPTION,0},{TXT_LIL_N_RECEPTION,TXT_NULL_ID}},
	{{WDG_MENU_ITEM_FLAG_VISABLE,{SK_SELECT,SK_OK,SK_BACK},MNU_MSG_SET_TOPIC_LIST,0},{TXT_LIL_N_TOPIC_LIST,TXT_NULL_ID}},
	//{{WDG_MENU_ITEM_FLAG_VISABLE,{SK_CHANGE,SK_OK,SK_BACK},MNU_MSG_SET_CELL_INFORMATION,0},{TXT_LIL_N_CELL_INFORMATION,TXT_NULL_ID}},
	{{WDG_MENU_ITEM_FLAG_VISABLE,{SK_CHANGE,SK_OK,SK_BACK},MNU_MSG_SET_AUTO_DISPLAY,0},{TXT_LIL_N_AUTO_DISPLAY,TXT_NULL_ID}}
};
#define MainMenuSize sizeof(MainMenuTable)/sizeof(WdgDynamicMenuItem_t)

const WdgDynamicMenuItem_t TopicEditorWithChannelMenuTable[] =
{
    {{WDG_MENU_ITEM_FLAG_VISABLE,{SK_SAVE,SK_OK,SK_BACK},MNU_MSG_SET_DESCRIPTION,0},{TXT_LIL_N_DESCRIPTION,TXT_NULL_ID}},
	{{WDG_MENU_ITEM_FLAG_VISABLE,{SK_SAVE,SK_OK,SK_BACK},MNU_MSG_SET_CHANNEL,0},{TXT_LIL_N_CHANNEL,TXT_NULL_ID}}
};
#define TopicEditorWithChannelMenuSize sizeof(TopicEditorWithChannelMenuTable)/sizeof(WdgDynamicMenuItem_t)

const WdgDynamicMenuItem_t TopicEditorWithRngChannelMenuTable[] =
{
    {{WDG_MENU_ITEM_FLAG_VISABLE,{SK_SAVE,SK_OK,SK_BACK},MNU_MSG_SET_DESCRIPTION,0},{TXT_LIL_N_DESCRIPTION,TXT_NULL_ID}},
	{{WDG_MENU_ITEM_FLAG_VISABLE,{SK_SAVE,SK_OK,SK_BACK},MNU_MSG_SET_CHANNEL_FROM,0},{TXT_LIL_N_CHANNEL_FROM,TXT_NULL_ID}},
	{{WDG_MENU_ITEM_FLAG_VISABLE,{SK_SAVE,SK_OK,SK_BACK},MNU_MSG_SET_CHANNEL_TO,0},{TXT_LIL_N_CHANNEL_TO,TXT_NULL_ID}}
};
#define TopicEditorWithRngChannelMenuSize sizeof(TopicEditorWithRngChannelMenuTable)/sizeof(WdgDynamicMenuItem_t)

const WdgStaticMenuItem_t TopicListOptionMenuTable[] =
{
    {{WDG_MENU_ITEM_FLAG_VISABLE,{DEFAULT_SK,DEFAULT_SK,DEFAULT_SK},CSA_TOPIC_LIST_OPTION_ENABLE},{TXT_LIL_N_ENABLE}},
	{{WDG_MENU_ITEM_FLAG_VISABLE,{DEFAULT_SK,DEFAULT_SK,DEFAULT_SK},CSA_TOPIC_LIST_OPTION_DISABLE},{TXT_LIL_N_DISABLE}},
    {{WDG_MENU_ITEM_FLAG_VISABLE,{DEFAULT_SK,DEFAULT_SK,DEFAULT_SK},CSA_TOPIC_LIST_OPTION_WITH_CHANNEL},{TXT_OIL1_N_ADD_BY_CHANNEL}},
    {{WDG_MENU_ITEM_FLAG_VISABLE,{DEFAULT_SK,DEFAULT_SK,DEFAULT_SK},CSA_TOPIC_LIST_OPTION_WITH_RANGE},{TXT_OIL1_N_ADD_BY_RANGE}},
    {{WDG_MENU_ITEM_FLAG_VISABLE,{DEFAULT_SK,DEFAULT_SK,DEFAULT_SK},CSA_TOPIC_LIST_OPTION_EDIT},{TXT_OIL1_N_EDIT}},
    {{WDG_MENU_ITEM_FLAG_VISABLE,{DEFAULT_SK,DEFAULT_SK,DEFAULT_SK},CSA_TOPIC_LIST_OPTION_DELETE},{TXT_OIL1_N_DELETE}},
	{{WDG_MENU_ITEM_FLAG_VISABLE,{DEFAULT_SK,DEFAULT_SK,DEFAULT_SK},CSA_TOPIC_LIST_OPTION_DELETE_ALL},{TXT_OIL1_N_DELETE_ALL}}
};
#define TopicListOptionMenuSize sizeof(TopicListOptionMenuTable)/sizeof(WdgStaticMenuItem_t)

const WdgStaticMenuItem_t CbSettingFullEditorOptionTable[] =
{
        {{MENUMODEL_ITEM_VISABLE,{DEFAULT_SK,DEFAULT_SK,DEFAULT_SK},MNU_COMMON_TEXT_SAVE},{TXT_OIL1_N_SAVE}},
        {{MENUMODEL_ITEM_VISABLE |MENUMODEL_ITEM_HAS_CHILD,{DEFAULT_SK,DEFAULT_SK,DEFAULT_SK},MNU_COMMON_TEXT_INPUT_MENU},{TXT_OIL1_N_INPUT_MENU}}
};
#define CbSettingFullEditorOptionSize sizeof(CbSettingFullEditorOptionTable)/sizeof(WdgStaticMenuItem_t)

///////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////
//AP Entry function.

MAE_Ret CbSettingsConstructor(IApplet *pApplet, u32 nEvt, u32 Param1, u32 Param2);
MAE_Ret CbSettingsDestructor(IApplet *pApplet, u32 nEvt, u32 Param1, u32 Param2);

// SIM DUO Selection View
static MAE_Ret _CbsettingsWndCreateSimDuoSelectionView(void *pCusHandle, void *pWndData, u32 nWndInitParam);
static MAE_Ret _CbsettingsWndDestroySimDuoSelectionView(void* pCusHandle,void* pWndData);
static MAE_Ret _CbsettingsWndShowSimDuoSelectionView(void* pCusHandle,void* pWndData);
static MAE_Ret _CbsettingsWndHideSimDuoSelectionView(void* pCusHandle,void* pWndData);

// Main Menu
static MAE_Ret _CbsettingsWndCreateMainMenu(void *pCusHandle, void *pWndData, u32 nWndInitParam);
static MAE_Ret _CbsettingsWndDestroyMainMenu(void* pCusHandle,void* pWndData);
static MAE_Ret _CbsettingsWndShowMainMenu(void* pCusHandle,void* pWndData);
static MAE_Ret _CbsettingsWndHideMainMenu(void* pCusHandle,void* pWndData);

// Topic List
static MAE_Ret _CbsettingsWndCreateTopicList(void *pCusHandle, void *pWndData, u32 nWndInitParam);
static MAE_Ret _CbsettingsWndDestroyTopicList(void* pCusHandle,void* pWndData);
static MAE_Ret _CbsettingsWndShowTopicList(void* pCusHandle,void* pWndData);
static MAE_Ret _CbsettingsWndHideTopicList(void* pCusHandle,void* pWndData);

// Option Menu
static MAE_Ret _CbsettingsWndCreateOptionMenu(void *pCusHandle, void *pWndData, u32 nWndInitParam);
static MAE_Ret _CbsettingsWndDestroyOptionMenu(void* pCusHandle,void* pWndData);
static MAE_Ret _CbsettingsWndShowOptionMenu(void* pCusHandle,void* pWndData);
static MAE_Ret _CbsettingsWndHideOptionMenu(void* pCusHandle,void* pWndData);

// Topic Editor With Channel Menu
static MAE_Ret _CbsettingsWndCreateTopicEditorWithChannelMenu(void *pCusHandle, void *pWndData, u32 nWndInitParam);
static MAE_Ret _CbsettingsWndDestroyTopicEditorWithChannelMenu(void* pCusHandle,void* pWndData);
static MAE_Ret _CbsettingsWndShowTopicEditorWithChannelMenu(void* pCusHandle,void* pWndData);
static MAE_Ret _CbsettingsWndHideTopicEditorWithChannelMenu(void* pCusHandle,void* pWndData);

// Topic Editor With Range Channel Menu
static MAE_Ret _CbsettingsWndCreateTopicEditorWithRngChannelMenu(void *pCusHandle, void *pWndData, u32 nWndInitParam);
static MAE_Ret _CbsettingsWndDestroyTopicEditorWithRngChannelMenu(void* pCusHandle,void* pWndData);
static MAE_Ret _CbsettingsWndShowTopicEditorWithRngChannelMenu(void* pCusHandle,void* pWndData);
static MAE_Ret _CbsettingsWndHideTopicEditorWithRngChannelMenu(void* pCusHandle,void* pWndData);

// Editor Input
static MAE_Ret _CbsettingsWndCreateEditorInput(void *pCusHandle, void *pWndData, u32 nWndInitParam);
static MAE_Ret _CbsettingsWndDestroyEditorInput(void* pCusHandle,void* pWndData);
static MAE_Ret _CbsettingsWndShowEditorInput(void* pCusHandle,void* pWndData);
static MAE_Ret _CbsettingsWndHideEditorInput(void* pCusHandle,void* pWndData);

// Full Editor Option
static MAE_Ret _CbsettingsWndCreateFullEditorOption(void *pCusHandle, void *pWndData, u32 nWndInitParam);
static MAE_Ret _CbsettingsWndDestroyFullEditorOption(void* pCusHandle,void* pWndData);
static MAE_Ret _CbsettingsWndShowFullEditorOption(void* pCusHandle,void* pWndData);
static MAE_Ret _CbsettingsWndHideFullEditorOption(void* pCusHandle,void* pWndData);

// Popup Input
static MAE_Ret _CbsettingsWndCreatePopupInput(void *pCusHandle, void *pWndData, u32 nWndInitParam);
static MAE_Ret _CbsettingsWndDestroyPopupInput(void* pCusHandle,void* pWndData);
static MAE_Ret _CbsettingsWndShowPopupInput(void* pCusHandle,void* pWndData);
static MAE_Ret _CbsettingsWndHidePopupInput(void* pCusHandle,void* pWndData);

//////////////////////////////////////////////////////////////////////////
// Call back functions

//For AP level
boolean CbSettingsStartCB(IApplet* pApplet, MAEEvent_t nEvt, u32 lparam, u32 dparam);
boolean CbSettingsKeyPressCB(IApplet* pApplet, MAEEvent_t nEvt, u32 lparam, u32 dparam);
boolean CbSettingsSuspendCB(IApplet* pApplet,MAEEvent_t nEvt, u32 lparam, u32 dparam);
boolean CbSettingsResumeCB(IApplet* pApplet,MAEEvent_t nEvt, u32 lparam, u32 dparam);
boolean CbSettingsEmbbeddedCloseCB(IApplet* pApplet,MAEEvent_t nEvt, u32 lparam, u32 dparam);

//Menu widget
void CbSettingsDuoSelectionMenuSoftkeyActCB(void *pApplet, void *pUserData, WidgetEvtCode_t nEvtCode, HistoryInfo_t *pHistoryInfo, IWidget *pWidget);
void CbSettingsMenuSoftkeyActCB(void *pApplet, void *pUserData, WidgetEvtCode_t nEvtCode, HistoryInfo_t *pHistoryInfo, IWidget *pWidget);
void CbSettingsTopicShowListMenuSoftkeyActCB(void *pApplet, void *pUserData, WidgetEvtCode_t nEvtCode, HistoryInfo_t *pHistoryInfo, IWidget *pWidget);

//Option Menu widget
void CbSettingsTopicShowListOptionMenuSoftkeyActCB(void *pApplet, void *pUserData, WidgetEvtCode_t nEvtCode, HistoryInfo_t *pHistoryInfo, IWidget *pWidget);


//For Dialog level
boolean CbsettingsConfirmDialogCB(void *pApplet, MAEEvent_t nEvt, u32 param1, u32 param2);
MAE_Ret CbSettingsDialogTimeOut(void *pData, MAEEvent_t nEvt, u32 param1, u32 param2);
//////////////////////////////////////////////////////////////////////////
// Internal functions

static boolean _CbsettingsEditorInputEvtKeyPressHandle(MMI_CBSAPP* pThis, u32 param1, u32 param2);
static boolean _CbsettingsPopupInputEvtKeyPressHandle(MMI_CBSAPP* pThis, u32 param1, u32 param2);

static void _CbsettingsGetTopicList(MMI_CBSAPP* pThis);
static MAE_Ret _CbsettingsDestroyTopicEditorChannelMenu(MMI_CBSAPP* pThis);
static void _CbsettingsDeleteTopic(MMI_CBSAPP* pThis);
static void _CbsettingsDeleteAllTopics(MMI_CBSAPP* pThis);
static void _CbsettingsEditChannelSave(MMI_CBSAPP* pThis);
static void _CbsettingsEnableDisableTopic(MMI_CBSAPP* pThis);
static void _CbsettingsExit(MMI_CBSAPP* pThis);



static MAE_Ret CBSAPP_SetDataToMenuModel(MMI_CBSAPP* pThis, u32 cfgItemID);
static void CBSAPP_SetDataToMenuItemLine2String(MMI_CBSAPP* pThis, u32 cfgItemID, u32 u32MenuId);
static MAE_Ret CBSAPP_SetValuesToCfg(MMI_CBSAPP* pThis, u32 cfgItemID, Msg_CB_Setting_e eMsg_CB_Setting);

//static void CBSAPP_Menu_ModelListener(void *pUserData, ModelEvent_t *pMdlEvent);
//static void CBSAPP_SetTopicShowListMenuMdlListener(void *pUserData, ModelEvent_t *pMdlEvent);
//static void CBSAPP_SetLangShowListMenuMdlListener(void *pUserData, ModelEvent_t *pMdlEvent);
//static void CBSAPP_SetTopicWithChannelMflMdlListener(void *pUserData, ModelEvent_t *pMdlEvent);

//static void CBSAPP_SetTopicShowListOptionMenuMdlListener(void *pUserData, ModelEvent_t *pMdlEvent);
//static void CBSAPP_ValueListMenuMdlListener(void *pUsrData, ModelEvent_t *pMdlEvent);
//static void CBSAPP_LoadMenuListbyViewID(MMI_CBSAPP* pThis,u32 viewID, u32 menuID, u32 cfgItemID);

static void CbSettingSetTopicMenuAdaptGet(WdgDynamicMenuItemPtr_t *pItemDataPtr, HWIN hWin, WdgMenuItemType_e eItemType, IWidget *pMenu, u32 u32Index);
static void CbSettingSetTopicMenuFreeItem(WdgDynamicMenuItemPtr_t *pItemDataPtr, HWIN hWin, WdgMenuItemType_e eItemType);

//static void CBSAPP_SetLanguage_Menu_FreeItem(void *pData, IBase *pOwner);

static void CBSAPP_CLOSE_DialogView(MMI_CBSAPP* pThis);
static void CBSAPP_CloseDialogWithDoneEvt(void* pData);
//static MAE_Ret CBSAPP_LoadDialog(MMI_CBSAPP* pThis,u32 ntextID ,u32 COMMON_DIALOG_VIEWID ,boolean processResult);
static MAE_Ret CBSAPP_LoadDialogView(MMI_CBSAPP *pThis, u8 DialogType, boolean bSuccess, u32 TitleTextID, u32 InfoTextID);

void CBSAPP_ProgressListener(MMI_CBSAPP *pThis, ModelEvent_t *pMdlEvent);
//static boolean CBSAPP_ProgressMainWidgetHandler(MMI_CBSAPP* pThis, MAE_EventId evt, u32 Parm1, u32 Parm2);
//static void CBSAPP_ProgressMainWidgetHandlerFree(MMI_CBSAPP* pThis);
static MAE_Ret CBSAPP_LoadProcessDialog(MMI_CBSAPP* pThis,u32 nTextID, boolean bAuto);
//static s32 CBSAPP_KEY_PRESS(void *pSM, u32 key);

//static void CBSAPP_Load_DUO_Selection_View(MMI_CBSAPP *pThis);
//static void CBSAPP_DUO_Selection_MenuMdlListener(void *pUsrData, ModelEvent_t *pMdlEvent);

static void CBSAPP_EditChannel_Saving(MMI_CBSAPP *pThis);
static MAE_Ret CBSAPP_UpdateMenuItemLine2Str(MMI_CBSAPP *pThis, u32 u32MenuId);
static void CBSAPP_Opt1MenuModelListener(void *pApplet, void *pUsrData, WidgetEvtCode_t nEvtCode, HistoryInfo_t *pHistoryInfo, IWidget *pReserved);
static void CBSAPP_Opt2MenuModelListener(void *pApplet, void *pUsrData, WidgetEvtCode_t nEvtCode, HistoryInfo_t *pHistoryInfo, IWidget *pWidget);
static void CbSettingTopicEditInputCB(void *pApplet, void *pUsrData, WidgetEvtCode_t nEvtCode, TextInfo *pTextInfo, IWidget *pWidget);

static void CbSettingInitMainMenuData(MMI_CBSAPP *pThis);
static void CbSettingInitTopicEditorWithChannelMenuData(MMI_CBSAPP *pThis);
static void CbSettingInitTopicEditorWithRngChannelMenuData(MMI_CBSAPP *pThis);

static MAE_Ret _CbSettingDisableTopicListOptionMenuItem(MMI_CBSAPP *pThis, IWidget *pOptMenu, u32 uItemId);

#endif /* __MMI_CBSETTINGAPP_PRIV_H__ */
