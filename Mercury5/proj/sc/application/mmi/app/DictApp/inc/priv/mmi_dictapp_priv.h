/**
* @file mmi_dictapp_priv.h
*
* State Machine Application - DICTAPP
* Generated by XFSM v1.0, CodeVer=v0.24
*
* Class Id: CLSID_DICTAPP
*
*
* @version $Id$
*/
#ifndef __MMI_DICT_PRIV_H__
#define __MMI_DICT_PRIV_H__

#include "mmi_baseapplet.h"

#include "mmi_dictapp.h"
#include "mmi_common_dialog.h"
#include "mmi_common_encoding.h"
#include "mmi_srv_header.h"
#include "mmi_common_cfg.h"

#include "mmi_common_vtm.h"
#include "mmi_dictapp_id.h"
#include "dictapp_resource.h"

#ifdef __DICTAPP_MMI__

#define DICT_MAX_INPUT_LEN   100
#define DICT_DIALOG_TIME        (2000)

#define DICT_CREATE_IDX_DURATION   2

#define DICT_CREATE_C2E_IDX 0x01
#define DICT_CREATE_E2C_IDX 0x02

#define DICT_RECORD_MAX_ITEM 300

#define DICT_FIRST_RECORD_OFFSET 0x4e
#define DICT_FIRST_RECORD_HEAD_OFFSET    4

#define DICT_TRACE(s)        LOG_TRACE(MMI_LEVEL_DICTAPP, s)
#define DICT_INFO_0(s)       LOG_INFO(MMI_LEVEL_DICTAPP, s)
#define DICT_INFO_1(s, n)    LOG_INFO(MMI_LEVEL_DICTAPP, s, n)
#define DICT_WARN(s, n)      LOG_WARN(MMI_LEVEL_DICTAPP, s, n)
#define DICT_ERROR(s, n)     LOG_ERROR(MMI_LEVEL_DICTAPP, s, n)

#define DICT_MAX_FREESPACE 	10  //10kb


#define DICT_LZSS_TEMP_SIZE 50*1024
#define DICT_LZSS_SEARCH_WINDOW_SIZE    497
#define DICT_LZSS_PREVIEW_WINDOW_SIZE   15
#define DICT_LZSS_TOTAL_WINDOW_SIZE    (DICT_LZSS_SEARCH_WINDOW_SIZE+DICT_LZSS_PREVIEW_WINDOW_SIZE)

#define DICT_LZSS_ENCODE_THRESHOLD      2
#define DICT_LZSS_READ_ERROR 0xffffffff

#define DICT_LZSS_BIT_PER_BYTE          8
#define DICT_LZSS_BIT_PER_ENCODE        1

#define DICT_WORD_NULL   0x00
#define DICT_WORD_SEPARATER   0x0a
#define DICT_WORD_TAB    0x09
#define DICT_WORD_PHONETIC_SYMBOL_START '['
#define DICT_WORD_PHONETIC_SYMBOL_END ']'
#define DICT_WORD_NUMBER_END '}'

#define DICT_WORD_PINYIN_MULTIPLE    12

#define DICT_MENU_DISPLAY_ITEM_MAX   8
#define DICT_ERROR_INDEX 0xffff

#define DICT_INPUT_MAX_BYTE         36

typedef enum
{
    DictApp_Error,
    DictApp_NoCard,
    DictApp_PdbIsNotExist,
    DictApp_NoSpace,
    DictApp_AccessFileError,
} DictApp_Error_e;

typedef enum
{
    DictApp_App,   //dict app is launched normally
    DictApp_Translate, //dict app is launched to translate a word which is input to dict app by MAE_EVT_APP_START
} DictApp_Mode_e;

typedef enum
{
    DictApp_CheckIdxFile,
    DictApp_CreatIdxFile,
    DictApp_IdxFileInitSuccess
} DictApp_IdxInitMode_e;

typedef enum
{
    DictApp_KeyWord,
    DictApp_PhoneticSymbol,
    DictApp_Explanation,
} DictApp_WordComponent_e;

typedef enum
{
    DictApp_Table0 = 0,
    DictApp_Table1,
    DictApp_TableMax,
} DictApp_TableSelect_e;

typedef enum
{
    eDictApp_LzssEncodeStart,
    eDictApp_LzssEncodeStartRaw,
} DictApp_Lzss_t;

typedef enum
{
    DictApp_Library_None = 0,
    DictApp_Library_InPhone,
    DictApp_Library_InCard,
#ifdef __DUAL_CARD__
	DictApp_Library_InCard2
#endif
}DictApp_LibraryLocation_e;


//pdb file head info.  address 0x00-0x4d
//we don't use this struct, we only need to see the pdb header struct below
typedef struct {
    u8 nName[32];
    u32 nAttributes;
    u16 nVersion;
    u32 nCreateTime;
    u32 nModifyTime;
    u32 nBackupTime;
    u32 nModificationNumber;
    u32 nAppInfoID;
    u32 nSortInfoID;
    u8 nTypeArray[4];
    u8 nCreatorArray[4];
    u32 nIdSeed;
    u32 nNextRecordList;
    u16 nNumOfRecords;  //total records, include first records
} DictApp_PdbHeader_t;


//pdb record offset info, start from 0x4e, len = sizeof(DictApp_BlockInfo_t)*DictApp_PdbHeader_t->nNumOfRecords
typedef struct
{
    u8 nAttrib;
    u8 nUniqueId[3];
} AttribAndUniqueId_t;

typedef union
{
    AttribAndUniqueId_t tAttribAndUniqueId;
    u32 nForSwap;
} AttribAndUniqueId_u;

typedef struct
{
    u32 nStartAddress;
    AttribAndUniqueId_u uAttribAndUniqueId;
} DictApp_RecordInfo_t;

//pdb first record head, len = 16 bytes. Start from first record addr
typedef struct
{
    u32 nReserve0;
    u16 nNumOfRecords;  //total records, declude first records
    u16 nCompressFlag;
    u32 nReserve1;
    u32 nReserve2;
} DictApp_FirstRecordHead_t;

//pdb each record size.start from first record offset + DictApp_FirstRecordHead_t.
//size = DictApp_FirstRecordHead_t->nNumOfRecords*sizeof(DictApp_RecordSize)
typedef struct
{
    u16 nRecordSize;
} DictApp_RecordSize;

typedef struct
{
    u32 nWordsNumOffset;
    u32 nIndexOffset;
    u32 nRecordOffset;
    u16 nRecordLen;
    u16 nNumOfWords;
} DictApp_IndexRecordInfo_t;

typedef struct
{
    u32 nPdbFileSize;
    u32 nIdxFileSize;
    u32 nNumOfWords;
    u32 nCheckSum;
} DictApp_IndexTailInfo_t;

typedef struct
{
    u8 *pnKeyword;
    u8 *pnPhoneticSymbol;
    u8 *pnExplanation;
    u8 nKeywordLen;
    u8 nPhoneticSymbolLen;
    u16 nExplanationLen;
    u16 nOffset;
} DictApp_VocabularyData_t;

typedef struct
{
    u8 *pnDataBuf;
    u32 nWordsNumOffset;
    u16 nRecordIndex;
    u16 nItemTotal;
    u16 nCurrentItem;
    boolean bMatch;
    DictApp_VocabularyData_t VocabularyDataTable[DICT_RECORD_MAX_ITEM];
} DictApp_VocabularyTable_t;

typedef struct
{
    FileMgr_Stream_t *pIfsPdb;
    FileMgr_Stream_t *pIfsIdx;
    MAE_WChar *pszPdbFileName;
    MAE_WChar *pszIdxFileName;
    u32 nPdbFileSize;
    u32 nIdxFileSize;
    u32 nFirstRecordOffset;
    u32 nStrListOffset;
    u16 nNumOfRecords;
    u16 nCompressFlag;
    u8 *pnIndexBuf;
    u32 nIndexBufSize;
    DictApp_IndexRecordInfo_t *pIndexRecordInfo;
    u8 *pnRecordBuf;
    u32 nRecordBufSize;
    DictApp_VocabularyTable_t* pTable[DictApp_TableMax];
    DictApp_TableSelect_e eTabelSelect;
    u32 nNumOfWords;
    u16 nCurrentRecordIndx;
    u16 nCreateIdxMask;
    u32 nCheckSum;
} DictApp_DictInfo_t;

// process bit operation
typedef struct
{
    u8 *pSrcBuf;
    u32 nSrcLen;
    u32 nByteIndex;
    u8  nBitIndex;  // bit index in a byte [0-7]
} DictApp_LzssBitSource_t;
/*-------------------------------------------------------------------------*/

/**
 * Application structure
 */
typedef struct DictAppData_tag {

    APPLET_BASE_ELEMENTS;

    DictApp_Mode_e        eMode;
    DictApp_DictInfo_t    stDictC2EInfo;
    DictApp_DictInfo_t    stDictE2CInfo;
    DictApp_DictInfo_t    *pstDictInfo;

    DictApp_IdxInitMode_e  eIdxInitMode;
    DictApp_LibraryLocation_e eLibraryLocation;

    u16         nCreateIdxMask;
    u8          *pTmpBuf;    //used to create index file

    IWidget     *pIOptMenuWdg;
    IWidget     *pIInputWdg;
    MAE_WChar   *pszInputText;
    boolean     bDontReload;
    boolean     bSetInitText;
    boolean     bErrorHappened;

    u16         nSelectedID;
    boolean     bSuspended;

} DictAppData_t;


typedef struct DictWndWordMenuData_TAG {
    IWidget*        pMenuWdg;
} DictWndWordMenuData_t;


// Window handlers

static MAE_Ret _DictWndInputHdl(void *pCusHandle, const WindowMsg_t *pWndMsg, void *pWndData, u32 nWndInitParam);
static MAE_Ret _DictWndOptionHdl(void *pCusHandle, const WindowMsg_t *pWndMsg, void *pWndData, u32 nWndInitParam);
static MAE_Ret _DictWndWordMenuHdl(void *pCusHandle, const WindowMsg_t *pWndMsg, void *pWndData, u32 nWndInitParam);
static MAE_Ret _DictWndTranslationHdl(void *pCusHandle, const WindowMsg_t *pWndMsg, void *pWndData, u32 nWndInitParam);

static MAE_Ret _DictCtor(IApplet *pApplet, u32 nEvt, u32 Param1, u32 Param2);
static MAE_Ret _DictDtor(IApplet *pApplet, u32 nEvt, u32 Param1, u32 Param2);
static void _DictInitCreate(DictAppData_t* pThis);
static void _DictInputCreate(DictAppData_t* pThis);
static void _DictInputShow(DictAppData_t* pThis);
static void _DictOptionCreate(DictAppData_t* pThis);
static void _DictStartWordMenu(DictAppData_t* pThis);
static void _DictWordMenuCreate(DictAppData_t* pThis);
static void _DictWordMenuShow(DictAppData_t* pThis);
static void _DictStartLookup(DictAppData_t* pThis);
static void _DictTranslationCreate(DictAppData_t* pThis);
static void _DictBackToInput(DictAppData_t* pThis);
static void _DictOpenFiles(DictAppData_t* pThis);
static void _DictCloseFiles(DictAppData_t* pThis);

// Event callbacks
static boolean _DictStartCB(IApplet *pApplet, u32 nEvt, u32 param1, u32 param2);
static boolean _DictKeyPressCB(IApplet *pApplet, u32 nEvt, u32 param1, u32 param2);
static boolean _DictSuspendAppCB(IApplet *pApplet, u32 nEvt, u32 param1, u32 param2);
static boolean _DictResumeAppCB(IApplet *pApplet, u32 nEvt, u32 param1, u32 param2);

static void _DictErrorMessage(DictAppData_t* pThis, DictApp_Error_e eErr);
static void _DictCheckPdfAndIdxFile(DictAppData_t* pThis, boolean bStartCheck);
static void _DictCreateIdxFile(DictAppData_t* pThis, boolean bStartCreate);
static void _DictUSBStatusIndCB(void *pData, MMI_USB_STATUS_E eUSBStatus);
#if defined(__APP_MMI_CHECKDISK__)
void _DictCheckDiskStatusListener(char *pSbjName, SubjectStatus_e nSbjStatus, void *pUser);
#endif
static void _DictAccessoryPlugStatusCB(void *pData, ACCDeviceType_e eDevice, boolean bPlug, ExtCardAccInfo_e eCardinfo);

static void _DictBacklightCB(void* pThis, boolean bBackLightOn);
static boolean _DictBacklightOffCB(IApplet *pApplet);
static boolean _DictBacklightOnCB(IApplet *pApplet);


static u32 _DictSwap32(u32 x);
static u16 _DictSwap16(u16 x);
static s16 _DictStrcmp (const u8 *pString1, const u8 *pString2);
static u32 _DictLzssCountUseBit(u32 value);
static u32 _DictLzssGetBits(DictApp_LzssBitSource_t *ptr, s32 bit_num);
static MAE_Ret _DictLzssDecompress(u8 *src, u32 nSrcLen, u8 **dst, u32 *pnDstLen);
static boolean _DictHaveChinese(const MAE_WChar *pwKeyWord, u32 nLen);
static MAE_Ret _DictDecodeOneRecord(DictAppData_t *pThis, DictApp_DictInfo_t *pstDictInfo, u32 nCreateIdxStep);
static MAE_Ret _DictLookUpRecord(DictAppData_t *pThis, DictApp_DictInfo_t *pstDictInfo, MAE_WChar *pwKeyWord);
static MAE_Ret _DictConvertRecordToVocasTable(DictAppData_t *pThis, DictApp_DictInfo_t *pstDictInfo, DictApp_VocabularyTable_t *pTable, u16 nIndex);
static MAE_Ret _DictKeywordGoToVocas(DictApp_VocabularyTable_t *pTable, MAE_WChar *pwKeyWord);
static MAE_Ret _DictSearchForKeyWord(DictAppData_t *pThis);
static MAE_Ret _DictGetPdbInfo(DictAppData_t *pThis, DictApp_DictInfo_t *pstDictInfo);
static MAE_Ret _DictReadIndexFile(DictAppData_t *pThis, DictApp_DictInfo_t *pstDictInfo);
static MAE_Ret _DictDialogCB(void* pThis, MAEEvent_t nEvt, u32 param1, u32 param2);
static void _DictCreateIdxFileTimerCB(void *pData);
static void _DictCheckFileTimerCB(void *pData);
static void _DictOptMenuL1CB(void *pApplet, void *pUsrData, WidgetEvtCode_t nEvtCode, HistoryInfo_t *pHistoryInfo, IWidget *pWidget);
static void _DictOptMenuL2CB(void *pApplet, void *pUsrData, WidgetEvtCode_t nEvtCode, HistoryInfo_t *pHistoryInfo, IWidget *pWidget);
static void _DictMenuKeyCB(void *pApplet, void *pUsrData, WidgetEvtCode_t nEvtCode, HistoryInfo_t *pHistoryInfo, IWidget *pWidget);
static void _DictMenuOnFocusCB(void *pApplet, void *pUsrData, WidgetEvtCode_t nEvtCode, FocusInfo_t *pFocusInfo, IWidget *pWidget);
static void _DictWordMenuAdaptGet(WdgDynamicMenuItemPtr_t *pItemDataPtr, HWIN hWin, WdgMenuItemType_e eItemType, IWidget *pMenu, u32 u32Index);
static void _DictWordMenuFreeItem(WdgDynamicMenuItemPtr_t *pItemDataPtr, HWIN hWin, WdgMenuItemType_e eItemType);
static void _DictSymbolToUni(u8 *pSymbol, u32 nSymbolLen, u8 *pUni, u32 nBufLen);
static void _DictGetInputText(DictAppData_t* pThis);
static void _DictClearInputText(DictAppData_t* pThis);

#if defined(__ONBOARD_USER_STORAGE_MMI__)
static MAE_WChar g_PHONE_wcDictPath[] = L"fs:/PHON/Dictionary";
static MAE_WChar g_PHONE_wcPdbC2EName[] = L"fs:/PHON/Dictionary/MdicC2E.pdb";
static MAE_WChar g_PHONE_wcIdxC2EName[] = L"fs:/PHON/Dictionary/MdicC2E.idx";
static MAE_WChar g_PHONE_wcPdbE2CName[] = L"fs:/PHON/Dictionary/MdicE2C.pdb";
static MAE_WChar g_PHONE_wcIdxE2CName[] = L"fs:/PHON/Dictionary/MdicE2C.idx";
#endif
static MAE_WChar g_SD_wcDictPath[] = L"fs:/CARD/Dictionary";
static MAE_WChar g_SD_wcPdbC2EName[] = L"fs:/CARD/Dictionary/MdicC2E.pdb";
static MAE_WChar g_SD_wcIdxC2EName[] = L"fs:/CARD/Dictionary/MdicC2E.idx";
static MAE_WChar g_SD_wcPdbE2CName[] = L"fs:/CARD/Dictionary/MdicE2C.pdb";
static MAE_WChar g_SD_wcIdxE2CName[] = L"fs:/CARD/Dictionary/MdicE2C.idx";
#ifdef __DUAL_CARD__
static MAE_WChar g_SD2_wcDictPath[] = L"fs:/SD_2/Dictionary";
static MAE_WChar g_SD2_wcPdbC2EName[] = L"fs:/SD_2/Dictionary/MdicC2E.pdb";
static MAE_WChar g_SD2_wcIdxC2EName[] = L"fs:/SD_2/Dictionary/MdicC2E.idx";
static MAE_WChar g_SD2_wcPdbE2CName[] = L"fs:/SD_2/Dictionary/MdicE2C.pdb";
static MAE_WChar g_SD2_wcIdxE2CName[] = L"fs:/SD_2/Dictionary/MdicE2C.idx";
#endif

BEGIN_EVENTCB_TABLE(g_pEventToFuncCBFtbl)
    {MAE_EVT_CONSTRUCT,             _DictCtor},
    {MAE_EVT_DESTRUCT,              _DictDtor},
    {MAE_EVT_APP_START,             _DictStartCB},
    {MAE_EVT_KEY_PRESS,             _DictKeyPressCB},
    {MAE_EVT_APP_SUSPEND,           _DictSuspendAppCB},
    {MAE_EVT_APP_RESUME,            _DictResumeAppCB},
END_EVENTCB_TABLE;

#endif //__DICTAPP_MMI__
/*-------------------------------------------------------------------------*/
#endif /* __MMI_DICT_PRIV_H__ */
