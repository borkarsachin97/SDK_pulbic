/**
* @file mmi_camapp_priv.h
*
* State Machine Application - CAMAPP
* Generated by XFSM v1.0, CodeVer=v0.24
*
* Class Id: CLSID_CAMAPP
*
*
* @version $Id: mmi_camapp_priv.h 39759 2009-09-09 06:35:17Z mike.yeh $
*/
#ifndef __MMI_CAMAPP_PRIV_H__
#define __MMI_CAMAPP_PRIV_H__

#if defined(__ENABLE_CAMERA__) || defined(__ENABLE_CAMCORDER__)

/*-------------------------------------------------------------------------*/

#include "mmi_mae_common_def.h"
#include "mmi_camapp.h"
#include "mmi_srv_header.h"
#include "mmi_baseapplet.h"
#include "mmi_launcher_picviewer.h"
#include "mmi_launcher_videoplayer.h"
#include "mmi_common_dialog.h"
#include "mmi_common_vtm.h"
#include "mmi_common_window.h"

#include "mmi_rs_macro_struct.h"
#include "mmi_camapp_id.h"
#include "camapp_resource.h"

#if defined(__DUAL_CAMERA_MMI__)
#include "mmi_common_cfg.h"
#endif

#define CAM_CAPTURE_TIMER                           (1000)
#define CAM_START_PREVIEW_TIMER                     (100)
#define CAM_STOP_PREVIEW_TIMER                      (100)
#define CAM_CLOSE_TIMER                             (5*60*1000) // 5 minutes
#define CAM_EM_MODE_CLOSE_TIMER                     (5*1000) // 5 seconds
#define CAM_MINIMUM_REQUIRED_SD_SPACE               (500) // 500 KB
#define CAM_SUB_SETTING_MENU_IDX_DEFAULT            (10000)

#ifdef __DUAL_CAMERA_MMI__
#define CAMERA_NUM                                  (2)
#define CAMERA_SUB_IDX                              (1)
#else
#define CAMERA_NUM                                  (1)
#endif
#define CAMERA_PRI_IDX                              (0)

/*
#define CAM_MAX_RESOLUTION                      CAMERASRV_PIC_RESOLUTION__1024X768

#ifdef __DUAL_CAMERA_MMI__
#define SUB_CAM_MAX_RESOLUTION             CAMERASRV_PIC_RESOLUTION__1024X768
#endif
*/
typedef enum
{
    CAM_PREVIEW_MODE = 0,
    CAM_IMAGE_PLAYBACK_MODE,
    CAM_VIDEO_PLAYBACK_MODE,
} CamResumeMode_e;

typedef enum
{
    CAM_SHOW_NONE= 0,
    CAM_SHOW_DIALOG,
    CAM_SHOW_SELECT_WINDOW
}CamStorageChanged_e;

// Define all enumerations of each camera config and attribute
typedef enum
{
    /*
    The actions below have priorities from high to low.
    This enum indicates what action that user currently uses.
    STOP ACTION has the highest priority, that is, it cannot be updated to other ACTIONS.
    */
    CAM_EXIT_ACT = 100,
    CAM_ERROR_ACT = 101,
    CAM_STOP_ACT = 102,
    CAM_SUSPEND_ACT = 103,
    CAM_PREVIEW_ACT = 104,
    CAM_SHOWNOTICE_ACT = 105,
    CAM_CAPTURE_ACT = 106,
    CAM_RECORD_ACT = 107,
    CAM_PLAYBACK_ACT = 108,
    CAM_SHOWNOTICE_PLAYBACK_ACT = 109,
    CAM_SHOWNOTICE_PREVIEWE_ACT = 110,
    CAM_SHOWNOTICE_INIT_ACT = 111
} CamAction_e;

typedef enum
{
    /*
    These enumerations are used to indicate the current state that CamApp is in.
    This is useful when CamApp is in Suspend state, and will back to the previous before entering Suspend state.
    State machine "deep" and "history" cannot be used in this case.  Because some flows need to back to PowerOn state, while some needn't.
    */
    CAM_UNKNOWN_STATE = 0,
    CAM_INIT_STATE,
    CAM_POWER_ON_STATE,
    CAM_POWER_OFF_STATE,
    CAM_PREVIEW_STATE,
    CAM_STOP_PREVIEW_STATE,
    CAM_PREVIEWING_STATE,
    CAM_SETTINGSMENU_STATE,
    CAM_IMAGESIZE_STATE,
    CAM_NIGHTMODE_STATE,
    CAM_EFFECT_STATE,
    CAM_MULTISHOT_STATE,
    CAM_TIMER_STATE,
    CAM_WHITEBALANCE_STATE,
    CAM_SHUTTERSOUND_STATE,
    CAM_SOUND_STATE,
    CAM_STORAGE_STATE,
    CAM_IMGQUALITY_STATE,
    CAM_CAPTURE_STATE,
    CAM_PLAYBACK_STATE,
    CAM_VDOQUALITY_STATE,
    CAM_ANTIFLICKER_STATE,
    CAM_RECORD_STATE,
    CAM_SHOWNOTICE_STATE,
    CAM_SUSPEND_STATE,
    CAM_VIDEOSIZE_STATE,
    CAM_SIZELIMIT_STATE,
    CAM_EV_STATE,
    CAM_TIMELIMIT_STATE,
    CAM_FILLLIGHT_STATE,
#ifdef __VIDEO_STABILIZER_ENABLE__
    CAM_VDOSTABILIZER_STATE,
#endif
#ifdef __CAMERA_STICKER_MMI__
    CAM_STICKER_STATE,
#endif
#ifdef __DUAL_CAMERA_MMI__
    CAM_SELECTION_STATE,
#endif
#if defined(__MMI_AUTO_FOCUS_SUPPORT__) && defined(__TOUCH_SCREEN_MMI__)
    CAM_FOCUSMODE_STATE,
#endif
#ifdef __CAMERA_LOMO_MMI__
    CAM_LOMO_STATE,
#endif
#ifdef __CAMERA_MIRROR_MMI__
    CAM_MIRROR_STATE,
#endif
#ifdef __CAMERA_PANORAMA_MMI__
    CAM_PANORAMA_STATE,
#endif
} CameraState_e;

typedef enum
{
    CAMERA_CFG_STOREED_PATH = 0,
    CAMERA_CFG_ANGLE,
    CAMERA_CFG_IMG_SIZE,
    CAMERA_CFG_TIMER,
    CAMERA_CFG_SHUTTER_SOUND,
    CAMERA_CFG_MULTISHOT,
    CAMERA_CFG_STORAGE,
    CAMERA_CFG_IMG_QUALITY,
    CAMERA_CFG_VDO_QUALITY,
    CAMERA_CFG_VDO_SIZE,
    CAMERA_CFG_VDO_SIZE_LIMIT,
    CAMERA_CFG_VDO_TIME_LIMIT,
    CAMERA_CFG_VDO_STABILIZER,
    CAMERA_CFG_ANTIFLICKER,
    CAMERA_CFG_EFFECT,
    CAMERA_CFG_EV,
    CAMERA_CFG_SHOOTING_MODE,
    CAMERA_CFG_VDO_SOUND,
    CAMERA_CFG_AWB,
    CAMERA_CFG_FOCUS_MODE,
    CAMERA_CFG_SUM
} CameraConfigType_e;

typedef enum
{
    CAMERA_FILL_LIGHT_OFF,
    CAMERA_FILL_LIGHT_ON
}
CameraFillLight_e;

typedef enum
{
    CAMERA_AUTO_FOCUS_START = 0,
    CAMERA_AUTO_FOCUS_COMPLETE_SUCCESS,
    CAMERA_AUTO_FOCUS_COMPLETE_FAIL
}
CameraAutoFocusStatus_e;


// Attribute definition
typedef struct
{
    //CameraSrvDev_e          eCamId;
    CameraSrvAWB_e            eCamAWB;                // *Auto White Balance, MMI_CAM_AWB_ON, MMI_CAM_CLOUDY, MMI_CAM_DAYLIGHT, MMI_CAM_FLUORESCENT, MMI_CAM_TUNGSTEN
    CameraSrvAE_e             eCamAE;                 // Auto Exposure, MMI_CAM_WHOLE_IMAGE, MMI_CAM_CENTRALWIN, MMI_CAM_WEIGHTED_CENTRALWIN, MMI_CAM_CENTRAL_POINT
    CameraSrvAF_e             eCamAF;                 // Auto Focus, MMI_CAM_POWER_OFF, MMI_CAM_POWER_ON
    CameraSrvZoom_e           eCamZoom;               // *Zoom, MMI_CAM_ZOOM_MIN, MMI_CAM_ZOOM_IN, MMI_CAM_ZOOM_OUT, MMI_CAM_ZOOM_MAX, MMI_CAM_ZOOM_DEFAULT
    CameraSrvEV_e             eCamEV;                 // *EV, MMI_CAM_EV_DEFAULT, MMI_CAM_EV_MIN, MMI_CAM_EV_ADD, MMI_CAM_EV_MINUS, MMI_CAM_EV_MAX
    CameraSrvAntiFlicker_e    eCamAntiFlicker;        // Anti Flicker, MMI_CAM_ANTIFLICKER_OFF, MMI_CAM_ANTIFLICKER_ON_60MHZ, MMI_CAM_ANTIFLICKER_ON_50MHZ
    CameraSrvEffect_e         eCamEffect;             // *Effect, MMI_CAM_NORMAL, MMI_CAM_MONO, MMI_CAM_SEPIA, MMI_CAM_NEGATIVE, MMI_CAM_SKETCH, MMI_CAM_OIL_PAINTING, MMI_CAM_AMBOS, MMI_CAM_MOSAIC, MMI_CAM_ZIPPER, MMI_CAM_BLUR
    CameraSrvEnv_e            eCamEnv;                // *Environment(Shooting Mode), MMI_CAM_AUTO, MMI_CAM_LANDSCAPE, MMI_CAM_PORTRAIT, MMI_CAM_NIGHT, MMI_CAM_SUNSET
    CameraSrvFocusMode_e      eCamFocusMode;          // Focus mode,
    CameraSrvVdoStabilizer_e eCamVdoStabilizer;       //Switch Video Stabilizer
} CameraAttribute_t;


/*
* Rules about all the settings in camera AP:
* 1. All the default setting values are defined in mmi_cfgsrv_mitem_allow_mr_table.c, all the enum values are defined in mmi_cfgsrv_camera.h.
* 2. The following settings will be lasted forever after user changes:
*    --Image size
*    --Image quality
*    --Default storage
*    --Shutter sound
* 3. The following settings after user changes will be lasted ONCE photo shot and reseted to default values:
*    --Timer
* 4. The following settings after user changes will be lasted *the lifetime of camera AP*, and they will be reseted to default values after camera AP exits
*    --Effect
*    --White balance
*    --Zoom
*    --EV
*    --Continues(Multishot)
*    --Shooting mode
*    --Flash
*    --File size limit
*    --Rec time limit
* 5. Default storage will be changed to Card automatically after memory card has been inserted;
*    on the contrary, Default storage will be changed to Phone automatically after memory card has been removed.
*/

/*
* CameraSettings_t keeps all the current setting values.
* First of all, camConfig and camAttr keep the values loaded from Configuration SRV.
* Each change by user will update the value in camConfig or camAttr, not in Configuration SRV.
* Currently, ONLY Image size, Image quality, and Default storage(2nd rule above) can be saved to Configuration SRV by calling CAMAPP_Save_Config_By_Type.
* The xxxDefault member variables(3rd rule above) keep the default value loaded from Configuration SRV and
* will be copied to camConfig and camAttr to restore values when MAE_EVT_CAMERA_STOP_CAPTURE_CNF is received.
*/
typedef struct
{
    //CameraSrvDev_e            eCamId;
    CameraSrvTimer_e            eCamTimer;
    CameraSrvStorage_e          eCamStorage;
    CameraSrvShutterSound_e     eCamShutterSound;
    CameraSrvStorageConfig_t    tCamStorageConfig;
    CameraSrvCaptureConfig_t    tCamCaptureConfig;
    CameraSrvRecordConfig_t     tCamRecordConfig;
    CameraAttribute_t           tCamAttr;
    CameraSrvLomo_e             eCamLomo;
    CameraSrvMirror_e           eCamMirror;
    CameraSrvPanoramaInfo_t     tCamPanoramaInfo;
} CameraSettings_t;

/*
  CameraPreviewStart_t keeps the icon in current preview start point.
  It didn't belong a specific mode. Capture and Video use the same setting.
  the values will be kept in the lifetime of camapp. And willn't save into the config
*/
typedef struct
{
    u32          nPreviewStart_X;		  //
    u32          nPreviewStart_Y;
    u32          nPreviewWidth;
    u32          nPreviewHeight;
} CameraPreviewStart_t;

/*
  CameraGlobalSettings_t keeps the current setting values.
  It didn't belong a specific mode. Capture and Video use the same setting.
  the values will be kept in the lifetime of camapp. And willn't save into the config
*/
typedef struct
{
    CameraFillLight_e          eCamFillLight;		  // Switch, MMI_CAM_FILLLIGHT_OFF, MMI_CAM_FILLLIGHT_ON, MMI_CAM_LED_OFF, MMI_CAM_LED_ON, MMI_CAM_AF_OFF, MMI_CAM_AF_ON, MMI_CAM_PREVIEW_OFF, MMI_CAM_PREVIEW_ON
} CameraGlobalSettings_t;


// Define struct types for configuration value(defined in mmi_cfgsrv_camera.h) to menu item ID(mae_menulabel.h)
// Define Enum value of each config/attribute maps to a menu item ID
typedef struct
{
    u8              nCfgEnumVal;
    MenuItemId_e    eItemId;
    u32             nImageId;
} Cfg_To_Menu_Id_Tbl_t;

// Define for each menu model ID queries which *config/attribute - menu item ID* table
typedef struct
{
    u16                         nMenuMdlId;
    const Cfg_To_Menu_Id_Tbl_t  *pTable;
    u16                         nSize;
} Menu_Mdl_Id_To_Cfg_Tbl_t;

// Define structure for Zoom enum to Zoom status bar position, and EV enum to EV text label.
typedef struct
{
    u8              nCfgEnumVal;
    u32             nValue;
} Cfg_To_Val_Tbl_t;

// Table of sub setting menu tile.
typedef struct
{
    u16             nMenuModelId;
    u32             nTextLabelId;
} MdlId_To_TxtId_Tbl_t;

// Define for each menu model ID queries which setting - menu item ID* table
typedef struct
{
    u16                         nMenuMdlId;
    const WdgStaticMenuItem_t  *pTable;
    u16                         nSize;
} Menu_Mdl_Id_To_Setting_Tbl_t;

enum
{
    CAMERA_PREVIEW_ABSCONTAINER = APP_WDG_START,
    CAMERA_PREVIEW_OSDWIDGET,
#if defined(__CAMERA_STICKER_MMI__)
    CAMERA_PREVIEW_STICKER_IMAGEWIDGET,
#endif
    CAMERA_PREVIEW_ZOOM_IMAGEWIDGET,
    CAMERA_PREVIEW_ZOOM_STATUS_IMAGEWIDGET,
    CAMERA_PREVIEW_ZOOM_IN_BUTTONWIDGET,
    CAMERA_PREVIEW_ZOOM_OUT_BUTTONWIDGET,
#if defined(__CAMERA_MULTI_FINGER__) || defined(__MULTI_TOUCH_SLIM__)
    CAMERA_PREVIEW_ZOOM_MT_IMAGEWIDGET,
#endif
    CAMERA_PREVIEW_TIMER_BUTTONWIDGET,
    CAMERA_PREVIEW_TIME_LIMIT_BUTTONWIDGET,
    CAMERA_PREVIEW_SOUND_BUTTONWIDGET,
    CAMERA_PREVIEW_NIGHTMODE_BUTTONWIDGET,
    CAMERA_PREVIEW_AWB_BUTTONWIDGET,
    CAMERA_PREVIEW_MULTISHOT_BUTTONWIDGET,
    CAMERA_PREVIEW_QUALITY_BUTTONWIDGET,
    CAMERA_PREVIEW_RESOLUTION_BUTTONWIDGET,
#if defined(__MMI_BATTERY_ICON_DISPLAY__)
    CAMERA_PREVIEW_BATTERY_IMAGEWIDGET,
#endif
#if defined(__MMI_AUTO_FOCUS_SUPPORT__) && defined(__TOUCH_SCREEN_MMI__)
    CAMERA_PREVIEW_FOCUS_BUTTONWIDGET,
#endif
#ifdef __CAMERA_MIRROR_MMI__
    CAMERA_PREVIEW_MIRROR_BG_IMAGEWIDGET,
#endif
#ifdef __CAMERA_PANORAMA_MMI__
    CAMERA_PREVIEW_PANORAMA_BG_IMAGEWIDGET,
    CAMERA_PREVIEW_PANORAMA_INDICATOR_BG_IMAGEWIDGET,
    CAMERA_PREVIEW_PANORAMA_INDICATOR_IMAGEWIDGET,
#endif
    CAMERA_PREVIEW_FUNC_BAR_IMAGEWIDGET,
    CAMERA_PREVIEW_SETTING_BUTTONWIDGET,
    CAMERA_PREVIEW_FILE_MANAGER_BUTTONWIDGET,
    CAMERA_PREVIEW_CAPTURE_BUTTONWIDGET,
    CAMERA_PREVIEW_SWITCH_MODE_BUTTONWIDGET,
    CAMERA_PREVIEW_SWITCH_WB_BUTTONWIDGET,
    CAMERA_PREVIEW_EXIT_BUTTONWIDGET
#ifdef __MMI_CAMERA_NUMBER_KEY_ENABLE__
    ,CAMERA_PREVIEW_SETTING_TITLE_TEXTWIDGET,
    CAMERA_PREVIEW_SETTING_CONTENT_TEXTWIDGET
#endif
};

typedef struct
{
    IWidget *pAbsContainer;
    IWidget *pOsdWdg;
#if defined(__CAMERA_STICKER_MMI__)
    IWidget *pStickerImgWdg;
#endif
    IWidget *pZoomImgWdg;
    IWidget *pZoomStatusImgWdg;
    IWidget *pZoomInButtonWdg;
    IWidget *pZoomOutButtonWdg;
#if defined(__CAMERA_MULTI_FINGER__) || defined(__MULTI_TOUCH_SLIM__)
    IWidget *pZoomMTImgWdg;
#endif
    IWidget *pTimerButtonWdg;
    IWidget *pFillLightButtonWdg;
    IWidget *pTimeLimitButtonWdg;
    IWidget *pSoundButtonWdg;
    IWidget *pNightModeButtonWdg;
    IWidget *pAwbButtonWdg;
    IWidget *pMultiShotButtonWdg;
    IWidget *pQualityButtonWdg;
    IWidget *pResolutionButtonWdg;
#if defined(__MMI_BATTERY_ICON_DISPLAY__)
    IWidget *pBatteryImgWdg;
#endif
#if defined(__MMI_AUTO_FOCUS_SUPPORT__) && defined(__TOUCH_SCREEN_MMI__)
    IWidget *pFocusButtonWdg;
#endif
#ifdef __CAMERA_MIRROR_MMI__
    IWidget *pMirrorBGImgWdg;
#endif
#ifdef __CAMERA_PANORAMA_MMI__
    IWidget *pPanoramaBGImgWdg;
    IWidget *pPanoramaIndicatorBGImgWdg;
    IWidget *pPanoramaIndicatorImgWdg;
#endif
    IWidget *pFuncBarImgWdg;
    IWidget *pSettingButtonWdg;
    IWidget *pFileMgrButtonWdg;
    IWidget *pCaptureButtonWdg;
#if defined(__ENABLE_CAMERA__) && defined(__ENABLE_CAMCORDER__)
    IWidget *pSwitchModeButtonWdg;
#else
    IWidget *pSwitchWBButtonWdg;
#endif
    IWidget *pExitButtonWdg;
#ifdef __MMI_CAMERA_NUMBER_KEY_ENABLE__
    IWidget *pSettingTitleWdg;
    IWidget *pSettingContentWdg;
#endif

}CameraPreviewWndWdgList_t;

typedef struct
{
    CameraPreviewWndWdgList_t tWdgList;

} CameraPreviewWndData_t;

enum
{
    CAMERA_CAPTURE_ABSCONTAINER = APP_WDG_START,
    CAMERA_CAPTURE_OSDWIDGET,
#if defined(__CAMERA_STICKER_MMI__)
    CAMERA_CAPTURE_STICKER_IMAGEWIDGET,
#endif
    CAMERA_CAPTURE_TIMER_IMAGEWIDGET,
    CAMERA_CAPTURE_TIMER_TEXTWIDGET,
    CAMERA_CAPTURE_FUNC_BAR_IMAGEWIDGET,
    CAMERA_CAPTURE_STOP_BUTTONWIDGET
};

typedef struct
{
    IWidget *pAbsContainer;
    IWidget *pOsdWdg;
#if defined(__CAMERA_STICKER_MMI__)
    IWidget *pStickerImgWdg;
#endif
#ifdef __CAMERA_MIRROR_MMI__
    IWidget *pMirrorBGImgWdg;
#endif
    IWidget *pTimerImgWdg;
    IWidget *pTimerTxtWdg;
    IWidget *pFuncBarImgWdg;
    IWidget *pStopButtonWdg;

} CameraCaptureWndWdgList_t;

typedef struct
{
    CameraCaptureWndWdgList_t tWdgList;
    boolean bStopCapture;

} CameraCaptureWndData_t;

enum
{
    CAMERA_RECORD_ABSCONTAINER = APP_WDG_START,
    CAMERA_RECORD_OSDWIDGET,
    CAMERA_RECORD_REC_IMAGEWIDGET,
    CAMERA_RECORD_ZOOM_IMAGEWIDGET,
    CAMERA_RECORD_ZOOM_STATUS_IMAGEWIDGET,
    CAMERA_RECORD_ZOOM_IN_BUTTONWIDGET,
    CAMERA_RECORD_ZOOM_OUT_BUTTONWIDGET,
#if defined(__CAMERA_MULTI_FINGER__) || defined(__MULTI_TOUCH_SLIM__)
    CAMERA_RECORD_ZOOM_MT_IMAGEWIDGET,
#endif
    CAMERA_RECORD_TIMER_TEXTWIDGET,
    CAMERA_RECORD_FUNC_BAR_IMAGEWIDGET,
    CAMERA_RECORD_STOP_BUTTONWIDGET
};

typedef struct
{
    IWidget *pAbsContainer;
    IWidget *pOsdWdg;
    IWidget *pRecImgWdg;
    IWidget *pZoomImgWdg;
    IWidget *pZoomStatusImgWdg;
    IWidget *pZoomInButtonWdg;
    IWidget *pZoomOutButtonWdg;
#if defined(__CAMERA_MULTI_FINGER__) || defined(__MULTI_TOUCH_SLIM__)
    IWidget *pZoomMTImgWdg;
#endif
    IWidget *pTimerTxtWdg;
    IWidget *pFuncBarImgWdg;
    IWidget *pStopButtonWdg;

} CameraRecordWndWdgList_t;

typedef struct
{
    CameraRecordWndWdgList_t tWdgList;
    boolean bSelected; // for button click and key press;

} CameraRecordWndData_t;

enum
{
    CAMERA_SETTING_ABSCONTAINER = APP_WDG_START,
    CAMERA_SETTING_OSDWIDGET,
#if defined(__CAMERA_STICKER_MMI__)
    CAMERA_SETTING_STICKER_IMAGEWIDGET,
#endif
    CAMERA_SETTING_MENU_MENUWIDGET,
    CAMERA_SETTING_TIMER_BUTTONWIDGET,
    CAMERA_SETTING_FILLLIGHT_BUTTONWIDGET,
    CAMERA_SETTING_SOUND_BUTTONWIDGET,
    CAMERA_SETTING_NIGHTMODE_BUTTONWIDGET,
    CAMERA_SETTING_AWB_BUTTONWIDGET,
    CAMERA_SETTING_MULTISHOT_BUTTONWIDGET,
    CAMERA_SETTING_QUALITY_BUTTONWIDGET,
    CAMERA_SETTING_RESOLUTION_BUTTONWIDGET,
    CAMERA_SETTING_TIME_LIMIT_BUTTONWIDGET,
#if defined(__MMI_BATTERY_ICON_DISPLAY__)
    CAMERA_SETTING_BATTERY_IMAGEWIDGET,
#endif
#ifdef __CAMERA_MIRROR_MMI__
    CAMERA_SETTING_MIRROR_BG_IMAGEWIDGET,
#endif
    CAMERA_SETTING_FUNC_BAR_IMAGEWIDGET,
    CAMERA_SETTING_SELECT_BUTTONWIDGET,
    CAMERA_SETTING_BACK_BUTTONWIDGET
};

typedef struct
{
IWidget *pAbsContainer;
IWidget *pOsdWdg;
#if defined(__CAMERA_STICKER_MMI__)
IWidget *pStickerImgWdg;
#endif
IWidget *pMenuWdg;
IWidget *pTimerButtonWdg;
IWidget *pFillLightButtonWdg;
IWidget *pSoundButtonWdg;
IWidget *pNightModeButtonWdg;
IWidget *pAwbButtonWdg;
IWidget *pMultiShotButtonWdg;
IWidget *pQualityButtonWdg;
IWidget *pResolutionButtonWdg;
IWidget *pTimeLimitButtonWdg;
#if defined(__MMI_BATTERY_ICON_DISPLAY__)
IWidget *pBatteryImgWdg;
#endif
#ifdef __CAMERA_MIRROR_MMI__
IWidget *pMirrorBGImgWdg;
#endif
IWidget *pFuncBarImgWdg;
IWidget *pSelectButtonWdg;
IWidget *pBackButtonWdg;

} CameraSettingWndWdgList_t;

typedef struct
{
    CameraSettingWndWdgList_t tWdgList;
    boolean bSelected;

} CameraSettingWndData_t;

/*-------------------------------------------------------------------------*/

/**
 * Application structure
 */
typedef struct MMI_CAMAPP_TAG {

    APPLET_BASE_ELEMENTS;

    /* Add custom fields below */
    u8              nCnfCounter;
    u8              nNumOfPhotoOrVideo;
    u8              nNumOfGotFiles;
    u8              nSuspendReason;
    u8              nCardInsertStatus;

    DualCameraType_e eCamera_Id;

    boolean         bSwitchCamera;
    // For camera mode/logic/status control
    boolean         bIsInit;
    boolean         bIsPowerOn;	//= FALSE;
    boolean         bIsPreview;	//= FALSE;
    boolean         bIsBackFromPlaybackMode; //= FALSE;
    boolean         bIsRecording; //= FALSE;
    boolean         bIsStorageChanged;
    boolean         bIsStorageFullDialoging;
    boolean         bIsSuspend;
    boolean         bIsIconShown; // Indicate whether or not Zoom In/Zoom Out icons have been displayed.
    boolean         bIsFromStopPreview;	// Prevent the Zoom Status widget to be release because of stop preview from changing ImageSize, VideoSize, or AntiFlicker.
    boolean         bIsModeSwitch; // Indicate mode switch occurred between camera mode and video mode.
    boolean         bIsStartCaptured;
    boolean         bIsResolutionChanged;  // Indicate whether the resolution icon should be changed or not.
    boolean         bIsWaitCnf;	 // Indicate whether the sound icon should be changed and not restart preview again.
    boolean         bIsWaitRecordStopInd;	 // Indicate whether the recorded video file has been saved by M3.
    boolean         bIsPostponeSave;	 	// The recorded file has been postpone saving
    boolean         bIsWaitStartPreviewCnf;
    boolean         bIsWaitStopPreviewCnf;
    boolean         bIsWaitStartAutoFocusCnf;
    boolean         bIsStopAppEventReceived;
    boolean         bIsSettingMenuCreated;     // Indicate the setting menu is created or not
    boolean         bIsBackFromSettingMenu;
    boolean         bIsSavingDialogShown;
    boolean         bIsCardStatusChanged;
    boolean         bIsLandscapeMode;
    boolean         bIsWaitZoomCnf;
#if defined(__CAMERA_MULTI_FINGER__) || defined(__MULTI_TOUCH_SLIM__)
    boolean         bIsMultiTouchZoom;
#endif
    boolean         bIsProcessingSetting;
#ifdef __MMI_CAMERA_NUMBER_KEY_ENABLE__
    boolean         bIsSettingStringShown;
    boolean         bIsResolutionSettingStringShown;
#endif
    //  Camera function capability
    boolean         bIsSensorImageEffectSupported;
    boolean         bIsVideoStabilizerSupported;
    boolean         bIsAutoFocusSupported;
    boolean         bIsImageEffectSupported;
    boolean         bIsMP4Supported;
    boolean         bIsFilllightSupport;
    boolean         bIsEnterPlaybackMode;
    boolean         bIsReturnFilePath;
    boolean         bIsMultiShotSupport;
    boolean         bIsAccessMultiMediaApp;
    boolean         bIsEnableBlogLink;
    boolean         bIsCameraQuitAfterFileIsAccepted;
    boolean         bIsAlphaMaskEnabled;
    //CameraSrvZoom_e eCamMaxZoomLevel;
    CameraSrvGetCameraInfo_t CameraInfo[CAMERA_NUM];
    u8						 bGetCamInfo[CAMERA_NUM];
    u32                      nImageEffectSupported;
    CameraSrvSensorStatus_e  eSensorStatus;                  ///< Result of sensor detection

    CamMode_e       eCamMode;
    CamAction_e     eCamCurrAction;
    CameraState_e   eCamCurrState;
    CamResumeMode_e eCamResumeMode;

    MAE_WChar       *pDialogText;
    u32             nDialogStrID;
    MAE_WChar       **ppFileName;

    // Camera related settings
    CameraSettings_t   *pCamSettings;
    CameraGlobalSettings_t *pCamGlobalSettings;
    CamStorageChanged_e eStorageFullHaveToChanged;

    // For menu
    u16             nFirstIndex;			/* the absolutely index of first item on screen */
    u16             nHighlightedIndex;		/* the absolutely index of the highlighted item */
    u16             nMaxResolutionMenuItem;
    u16             nMaxResolutionSupport;
    u32             nSelectedID;
    u16             nSubHighlightedIndex;

    // For timer in status bar
    u32             nTimePassed;

#if defined(__MMI_BATTERY_ICON_DISPLAY__)
    // For showing battery icon
    MAEBatteryLevel_e  nMasterBatteryLevel;
    MAEBatteryLevel_e  nSlaveBatteryLevel;
    MAEChargerStatus_e nBatteryStatus;
    MAEBatteryID_e     nActiveBatteryID;
#endif

#ifdef __CAMERA_STICKER_MMI__
    IBitmap          *pStickerData;
    DIB_t            *pStickerDIB;
#endif

    ORIENTATION_e    eCurrentOrientation;

#ifdef __CAMERA_PANORAMA_MMI__
    u8               *pPanoramaBuffer;
    IBitmap          *pPanoramaPreviewData;
    DIB_t            *pPanoramaPreviewDIB;
    u32              nSizeOfPanoramaBuffer;
    u8               nCurrentPanoramaCaptureTimes;
#endif
    // Launcher Rsp data
    CmnAppLaunchRspCbInfo_t tRspInfo;
} MMI_CAMAPP;

/*-------------------------------------------------------------------------*/
MAE_Ret CameraConstructor(IApplet *pApplet, u32 evt, u32 param1, u32 param2);
MAE_Ret CameraDestructor(IApplet *pApplet, u32 evt, u32 param1, u32 param2);
boolean CameraStartCB(IApplet *pApplet, u32 evt, u32 param1, u32 param2);
boolean CameraStopCB(IApplet *pApplet, u32 evt, u32 param1, u32 param2);
boolean CameraSuspendCB(IApplet *pApplet, u32 evt, u32 param1, u32 param2);
boolean CameraResumeCB(IApplet *pApplet, u32 evt, u32 param1, u32 param2);
boolean CameraPreHookCB(IApplet *pApplet, u32 evt, u32 param1, u32 param2);
boolean CameraKeyPressCB(IApplet *pApplet, u32 evt, u32 param1, u32 param2);
boolean CameraTouchPressCB(IApplet *pApplet, u32 evt, u32 param1, u32 param2);
boolean CameraTouchClickCB(IApplet *pApplet, u32 evt, u32 param1, u32 param2);
#if defined(__CAMERA_MULTI_FINGER__) || defined(__MULTI_TOUCH_SLIM__)
boolean CameraMultiTouchEvtCB(IApplet *pApplet, u32 evt, u32 param1, u32 param2);
#endif

MAE_Ret CameraWndPreviewHdl(void *pCusHandle, const WindowMsg_t *pWndMsg, void *pWndData, u32 nWndInitParam);
MAE_Ret CameraWndCaptureHdl(void *pCusHandle, const WindowMsg_t *pWndMsg, void *pWndData, u32 nWndInitParam);
MAE_Ret CameraWndRecordHdl(void *pCusHandle, const WindowMsg_t *pWndMsg, void *pWndData, u32 nWndInitParam);
MAE_Ret CameraWndSettingsHdl(void *pCusHandle, const WindowMsg_t *pWndMsg, void *pWndData, u32 nWndInitParam);
MAE_Ret CameraWndImageSizeHdl(void *pCusHandle, const WindowMsg_t *pWndMsg, void *pWndData, u32 nWndInitParam);
MAE_Ret CameraWndNightModeHdl(void *pCusHandle, const WindowMsg_t *pWndMsg, void *pWndData, u32 nWndInitParam);

MAE_Ret CameraWndEffectHdl(void *pCusHandle, const WindowMsg_t *pWndMsg, void *pWndData, u32 nWndInitParam);
MAE_Ret CameraWndMultishotHdl(void *pCusHandle, const WindowMsg_t *pWndMsg, void *pWndData, u32 nWndInitParam);
MAE_Ret CameraWndTimerHdl(void *pCusHandle, const WindowMsg_t *pWndMsg, void *pWndData, u32 nWndInitParam);
MAE_Ret CameraWndWhiteBalanceHdl(void *pCusHandle, const WindowMsg_t *pWndMsg, void *pWndData, u32 nWndInitParam);
MAE_Ret CameraWndShutterSoundHdl(void *pCusHandle, const WindowMsg_t *pWndMsg, void *pWndData, u32 nWndInitParam);
MAE_Ret CameraWndSoundHdl(void *pCusHandle, const WindowMsg_t *pWndMsg, void *pWndData, u32 nWndInitParam);
MAE_Ret CameraWndVdoStabilizerHdl(void *pCusHandle, const WindowMsg_t *pWndMsg, void *pWndData, u32 nWndInitParam);
MAE_Ret CameraWndFillLightHdl(void *pCusHandle, const WindowMsg_t *pWndMsg, void *pWndData, u32 nWndInitParam);
MAE_Ret CameraWndStorageHdl(void *pCusHandle, const WindowMsg_t *pWndMsg, void *pWndData, u32 nWndInitParam);
MAE_Ret CameraWndCamSelectionHdl(void *pCusHandle, const WindowMsg_t *pWndMsg, void *pWndData, u32 nWndInitParam);
MAE_Ret CameraWndImageQualityHdl(void *pCusHandle, const WindowMsg_t *pWndMsg, void *pWndData, u32 nWndInitParam);
MAE_Ret CameraWndAntiFlickerHdl(void *pCusHandle, const WindowMsg_t *pWndMsg, void *pWndData, u32 nWndInitParam);
MAE_Ret CameraWndVideoQualityHdl(void *pCusHandle, const WindowMsg_t *pWndMsg, void *pWndData, u32 nWndInitParam);
MAE_Ret CameraWndVideoSizeHdl(void *pCusHandle, const WindowMsg_t *pWndMsg, void *pWndData, u32 nWndInitParam);
MAE_Ret CameraWndSizeLimitHdl(void *pCusHandle, const WindowMsg_t *pWndMsg, void *pWndData, u32 nWndInitParam);
MAE_Ret CameraWndTimeLimitHdl(void *pCusHandle, const WindowMsg_t *pWndMsg, void *pWndData, u32 nWndInitParam);
MAE_Ret CameraWndEVHdl(void *pCusHandle, const WindowMsg_t *pWndMsg, void *pWndData, u32 nWndInitParam);
MAE_Ret CameraWndStickerHdl(void *pCusHandle, const WindowMsg_t *pWndMsg, void *pWndData, u32 nWndInitParam);
#ifdef __CAMERA_LOMO_MMI__
MAE_Ret CameraWndLomoHdl(void *pCusHandle, const WindowMsg_t *pWndMsg, void *pWndData, u32 nWndInitParam);
#endif
#ifdef __CAMERA_MIRROR_MMI__
MAE_Ret CameraWndMirrorHdl(void *pCusHandle, const WindowMsg_t *pWndMsg, void *pWndData, u32 nWndInitParam);
#endif
#ifdef __CAMERA_PANORAMA_MMI__
MAE_Ret CameraWndPanoramaHdl(void *pCusHandle, const WindowMsg_t *pWndMsg, void *pWndData, u32 nWndInitParam);
#endif
MAE_Ret CameraWndFocusModeHdl(void *pCusHandle, const WindowMsg_t *pWndMsg, void *pWndData, u32 nWndInitParam);

MAE_Ret _CameraWndCreatePreview(void *pCusHandle, void *pWndData, u32 nWndInitParam);
MAE_Ret _CameraWndShowPreview(void *pCusHandle, void *pWndData);
MAE_Ret _CameraWndHidePreview(void *pCusHandle, void *pWndData);
MAE_Ret _CameraWndDestroyPreview(void *pCusHandle, void *pWndData);
MAE_Ret _CameraWndCreateCapture(void *pCusHandle, void *pWndData, u32 nWndInitParam);
MAE_Ret _CameraWndShowCapture(void *pCusHandle, void *pWndData);
MAE_Ret _CameraWndHideCapture(void *pCusHandle, void *pWndData);
MAE_Ret _CameraWndDestroyCapture(void *pCusHandle, void *pWndData);
MAE_Ret _CameraWndCreateRecord(void *pCusHandle, void *pWndData, u32 nWndInitParam);
MAE_Ret _CameraWndShowRecord(void *pCusHandle, void *pWndData);
MAE_Ret _CameraWndHideRecord(void *pCusHandle, void *pWndData);
MAE_Ret _CameraWndDestroyRecord(void *pCusHandle, void *pWndData);
MAE_Ret _CameraWndCreateSettings(void *pCusHandle, void *pWndData, u32 nWndInitParam);
MAE_Ret _CameraWndShowSettings(void *pCusHandle, void *pWndData);
MAE_Ret _CameraWndHideSettings(void *pCusHandle, void *pWndData);
MAE_Ret _CameraWndDestroySettings(void *pCusHandle, void *pWndData);
MAE_Ret _CameraWndCreateImageSize(void *pCusHandle, void *pWndData, u32 nWndInitParam);
MAE_Ret _CameraWndShowImageSize(void *pCusHandle, void *pWndData);
MAE_Ret _CameraWndHideImageSize(void *pCusHandle, void *pWndData);
MAE_Ret _CameraWndDestroyImageSize(void *pCusHandle, void *pWndData);
MAE_Ret _CameraWndCreateNightMode(void *pCusHandle, void *pWndData, u32 nWndInitParam);
MAE_Ret _CameraWndShowNightMode(void *pCusHandle, void *pWndData);
MAE_Ret _CameraWndHideNightMode(void *pCusHandle, void *pWndData);
MAE_Ret _CameraWndDestroyNightMode(void *pCusHandle, void *pWndData);
MAE_Ret _CameraWndCreateEffect(void *pCusHandle, void *pWndData, u32 nWndInitParam);
MAE_Ret _CameraWndShowEffect(void *pCusHandle, void *pWndData);
MAE_Ret _CameraWndHideEffect(void *pCusHandle, void *pWndData);
MAE_Ret _CameraWndDestroyEffect(void *pCusHandle, void *pWndData);
MAE_Ret _CameraWndCreateMultishot(void *pCusHandle, void *pWndData, u32 nWndInitParam);
MAE_Ret _CameraWndShowMultishot(void *pCusHandle, void *pWndData);
MAE_Ret _CameraWndHideMultishot(void *pCusHandle, void *pWndData);
MAE_Ret _CameraWndDestroyMultishot(void *pCusHandle, void *pWndData);
MAE_Ret _CameraWndCreateTimer(void *pCusHandle, void *pWndData, u32 nWndInitParam);
MAE_Ret _CameraWndShowTimer(void *pCusHandle, void *pWndData);
MAE_Ret _CameraWndHideTimer(void *pCusHandle, void *pWndData);
MAE_Ret _CameraWndDestroyTimer(void *pCusHandle, void *pWndData);
MAE_Ret _CameraWndCreateWhiteBalance(void *pCusHandle, void *pWndData, u32 nWndInitParam);
MAE_Ret _CameraWndShowWhiteBalance(void *pCusHandle, void *pWndData);
MAE_Ret _CameraWndHideWhiteBalance(void *pCusHandle, void *pWndData);
MAE_Ret _CameraWndDestroyWhiteBalance(void *pCusHandle, void *pWndData);
MAE_Ret _CameraWndCreateShutterSound(void *pCusHandle, void *pWndData, u32 nWndInitParam);
MAE_Ret _CameraWndShowShutterSound(void *pCusHandle, void *pWndData);
MAE_Ret _CameraWndHideShutterSound(void *pCusHandle, void *pWndData);
MAE_Ret _CameraWndDestroyShutterSound(void *pCusHandle, void *pWndData);
MAE_Ret _CameraWndCreateSound(void *pCusHandle, void *pWndData, u32 nWndInitParam);
MAE_Ret _CameraWndShowSound(void *pCusHandle, void *pWndData);
MAE_Ret _CameraWndHideSound(void *pCusHandle, void *pWndData);
MAE_Ret _CameraWndDestroySound(void *pCusHandle, void *pWndData);
MAE_Ret _CameraWndCreateStorage(void *pCusHandle, void *pWndData, u32 nWndInitParam);
MAE_Ret _CameraWndShowStorage(void *pCusHandle, void *pWndData);
MAE_Ret _CameraWndHideStorage(void *pCusHandle, void *pWndData);
MAE_Ret _CameraWndDestroyStorage(void *pCusHandle, void *pWndData);
MAE_Ret _CameraWndCreateImageQuality(void *pCusHandle, void *pWndData, u32 nWndInitParam);
MAE_Ret _CameraWndShowImageQuality(void *pCusHandle, void *pWndData);
MAE_Ret _CameraWndHideImageQuality(void *pCusHandle, void *pWndData);
MAE_Ret _CameraWndDestroyImageQuality(void *pCusHandle, void *pWndData);
MAE_Ret _CameraWndCreateAntiFlicker(void *pCusHandle, void *pWndData, u32 nWndInitParam);
MAE_Ret _CameraWndShowAntiFlicker(void *pCusHandle, void *pWndData);
MAE_Ret _CameraWndHideAntiFlicker(void *pCusHandle, void *pWndData);
MAE_Ret _CameraWndDestroyAntiFlicker(void *pCusHandle, void *pWndData);
MAE_Ret _CameraWndCreateVideoQuality(void *pCusHandle, void *pWndData, u32 nWndInitParam);
MAE_Ret _CameraWndShowVideoQuality(void *pCusHandle, void *pWndData);
MAE_Ret _CameraWndHideVideoQuality(void *pCusHandle, void *pWndData);
MAE_Ret _CameraWndDestroyVideoQuality(void *pCusHandle, void *pWndData);
MAE_Ret _CameraWndCreateVideoSize(void *pCusHandle, void *pWndData, u32 nWndInitParam);
MAE_Ret _CameraWndShowVideoSize(void *pCusHandle, void *pWndData);
MAE_Ret _CameraWndHideVideoSize(void *pCusHandle, void *pWndData);
MAE_Ret _CameraWndDestroyVideoSize(void *pCusHandle, void *pWndData);
MAE_Ret _CameraWndCreateSizeLimit(void *pCusHandle, void *pWndData, u32 nWndInitParam);
MAE_Ret _CameraWndShowSizeLimit(void *pCusHandle, void *pWndData);
MAE_Ret _CameraWndHideSizeLimit(void *pCusHandle, void *pWndData);
MAE_Ret _CameraWndDestroySizeLimit(void *pCusHandle, void *pWndData);
MAE_Ret _CameraWndCreateTimeLimit(void *pCusHandle, void *pWndData, u32 nWndInitParam);
MAE_Ret _CameraWndShowTimeLimit(void *pCusHandle, void *pWndData);
MAE_Ret _CameraWndHideTimeLimit(void *pCusHandle, void *pWndData);
MAE_Ret _CameraWndDestroyTimeLimit(void *pCusHandle, void *pWndData);
MAE_Ret _CameraWndCreateEV(void *pCusHandle, void *pWndData, u32 nWndInitParam);
MAE_Ret _CameraWndShowEV(void *pCusHandle, void *pWndData);
MAE_Ret _CameraWndHideEV(void *pCusHandle, void *pWndData);
MAE_Ret _CameraWndDestroyEV(void *pCusHandle, void *pWndData);
MAE_Ret _CameraWndCreateSticker(void *pCusHandle, void *pWndData, u32 nWndInitParam);
MAE_Ret _CameraWndShowSticker(void *pCusHandle, void *pWndData);
MAE_Ret _CameraWndHideSticker(void *pCusHandle, void *pWndData);
MAE_Ret _CameraWndDestroySticker(void *pCusHandle, void *pWndData);
#ifdef __CAMERA_LOMO_MMI__
MAE_Ret _CameraWndCreateLomo(void *pCusHandle, void *pWndData, u32 nWndInitParam);
MAE_Ret _CameraWndShowLomo(void *pCusHandle, void *pWndData);
MAE_Ret _CameraWndHideLomo(void *pCusHandle, void *pWndData);
MAE_Ret _CameraWndDestroyLomo(void *pCusHandle, void *pWndData);
#endif
#ifdef __CAMERA_MIRROR_MMI__
MAE_Ret _CameraWndCreateMirror(void *pCusHandle, void *pWndData, u32 nWndInitParam);
MAE_Ret _CameraWndShowMirror(void *pCusHandle, void *pWndData);
MAE_Ret _CameraWndHideMirror(void *pCusHandle, void *pWndData);
MAE_Ret _CameraWndDestroyMirror(void *pCusHandle, void *pWndData);
#endif
#ifdef __CAMERA_PANORAMA_MMI__
MAE_Ret _CameraWndCreatePanorama(void *pCusHandle, void *pWndData, u32 nWndInitParam);
MAE_Ret _CameraWndShowPanorama(void *pCusHandle, void *pWndData);
MAE_Ret _CameraWndHidePanorama(void *pCusHandle, void *pWndData);
MAE_Ret _CameraWndDestroyPanorama(void *pCusHandle, void *pWndData);
#endif
MAE_Ret _CameraWndCreateFocusMode(void *pCusHandle, void *pWndData, u32 nWndInitParam);
MAE_Ret _CameraWndShowFocusMode(void *pCusHandle, void *pWndData);
MAE_Ret _CameraWndHideFocusMode(void *pCusHandle, void *pWndData);
MAE_Ret _CameraWndDestroyFocusMode(void *pCusHandle, void *pWndData);
static void _CameraPreviewKeyPress(MMI_CAMAPP *pThis, u32 param);
static void _CameraCaptureKeyPress(MMI_CAMAPP *pThis, u32 param);
static void _CameraRecordKeyPress(MMI_CAMAPP *pThis, u32 param);
static void _CameraPreviewTouchClick(MMI_CAMAPP *pThis, u32 param);
#ifdef __CAMERA_MULTI_FINGER__
static void _CameraPreviewMultiTouchClick(MMI_CAMAPP *pThis, u32 param);
#endif

static void _CameraStopByShell(MMI_CAMAPP *pThis, u32 evt);
static void _CameraSuspendByShell(MMI_CAMAPP *pThis, u32 evt);
static void _CameraSuspend(MMI_CAMAPP *pThis);
static void _CameraResumeByShell(MMI_CAMAPP *pThis, u32 evt);
static void _CameraPowerOn(MMI_CAMAPP *pThis);
static void _CameraPowerOff(MMI_CAMAPP *pThis);
static void _CameraPreview(MMI_CAMAPP *pThis);
static void _CameraPreviewing(MMI_CAMAPP *pThis);
static void _CameraReadyToPreview(MMI_CAMAPP *pThis);
static void _CameraStopPreview(MMI_CAMAPP *pThis);
static void _CameraStartCapture(MMI_CAMAPP *pThis);
static void _CameraStopCapture(MMI_CAMAPP *pThis);
#ifdef __CAMERA_PANORAMA_MMI__
static void _CameraAbortPanoramaCapture(MMI_CAMAPP *pThis);
#endif
static void _CameraStopRecord(MMI_CAMAPP *pThis);
static void _CameraInit(MMI_CAMAPP *pThis);
static void _CameraExit(MMI_CAMAPP *pThis);
static void _CameraLaunchFileMgr(MMI_CAMAPP *pThis);
static void _CameraPlayback(MMI_CAMAPP *pThis);
static void _CameraLoadWaitingDialog(MMI_CAMAPP *pThis, u32 nTextID, PFN_DlgHandler pDialogHandler, boolean bCancelKey);
static void _CameraLoadInfoDialog(MMI_CAMAPP *pThis, u32 TextId, PFN_DlgHandler pfnDialogHdl);
static void _CameraOpenDialog(MMI_CAMAPP *pThis);
static void _CameraResetAutoCloseTimer(MMI_CAMAPP *pThis);
static void _CameraCancelAutoCloseTimer(MMI_CAMAPP *pThis);
static u32 _CameraGetWndSize(MAE_WndId nWndId);
static PFN_WndFunc _CameraGetWndHandler(MAE_WndId nWndId);
static IWidget* _CameraGetWdgFromWnd(MMI_CAMAPP *pThis, MAE_WndId nWndId, u16 nWdgId);
static void _CameraPressOK(MMI_CAMAPP *pThis, u32 nSelectId);
static void _CameraPressBack(MMI_CAMAPP *pThis);
static void _CameraPressClose(MMI_CAMAPP *pThis);

#if defined(__MMI_CAMERA_NUMBER_KEY_ENABLE__) || defined(__TOUCH_SCREEN_MMI__)
static void _CameraSetAttributeVideoSoundCnf(MMI_CAMAPP *pThis, u32 param1, u32 param2);
static void _CameraSetAttributeMultishotCnf(MMI_CAMAPP *pThis, u32 param1, u32 param2);
static void _CameraSetAttributeTimerCnf(MMI_CAMAPP *pThis, u32 param1, u32 param2);
static void _CameraSetAttributeTimeLimitCnf(MMI_CAMAPP *pThis, u32 param1, u32 param2);
static void _CameraSetAttributeQualityCnf(MMI_CAMAPP *pThis, u32 param1, u32 param2);
#endif
static void _CameraStopCaptureCnf(MMI_CAMAPP *pThis, u32 param1, u32 param2);
static void _CameraErrorCnf(MMI_CAMAPP *pThis, u32 param1, u32 param2);
static void _CameraPlayShutterSoundInd(MMI_CAMAPP *pThis, u32 param1, u32 param2);
static void _CameraRecordStopInd(MMI_CAMAPP *pThis, u32 param1, u32 param2);
static void _CameraRecordDeleteInd(MMI_CAMAPP *pThis, u32 param1, u32 param2);
static void _CameraUpdatePositionInd(MMI_CAMAPP *pThis, u32 param1, u32 param2);
static void _CameraStopSpaceFullInd(MMI_CAMAPP *pThis, u32 param1, u32 param2);
static void _CameraAutoFocusCompleteInd(MMI_CAMAPP *pThis, u32 param1, u32 param2);

void CameraOpenSessionCB(void *pApplet, CameraSrvRetCode_e eRetCode);
void CameraCloseSessionCB(void *pApplet, CameraSrvRetCode_e eRetCode);
void CameraOpenCB(void *pApplet, CameraSrvRetCode_e eRetCode);
void CameraCloseCB(void *pApplet, CameraSrvRetCode_e eRetCode);
void CameraSetConfigCB(void *pApplet, CameraSrvRetCode_e eRetCode);
void CameraSetInitConfig(MMI_CAMAPP *pThis);
void CameraSetInitConfigCB(void *pApplet, CameraSrvRetCode_e eRetCode);
void CameraSetWBCB(void *pApplet, CameraSrvRetCode_e eRetCode);
void CameraSetAECB(void *pApplet, CameraSrvRetCode_e eRetCode);
void CameraGetInfo(MMI_CAMAPP *pThis);
void CameraGetInfoCb(void *pApplet, CameraSrvRetCode_e eRetCode, CameraSrvCameraInfo_t *pCameraInfo);
void CameraSetZoomCB(void *pApplet, CameraSrvRetCode_e eRetCode);
void CameraSetEVCB(void *pApplet, CameraSrvRetCode_e eRetCode);
void CameraSetAntiFlickerCB(void *pApplet, CameraSrvRetCode_e eRetCode);
void CameraSetEffectCB(void *pApplet, CameraSrvRetCode_e eRetCode);
#if defined(__MMI_AUTO_FOCUS_SUPPORT__) && defined(__TOUCH_SCREEN_MMI__)
void CameraSetFocusModeCB(void *pApplet, CameraSrvRetCode_e eRetCode);
#endif
void CameraSetNightModeCB(void *pApplet, CameraSrvRetCode_e eRetCode);
#if defined(__VIDEO_STABILIZER_ENABLE__)
void CameraSetVdoStabilizerCB(void *pApplet, CameraSrvRetCode_e eRetCode);
#endif
void CameraSetShutterSoundCB(void *pApplet, CameraSrvRetCode_e eRetCode);
void CameraTurnOnStickerCB(void *pApplet, CameraSrvRetCode_e eRetCode);
void CameraTurnOffStickerCB(void *pApplet, CameraSrvRetCode_e eRetCode);
void CameraQueryNoneSavingFileCB(void *pApplet, CameraSrvRetCode_e eRetCode);
void CameraDeleteTempVideoFileCB(void *pApplet, CameraSrvRetCode_e eRetCode);
void CameraStartPreviewCB(void *pApplet, CameraSrvRetCode_e eRetCode);
void CameraStopPreviewCB(void *pApplet, CameraSrvRetCode_e eRetCode);
#if defined(__MMI_AUTO_FOCUS_SUPPORT__) && defined(__TOUCH_SCREEN_MMI__)
void CameraStartFocusCB(void *pApplet, CameraSrvRetCode_e eRetCode);
#endif
void CameraStartCaptureCB(void *pApplet, CameraSrvRetCode_e eRetCode);
void CameraStopCaptureCB(void *pApplet, CameraSrvRetCode_e eRetCode, CameraSrvCaptureFile_t *pCaptureFile);
void CameraStartRecordCB(void *pApplet, CameraSrvRetCode_e eRetCode);
void CameraStopRecordCB(void *pApplet, CameraSrvRetCode_e eRetCode);
void CameraGetFileNameCB(void *pApplet, CameraSrvRetCode_e eRetCode, CameraSrvFileName_t *pGetFileName);
void CameraCamStatusChangeCb(void *pApplet, CameraSrvCamStatusChangeEx_t *pCbData);
void CameraInterruptNotifyCb(void *pApplet, CameraSrvInterruptNotifyEx_t *pCbData);
#ifdef __CAMERA_PANORAMA_MMI__
void CameraAbortPanoramaCaptureCB(void *pApplet, CameraSrvRetCode_e eRetCode);
#endif
MAE_Ret CameraNonSupportMultishotCb(void *pApplet, MAEEvent_t nEvt, u32 nParam1, u32 nParam2);

void CameraPlugStatusChangeCB(void *pUserData, ACCDeviceType_e eDevice, boolean bPlug, ExtCardAccInfo_e eCardinfo);
void CameraUSBStatusIndCB(void *pUserData, MMI_USB_STATUS_E eUSBStatus);
#if defined(__APP_MMI_CHECKDISK__)
void CameraCheckDiskStatusListener(char *pSbjName, SubjectStatus_e nSbjStatus, void *pUser);
#endif

#if defined(__MMI_BATTERY_ICON_DISPLAY__)
void CameraGetBatteryInfo(MMI_CAMAPP *pThis);
void CameraBatteryLevelChangeCB(void *pUserData, MAEBatteryLevel_e eBatteryLevel, MAEBatteryID_e eBatID);
void CameraExternalPowerChangeCB(void *pUserData, boolean bChargerPlugged);
void CameraBatteryCurrBattChangeCb(void *pUserData, MAEBatteryID_e eBatID);
static void _CameraUpdateBatteryIcon(MMI_CAMAPP *pThis);
#endif

#ifdef __G_SENSOR_MMI__
void CameraMotionChangeCB(void *pUserData, ORIENTATION_e eOrientation);
#endif

void CameraSettingMenuSoftkeyActCB(void *pApplet, void *pUserData, WidgetEvtCode_t nEvtCode, HistoryInfo_t *pHistoryInfo, IWidget *pWidget);
void CameraSettingMenuOnFocusCB(void *pApplet, void *pUserData, WidgetEvtCode_t nEvtCode, FocusInfo_t *pFocusInfo, IWidget *pWidget);
void CameraSubMenuSoftkeyActCB(void *pApplet, void *pUserData, WidgetEvtCode_t nEvtCode, HistoryInfo_t *pHistoryInfo, IWidget *pWidget);
void CameraSubMenuOnFocusCB(void *pApplet, void *pUserData, WidgetEvtCode_t nEvtCode, FocusInfo_t *pFocusInfo, IWidget *pWidget);
#ifdef __TOUCH_SCREEN_MMI__
void CameraZoomInButtonClickCb(void *pApplet, void *pUserData, WidgetEvtCode_t nEvtCode, u32 dwParam, IWidget *pWidget);
void CameraZoomOutButtonClickCb(void *pApplet, void *pUserData, WidgetEvtCode_t nEvtCode, u32 dwParam, IWidget *pWidget);
void CameraNightModeButtonClickCb(void *pApplet, void *pUserData, WidgetEvtCode_t nEvtCode, u32 dwParam, IWidget *pWidget);
void CameraSoundButtonClickCb(void *pApplet, void *pUserData, WidgetEvtCode_t nEvtCode, u32 dwParam, IWidget *pWidget);
void CameraWhiteBalanceButtonClickCb(void *pApplet, void *pUserData, WidgetEvtCode_t nEvtCode, u32 dwParam, IWidget *pWidget);
void CameraQualityButtonClickCb(void *pApplet, void *pUserData, WidgetEvtCode_t nEvtCode, u32 dwParam, IWidget *pWidget);
void CameraResolutionButtonClickCb(void *pApplet, void *pUserData, WidgetEvtCode_t nEvtCode, u32 dwParam, IWidget *pWidget);
void CameraTimerButtonClickCb(void *pApplet, void *pUserData, WidgetEvtCode_t nEvtCode, u32 dwParam, IWidget *pWidget);
void CameraMultiShotButtonClickCb(void *pApplet, void *pUserData, WidgetEvtCode_t nEvtCode, u32 dwParam, IWidget *pWidget);
void CameraTimeLimitButtonClickCb(void *pApplet, void *pUserData, WidgetEvtCode_t nEvtCode, u32 dwParam, IWidget *pWidget);
void CameraFilllightButtonClickCb(void *pApplet, void *pUserData, WidgetEvtCode_t nEvtCode, u32 dwParam, IWidget *pWidget);
#if defined(__MMI_AUTO_FOCUS_SUPPORT__)
void CameraFocusButtonClickCb(void *pApplet, void *pUserData, WidgetEvtCode_t nEvtCode, u32 dwParam, IWidget *pWidget);
#endif
void CameraStopButtonClickCb(void *pApplet, void *pUserData, WidgetEvtCode_t nEvtCode, u32 dwParam, IWidget *pWidget);
void CameraBackButtonClickCb(void *pApplet, void *pUserData, WidgetEvtCode_t nEvtCode, u32 dwParam, IWidget *pWidget);
void CameraFileMgrButtonClickCb(void *pApplet, void *pUserData, WidgetEvtCode_t nEvtCode, u32 dwParam, IWidget *pWidget);
void CameraCaptureButtonClickCb(void *pApplet, void *pUserData, WidgetEvtCode_t nEvtCode, u32 dwParam, IWidget *pWidget);
#if defined(__ENABLE_CAMERA__) && defined(__ENABLE_CAMCORDER__)
void CameraSwitchModeButtonClickCb(void *pApplet, void *pUserData, WidgetEvtCode_t nEvtCode, u32 dwParam, IWidget *pWidget);
#else
void CameraSwitchWBButtonClickCb(void *pApplet, void *pUserData, WidgetEvtCode_t nEvtCode, u32 dwParam, IWidget *pWidget);
#endif
void CameraSettingsButtonClickCb(void *pApplet, void *pUserData, WidgetEvtCode_t nEvtCode, u32 dwParam, IWidget *pWidget);
void CameraExitButtonClickCb(void *pApplet, void *pUserData, WidgetEvtCode_t nEvtCode, u32 dwParam, IWidget *pWidget);
void CameraSelectButtonClickCb(void *pApplet, void *pUserData, WidgetEvtCode_t nEvtCode, u32 dwParam, IWidget *pWidget);
#endif // __TOUCH_SCREEN_MMI__
MAE_Ret CameraInfoDialogTimerCB(void *pData, u32 nEvt, u32 nParam1, u32 nParam2);
void CameraStopPreviewTimerCB(void *pData);
void CameraStartCaptureTimerCB(void *pData);
void CameraStartPreviewTimerCB(void *pData);
void CameraCloseTimerCB(void *pData);
void CameraDisableIconTimerCB(void* pData);

static void _CameraCreatePreviewWindow(MMI_CAMAPP *pThis);
static void _CameraCreateSettingMenuWindow(MMI_CAMAPP* pThis);
static void _CameraCreateSubMenuWindow(MMI_CAMAPP* pThis, u16 nMenuMdlId, u8 nSettingEnumVal);
static void _CameraSaveConfigByType(MMI_CAMAPP *pThis, CameraConfigType_e eCamConfigType);
static MAE_Ret _CameraGetMenuItemID(u16 nMenuMdlId, u8 nEnumVal, MenuItemId_e *pIdVal);
static MAE_Ret _CameraGetImageID(u16 nMenuMdlId, u8 nEnumVal, u32 *pIdVal);
static void _CameraUpdateIcon(MMI_CAMAPP *pThis, IWidget *pIWdg, u16 nMenuMdlId, u8 nEnumVal);
void _CameraFreeButtonData(void *pData, IBase *pOwner);
static void _CameraUpdateZoomIcon(MMI_CAMAPP *pThis);
#if defined(__CAMERA_MULTI_FINGER__) || defined(__MULTI_TOUCH_SLIM__)
static void _CameraUpdateMultiTouchZoomIcon(MMI_CAMAPP *pThis);
#endif
static void _CameraPlayStreamCb(void *pApplet, MediaSrvErrCode_e eErrorCode);
static void _CameraAudioStopCb(void *pApplet, MediaSrvErrCode_e eErrorCode);
static void _CameraFreeSettingMenu(MMI_CAMAPP *pThis);
static void _CameraFreeSubMenu(MMI_CAMAPP *pThis, CameraSettingWndData_t *pWndData);

static void _CameraEnableBackLight(MMI_CAMAPP *pThis, boolean bEnabled);
static void _CameraGetPictureFileUrl(MMI_CAMAPP *pThis, MAE_WChar **pFileUrl);
static void _CameraGetVideoFileUrl(MMI_CAMAPP *pThis, MAE_WChar *pFileUrl);
static void _CameraFreeFileName(MMI_CAMAPP *pThis);
static void _CameraDisableCaptureRecordView(MMI_CAMAPP *pThis);
static void _CameraStopToGetFileName(MMI_CAMAPP *pThis, u32 param);
static void _CameraGetFileName(MMI_CAMAPP *pThis, CameraSrvRetCode_e nReturnCode);

static CameraSrvZoom_e _CameraGetMaxZoom(MMI_CAMAPP *pThis);
static VFS_VOL_TYPE _CameraTranslateStorageDataType(CameraSrvStorage_e eCamStorage);
#ifdef __SPACE_FULL_STORAGE_SELECTION_MMI__
static CFGItemID_e _CameraGetCurrentStorage(MMI_CAMAPP *pThis);
#endif
static void _CameraGetStorageSetting(MMI_CAMAPP *pThis,  CameraSrvStorage_e *eCamStorage, boolean *bIsShowingStorageNotify);
#if defined(__ONBOARD_USER_STORAGE_MMI__) || defined(__DUAL_CARD__)
static void _CameraSetStorageSetting(MMI_CAMAPP *pThis,  CameraSrvStorage_e eCamStorage);
#endif
static MAE_Ret _CameraInitializeSettings(MMI_CAMAPP *pThis);
#ifdef __TOUCH_SCREEN_MMI__
static void _CameraRegisterFunctionBarCB(MMI_CAMAPP *pThis, CameraPreviewWndWdgList_t *pWdgList);
#endif
static void _CameraEnableIcon(MMI_CAMAPP *pThis, boolean bEnabled);
static MAE_Ret _CameraCheckSDCardStatus(MMI_CAMAPP *pThis);
#if defined(__ONBOARD_USER_STORAGE_MMI__)&& defined(__NAND_MMI__)
static MAE_Ret _CameraCheckNANDStatus(MMI_CAMAPP* pThis);
#endif
#if (defined(__ONBOARD_USER_STORAGE_MMI__) || defined(__CAMERA_MMI_USE_PHONE_STORAGE__)) && !defined(__NAND_MMI__)
static MAE_Ret _CameraCheckNORStatus(MMI_CAMAPP* pThis);
#endif
static void _CameraGetCardInsertStatus(MMI_CAMAPP *pThis);
#if 0
static boolean _CameraIsSpaceFull(MMI_CAMAPP *pThis);
#endif
static void _CameraCreateTimer(MMI_CAMAPP *pThis, u32 nTimer, PfnMAE_Notify fnCallBack);
static void _CameraCancelTimer(MMI_CAMAPP *pThis, PfnMAE_Notify fnCallBack);
static void _CameraSetVideoIconPosition(MMI_CAMAPP *pThis, CameraSettingWndWdgList_t *pWdgList);

#if defined(__MMI_AUTO_FOCUS_SUPPORT__) && defined(__TOUCH_SCREEN_MMI__)
static void _CameraUpdateFocusWindow(MMI_CAMAPP *pThis, CameraAutoFocusStatus_e eStatus);
#endif
static void _CameraUpdateSoundIcon(void *pApplet, CameraSrvRetCode_e eRetCode);
#if defined(__CAMERA_STICKER_MMI__)
static u32 _CameraGetStickerImageID(CameraSrvSticker_e eCamSticker);
#endif
static MAE_WndId _CameraGetWndIdByState(CameraState_e eCamCurrState);
static MAE_WndId _CameraGetWndIdMenuId(CamMenuId_e eCamMenuId);
static MediaSrvVdoEncodeRes_e _CameraCamSrvResToMediaSrvEncRes(CameraSrvVdoResolution_e eCamSrvResolution);
static void _CameraHandleErrorMessage(CameraSrvRetCode_e eRetCode,MMI_CAMAPP *pThis);
static void _CameraApp_SetNewAction(MMI_CAMAPP *pThis, CamAction_e eNewAction);

//  Parameter Restore Function for App Start
static void _CameraAppParamRestoreForStart(MMI_CAMAPP *pThis);

#if defined(__MMI_CAMERA_NUMBER_KEY_ENABLE__) || defined(__TOUCH_SCREEN_MMI__)
static void _CameraAppChangeQuality(MMI_CAMAPP *pThis);
static void _CameraAppChangeResolution(MMI_CAMAPP *pThis);
static void _CameraAppChangeNightMode(MMI_CAMAPP *pThis);
static void _CameraAppChangeTimer(MMI_CAMAPP *pThis);
static void _CameraAppChangeSound(MMI_CAMAPP *pThis);
static void _CameraAppChangeMultiShot(MMI_CAMAPP *pThis);
static void _CameraAppChangeTimeLimit(MMI_CAMAPP *pThis);
static void _CameraAPPChangeFillLight(MMI_CAMAPP *pThis);
#endif

#if defined(__ENABLE_CAMERA__) && defined(__ENABLE_CAMCORDER__)
static void _CameraAppChangeAPMode(MMI_CAMAPP *pThis);
#endif

#if defined(__MMI_CAMERA_NUMBER_KEY_ENABLE__) || defined(__TOUCH_SCREEN_MMI__) || !defined(__ENABLE_CAMERA__) || !defined(__ENABLE_CAMCORDER__)
static void _CameraAppChangeWhiteBalance(MMI_CAMAPP *pThis);
#endif

#if defined(__MMI_AUTO_FOCUS_SUPPORT__) && defined(__TOUCH_SCREEN_MMI__)
static void _CameraAPPStartFocus(MMI_CAMAPP *pThis);
#endif
#ifdef __MMI_CAMERA_NUMBER_KEY_ENABLE__
static void _CameraShowSettingString(MMI_CAMAPP *pThis, u16 nMenuMdlId, u8 nEnumVal);
static void _CameraDisableSettingString(MMI_CAMAPP *pThis);
static void _CameraDisableSettingStringTimerCB(void* pData);
#endif
#ifdef __SPACE_FULL_STORAGE_SELECTION_MMI__
static void _CameraCreateStorageFullSelectionMenu(MMI_CAMAPP *pThis);
static MAE_Ret _CameraSwitchStorageMenuSoftkeyActCb(void *pCusHandle, const CommWindowMsg_t *pWndMsg, void *pParam1, void *pParam2);
#endif
MAE_Ret CameraInfoDialogTimerAction(MMI_CAMAPP *pThis);
// Request&Release Subject
static MAE_Ret _CameraApp_ResConflictSBJ_Request(MMI_CAMAPP *pThis);
static MAE_Ret _CameraApp_MemorySubject_Request(MMI_CAMAPP *pThis);
static void _CameraApp_ResConflictSBJ_Release(MMI_CAMAPP *pThis);
static void _CameraApp_MemorySubject_Release(MMI_CAMAPP *pThis);
static void _CameraApp_GetPreviewRegionData(MMI_CAMAPP *pThis, CameraSrvRegion_t *pRegion);
#if defined(__CAMERA_MIRROR_MMI__) || defined(__CAMERA_MULTI_FINGER__) || defined(__CAMERA_PANORAMA_MMI__) || defined(__MMI_AUTO_FOCUS_SUPPORT__) || defined(__MULTI_TOUCH_SLIM__)
static void _CameraApp_SetPreviewStart(MMI_CAMAPP *pThis, CameraPreviewStart_t *pCamPreviewStart);
#endif
static MAE_Ret _CamApp_GetFolderPath(MMI_CAMAPP *pThis);

/*-------------------------------------------------------------------------*/
#endif   // #if defined(__ENABLE_CAMERA__) || defined(__ENABLE_CAMCORDER__)

#endif /* __MMI_CAMAPP_PRIV_H__ */
