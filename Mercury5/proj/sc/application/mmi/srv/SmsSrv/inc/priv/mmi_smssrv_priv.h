/**
* @file mmi_sms_priv.h
*
* State Machine Service - SMS
* Generated by XFSM v1.0, CodeVer=v0.24
*
* Class Id: CLSID_SMS
*
*
* @version $Id: mmi_sms_priv.h 38890 2009-08-29 16:22:38Z zinc.chen $
*/
#ifndef __MMI_SMS_PRIV_H__
#define __MMI_SMS_PRIV_H__

#include "mmi_mae_common_def.h"
#include "mmi_mae_sm_defs.h"
#ifdef __SIM_NO_RSP_HANDLING__
#include "mmi_simsrv.h"
#endif
#include "mmi_smssrv.h"
#include "mmi_smssrv_sm.h"
#include "mmi_smstransactionsrv.h"
#include "mmi_common_sms.h"
#include "mmi_mae_arraymodel.h"
#include "mmi_ccsrv.h"
#include "mmi_messageorganizationsrv.h"
#include "mmi_messagecontentsrv.h"
#include "mmi_cfgsrv.h"
#include "mmi_mmsrv.h"

#define EMPTYQUEUE     0
#define setMasterfileTimer 2000
#define SCAMaster 0
#define SCASlave 1
#define StkRefreshMaxCount 2
#define MAXSIMOperationNum 10
#define SMS_MAX_TIMER_COUNT 15

#define SMS_SENTARRAY_ENSURE_CAPACITY 100
#define SMS_SENTARRAY_GROW_NUM 50

enum
{
    SMS_READY_STATUS_START = 0x00
   ,SMS_SIM_INIT_READY_MASTER = 0x01
   ,SMS_STORAGE_SETTING_READY_MASTER = 0x02
   ,SMS_SCA_QUERY_READY_MASTER = 0x04
   ,SMS_RETIREVE_MESSAGE_MASTER = 0x08
   ,SMS_SIM_INIT_READY_SLAVE = 0x10
   ,SMS_STORAGE_SETTING_READY_SLAVE = 0x20
   ,SMS_SCA_QUERY_READY_SLAVE = 0x40
   ,SMS_RETIREVE_MESSAGE_SLAVE = 0x80
   ,SMS_SMI_READY = 0x100
   ,SMS_STATUS_REPORT_MASTER = 0x200
   ,SMS_STATUS_REPORT_SLAVE = 0x400
   ,SMS_READY = 0x7FF,
};
typedef u16 SMS_Ready_Status_e;

enum
{
    SMS_SIM_OPERATION_START = 0
   ,SMS_SIM_OPERATION_Storage_Setting_MASTER = 1
   ,SMS_SIM_OPERATION_Get_Capacity_MASTER
   ,SMS_SIM_OPERATION_SCA_Query_MASTER
   ,SMS_SIM_OPERATION_Status_Report_MASTER
   ,SMS_SIM_OPERATION_Retrieve_MESSAGE_MASTER
   ,SMS_SIM_OPERATION_MASTER
   ,SMS_SIM_OPERATION_Storage_Setting_SLAVE
   ,SMS_SIM_OPERATION_Get_Capacity_SLAVE
   ,SMS_SIM_OPERATION_SCA_Query_SLAVE
   ,SMS_SIM_OPERATION_Status_Report_SLAVE
   ,SMS_SIM_OPERATION_Retrieve_MESSAGE_SLAVE
   ,SMS_SIM_OPERATION_SLAVE
   ,SMS_SIM_OPERATION_END                    ,
} ;
typedef  u16 SMS_SIM_Operation_e;

enum
{
    SMS_SIM_INIT_NOT_READY = 0x00
   ,SMS_SIM_CARD_MASTER_READY = 0x01
   ,SMS_SIM_SMS_MASTER_READY = 0x10
   ,SMS_SIM_INIT_MASTER_READY = 0x11
   ,SMS_SIM_CARD_SLAVE_READY = 0x02
   ,SMS_SIM_SMS_SLAVE_READY = 0x20
   ,SMS_SIM_INIT_SLAVE_READY = 0x22
   ,SMS_SIM_INIT_READY = 0x33,
};
typedef u8 SMS_SIM_INIT_Ready_Status_e;

typedef enum
{
    Status_Idle = 0
   ,Status_Send
}SMS_Status_e;

typedef struct
{
    MAEEvent_t evt;
    u32 p1;
    u32 p2;
}SMS_ReSume_Param_t;

enum
{
    SMS_SENT_SUCCESS = 0
   ,SMS_SENT_FAIL
   ,SMS_SENT_AGAIN
};
typedef u8 SMS_SENT_STATUS_e;

enum
{
    SMS_SEND_3RD_PARTY = 0,
    SMS_SEND_PushMessage,
    SMS_SEND_CRASH_NOTIFY,
    SMS_SEND_NoNotify, //send secret no notify no sms stored
    SMS_SEND_AntiSteal,
};
typedef u8 SMS_SEND_TYPE_e;

typedef struct
{
    SMS_SEND_TYPE_e eSendType;
    SMI_MsgID_t MsgID;
    u32 nPort;
    u32 userData;
    pfn_sms_send_CB fnSendCB;
    IBase *pObj;
    boolean bRetry;
}SMS_3rd_Sent_Item_t;
typedef struct
{
    u8 SIMModule;
    u32 nPort;
    u32 userData;
    u32 nCallerID;
    pfn_sms_receive_CB fnReceiveCB;
}SMS_3rd_register_Item_t;
//-----------------------------------------------------------------------------
typedef struct
{
    u8 SIMModule;
    u32 nTelNo_CRC32ID;
    u32 nUserData;
    u32 nCallerID;
    pfn_sms_receive_CB fnReceiveCB;
}SMS_3rd_register_TelNoItem_t;
#ifdef __SMS_SEND_FROM_BUFFER__
typedef struct SMS_BUFF_MSG_ITEM_TAG
{
    SMS_Msg_ItemDataEx_t    Data;
    SMI_TimeStamp_t         Timestamp;
    u8                      *pReference;
    u8                      *pResentPduIdx;
    u8                      RecipIdx;
} SMS_BuffMsgItem_t;
#endif /* __SMS_SEND_FROM_BUFFER__ */

/**
 * Application structure
 */
typedef struct MMI_SMS_TAG
{
    DECLARE_FUNCTBL(ISMS);    // function table pointer
    u32 refCnt;     // reference count
    SM_Mao_t app;       // StateMachine Application data
    SM_ModeId_t _lastActiveMode[cSMS_ModeNumbers];  // Last child, current active child
    SM_ModeId_t _currentMode[1];
    /* Add custom fields below */
    IVectorModel *pISendingModel;       /* Record the sending message ids */
    IArrayModel *pISentModel;           /* Record the 3rd party msgId and userdata */
    IArrayModel *pIPortModel;           /* record the SMS_3rd_register_Item_t array to dispare the receive data*/
    IArrayModel *pITelNoModel;          /* record the SMS_3rd_register_Item_t array to dispare the receive data*/
    IArrayModel *pOperationModel;           /* record the SMS_3rd_register_Item_t array to dispare the receive data*/
    MAE_Notifier_t *pNotifier;          /* to notify I'm ready */
    //SMS_Msg_ItemData_t *pMsgItem;
    Msg_SMS_Service_Center_t tSCA[2]; // 0: master, 1: slave ,
    SMS_Status_e eStatus;
    COMMON_SIM_CARD_STATUS_e eSIMCardStatus;
    SMS_Ready_Status_e eReady;
    SMS_SIM_INIT_Ready_Status_e eSIMInitReady;
    SMS_SIM_INIT_Ready_Status_e eSIMSMSReady;		//recode the SMS ready indication(VM_MRL_SMS_READY_IND) PR #179341
    SMS_SIM_Operation_e eCurrentOp;
    u32 nSuccessSend;           /* success sending counter*/
    u32 nFailSend;              /* fail sending counter*/
    s32 nQueueSize;              /* the max size of sending queue*/
    u32 nTimerCount;             /* resend timer counter */
    SMI_MsgID_t nSentMsgId;      /* the current sending message id*/
    //boolean bSentResult;         /* record the sent result to move message after retrieve sim*/
    boolean bBufferFull;         /* if the flag is TRUE, it means queue is full. after go back idle has to retrieve outbox*/
    boolean bResend;             /* resend enable*/
    boolean bStopSend;           /* stop send flag*/
    boolean bSendCrashNotify;    /* send crash notify flag, this value equals with config*/
    boolean bEnableResend;       /* default is TRUE */
	boolean bDeleteWaitSMICnf;	 /* if the flag is TRUE, it means a previous delete SMS request is block by SMI_BUSY */
    u8 bBackupSent[2];       /* 0:master, 1:slave */
    boolean bWaitDeleteCnf;      /* bWaitDeleteCnf = TRUE :current all messages at outbox are deleting status */
	SMS_SENT_STATUS_e eSentStatus;	
    ModelListener_t ResendEnableListener;
#ifdef __SIM_NO_RSP_HANDLING__
    ISIMSRV *pSIMSrv;
#endif    
    ISMI *pSMI;
    ITXI *pTXI;
    IMCI *pMCI;
    ICCSRV *pCcSrv;
    IMOI *pMOI;
    ICFGSrv *pCFGSrv;               // config service
    IMMSRV *pMMSRV; // listen to network change
    IBase               *anti_steal_pObj;
    SMS_MSG_SentData_t  *anti_steal_pSendData;
    pfn_sms_send_CB     anti_steal_fnSendCB;
    u32                 anti_steal_userData;
    boolean             isPvMsg;
    boolean             isMTMessageAllowed;
#ifdef __SMS_SEND_FROM_BUFFER__
    IVectorModel        *pBuffMsgQueue;
    u8                  IdMask;
#endif /* __SMS_SEND_FROM_BUFFER__ */
} MMI_SMS;

static void SMS_FreeModelItem(void *pData, IBase *pOwner);
static MAE_Ret SMS_Send_MultiMessage(MMI_SMS* pThis, SMS_Msg_ItemData_t *pSentItem, s16 idx);
static MAE_Ret SMS_SendingQueue_add(MMI_SMS* pThis, SMS_Msg_ItemData_t *pSentItem, s16 idx);
static MAE_Ret SMS_SendingQueue_delete(MMI_SMS *pThis);
static MAE_Ret SMS_SendingQueue_getFirstItem(MMI_SMS *pThis, SMS_Msg_ItemData_t *pData);
static MAE_Ret SMS_Move_Message(MMI_SMS *pThis, SMS_SENT_STATUS_e eSentStatus);
static MAE_Ret SMS_GetMessageFromOutbox(MMI_SMS *pThis);
static void SMS_NotifyOthers_Ready(MMI_SMS *pThis);
void SMS_InsertMsgHeaderTransfer(SMI_MsgHdr_t MsgData, void **ppOutData, void *pUserData);
void SMS_PowerOnResetSMICB(void *pUser);
void SMS_Set_SIMOperation(MMI_SMS *pThis, u8 simModule);
MAE_Ret SMS_Get_SIMOperation(MMI_SMS *pThis, SMS_SIM_Operation_e *op);
static MAE_Ret SMS_SIMCardRelatedProcess(MMI_SMS *pThis, SMS_SIM_Operation_e op);
static void SMS_Handle_TXISCACnf(MMI_SMS *pThis, MMI_SMS_QuerySCACnf_t *pQryScaCnf);
static void SMS_Handle_SetRecvStorageCnf(MMI_SMS *pThis, MMI_SMS_SetRecvStorageCnf_t *pSetRecvStorageCnf);
void SMS_Handle_SIMChange(MMI_SMS *pThis, u8 SimModule);
MAE_Ret SMS_Set_StatusReport(MMI_SMS *pThis, u8 simModule);
static void _SMS_PostEvent_Callback(IBase *pObj, u32 Param);
MAE_Ret SMS_GetAddrType(char *pAddr, MMI_SMS_ScaType_e *pType);
static MAE_Ret SMS_GetReSendItemIdxByMsgID(u32 *idx, SMI_MsgID_t MsgID, MMI_SMS *pThis);
static u32 SMS_GetTimerByFS(u32 nCount);
static u8 _SMS_GetPageCount(MMI_SMS *pThis, SMI_MsgID_t MsgID);
static void _SMS_NotifySendResultForNonSMS(MMI_SMS *pThis, u32 nSentIdx,SMS_SEND_CNF_STATUS nResult, u8 nPageCount);
static void SMS_CFGSrvListener(void *pUserData, ModelEvent_t *pMdlEvt);
#ifdef __SMS_SEND_FROM_BUFFER__
static void SMS_FreeBuffMsgItem( void *pData, IBase *pOwner );
static SMS_BuffMsgItem_t * SMS_GetBuffMsgItem( MMI_SMS *pThis, u16 nMsgId );
static void SMS_HandleBuffMsgSendResult( MMI_SMS *pThis, MMI_SMS_Rslt_e eResult );
static void SMS_UpdateBuffMsgFlag( MMI_SMS *pThis, u16 nMsgId, boolean bAndOp, SMI_MsgFlag eAndFlag, boolean bOrOp, SMI_MsgFlag eOrFlag );
#endif /* __SMS_SEND_FROM_BUFFER__ */
#endif /* __MMI_SMS_PRIV_H__ */
