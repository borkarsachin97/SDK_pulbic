/**
* @file mmi_usbsrv_priv.h
*
* State Machine Service - USBSRV
* Generated by XFSM v1.0, CodeVer=v0.24
*
* Class Id: CLSID_USBSRV
*
*
* @version $Id: mmi_usbsrv_priv.h 38563 2009-08-25 13:02:41Z jason.su $
*/
#ifndef __MMI_USBSRV_PRIV_H__
#define __MMI_USBSRV_PRIV_H__

#include "mmi_mae_common_def.h"
#include "mmi_usbsrv.h"
#include "mmi_mae_battery.h"
#include "mmi_accessorysrv.h"
#if defined (__INTERFERE_CAMERA_PATCH_ADJUST_CLOCK__) || defined (__INTERFERE_CAMERA_PATCH_FREEZE_PREVIEW__)
#include "mmi_ccsrv.h"
#endif

#define MMI_USB_TIMER   500
#define MMI_USB_OPENDEVICE_MAX_RETRY_TIMES  30
#define MMI_USB_OPENDEVICE_MAX_RETRY_FAULT_TIMES 20

/**
 * Application structure
 */
typedef struct MMI_USBSRV_TAG
{
    DECLARE_FUNCTBL(IUSBSRV); // function table pointer
    u32 nRefCnt;     // reference count

    IBattery *pIBattery;
	IACCESSORYSRV	*pIAccessory;
    ModelListener_t tBatteryMdl;
	ModelListener_t tAccessoryMdl;
    IModel *pIUSBModel;
    IApplet *pIUsbApp;
    MAEInstId_t nInstId;
    MMI_USB_STATUS_E eUsbStatus;
    MMI_USB_DEVICE_E eUsbDev;
    boolean bIsOpenRequest;
    boolean bIsTerminated;
    boolean bIsEnabled;
    boolean bIsCableInserted;
    boolean bCheckAttachInvalid;
    boolean bAttached;
    boolean bHasUsbRequest;
    boolean bIsEnabledInCharging; // USB function is enabled when handset is in power-off charging.
    boolean bConnectCnfReceived;
    boolean bConnectTimer;
    boolean bSessionOpened;
    boolean bWaitingOpenCnf;
    boolean bDisconnectAfterOpenCnf;
    boolean bSuspendFileMgr;
    boolean bIsPCSyncMode;
    boolean bDisconnecting; //For blocking plug out event when disconnecting
    boolean bInformConnectFail; //To handle connect fail after resume filemgr
    boolean bIsResumeFileMgrDlgShowing; //To avoid launch USB app several times in quick plugging scenario
#ifdef __USB_WITH_IMEI__
    u8 *pIMEI;
#endif
#ifdef  __DUAL_CHARGER_MMI__
    boolean bIsIncenseIN; // flag to keep IncenseIN, IncenseOut status.
    boolean bIsWaitingStopPollingCnf; // Set to TRUE when StopPolling is called, to FALSE when cnf is reached.
    u8 nCnfCounter;   // To know the total number of reached reg cnf.
    boolean bIsPolling; // Flag to knew if in polling state or not.
#endif
#if defined (__INTERFERE_CAMERA_PATCH_ADJUST_CLOCK__) || defined (__INTERFERE_CAMERA_PATCH_FREEZE_PREVIEW__)
    ICCSRV *pICcSrv;
    boolean bIsNeedToCloseWebcam;
    boolean bIsCcInEverPlugOut;
#endif
    u32 nUsbFuncId;   // The selected menu id of the USB connection menu.
    u8 nOpenRetryTimes;
    u8 nAttachCount;    //for usb cable debouncing
    //Current Mode
    UsbSrvMode_e eCurrMode;
    //For OpenReq & CloseReq.
    SrvUsbResultCB pfnUsbSrvCb;
    //For Set sim path in modem mode
    SrvUsbResultCB pfnSetSimCb;
    u16            u16CdcSimPath;
} UsbSrv_t;

typedef struct UsbSrvCbData_t_
{
    u32 nUserValue;
    SrvUsbResultCB pfnCb;
} UsbSrvCbData_t;

#endif /* __MMI_USBSRV_PRIV_H__ */
