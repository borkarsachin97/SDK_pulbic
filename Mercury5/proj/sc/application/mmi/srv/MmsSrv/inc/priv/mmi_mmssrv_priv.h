/**
* @file mmi_mms_priv.h
*
* State Machine Service - MMS
* Generated by XFSM v1.0, CodeVer=v0.24
*
* Class Id: CLSID_MMS
*
*
* @version $Id$
*/
#ifndef __MMI_MMSSRV_PRIV_H__
#define __MMI_MMSSRV_PRIV_H__

#include "mmi_mae_common_def.h"
#include "mmi_mae_sm_defs.h"
#include "mmi_mmssrv.h"
#include "mmi_mmssrv_sm.h"
#include "mmi_mae_arraymodel.h"
#include "mmi_mae_datamodel.h"
#include "mmi_mae_filemgr.h"
#include "mmi_mae_vectormodel.h"
#include "mmi_accessorysrv.h"
#include "mmi_ccsrv.h"
#include "mmi_cfgsrv.h"
#include "mmi_message_cfg.h"
#include "mmi_common_content.h"
#include "mmi_common_mms.h"
#include "mmi_common_util.h"
#include "mmi_mmsrv.h"
#include "mmi_mmstransactionsrv.h"
#include "mmi_phbsrv.h"
#include "mmi_simsrv.h"
#include "mmi_messagemanagersrv.h"
#include "mmi_usbsrv.h"
#include "mmi_common_storage_mgr.h"
#include "mmi_subject.h"
#ifdef __MMS_MMI_CDMMS__

#define MMS_IMSI_BYTELEN                10

#define MMSGETFILE_NUM                  (30)

enum {
    MMS_OP_NONE                         = 0,
    MMS_OP_SEND                         = 0x0001,
    MMS_OP_RETRIEVE                     = 0x0002,
    MMS_OP_GET_ITEM_INFO                = 0x0004,
    MMS_OP_GET_SENDER_ADDR              = 0x0008,
    MMS_OP_TRANS_CANCELED               = 0x0010,
    MMS_OP_GO_TO_SUSPEND                = 0x0020,
    MMS_OP_SEND_NOTI_RESP               = 0x0040,
    MMS_OP_SEND_READ_REPLY              = 0x0080,
    MMS_OP_PARSE_PUSH                   = 0x0100,
    MMS_OP_SDK_SAVE                     = 0x0200,
    MMS_OP_SDK_SEND                     = 0x0400,
    MMS_OP_SERVICE_REQ                  = 0x8000,
};

typedef struct MMS_WORK_ITEM_TAG {
    void    *pCBFunc;
    void    *pData;
    u32     CallerId;
    u16     MsgId;
    u16     Operation;
    u8      ModId;
    u8      RetryNum;
} MMS_WorkItem_t;

typedef struct MMS_DO_NOTIFY_DATA_TAG {
    MAE_EventId NotifyEvent;
    u32         NotifyMask;
    u32         Param1;
    u32         Param2;
} MMS_DoNotify_Data_t;
#endif

/**
 * Application structure
 */
typedef struct MMI_MMS_TAG {
    DECLARE_FUNCTBL(IMMS);    // function table pointer
    u32 refCnt;     // reference count
    SM_Mao_t app;       // StateMachine Application data
    SM_ModeId_t _lastActiveMode[cMMS_ModeNumbers];  // Last child, current active child
    SM_ModeId_t _currentMode[1];
    /* Add custom fields below */
#ifdef __MMS_MMI_CDMMS__
    IACCESSORYSRV *pACCESSORYSRV;
    ICCSRV *pCCSRV;
    ICFGSrv *pCFGSRV;
    IMMSRV *pMMSRV;
    IMMSTRANSSRV *pMMSTRANSSRV;
    MAE_Notifier_t *pNotifier;
    IPHBSRV *pPHBSRV;
    ISMI *pSMI;
    IUSBSRV *pUSBSRV;
    IVectorModel            *pServiceStoppers;
    IVectorModel *pWorkItems;
    ModelListener_t AccessoryMdlListener;
    ModelListener_t CFGListener;
    u16 TimeoutSecs;
    u8 CurIMSI_M[MMS_IMSI_BYTELEN];
    u8 CurIMSI_S[MMS_IMSI_BYTELEN];
    u8 RetrieveFailedCount;
    u8 SendFailedCount;
	u8 USBAppType;
#if defined(__APP_MMI_CHECKDISK__)
	u8 CheckDiskAppType;
#endif
    boolean IsExtCardReady;
    boolean IsInCall;
    boolean IsConflictAppRunning;
    boolean IsPBServiceReady;
    boolean IsPushParsing;
    boolean IsReloadFailed;
    boolean IsSMIServiceReady;
    boolean MsgReloading;
    boolean MsgReloadReq;

    u16 _MsgId;
    u16 CancelId;
    SMI_MsgLocation_e _MsgLoc;
    u8 bBackupSent[2];       /* 0:master, 1:slave */

	StorageInfo_t StorageInfo;
#endif
    boolean IsServiceReady;
} MMI_MMS;

#ifdef __MMS_MMI_CDMMS__
void    MMS_AccessoryMdlListener( MMI_MMS *pThis, ModelEvent_t *pMdlEvent );
MAE_Ret MMS_AddWorkItem( MMI_MMS *pThis, MMS_WorkItem_t *pItem );
void    MMS_CheckMMSFolder( MMI_MMS *pThis );
void    MMS_CleanGarbage( MMI_MMS *pThis );
void    MMS_ClearQueue( MMI_MMS *pThis, u16 nMsgId );
void    MMS_ClearQueueExceptPush( MMI_MMS *pThis );
MAE_Ret MMS_DeleteWorkItemByMsgID( MMI_MMS *pThis, u16 nMsgId );
void    MMS_Dtor( MMI_MMS *pThis );
void    MMS_InitUnprocessedWorkItems( MMI_MMS *pThis );
boolean MMS_IsModemActive(MMI_MMS *pThis, ModelEvent_t *pMdlEvent);
void    MMS_PostCheckQueueEventWithCondCheck( MMI_MMS *pThis );
void    MMS_ReloadMessages( MMI_MMS *pThis );
MAE_Ret MMS_MountStorage( MMI_MMS *pThis, boolean bNeedReload );
void    MMS_ShowServiceStoppers( MMI_MMS *pThis );
void    MMS_UnmountStorage( MMI_MMS *pThis, boolean bClearHeaderInfo, boolean bSkipNotify);
void    MMS_UsbMdlListener( char *pSbjName, SubjectStatus_e nSbjStatus, void *pUser);
#if defined(__APP_MMI_CHECKDISK__)
void MMS_CheckDiskListener(char *pSbjName, SubjectStatus_e nSbjStatus, void *pUser);
#endif //
__SLDPM_FREE__ static void MMS_CFGSrvListener(MMI_MMS *pThis, ModelEvent_t *pMdlEvt);
void MMS_ResCtrl_CB(char *pSbjName, SubjectStatus_e nSbjStatus, void *pUser);
static void MMS_RefreshIMSI(MMI_MMS *pThis, u8 simModule);
#ifdef __BLUETOOTH_A2DP_MMI__
static void MMS_MemoryLoadSbjListener(char *pSbjName, SubjectStatus_e nSbjStatus, void *pUser);
#endif //__BLUETOOTH_A2DP_MMI__
#endif

#endif /* __MMI_MMSSRV_PRIV_H__ */
