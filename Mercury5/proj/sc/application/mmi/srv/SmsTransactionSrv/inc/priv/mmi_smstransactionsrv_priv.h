/**
* @file mmi_txi_priv.h
*
* Service without using State Machine - TXI
* Generated by XFSM v1.0, CodeVer=v0.24
*
* Class Id: CLSID_TXI
* Interface Id: IID_TXI
*
* @version $Id: mmi_txi_priv.h 38890 2009-08-29 16:22:38Z zinc.chen $
*/
#ifndef __MMI_SMSTRANSACTIONSRV_PRIV_H__
#define __MMI_SMSTRANSACTIONSRV_PRIV_H__

#include "mmi_mae_common_def.h"
#include "mmi_smstransactionsrv.h"
#include "mmi_common_sms.h"
#include "mmi_common_sms_tpdu.h"
#include "mmi_messagemanagersrv.h"
#include "mmi_messagecontentsrv.h"
//#define __Test_SMS__

enum
{
    idxNull = -1
   ,_8bitInByte = 8
   ,_7bitInByte = 7
};

typedef struct TXI_DO_NOTIFY_DATA_TAG
{
    u32 NotifyMask;
    MAE_EventId NotifyEvent;
    u32 Param1;                     //param1 with the Notify Event
    u32 Param2;    //param2 with the Notify Event
    PfnEventCleanup pCleanFnc;      //The clean function for update vector model
}TXI_DoNotify_Data_t;

typedef struct TXI_SIM_RETRV_ABORT_TAG
{
    u8 bAbort;
    u8 simModule;
}TXI_SimRetrvAbort_t;

/**
 * Application structure
 */
typedef struct MMI_TXI_TAG
{
    DECLARE_FUNCTBL(ITXI);    // function table pointer
    u32 refCnt;     // reference count
    /* Add custom fields below */
    IVectorModel *pIEvtSmsSendModel;               /* Record the SmsSend event message ids */
    IVectorModel *pIEvtSmsReadModel;               /* Record the SmsRead event message ids */
    IVectorModel *pIEvtSmsStoreModel;              /* Record the SmsStore event message ids */
    IVectorModel *pIEvtSmsDelModel;                /* Record the SmsDel event message ids */
    IVectorModel *pIEvtSmsSetScaModel;             /* Record the SmsSetSca event message ids */
    IVectorModel *pIEvtSmsQryScaModel;             /* Record the SmsQrySca event message ids */
    IVectorModel *pIEvtSmsModStatusModel;          /* Record the SmsModStatus event message ids */
    IVectorModel *pIEvtSmsQryStorageModel;         /* Record the SmsQryStorage event message ids */
    IVectorModel *pIEvtSmsSetParamModel;           /* Record the SmsSetParam event message ids */
    IVectorModel *pIEvtSmsQryParamModel;           /* Record the SmsQryParam event message ids */
    IVectorModel *pIEvtSmsSetRecvStorageModel;     /* Record the SmsSetRecvStorage event message ids */
    IVectorModel *pIEvtSmsSetStoreMeIdxModel;      /* Record the SmsSetStoreMeIdx event message ids */
    IVectorModel *pIEvtSmsSetCapacityModel;        /* Record the SmsSetCapacity event message ids */
    IVectorModel *pIEvtSmsSetStatusReportModel;    /* Record the SmsSetStatusReport event message ids */
    IVectorModel *pIEvtSmsSetMoreMsgModel;         /* Record the SmsSetMoreMsg event message ids */

    IVectorModel *pIEvtSetCbmTypeModel;            /* Record the SetCbmType event message ids */
    IVectorModel *pIEvtSetCbmiModel;               /* Record the SetCbmi event message ids */
    IVectorModel *pIEvtActiveCbmiModel;            /* Record the ActiveCbmi event message ids */

    IVectorModel *pIEvtQryCbmiModel;               /* Record the QryCbmi event message ids */

    TXI_SMS_Store_Cnf_t *pStoreCnf;

    MAE_Notifier_t *pNotifier;     /* to notify I'm ready */
    IMOI *pMOI;
    ISMI *pSMI;
    IMCI *pMCI;
    u16 smsMasterSIMSpaceTotal;
    u16 smsMasterSIMSpaceUsed;
    u16 smsSlaveSIMSpaceTotal;
    u16 smsSlaveSIMSpaceUsed;

    TXI_SimRetrvAbort_t simRetrvAbort;

    u16 simRead;
    u16 simIndex;

    u8 msgAddMsg;
    u8 bSimRetrv;
    u8 maxPartNum;
    u8 partNum;
    u8 bSetRecvStorage;
    u8 bTerminateState;
    u8 resentPduIdx;

    MMI_SMS_MoReq_t *pTpdu;

#ifdef __Test_SMS__
    u32 ConfirmEvent;    //@@~~ for test the confirm event from
#endif
} MMI_TXI;

typedef struct TXI_NOTIFY_INFO_TAG
{
    void *pinst;
    u32 id;
    u8 simIndex;
}TXI_NotifyInfo_t;

typedef struct
{
    TXI_NotifyInfo_t NotifyBase;
    MMI_SMS_StoreReq_t *pStoreReq;
}TXI_StoreNotifyInfo_t;

#define TXI_MAX_DEL_RETRY_NUM  2

typedef struct
{
    TXI_NotifyInfo_t NotifyBase;
    TX_SMS_DelFlag_e delFlag;
    u8 SIM_Module;
    u8 simIndex[MAX_CONCATENATE_PACKAGE];
    u8 nCurrentIdx; //The current operation PDU index, the index of simIndex
    u8 nDeleted;
    u8 nRetryNum;
}TXI_DelNotifyInfo_t;

static void mmi_TXI_SMS_SEND_CNF(MMI_TXI *pThis, MMI_SMS_MoCnf_t *pMoCnf);
static void mmi_TXI_SMS_READ_CNF(MMI_TXI *pThis, MMI_SMS_ReadCnf_t *pReadCnf, u8 simModule);
static void mmi_TXI_SMS_STORE_CNF(MMI_TXI *pThis, MMI_SMS_StoreCnf_t *pStrCnf, u8 simModule);
static void mmi_TXI_SMS_DEL_CNF(MMI_TXI *pThis, MMI_SMS_DelCnf_t *pDelCnf, u8 simModule);
static void mmi_TXI_SMS_SET_SCA_CNF(MMI_TXI *pThis, MMI_SMS_SetSCACnf_t *pSetScaCnf, u8 simModule);
static void mmi_TXI_SMS_QUERY_SCA_CNF(MMI_TXI *pThis, MMI_SMS_QuerySCACnf_t *pQryScaCnf, u8 simModule);
static void mmi_TXI_SMS_MOD_STATUS_CNF(MMI_TXI *pThis, MMI_SMS_ModStatusCnf_t *pModStsCnf, u8 simModule);
static void mmi_TXI_SMS_QUERY_STORAGE_CNF(MMI_TXI *pThis, MMI_SMS_QueryStorageCnf_t *pQryStrgCnf, u8 simModule);
static void mmi_TXI_SMS_SET_PARAM_CNF(MMI_TXI *pThis, MMI_SMS_SetParamCnf_t *pSetParmCnf, u8 simModule);
static void mmi_TXI_SMS_QUERY_PARAM_CNF(MMI_TXI *pThis, MMI_SMS_QueryParamCnf_t *pQryParmCnf, u8 simModule);
static void mmi_TXI_SMS_SET_RECV_STORAGE_CNF(MMI_TXI *pThis, MMI_SMS_SetRecvStorageCnf_t *pSetRecvStrgCnf, u8 simModule);

static void mmi_TXI_SMS_Set_Store_Me_Index_CNF(MMI_TXI *pThis, MMI_SMS_SetStoreMeIndexCnf_t *pSetStoreMeIndexCnf, u8 simModule);
static void mmi_TXI_SMS_Set_Capacity_CNF(MMI_TXI *pThis, MMI_SMS_SetCapacityCnf_t *pSetCapacityCnf, u8 simModule);

static void mmi_TXI_SMS_Set_Status_Report_CNF(MMI_TXI *pThis, MMI_SMS_SetStatusReportCnf_t *pSetStatusReportCnf, u8 simModule);

static void mmi_TXI_SMS_Set_More_Msg_CNF(MMI_TXI *pThis, MMI_SMS_SetMoreMsgCnf_t *pSetMoreMsgCnf, u8 simModule);

static void mmi_TXI_SMS_SET_CBM_TYPE_CNF(MMI_TXI *pThis, MMI_SMS_SetCBMTypeCnf_t *pSetCBMtpCnf);
static void mmi_TXI_SMS_SET_CBMI_CNF(MMI_TXI *pThis, MMI_SMS_SetCBMICnf_t *pSetCbmiCnf);
static void mmi_TXI_SMS_ACTIVE_CBMI_CNF(MMI_TXI *pThis, MMI_CB_ActiveCBMICnf_t *pActiveCbmiCnf);
static void mmi_TXI_SMS_ACTIVE_RNG_CBMI_CNF(MMI_TXI *pThis, MMI_CB_ActiveRngCBMICnf_t *pActiveRngCbmiCnf);
static void mmi_TXI_SMS_QUERY_CBMI_CNF(MMI_TXI *pThis, MMI_SMS_QueryCBMICnf_t *pQryCbmiCnf);

static void mmi_TXI_SMS_READY_IND(MMI_TXI *pThis, u8 simModule);
//static void mmi_TXI_SMS_MT_IND(MMI_TXI *pThis, MMI_SMS_MTInd_t *pSmInd, u8 simModule);
static void mmi_TXI_SMS_CB_IND(MMI_TXI *pThis, MMI_CB_Ind_t *pCbInd, u8 simModule);
static void mmi_TXI_SMS_SR_IND(MMI_TXI *pThis, MMI_SMS_SRInd_t *pSrInd, u8 simModule);
static MAE_Ret mmi_TXI_SMS_Store_Req_IND(MMI_TXI *pThis, MMI_SMS_StoreMEReqInd_t *pStoreReqInd, u8 simModule);

static void TXI_FreeModelItem(u32 *pData, IBase *pOwner);
static void TXI_NoFreeModelItem(u32 *pData, IBase *pOwner);
static void TXI_FreeStoreNotifyItem(void *pData, IBase *pOwner);
static void TXI_FreeStoreCnfInfo(IBase *pOwner, u32 lParam, u32 dParam);
static void TXI_FreeCnfInfo(IBase *pOwner, u32 lParam, u32 dParam);

static MAE_Ret TXI_VectorModel_Add(IVectorModel **ppIVectorModel, void *pvItem, PfnModelFree FreeModelItem, MMI_TXI *pThis);
static MAE_Ret TXI_RetrvTpduFromMsgData(MMI_TXI *pThis, u16 u16MsgId, MMI_SMS_MoReq_t **pTpdu, u8 *tpduNum);
static MAE_Ret TXI_RetrvMsgDataHdr(MMI_TXI *pThis, u16 u16MsgId, SMS_MsgDataHdr *pMsgDataHdr, u8 *tpduNum);

void mmi_TXI_DoNotifyResumeCB(IBase *pObj, u32 Param);
static MAE_Ret mmi_TXI_ContextSwitchDoNotify(MMI_TXI *pThis, u32 NotifyMask, MAE_EventId NotifyEvent, u32 Param1, u32 Param2, PfnEventCleanup pCleanFnc);

static void mmi_TXI_ReleaseObj(MMI_TXI *pThis);

static MAE_Ret mmi_TXI_SMS_SEND_PDU_REQ(MMI_TXI *pThis, u8 simModule);
static void mmi_TXI_SMS_SEND_PDU_CNF(MMI_TXI *pThis, MMI_SMS_MoCnf_t *pMoCnf);

static MAE_Ret TXI_RetrvTpduFromBuffer(MMI_TXI *pThis, u8 *pMsgData, u32 dataLenBytes, MMI_SMS_MoReq_t **pTpdu, u8 *tpduNum);

#endif /* __MMI_SMSTRANSACTIONSRV_PRIV_H__ */
