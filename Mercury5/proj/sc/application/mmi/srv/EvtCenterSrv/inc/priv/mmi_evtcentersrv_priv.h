/**
* @file mmi_evtcentersrv_priv.h
*
* Service without using State Machine - EVTCENTERSRV
* Generated by XFSM v1.0, CodeVer=v0.24
*
* Class Id: CLSID_EVTCENTERSRV
* Interface Id: IID_EVTCENTERSRV
*
* @version $Id$
*/
#ifndef __MMI_EVTCENTERSRV_PRIV_H__
#define __MMI_EVTCENTERSRV_PRIV_H__

/*-------------------------------------------------------------------------*/
#include "mmi_mae_common_def.h"
#include "mmi_evtcentersrv.h"
#include "mmi_audiosrv.h"
#include "mmi_mae_vectormodel.h"
#include "mmi_mae_battery.h"
#include "mmi_common_cfg.h"
#include "mmi_mmsrv.h"
#include "mmi_mae_datamodel.h"
#include "mmi_ccsrv.h"
#include "mmi_smssrv.h"
#ifdef __MMS_MMI_CDMMS__
#include "mmi_mmssrv.h"
#endif
#include "mmi_smstransactionsrv.h"
#include "mmi_calllogsrv.h"
#ifdef __APP_MMI_ANSWERING_MACHINE__
#include "mmi_ccsrv.h"
#endif
#include "mmi_dialogapp.h"
#include "mmi_common_dialog_id.h"
#include "mmi_mae_softkey.h"
#include "mmi_mae_helper.h"
#include "mmi_messageorganizationsrv.h"
#include "mmi_messagecontentsrv.h"
#include "mmi_common_messagecenter_type.h"
#include "mmi_common_messageviewer_type.h"
#include "mmi_accessorysrv.h"
#include "mmi_alarmsrv.h"
#ifdef __APP_MMI_TODOLIST__
#include "mmi_todolistapp_util.h"
#endif
#include "mmi_common_content.h"
#include "mmi_smssrv.h"
#include "melody_data.h"
#include "mmi_mae_resource.h"
#include "mmi_btsrv.h"
#include "mmi_coresrv.h"
#include "mmi_profilesrv.h"
#include "mmi_phbsrv.h"
#include "mmi_fdnsrv.h"
#include "mmi_alivewdgsrv.h"
#include "mmi_venappid.h"
//For LogDB
#include "mmi_util_rtc.h"
#include "mmi_mae_logdb.h"
#include "mmi_mae_logdbmgr.h"

#include "mmi_cphssrv.h"
#include "mmi_cphssrv_def.h"

#include "mmi_common_sms_master.h"
#include "mmi_common_util.h"

#include "mmi_cbsrv.h"
#include "sys_sys_wmh_sys.h"   /* For vm_sysDelayWatchDogReset(). */
#include "mmi_mae_arraymodel.h"
#include "mmi_launcher_mca.h"

#if defined(__JAVA_LOW_MEM_CONCURRENT_HANDLE_MMI__) || defined(__MEMORY_LOW_KILL_3RD_VENDOR__)
#include "mmi_vendorsrv.h"
#include "mmi_subject.h"
#endif

//Test
#include "mmi_common_sms.h"
#ifdef BREAKIF_DISPERROR
#undef BREAKIF_DISPERROR
#endif
#define BREAKIF_DISPERROR(n,s) {\
                                if(MAE_RET_SUCCESS != n) \
                                {\
                                  LOG_ERROR(MMI_LEVEL_EVTCENTER, s,n);\
                                  ASSERT(MAE_RET_SUCCESS != n);\
                                  break; \
                                }\
                              }
/*

#ifdef BREAKIFNULL
#undef BREAKIFNULL
#endif
#define BREAKIFNULL(p) {\
                         if( NULL == (p))\
                         {\
                            nRetVal = MAE_RET_OUT_OF_MEMORY;\
                            LOG_ERROR(MMI_LEVEL_EVTCENTER, "{Failed to allocate memory");\
                            break;\
                         }\
                        }
*/
#define EVTCENTERSRV_MISSCALL_DELAY 500
#define EVTCENTERSRV_RESET_WATCH_DOG_COUNT  3   //reset watch dog for every EVTCENTERSRV_RESET_WATCH_DOG_COUNT access DB.
#define EVTCENTERSRV_MAX_DIALOG_EVENTS 100
#define EVTCENTERSRV_MAX_MISSED_EVENTS 100
#define EVTCENTERSRV_ARRAYMODEL_SIZE_INIT 120
#define EVTCENTERSRV_ARRAYMODEL_SIZE_GROW 120
#define EVTCENTERSRV_DUAL_SIM 2

#define EVTCENTERSRV_STEP_DEBOUNCE_TIME_FOR_MONITOR_NOTIFY                  (100)
#define EVTCENTERSRV_MIN_DEBOUNCE_TIME_FOR_MONITOR_NOTIFY                   (100)
#define EVTCENTERSRV_MAX_DEBOUNCE_TIME_FOR_MONITOR_NOTIFY                   (600)

typedef struct EVTCenter_Log_Item_Tag
{
    u16 MsgId;
    MAE_WChar *pLogText;
    EvtCenter_Dialog_Type_e nDialogType;
    u32 nDialogTimer;
    u32 param;
    u32 nLogTextId; //For Logdb usage. could be text label ID or alarm/calendar event
    LOGDATAFREE_FUNC_PTR pfnFuncFree; // A free function pointer
    boolean bDispInKeyGuard;
    boolean bDialogPlayTone;
}EVTCenter_Log_Item_t;

typedef struct EVTCenter_Dialog_Param_Tag
{
    MAE_WChar *pDialogMsg;
    SoftkeyID_e nLSK;
    SoftkeyID_e nCSK;
    SoftkeyID_e nRSK;
    u32 nAutoCloseTimer;
    u32 MsgId;
    IModel *pIModel;
    u16 nDialogViewID;
    boolean bPlayMelody;
    u32 nMelodyID;
}EVTCenter_Dialog_Param_t;

typedef struct EVTCenter_Dialog_Item_Tag
{
    EVTCenter_Dialog_Param_t DialogParam;
    EVTCenter_Log_Item_t LogItem;
}EVTCenter_Dialog_Item_t;

typedef struct EVTCenter_Message_Item_Tag
{
    SMI_MsgID_t MsgId;
    SMI_TimeStamp_t TimeStamp;
    SMI_MsgLocation_e Location;
    EvtCenter_Message_Type_e MsgType;
    boolean completeFlag;
}EVTCenter_Message_Item_t;

typedef struct EVTCenter_DoNotify_Data_Tag
{
    u32 NotifyMask;
    MAE_EventId NotifyEvent;
    u32 Param1;                     //param1 with the Notify Event
    u32 Param2;                     //param2 with the Notify Event
    PfnEventCleanup pCleanFnc;  //The clean function for update vector model
}EVTCenter_DoNotify_Data_t;

typedef enum
{
    EVTCenter_InitSMS_Ready_None = 0x00
   ,EVTCenter_InitSMS_Ready_OneSIM = 0x01
   ,
#ifdef __DUAL_SIM_MMI__
    EVTCenter_InitSMS_Ready_BothSIM
   ,EVTCenter_InitSMS_Ready_AllSIM = EVTCenter_InitSMS_Ready_BothSIM
   ,
#else
    EVTCenter_InitSMS_Ready_AllSIM = EVTCenter_InitSMS_Ready_OneSIM
   ,
#endif
    EVTCenter_InitSMS_HomeAP_Ready_Mask = 0x10
   ,EVTCenter_InitSMS_All_Ready = EVTCenter_InitSMS_HomeAP_Ready_Mask + EVTCenter_InitSMS_Ready_AllSIM,
}EVTCenter_InitSMS_Ready_e;

typedef enum
{
    EVT_MMS_NewNotify = 0
   ,EVT_MMS_NewMessage
}EVTMMS_NewIndication_e;

typedef struct EVTCenter_LaunchMessageParam_Tag
{
    u32 nMsgID;
    u32 nNewMsgNum;
    //SMS_VIEWER_TYPE_e nViewerType;
    MsgType_e nViewerType;
    boolean completeFlag;
}EVTCenter_LaunchMessageParam_t;

typedef struct EVTCenter_DialogAction_Tag
{
    u32 nEventID;
    u32 nDialogType;
}EVTCenter_DialogAction_t;

typedef enum
{
    EVTCenter_PlayMediaStatus_Finished = 0
   ,EVTCenter_PlayMediaStatus_RequestPlay
   ,EVTCenter_PlayMediaStatus_Playing
   ,EVTCenter_PlayMediaStatus_RequestStop
}EVTCenter_PlayMediaStatus_e;


#ifdef __BLUETOOTH_OBEX_MMI__
/* Add for New Feature #437 */
typedef struct
{
    u16                         nRecvBTFileNum;
    u16                         nRecvBTFileNumInLatestDir;
    boolean                     bDirChanged;
    MAE_WChar                   aCurrentRecvFolder[FILEMGR_MAX_FILEPATH_SIZE];
} EVTCenter_BtRecvInfo_t;
#endif


/**
 * Application structure
 */
typedef struct MMI_EVTCENTERSRV_TAG
{
    DECLARE_FUNCTBL(IEVTCENTERSRV); // function table pointer
    u32 refCnt;     // reference count
    //Log
    ILogdb *pILogDB;
    ILogDBMgr *pILogDBMgr;
    //Event
    IDataModel *pIEvtCenterModel; /* Resulting data model which Event Center AP listener to*/
    EVTCenterStatus_t *EVTCenterStatus;
    EVTCenter_Alert_For_e eAlertFor;
    EVTCenter_LaunchMessageParam_t stLaunchCB; //Mmi_evtcentersrv.c log
    EvtCenter_Model_Index_e eFlushAPType; //Timer callback
    u32 nLastCBID; /* The last missed CB message ID that needed to pass to CB message viewer. */
    u32 nTotalMissedEventNum;
    u16 nIDCounter;
    boolean bAutoProcessEvent; //Mmi_evtcentersrv.c
    boolean bTerminateState;
    EvtCenter_Event_Handle_Type_e eEventHandleType;
    MAE_Notifier_t *pNotifier;
    //USB
    IUSBSRV *pIUSBSrv;
    //Battery
    IBattery *pIBattery;
    IArrayModel *pIBattDialogQueue;
    ModelListener_t BattModelListener;
    boolean bIgnoreBatteryEvt;
    //ICALLLOGS
    ICALLLOGSRV *pICallLogSrv;
    ModelListener_t CallLogModelListener;
    //SMS
    EVTCenter_InitSMS_Ready_e eInitSMSReady;    //check ready
    ISMS *pSMSSrv;
    u32 nLastSMSID;     /* The last missed SMS ID that needed to pass to SMS viewer. */
    EVTCenter_LaunchMessageParam_t stLaunchSMS; //Mmi_evtcentersrv.c log
    u8 nMsgSimModule;
	//ITXI
	ITXI *pTXI;
    //SIM
    u32 nLastSIM1SMSID; /* The last missed SIM1 SMS ID that needed to pass to SMS viewer. */
    u32 nLastSIM2SMSID; /* The last missed SIM1 SMS ID that needed to pass to SMS viewer. */
    u16 nSIMSMS[EVTCENTERSRV_DUAL_SIM]; /* number of new SMS in SIM */
    ISIMSRV *pISIMSrv;   //for interaction with SIM card.
    boolean bSyncMasterSIMPhoneShown;
    boolean bSyncSlaveSIMPhoneShown;
    boolean bMasterReceiveSIMReadyInd;
    boolean bSlaveReceiveSIMReadyInd;
    boolean bMasterReceiveReadyToCopyADN;
    boolean bSlaveReceiveReadyToCopyADN;
    //Voice
    boolean bVoiceMailLine1;
    boolean bVoiceMailLine2;
    boolean bVoiceMailLine1_Slave;
    boolean bVoiceMailLine2_Slave;
    //SMI & MOI & MCI
    ISMI *pSMISrv;
    IMOI *pMOISrv;
    IMCI *pMCISrv;
    //MMI & MMS
    u32 nLastMMSID;     /* The last missed MMS ID that needed to pass to MMS viewer. */
    EVTCenter_LaunchMessageParam_t stLaunchMMS; //Mmi_evtcentersrv.c log
    boolean bIsLastMMSComplete;
#ifdef __MMS_MMI_CDMMS__
    IMMS *pMMSSrv;
#endif
    //MEDIA
    boolean bVibrate;
    boolean bDirectPlay;
    //  boolean           bWaitingForPlay;
    //  boolean          bStopMelody;
    IAUDIOSRV *pAudioSrv;
    u32 nRingerID;  /* A specified ringer id to be played when notification dialpg prompted. */
    EVTCenter_PlayMediaStatus_e ePlayMediaStatus; //Mmi_evtcentersrv.c
    //boolean bOpenMediaSession;
    boolean bRingTimerOn; //Mmi_evtcentersrv.c
    u8 nToneType;
    SetRingToneVolume_e eRingToneVolume;
    //Accessory
    IACCESSORYSRV *pIAccessorySrv;
    ModelListener_t AccessoryModelListener;
    //Alarm
    IALARMSRV *pIAlarmSrv;
    IArrayModel *pIAlarmDialogQueue;
    ModelListener_t AlarmModelListener;
    u32 nLastAlarmUserCode;
    //BT
#ifdef __BLUETOOTH_MMI__
    IBTSRV *pIBTSrv;
#ifdef __BLUETOOTH_A2DP_MMI__
    boolean bA2DPActive;
#endif
#endif
    //CPHS
    ICPHSSRV *pICPHSSrv;
    //CBS
    ICBS *pICBS;    //for CB
    //Clock
    IClock *pIClock;
    //Profile
    IPROFILESRV *pIProfileSrv;
    //CFG
    ICFGSrv *pICFGSrv;
    ModelListener_t CFGModelListener;
    //FDN
    IFDNSRV *pIFDNSrv;
    //PHB
    IPHBSRV *pIPhbSrv;
#ifdef __CALLER_LOCATION__
    //caller location
    ICLSRV *pIClSrv;
#endif
    //Alert
    EvtCenter_Alert_Mode_e eAlertMode;
    u32 nEvtReminderAlert;
    //Dialog
    boolean bStartDialogAP;
    IDataModel *pIDialogActionModel; /* Pass request to dialog ap.*/
    IModel *pIDialogNotifyModel;
    IArrayModel *pINormalDialogQueue;
    ModelListener_t DialogModelListener;
    IArrayModel *pIEventLogQueue;
    //Keyguard
    boolean bKeyguardActive; //keyguard app
    MAE_WChar stRingerURL[FILEMGR_MAX_FILEPATH_SIZE];

#ifdef __APP_MMI_ANSWERING_MACHINE__
	u16 u16VoiceBoxCount;
	ANSWERING_MACHINE_FAILED_TYPE_e eAnsweringMachineFailedType;
	ICCSRV *pICCSrv;
#endif

    u32 nRingerIDForResume;
    EVTCenter_Alert_For_e eAlertFor_ForResume;
    boolean bPlayByAlarmRes;
	boolean bVibrateThenRing;
	MAE_WChar *pRingerURL;
	EvtCenter_Dialog_Type_e eDialogType;

    u8 bIsPreCard1Plug;
    u8 bIsPreCard2Plug;
    u8 bCardIsGood;
    u8 bIsShowPlugIn;

    ICOUNTDOWNTIMERSRV *pICountdownTimerSrv;
#ifdef __GADGETS_MMI__
    IALIVEWDGSRV *pIAliveWdgSrv;
#endif
#ifdef __MMI_SWITCH_MODE_WHEN_NO_NETWORK__
    IMMSRV *pIMMSrv;
#endif

#ifdef __APP_MMI_PRIVATEPROTECT__
    IPRIVATEPROTECTSRV *pIPrivateprotectSrv;
#endif
#if defined(__JAVA_LOW_MEM_CONCURRENT_HANDLE_MMI__) || defined(__MEMORY_LOW_KILL_3RD_VENDOR__)
    IVENDORSRV *pIVendorSrv;
    boolean bLowMem;
#endif
    boolean bIgnoreSMSEvent;

#ifdef __BLUETOOTH_OBEX_MMI__
    /* Add for New Feature #437 */
    EVTCenter_BtRecvInfo_t          tBtRecvInfo;
#endif
#ifdef __SIM_NO_RSP_HANDLING__
    boolean bIsShowSIMNoRspDialog;
    boolean bIsShowSIM2NoRspDialog;
    boolean bIsShowWaitSIMNoRspDialog;
    boolean bIsShowWaitSIM2NoRspDialog;
    u16 u16ConfirmSIMNoRspMsgId;
    u16 u16ConfirmSIM2NoRspMsgId;
    u16 u16WaitSIMNoRspMsgId;
    u16 u16WaitSIM2NoRspMsgId;
#endif //__SIM_NO_RSP_HANDLING__

} MMI_EVTCENTERSRV;

typedef struct
{
    MMI_EVTCENTERSRV *pThis;
    DialogApp_DialogInfo_t *pDialogInfo;
}EVTCenter_DialogStratCB_Data_t;

__inline MAE_Ret _EVTCENTERSRV_InitSrv(MMI_EVTCENTERSRV *pThis);

s8 _EVTCENTERSRV_GetMatchProfileIdx(MMI_EVTCENTERSRV *pThis, u8 *MccMnc, ConnProfile_Type_e app);
boolean mmi_EVTCENTERSRV_HandleEvent(IEVTCENTERSRV *pIEVTCENTERSRV, MAE_EventId eventID, u32 param1, u32 param2);
void mmi_EVTCENTERSRV_ResetMissedNumber(IEVTCENTERSRV *pIEVTCENTERSRV, EvtCenter_Model_Index_e eModelType);

#include "mmi_evtcentersrv_battery.h"
#include "mmi_evtcentersrv_logmsg.h"
#include "mmi_evtcentersrv_dialog.h"
#include "mmi_evtcentersrv_calllog.h"
#include "mmi_evtcentersrv_timer.h"
#include "mmi_evtcentersrv_alarm.h"
#include "mmi_evtcentersrv_accessory.h"
#include "mmi_evtcentersrv_media.h"
#include "mmi_evtcentersrv_sms_mms.h"
#include "mmi_evtcentersrv_model.h"
#include "mmi_evtcentersrv_mics.h"

#endif /* __MMI_EVTCENTERSRV_PRIV_H__ */
