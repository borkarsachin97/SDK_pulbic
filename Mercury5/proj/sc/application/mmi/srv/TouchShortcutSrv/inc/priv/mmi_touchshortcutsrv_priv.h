/**
* @file mmi_touchshortcutsrv_priv.h
*
* Service without using State Machine - TOUCHSHORTCUTSRV
* Generated by XFSM v1.0, CodeVer=v0.24
*
* Class Id: CLSID_TOUCHSHORTCUTSRV
* Interface Id: IID_TOUCHSHORTCUTSRV
*
* @version $Id$
*/
#ifndef __MMI_TOUCHSHORTCUTSRV_PRIV_H__
#define __MMI_TOUCHSHORTCUTSRV_PRIV_H__

#include "mmi_mae_common_def.h"
#include "mmi_touchshortcutsrv.h"
#include "mmi_mae_touchsrv.h"
#include "mmi_mae_notifier.h"
#include "mmi_shortcutssrv_cfg.h"
#include "mmi_touchshortcutsrv_custom.h"

typedef enum
{
    TOUCHSHORTCUT_SHORTCUT_INVALID
   ,TOUCHSHORTCUT_SHORTCUT_1
   ,TOUCHSHORTCUT_SHORTCUT_2
   ,TOUCHSHORTCUT_SHORTCUT_3
   ,TOUCHSHORTCUT_SHORTCUT_4
   ,TOUCHSHORTCUT_SHORTCUT_5
   ,TOUCHSHORTCUT_SHORTCUT_6
   ,TOUCHSHORTCUT_SHORTCUT_END
} TouchShortcutID_e;

typedef struct
{
    ShortcutsFuncId_e eFuncId;
    u32 nMask;
    u32 nEvent;
} TouchShortcutItemInfo_t;

/**
 * Application structure
 */
typedef struct MMI_TOUCHSHORTCUTSRV_TAG
{
    DECLARE_FUNCTBL(ITOUCHSHORTCUTSRV);   // function table pointer
    u32 refCnt;     // reference count
    /* Add custom fields below */
    ITouchSrv *pITouchSrv;
    MAE_Notifier_t *pNotifier;
    TouchShortcutID_e eTouchId;
    boolean bTerminated;
    u16 nShortcutMask;
} MMI_TOUCHSHORTCUTSRV;

#define TOUCHSHORTCUT_SETBIT(queue, mask) {\
                                          queue |= mask; \
                                      }

#define TOUCHSHORTCUT_REMOVEBIT(queue, mask) {\
                                             if(queue & mask) \
                                             { \
                                                 queue &= ~mask; \
                                             } \
                                         }

#endif /* __MMI_TOUCHSHORTCUTSRV_PRIV_H__ */
