/**
* @file mmi_objprocessingsrv_priv.h
*
* State Machine Service - OBJPROCESSINGSRV
* Generated by XFSM v1.0, CodeVer=v0.24
*
* Class Id: CLSID_OBJPROCESSINGSRV
*
*
* @version $Id$
*/
#ifndef __MMI_OBJPROCESSINGSRV_PRIV_H__
#define __MMI_OBJPROCESSINGSRV_PRIV_H__

#include "mmi_mae_common_def.h"
#include "mmi_mae_sm_defs.h"
#include "mmi_objprocessingsrv.h"
#include "mmi_objprocessingsrv_sm.h"
#include "mmi_mae_forward.h"
#include "mmi_mae_imagemaker_forward.h"
#include "mmi_objprocessingsrv_custom.h"
/*---------------------------- data type definition ---------------------*/
typedef struct _OPSrvThumbData
{
    IIMAGE *pCurrImg;
    IIMAGEMAKER *pImgMkr;
    boolean bWaitDecoding;
    MAE_WChar *pCacheFullpath;
}OPSrvThumbData_t;

typedef union _OPSrvOPInfo
{
    OPSrvThumbData_t tThumb;
}OPSrvOPInfo_u;
/*---------------------------- const definition ---------------------*/
#define OPSRV_THUMB_NAMINGCNTID_FORMAT  L"%s%d.%s"
/**
 * Application structure
 */
typedef struct MMI_OBJPROCESSINGSRV_TAG
{
    DECLARE_FUNCTBL(IOBJPROCESSINGSRV);   // function table pointer
    u32 refCnt;     // reference count
    SM_Mao_t app;       // StateMachine Application data
    SM_ModeId_t _lastActiveMode[cOBJPROCESSINGSRV_ModeNumbers]; // Last child, current active child
    SM_ModeId_t _currentMode[1];
    /* Add custom fields below */
    IHANDLER *pClient;   // the client ap.
    OPSrvReqInfo_u *pReqInfo;
    OPSrv_LaunchFor_e nCurrentOP;
    OPSrv_RetCode_e nRsltCode;
    OPSrvOPInfo_u *pProcessingInfo;
    OPSrv_StatusCode_e nSrvStatus;
} MMI_OBJPROCESSINGSRV;

// function declare
/*------------------------------------------------------------------------*/
/*  - OPSrv_ReleaseReqInfoIF
    desc:
        release the request information in OPSrv
    argu:
        ppReqInfo: the pointer of request info address
        pOwner: the caller
        nLaunchType: the type which OPSrv is running
*/
static void OPSrv_ReleaseReqInfoIF(OPSrvReqInfo_u **ppReqInfo, IBASE *pOwner, OPSrv_LaunchFor_e nLaunchType);
/*------------------------------------------------------------------------*/
/*  - OPSrv_PrepareRsltAndPosEvt
    desc:
        end of the processing, post an event to the caller with the result information
    argu:
        pOwner: OPSrv
        nEvtID: the result event
        nOPType: the type which OPSrv is running
        nRetCode: result code of the event, and set into the result structure (OPSrvRsltInfo_t)
        pImg: the returning thumbnail image while getting thumbnail icon (OPType: thumbnail)
        ptDecodeRect: decode size range which is requested from the caller (OPType: thumbnail)
        nCntID : the thumbnail content id (OPType: thumbnail)
        nIdx: the vector index of the decoded image (OPType: thumbnail)
        nItemCount: the total selecting items from the user (OPType: delete, copy and move)
        nSuccessCount: # of success while object processing
        pClient: the caller instance
    return:
        MAE_RET_SUCCESS: success
        MAE_RET_BAD_PARAM:  wrong nOPType
        MAE_RET_FAILED or others: failed..
*/
static MAE_Ret OPSrv_PrepareRsltAndPosEvt(IBASE *pOwner, u32                 nEvtId, OPSrv_LaunchFor_e   nOPType, OPSrv_RetCode_e     nRetCode, IIMAGE *pImg, //for get thumbnail
                                           OPSrvRect_t *ptDecodeRect, //for get thumbnail
                                          u32                 nIdx, // for get thumbnail
                                          u32                 nItemCount, //for delete, copy, move
                                          u32                 nSuccessCount, //for delete, copy, move
                                          u32                 nMPlayerSrvUsedCount, // for delete and copy.
                                          IHANDLER *pClient);

static MAE_Ret OPSrv_PrepareRsltAndPosEvt2(IBase *pOwner, u32               nEvtId, OPSrv_LaunchFor_e nOPType, OPSrv_RetCode_e   nRetCode, IIMAGE *pImg, //for get thumbnail
                                          OPSrvRect_t *ptDecodeRect, //for get thumbnail
                                          MAE_WChar *pFilename, u32                 nIdx, // for get thumbnail
                                           u32                 nItemCount, //for delete, copy, move
                                           u32                 nSuccessCount, //for delete, copy, move
                                           u32                 nMPlayerSrvUsedCount, // for delete and copy.
                                           IHANDLER *pClient);
/*------------------------------------------------------------------------*/
/*  - OPSrv_ReleaseRsltAfterPost
    desc:
        callback function while the post event is sent to the receiver, used to release the result sturcture memory
    argu:
        pOwner: ObjProcessingSrv
        nOPType: ObjProcessing launch type
        nRsltInfoPtr: the address of the result structure
*/
static void OPSrv_ReleaseRsltAfterPost(IBASE *pOwner, u32 nOPType, u32 nRsltInfoPtr);
/*------------------------------------------------------------------------*/
/*  - OPSrv_ReleaseOPInfoIF
    desc:
        release the object processing information in OPSrv
    argu:
        ppProcessingInfo: the pointer of objProcessing info address
        pOwner: the caller (OPSrv)
        nOPType: the type which OPSrv is running
*/
static void OPSrv_ReleaseOPInfoIF(OPSrvOPInfo_u **ppProcessingInfo, IBASE *pOwner, OPSrv_LaunchFor_e nOPType);

void OPSrv_ThumbImgNotify(IIMAGE *pImage, IBase *pData, ImgStatus_t nStatus);

void _OPSrv_ThumbCache_CB(IBASE *pUser, ImageMakerCBData_t *pCBData);

#endif /* __MMI_OBJPROCESSINGSRV_PRIV_H__ */
