/**
* @file mmi_fdnsrv_priv.h
*
* State Machine Service - FDNSRV
* Generated by XFSM v1.0, CodeVer=v0.24
*
* Class Id: CLSID_FDNSRV
*
*
* @version $Id: mmi_fdnsrv_priv.h 38890 2009-08-29 16:22:38Z zinc.chen $
*/
#ifndef __MMI_FDNSRV_PRIV_H__
#define __MMI_FDNSRV_PRIV_H__

#include "mmi_mae_common_def.h"
#include "mmi_mae_sm_defs.h"
#include "mmi_fdnsrv.h"
#include "mmi_fdnsrv_sm.h"
#include "mmi_log.h"
#include "mmi_mae_helper.h"
#include "mmi_req_sim.h"
#include "mmi_if_sim.h"
#include "mmi_req_phb.h"
#include "mmi_if_phb.h"
#include "mmi_phbsrv_utility.h"
#include "mmi_phbsrv_data_handle.h"
#include "mmi_common_rai_id.h"
#include "mmi_util_fs.h"
#include "mmi_simsrv.h"

#define MAE_BREAKIF(n,s)                                                    \
                            {                                               \
                            if(n != MAE_RET_SUCCESS)                    \
                                {                                           \
                                LOG_ERROR(MMI_LEVEL_PHB, s);            \
                                break;                                  \
                                }                                           \
                            }

#define MMI_FDNSRV_FILE_STATUS_INVALIDATE 0x0000
#define MMI_FDNSRV_FILE_STATUS_VALIDATE 0x0001

#define MMI_FDNSRV_SIM_NUMBER 2

/**
* Application structure
*/
typedef struct MMI_FDNSRV_TAG
{
    DECLARE_FUNCTBL(IFDNSRV); // function table pointer
    u32 refCnt;     // reference count
    SM_Mao_t app;       // StateMachine Application data
    SM_ModeId_t _lastActiveMode[cFDNSRV_ModeNumbers];   // Last child, current active child
    SM_ModeId_t _currentMode[1];
    /* Add custom fields below */
    Mmi_FDNSrvFDNStatus_t tFDNStatus_M;
    Mmi_FDNSrvFDNStatus_t tFDNStatus_S;
    IPHBSRV *pPhbSrv;
    ISIMSRV *pSimSrv;
    MAE_Notifier_t *pNotifier;

    /* Request Data */
    Mmi_FDNSrvSetFDNStatusReq_t tSetFDNStatusReq;
    Mmi_FDNSrvWriteOneFDNReq_t tWriteOneFDNReq;
#ifdef __3G_RIL_MMI__
    // for USIM extension record 
    Mmi_FDNSrvWriteOneFDNReqEx_t tWriteOneFDNReqEx;
#endif // #ifdef __3G_RIL_MMI__

    Mmi_FDNSrvDeleteOneFDNReq_t tDeleteOneFDNReq;
    Mmi_FDNSrvGetFDNNameByNumberReq_t tGetFDNNameByNumberReq;

    /* Callback function to the caller AP */
    FdnSrvCallbackData_t *pCallbackData;

    boolean bIsTerminate;
    boolean bGetPhbReady;

    //boolean               bSIMActive_M;
    //boolean               bSIMActive_S;

    boolean bFDNStorageStatusReady_M;
    boolean bFDNStorageStatusReady_S;

    boolean bGetFDNFileStatus_M;
    boolean bGetADNFileStatus_M;
    boolean bGetFDNFileStatus_S;
    boolean bGetADNFileStatus_S;

    boolean bFDNContactReady;
    boolean bBusy;
    boolean bNeedInit;

    boolean bGetSimEntryReady_M;
    boolean bGetSimEntryReady_S;

    boolean bRegPhbReady;
    boolean bRegPhbRil;

    boolean bNeedWaitFdnAdnSwapInd;

    MMI_FDNSRV_FDN_STATUS_E FDNStatusOld_M;
    MMI_FDNSRV_FDN_STATUS_E FDNStatusOld_S;

    u16 u16FDNFileStatus_M;
    u16 u16FDNFileStatus_S;

    u32 u32CheckValue;
    MMI_FDNSRV_FDN_FID_E CurFDNFID;
    MmiPhbDhFDNBackupData_t *ptFDNContacts;
    COMMON_SIM_CARD_STATUS_e iSimStatus;
    u8 u8CurReadFDN;
} MMI_FDNSRV;

#endif /* __MMI_FDNSRV_PRIV_H__ */
