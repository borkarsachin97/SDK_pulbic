/**
* @file mmi_moi_priv.h
*
* Service without using State Machine - MOI
* Generated by XFSM v1.0, CodeVer=v0.24
*
* Class Id: CLSID_MOI
* Interface Id: IID_MOI
*
* @version $Id: mmi_moi_priv.h 38890 2009-08-29 16:22:38Z zinc.chen $
*/
#ifndef __MMI_MESSAGEORGANIZATIONSRV_PRIV_H__
#define __MMI_MESSAGEORGANIZATIONSRV_PRIV_H__

#include "mmi_mae_common_def.h"
#include "mmi_messageorganizationsrv.h"
#include "mmi_mae_filemgr.h"

#define idxNull     -1
#define cntMemoLength 10
#define dateLen 6

enum
{
    cen20th = 1900
   ,cen21th = 2000
};

typedef struct MOI_DO_NOTIFY_DATA_TAG
{
    u32 NotifyMask;
    MAE_EventId NotifyEvent;
    u32 Param1;                     //param1 with the Notify Event
    u32 Param2;    //param2 with the Notify Event
    PfnEventCleanup pCleanFnc;      //The clean function for update vector model
}MOI_DoNotify_Data_t;



enum
{
    MTSMS_Normal = 0
   ,MTSMS_PORTSMS = 1
   ,MTSMS_WAPPUSH = 2,
};
typedef u8 MOI_MTMESSAGE_TYPE_e;

#ifdef  __ANTI_STEAL_REMOTE_CONTROL_MMI__
typedef struct REMOTE_CONTROL_MSG_STACK_ITEM_TAG {
    RemoteControlCmdRet_e eAction;
    SMI_MsgID_t u16MsgId;
} Remote_Control_Msg_Stack_Item_t;
#endif //__ANTI_STEAL_REMOTE_CONTROL_MMI__



/**
 * Application structure
 */
typedef struct MMI_MOI_TAG
{
    DECLARE_FUNCTBL(IMOI);    // function table pointer
    u32 refCnt;     // reference count
    /* Add custom fields below */
    //IVectorModel* pISmNumQueueModel;             /* Record the QryCbmi event message ids */
    //int nSmNumQueueLastIdx;                       /* the max array idx of SmsSend queue*/
    MAE_Notifier_t *pNotifier;     /* to notify I'm ready */
    IVectorModel *pClass0MsgStack;
#ifdef  __ANTI_STEAL_REMOTE_CONTROL_MMI__
    IVectorModel *pRemoteControlMsgStack;
    MOI_SmsInd_t *pRCSmInd;
    SMI_MsgID_t u16RCSimMsgId;
    SMI_MsgLocation_e eRCSimMsgLocation;
#endif //__ANTI_STEAL_REMOTE_CONTROL_MMI__
    //ITXI *pTXI;
    u8 bTerminateState;
} MMI_MOI;



void mmi_MOI_DoNotifyResumeCB(IBase *pObj, u32 Param);
static MAE_Ret mmi_MOI_ContextSwitchDoNotify(MMI_MOI *pThis, u32 NotifyMask, MAE_EventId NotifyEvent, u32 Param1, u32 Param2, PfnEventCleanup pCleanFnc);
static void mmi_MOI_FreeNotifyInfo(IBase *pOwner, u32 lParam, u32 dParam);
static void mmi_MOI_FreeCBDataNotifyInfo(IBase *pOwner, u32 lParam, u32 dParam);
static void mmi_MOI_ReleaseObj(MMI_MOI *pThis);
boolean mmi_MOI_CheckBlackList( MMI_MOI *pThis, MOI_SmsInd_t *pSmInd, MAE_WChar *pContent ); // add by dongnan
MAE_Ret mmi_MOI_AddNewMessage(MMI_MOI *pThis, MOI_MTMESSAGE_TYPE_e eType, MOI_SmsInd_t *pSmInd, boolean bNew, boolean bAppend, boolean bCheckExitPackage, SMI_MsgLocation_e *pMsgLoc, SMI_MsgID_t *pMsgId);
static MAE_Ret mmi_MOI_GetTimeStampBySCTS(MMI_MOI *pThis, SMI_TimeStamp_t *pTimeStamp, u8 *pSCTS);
static MAE_Ret mmi_MOI_NotifyWapPushData(MMI_MOI *pThis, u8 *pPushData, u32 nDataLen, u8 nSimModule, u8 *pFrom);
MAE_Ret MOI_Class0Msg_PushToStack(MMI_MOI *pThis, MOI_SmsInd_t *pSmsInd, u16 nReference, u8 nPartNum, u8 nMaxPartNum, u8 nHeaderLen, u8 nTPUDHeaderLen, SMI_SmEncoding_t eEncoding);

boolean MOI_IsANTFCmd( MMI_MOI *pThis, MAE_WChar *pMsgCnt );
#ifdef __FT_AUTO_TEST__
boolean MOI_IsATOTCmd( MMI_MOI *pThis, MAE_WChar *pMsgCnt );
MAE_Ret MOI_NotifyATOTCmd( MMI_MOI *pThis, MAE_WChar *pMsgCnt, u8 *pPhoneNumber, u8 nSimModule );
#endif
#ifdef __WAP_MMI_CDWAP__
boolean MOI_IsUpdateUserAgentCmd( MMI_MOI *pThis, MAE_WChar *pMsgCnt, u8 *pUserAgent, u32 nMaxUALen );
#endif /* __WAP_MMI_CDWAP__ */
#ifdef __ANTI_STEAL_REMOTE_CONTROL_MMI__
static RemoteControlCmdRet_e MOI_IsRemoteControlMsg(MMI_MOI *pThis,const MAE_WChar *pFullContent, const MOI_SmsInd_t * pSmInd, boolean bAction);
#endif
#endif /* __MMI_MESSAGEORGANIZATIONSRV_PRIV_H__ */
