/**
* @file mmi_alarmsrv.h
*
* Service without using State Machine - ALARMSRV
* Generated by XFSM v1.0, CodeVer=v0.24
*
* Class Id: CLSID_ALARMSRV
* Interface Id: IID_ALARMSRV
*
* @version $Id$
*/
#ifndef __MMI_ALARMSRV_H__
#define __MMI_ALARMSRV_H__

/*-------------------------------------------------------------------------*/

#include "mmi_mae_common_def.h"
#include "mmi_mae_applet.h"
#include "mmi_mae_class.h"

/*-------------------------------------------------------------------------*/
#include "mmi_mae_model.h"
#include "mmi_alarmapp_cfg.h"
#include "mmi_fmsch_cfg.h"
#include "mmi_azanapp_cfg.h"

#define ARARMSRV_UID_REVERT_BASIS 0x00ffffff /* For reverting the event uid. */
#define ARARMSRV_ALARM_CAUSE_REVERT_BASIS 0xff000000 /* For reverting the alarm cause. */

typedef enum ALARMSRV_NOTIFY_MASK_TAG
{
    ALARMSRV_Notify_Mask_AlarmExpireInd = 0x000001
   ,/* For alarm expire ind notify */
    ALARMSRV_Notify_Mask_AutoPowerOnAlarmExpireInd = 0x000002
   ,/* For auto power on alarm expire ind notify */
    ALARMSRV_Notify_Mask_AlarmExistInd = 0x000004
   ,/* For alarm exist ind notify */
    ALARMSRV_Notify_Mask_ExpiredAlarmCloseInd = 0x000008             /* For expired alarm close ind notify */
} ALARMSRV_NOTIFY_MASK_e;

/* The type of response value for operation on the event alert dialog or alarm alert dialog. */
typedef enum ALARMSRV_ALARMALERTREPLY_TAG
{
    ALERT_REPLY_UNDEFINED
   ,ALERT_REPLY_PRESS_OK
   ,ALERT_REPLY_PRESS_SNOOZE
   ,ALERT_REPLY_LONG_PRESS_ENDKEY
   ,ALERT_REPLY_AUTOSNOOZE
} ALARMSRV_ALARMALERTREPLY_e;

/* The status of phone state for indicating phone is power on or power off. */
typedef enum ALARMSRV_PHONESTATE_TAG
{
    PHONE_STATE_POWERON
   ,PHONE_STATE_POWEROFF
} ALARMSRV_PHONESTATE_e;

typedef enum ALARMSRV_ALARMCAUSE_TAG
{
    ALARM_CAUSE_NORMAL = 0x01000000
   ,/* Normal alarm. */
    ALARM_CAUSE_ALARMCLOCK = 0x02000000
   ,/* Alarm clock alarm. */
    ALARM_CAUSE_CALENDAR = 0x03000000
   ,/* Calendar alarm. */
    ALARM_CAUSE_TODO = 0x06000000
   ,/* To do alarm. */
    ALARM_CAUSE_EMRTC = 0x07000000
   ,/* EM mode RTC alarm. */
    ALARM_CAUSE_AZAN_ALARM = 0x30000000
   ,/* Azan Alarm*/
    ALARM_CAUSE_SOHU_UPDATE = 0x40000000
   ,/* SOHU UPDATE*/
} ALARMSRV_ALARMCAUSE_e;

typedef enum
{
    MAE_ALARM_NORMAL = 0
  , ///< Normal alarm, means that the phone is already power on and receives an alarm message
    MAE_ALARM_POWERON     ///< The phone is off, and it is turned on because of the alarm message
} MAE_ALARM_TYPE_e;

typedef struct ALARMSRV_ALARMALERTDATA_TAG
{
    u32 nUID;
    u32 nMelodyID;
    ALARMSRV_PHONESTATE_e eAlarmExpiredWhen;
    ALARMSRV_ALARMCAUSE_e eAlarmCause;
} ALARMSRV_ALARMALERTDATA_t;

/* Data structure for passing the alarm power on info from OnApp. */
typedef struct ALARMSRV_ALARMEXPIREDDATA_TAG
{
    void *pAppInst; /* Instance of OnApp. */
    u32 nUserCode; /* Include alarm cause and alarm uid. */
    ALARMSRV_PHONESTATE_e eAlarmExpiredWhen;
} ALARMSRV_ALARMEXPIREDDATA_t;

/*-------------------------------------------------------------------------*/
#define CALENDAR_ALARM_SAMETIME_MAX 10
#define ALARM_SECONDS_PER_DAY (COMMON_SECONDS_PER_MINUTE * COMMON_MINUTES_PER_HOUR * COMMON_HOURS_PER_DAY)
/**
 * External Events
 */
#define ALARMSRV_EVT_AlarmAlertReply                (CLSID_ALARMSRV << 16 | 1)
#define ALARMSRV_EVT_AlarmExpireInd             (CLSID_ALARMSRV << 16 | 2)
#define ALARMSRV_EVT_AutoPowerOnAlarmExpireInd              (CLSID_ALARMSRV << 16 | 3)
#define ALARMSRV_EVT_AlarmExistInd              (CLSID_ALARMSRV << 16 | 4)
#define ALARMSRV_EVT_ExpiredAlarmCloseInd               (CLSID_ALARMSRV << 16 | 5)


/**
 * IALARMSRV Interfaces
 */
#define INHERIT_IALARMSRV(IName) \
    INHERIT_IHandler(IName); \
    MAE_Ret     (*OpenAlarmAlert)      ( IName * , ALARMSRV_ALARMEXPIREDDATA_t* pAlarmExpiredData);  \
    MAE_Ret     (*CloseAlarmAlert)      ( IName * , u32 nUserCode, u32 nReplyValue);  \
    MAE_Ret     (*SetAlarm)     ( IName * , MAE_ClsId clsID, ALARMSRV_ALARMCAUSE_e eAlarmCause, MAE_DateTime_t* pAlarmTime, u32 nUserCode);  \
    MAE_Ret     (*CancelAlarm)      ( IName * , MAE_ClsId clsID, ALARMSRV_ALARMCAUSE_e eAlarmCause, u32 nUserCode);  \
    MAE_Ret     (*SuspendAlarm)     ( IName * );  \
    MAE_Ret     (*ResumeAlarm)      ( IName * );  \
    MAE_Ret     (*AddAlarmListener)     ( IName * , ModelListener_t* pModelListener);  \
    MAE_Ret     (*CheckAlarmExist)      ( IName * , ALARMSRV_ALARMCAUSE_e eAlarmCause);  \
    MAE_Ret     (*GetAlarmCount)        ( IName * , ALARMSRV_ALARMCAUSE_e eAlarmCause, u32 nDateTime, u16 *pCount); \
    MAE_Ret     (*RegisterNotification)     ( IName * , void* pInstance, ALARMSRV_NOTIFY_MASK_e mask);  \
    MAE_Ret     (*DeRegisterNotification)   ( IName * , void* pInstance, ALARMSRV_NOTIFY_MASK_e mask); \
    MAE_Ret (*GetMelodyContentIDByAlarmUID) ( IName * , u32* pContentID, u32 nUID);  \
    MAE_Ret (*GetMelodyURLByAlarmUID)   ( IName * , MAE_WChar** ppMelodyURL, u32 nUID);  \
    MAE_Ret     (*SetAlarmClockAlarm)       ( IName * , u32 nAlarmUID, ALARM_RECORD_t *pAlarmRecord)

DEFINE_INTERFACE(IALARMSRV);

#define IALARMSRV_QueryInterface(pICntlr, id, pp, po)           GET_FUNCTBL((pICntlr), IALARMSRV)->QueryInterface(pICntlr, id, pp, po)
#define IALARMSRV_HandleEvent(pICntlr, e, p1, p2)               GET_FUNCTBL((pICntlr), IALARMSRV)->HandleEvent(pICntlr, e, p1, p2)

/**
 OnApp ask AlarmSrv to launch alarm alert dialog.
 */
#define IALARMSRV_OpenAlarmAlert(pICntlr, p1)  GET_FUNCTBL((pICntlr), IALARMSRV)->OpenAlarmAlert( pICntlr, p1)
/**
 AlarmSrv to notify OnApp or AlarmApp about what action happened on the alarm alert dialog.
 */
#define IALARMSRV_CloseAlarmAlert(pICntlr, p1, p2)  GET_FUNCTBL((pICntlr), IALARMSRV)->CloseAlarmAlert( pICntlr, p1, p2)
/**
 Set alarm based on the class id and alarm cause.
 */
#define IALARMSRV_SetAlarm(pICntlr, p1, p2, p3, p4) GET_FUNCTBL((pICntlr), IALARMSRV)->SetAlarm( pICntlr, p1, p2, p3, p4)
/**
 Cancel alarm based on the class id and alarm cause.
 */
#define IALARMSRV_CancelAlarm(pICntlr, p1, p2, p3)  GET_FUNCTBL((pICntlr), IALARMSRV)->CancelAlarm( pICntlr, p1, p2, p3)
/**
 This function is to turned off Alarm temporarily. All registrations are not cleared but suspend. Used in the scenaro
like airplane mode.
 */
#define IALARMSRV_SuspendAlarm(pICntlr) GET_FUNCTBL((pICntlr), IALARMSRV)->SuspendAlarm( pICntlr)
/**
 This function is to turned on Alarm.
 */
#define IALARMSRV_ResumeAlarm(pICntlr)  GET_FUNCTBL((pICntlr), IALARMSRV)->ResumeAlarm( pICntlr)
/**
 This function is used for adding a listener to listen to the alarm alert data change.
 */
#define IALARMSRV_AddAlarmListener(pICntlr, p1) GET_FUNCTBL((pICntlr), IALARMSRV)->AddAlarmListener( pICntlr, p1)
/**
 This function is used for checking if the specific type alarm exists.
 */
#define IALARMSRV_CheckAlarmExist(pICntlr, p1)  GET_FUNCTBL((pICntlr), IALARMSRV)->CheckAlarmExist( pICntlr, p1)
/**
 This function is used for getting the count of alarm.
 @param p1 pThis
 @param p2 nDateTime, the UTC Seconds
 @param p3 pCount, the number of alarm with specified cause and time
 */
#define IALARMSRV_GetAlarmCount(pICntlr, p1, p2, p3)  GET_FUNCTBL((pICntlr), IALARMSRV)->GetAlarmCount( pICntlr, p1, p2, p3)
/**
 This function is used for registering a notify mask for alarm.
 */
#define IALARMSRV_RegisterNotification(pICntlr, p1, p2) GET_FUNCTBL((pICntlr), IALARMSRV)->RegisterNotification( pICntlr, p1, p2)
/**
 This function is used for de-registering a notify mask for alarm.
 */
#define IALARMSRV_DeRegisterNotification(pICntlr, p1, p2)   GET_FUNCTBL((pICntlr), IALARMSRV)->DeRegisterNotification( pICntlr, p1, p2)
/**
 This function is used for get melody content ID by alarm UID
 */
#define IALARMSRV_GetMelodyContentIDByAlarmUID(pICntlr, p1, p2) GET_FUNCTBL((pICntlr), IALARMSRV)->GetMelodyContentIDByAlarmUID( pICntlr, p1, p2)
/**
 @brief Get URL of specific alarm id (need to free by caller)

@param  ppMelodyURL         Allocated buffer for URL.
@param  nUID                Alarm ID.

@retVal MAE_RET_BAD_PARAM       Invalid parameters.
@retVal MAE_RET_OUT_OF_MEMORY   Out of memory.
@retVal MAE_RET_SUCCESS         Play Melody done.
 */
#define IALARMSRV_GetMelodyURLByAlarmUID(pICntlr, p1, p2)   GET_FUNCTBL((pICntlr), IALARMSRV)->GetMelodyURLByAlarmUID( pICntlr, p1, p2)
/**
This function is setting alarm for an alarm record when it was created.
*/
#define IALARMSRV_SetAlarmClockAlarm(pICntlr, p1, p2)   GET_FUNCTBL((pICntlr), IALARMSRV)->SetAlarmClockAlarm( pICntlr, p1, p2)

#ifdef __APP_MMI_SOHU_UPDATER__

MAE_Ret mmi_ALARMSRV_SetSOHUUpadatAlarm(IALARMSRV *pIALARMSRV, u32 nAlarmUID, SOHU_ENTITY_t *pAlarmRecord);

#endif

/**
This function is setup Azan alarm.
*/
MAE_Ret mmi_ALARMSRV_SetupAzanAlarm(IALARMSRV *pIALARMSRV);

/**
 * Functions
 */

void ALARMSRV_Init(void);

__SLDPM_FREE__ MAE_Ret ALARMSRV_New(MAE_ClsId id, void **ppObj);

/*-------------------------------------------------------------------------*/
void _ALARMSRV_AlarmDataFree(void *pData, IBase *pOwner);

/*-------------------------------------------------------------------------*/
#endif /* __MMI_ALARMSRV_H__ */
