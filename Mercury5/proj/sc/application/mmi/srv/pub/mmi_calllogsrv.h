/**
* @file mmi_calllogsrv.h
*
* State Machine Service - CALLLOGSRV
* Generated by XFSM v1.0, CodeVer=v0.24
*
* Class Id: CLSID_CALLLOGSRV
*
*
* @version $Id$
*/
#ifndef __MMI_CALLLOGSRV_H__
#define __MMI_CALLLOGSRV_H__

/*=============================================================*/
// Include files
/*=============================================================*/

#include "mmi_mae_common_def.h"
#include "mmi_mae_applet.h"
#include "mmi_mae_class.h"
#include "mmi_mae_datamodel.h"
#include "mmi_calllogsrv_def.h"
#include "mmi_srv_client_commondefine.h"
//#include "mmi_srv_calllog.h"

/*=============================================================*/
// Macro definition
/*=============================================================*/

/*=============================================================*/
// Data type definition
/*=============================================================*/

/*Data structures for Callback to service wrapper's callback function*/
typedef void (*SRV_CALLLOG_SrvCB)(IBase *pCaller, MAEInstId_t nInstId, MAE_EventId nEventID, void *ptCnf);

typedef struct callog_cbdata_tag
{
    IBase *pCaller; // the Srv Client From AN AP
    MAEInstId_t nInstId;
    SRV_CALLLOG_SrvCB pfnSrvCB; //the callback function defined in wrapper
} CallogSrvCallbackData_t;


/**
 * External Events
 */
#define CALLLOGSRV_EVT_ADDLOG               (CLSID_CALLLOGSRV << 16 | 1)
#define CALLLOGSRV_EVT_READLOG              (CLSID_CALLLOGSRV << 16 | 2)
#define CALLLOGSRV_EVT_DELETEONELOG             (CLSID_CALLLOGSRV << 16 | 3)
#define CALLLOGSRV_EVT_DELETEALLLOGS                (CLSID_CALLLOGSRV << 16 | 4)
#define CALLLOGSRV_EVT_RESETCALLTIMEAC              (CLSID_CALLLOGSRV << 16 | 5)
#define CALLLOGSRV_EVT_ADDCALLDURATION              (CLSID_CALLLOGSRV << 16 | 6)
#define CALLLOGSRV_EVT_DELETEALLSIMLOGS             (CLSID_CALLLOGSRV << 16 | 7)

#define CALLLOGSRV_EVT_ADDLOG_END           (CLSID_CALLLOGSRV << 16 | 8)
#define CALLLOGSRV_EVT_READLOG_END          (CLSID_CALLLOGSRV << 16 | 9)
#define CALLLOGSRV_EVT_DELETEONELOG_END         (CLSID_CALLLOGSRV << 16 | 10)
#define CALLLOGSRV_EVT_DELETEALLLOGS_END            (CLSID_CALLLOGSRV << 16 | 11)
#define CALLLOGSRV_EVT_RESETCALLTIMEAC_END          (CLSID_CALLLOGSRV << 16 | 12)
#define CALLLOGSRV_EVT_ADDCALLDURATION_END          (CLSID_CALLLOGSRV << 16 | 13)
#define CALLLOGSRV_EVT_MISSEDCALLCOUNT_IND          (CLSID_CALLLOGSRV << 16 | 14)
#define CALLLOGSRV_EVT_BLOCKEDCALLCOUNT_IND         (CLSID_CALLLOGSRV << 16 | 15)
#define CALLLOGSRV_EVT_READY_IND         (CLSID_CALLLOGSRV << 16 | 16)
#define CALLLOGSRV_EVT_LOG_CHANGED_IND         (CLSID_CALLLOGSRV << 16 | 17)

/**
 * ICALLLOGSRV Interfaces
 */
#define INHERIT_ICALLLOGSRV(IName) \
    INHERIT_IHandler(IName); \
    MAE_Ret     (*AddCallLogReq)        ( IName * , IDataModel *ptReq, IDataModel *ptCnf);  \
    MAE_Ret     (*AddCallLogAsync) ( IName *,Mmi_CallLogSrvAddLogReq_t *ptReq, CallogSrvCallbackData_t *callbackData);  \
    MAE_Ret     (*ReadSimpLog)      ( IName * , Mmi_CallLogSrvReadSimpLogReq_t *ptReq, Mmi_CallLogSrvReadSimpLogCnf_t *ptCnf);  \
    MAE_Ret     (*ReadFullLogReq)       ( IName * , IDataModel *ptReq, IDataModel *ptCnf);  \
    MAE_Ret     (*ReadFullLogAsync) ( IName *, Mmi_CallLogSrvReadFullLogReq_t *ptReq,  CallogSrvCallbackData_t *callbackData);  \
    MAE_Ret     (*DeleteOneLogReq)      ( IName * , IDataModel *ptReq, IDataModel *ptCnf);  \
    MAE_Ret     (*DeleteOneLogAsync) ( IName *, Mmi_CallLogSrvDeleteOneLogReq_t *ptReq, CallogSrvCallbackData_t *callbackData);  \
    MAE_Ret     (*DeleteAllLogsReq)     ( IName * , IDataModel *ptReq, IDataModel *ptCnf);  \
    MAE_Ret     (*DeleteAllLogsAsync)  ( IName *, Mmi_CallLogSrvDeleteAllLogsReq_t *ptReq, CallogSrvCallbackData_t *callbackData);  \
    MAE_Ret     (*DeleteFile)       ( IName * );  \
    MAE_Ret     (*GetCallTimeAC)        ( IName * , Mmi_CallLogSrvGetCallTimeACReq_t  *ptReq, Mmi_CallLogSrvGetCallTimeACCnf_t  *ptCnf);  \
    MAE_Ret     (*ResetCallTimeACReq)    ( IName * , IDataModel *ptReq, IDataModel *ptCnf);  \
    MAE_Ret     (*ResetCallTimeACAsync)  ( IName *, Mmi_CallLogSrvResetCallTimeACReq_t *ptReq, CallogSrvCallbackData_t *callbackData);  \
    MAE_Ret     (*AddCallDurationReq)       ( IName * , IDataModel *ptReq, IDataModel *ptCnf);  \
    MAE_Ret     (*AddCallDurationAsync) ( IName *, Mmi_CallLogSrvAddCallDurationReq_t *ptReq, CallogSrvCallbackData_t *callbackData);  \
    MAE_Ret     (*AddMissedCountListener)       ( IName * , ModelListener_t *pMdl);  \
    MAE_Ret     (*NotifyMissedCallCountChange)      ( IName * );  \
    MAE_Ret     (*ResetMissCallCount)       ( IName * , MMI_CALLLOG_SIM_TYPE_E iSimType);  \
    MAE_Ret     (*GetMissCallCount) ( IName * , u16 *pu16MissCount); \
    MAE_Ret     (*GetLogStatus)     ( IName * , Mmi_CallLogSrvLogStatusReq_t *ptReq, Mmi_CallLogSrvLogStatusCnf_t *ptCnf);  \
    MAE_Ret     (*GetLastDialedCallLog)     ( IName * , Mmi_CallLogSimpRecord_t *pLog);\
    MAE_Ret     (*GetPrevAddLogType)			(IName * , MMI_CALLLOG_SIM_TYPE_E *eSIM, MMI_CALLLOG_TYPE_E *eType); \
    MAE_Ret     (*RegisterNotification)     ( IName * , void* instance, u32 mask);\
    MAE_Ret     (*DeRegisterNotification)       ( IName * , void* instance, u32 mask);\
    MAE_Ret     (*AddBlockCallCountListener)       ( IName * , ModelListener_t *pMdl);  \
    MAE_Ret     (*NotifyBlockedCallCountChange)      ( IName * ); \
    MAE_Ret     (*ResetBlockCallCount)       ( IName * , MMI_CALLLOG_SIM_TYPE_E iSimType);\
    MAE_Ret     (*GetBlockCallCount) ( IName * , u16 *pu16BlockCount)
  

DEFINE_INTERFACE(ICALLLOGSRV);


#define ICALLLOGSRV_QueryInterface(pICntlr, id, pp, po)         GET_FUNCTBL((pICntlr), ICALLLOGSRV)->QueryInterface(pICntlr, id, pp, po)
#define ICALLLOGSRV_HandleEvent(pICntlr, e, p1, p2)             GET_FUNCTBL((pICntlr), ICALLLOGSRV)->HandleEvent(pICntlr, e, p1, p2)
/**
 Purpose: This external interface is provided to add a call log
Parameter:
<ptReq>: the datamodel contains Mmi_CallLogSrvAddLogReq_t. Cannot be null.
<ptCnf>: the datamodel contains Mmi_CallLogSrvAddLogCnf_t. Can be null if  you don't care the result.

 */
#define ICALLLOGSRV_AddCallLogReq(pICntlr, p1, p2)  GET_FUNCTBL((pICntlr), ICALLLOGSRV)->AddCallLogReq( pICntlr, p1, p2)

#define ICALLLOGSRV_AddCallLogAsync(pICntlr, p1, p2)  GET_FUNCTBL((pICntlr), ICALLLOGSRV)->AddCallLogAsync( pICntlr, p1, p2)

/**
 Purpose: This external interface is provided to get partial data of a call log
Parameter:
<ptReq>: Mmi_CallLogSrvReadSimpLogReq_t structure. Cannot be null.
<ptCnf>: Mmi_CallLogSrvReadSimpLogCnf_t structure contains the data you want. Cannot be null.
 */
#define ICALLLOGSRV_ReadSimpLog(pICntlr, p1, p2)    GET_FUNCTBL((pICntlr), ICALLLOGSRV)->ReadSimpLog( pICntlr, p1, p2)
/**
 Purpose: This external interface is provided to get the full data of a call log
Parameter:
<ptReq>: the datamodel contains Mmi_CallLogSrvReadFullLogReq_t. Cannot be null.
<ptCnf>: the datamodel contains Mmi_CallLogSrvReadFullLogCnf_t. Cannot be null.
 */
#define ICALLLOGSRV_ReadFullLogReq(pICntlr, p1, p2) GET_FUNCTBL((pICntlr), ICALLLOGSRV)->ReadFullLogReq( pICntlr, p1, p2)

#define ICALLLOGSRV_ReadFullLogAsync(pICntlr, p1, p2) GET_FUNCTBL((pICntlr), ICALLLOGSRV)->ReadFullLogAsync( pICntlr, p1, p2)

/**
 Purpose: This external interface is provided to delete a call log
Parameter:
<ptReq>: the datamodel contains Mmi_CallLogSrvDeleteOneLogReq_t. Cannot be null.
<ptCnf>: the datamodel contains Mmi_CallLogSrvDeleteOneLogCnf_t. Can be null if  you don't care the result.
 */
#define ICALLLOGSRV_DeleteOneLogReq(pICntlr, p1, p2)    GET_FUNCTBL((pICntlr), ICALLLOGSRV)->DeleteOneLogReq( pICntlr, p1, p2)

#define ICALLLOGSRV_DeleteOneLogAsync(pICntlr, p1, p2)    GET_FUNCTBL((pICntlr), ICALLLOGSRV)->DeleteOneLogAsync( pICntlr, p1, p2)

/**
 Purpose: This external interface is provided to delete all call logs in the same type
Parameter:
<ptReq>: the datamodel contains Mmi_CallLogSrvDeleteAllLogsReq_t. Cannot be null.
<ptCnf>: the datamodel contains Mmi_CallLogSrvDeleteAllLogsCnf_t. Can be null if  you don't care the result.
 */
#define ICALLLOGSRV_DeleteAllLogsReq(pICntlr, p1, p2)   GET_FUNCTBL((pICntlr), ICALLLOGSRV)->DeleteAllLogsReq( pICntlr, p1, p2)

#define ICALLLOGSRV_DeleteAllLogsAsync(pICntlr, p1, p2)   GET_FUNCTBL((pICntlr), ICALLLOGSRV)->DeleteAllLogsAsync( pICntlr, p1, p2)

/**
Delete the calllogs' file
*/
#define ICALLLOGSRV_DeleteFile(pICntlr) GET_FUNCTBL((pICntlr), ICALLLOGSRV)->DeleteFile( pICntlr)

/**
 Purpose: This external interface is provided to get data of time AC
Parameter:
<ptReq>: Mmi_CallLogSrvGetCallTimeACReq_t structure. Cannot be null.
<ptCnf>: Mmi_CallLogSrvGetCallTimeACCnf_t structure contains the data you want. Cannot be null.
 */
#define ICALLLOGSRV_GetCallTimeAC(pICntlr, p1, p2)  GET_FUNCTBL((pICntlr), ICALLLOGSRV)->GetCallTimeAC( pICntlr, p1, p2)
/**
 Purpose: This external interface is provided to reset the time AC
Parameter:
<ptReq>: the datamodel contains Mmi_CallLogSrvResetCallTimeACReq_t. Cannot be null.
<ptCnf>: the datamodel contains Mmi_CallLogSrvResetCallTimeACCnf_t. Can be null if  you don't care the result.
 */
#define ICALLLOGSRV_ResetCallTimeACReq(pICntlr, p1, p2) GET_FUNCTBL((pICntlr), ICALLLOGSRV)->ResetCallTimeACReq( pICntlr, p1, p2)

#define ICALLLOGSRV_ResetCallTimeACAsync(pICntlr, p1, p2) GET_FUNCTBL((pICntlr), ICALLLOGSRV)->ResetCallTimeACAsync( pICntlr, p1, p2)

/**
Purpose: This external interface is provided to update the MT/MO/last call time AC
Parameter:
<ptReq>: the datamodel contains Mmi_CallLogSrvAddCallDurationReq_t. Cannot be null.
<ptCnf>: the datamodel contains Mmi_CallLogSrvAddCallDurationCnf_t. Can be null.
*/
#define ICALLLOGSRV_AddCallDurationReq(pICntlr, p1, p2) GET_FUNCTBL((pICntlr), ICALLLOGSRV)->AddCallDurationReq( pICntlr, p1, p2)

#define ICALLLOGSRV_AddCallDurationAsync(pICntlr, p1, p2) GET_FUNCTBL((pICntlr), ICALLLOGSRV)->AddCallDurationAsync( pICntlr, p1, p2)


/**
 Purpose: This external interface is provided for other APs to add a listener to the missed call counter
Parameter:
<pMdl>: the model listener
 */
#define ICALLLOGSRV_AddMissedCountListener(pICntlr, p1) GET_FUNCTBL((pICntlr), ICALLLOGSRV)->AddMissedCountListener( pICntlr, p1)

/**
Purpose: provide for CC to notify others the missed call count is changed.
*/
#define ICALLLOGSRV_NotifyMissedCallCountChange(pICntlr)    GET_FUNCTBL((pICntlr), ICALLLOGSRV)->NotifyMissedCallCountChange( pICntlr)

/**
Reset Missing Call count
*/
#define ICALLLOGSRV_ResetMissCallCount(pICntlr, p1) GET_FUNCTBL((pICntlr), ICALLLOGSRV)->ResetMissCallCount( pICntlr, p1)

/**
Get Missing Call count
*/
#define ICALLLOGSRV_GetMissCallCount(pICntlr, p1) GET_FUNCTBL((pICntlr), ICALLLOGSRV)->GetMissCallCount( pICntlr, p1 )

/**
 Purpose: This external interface is provided to get the call logs size of any type
Parameter:
<ptReq>: Mmi_CallLogSrvLogStatusReq_t structure. Cannot be null.
<ptCnf>: Mmi_CallLogSrvLogStatusCnf_t structure contains the data you want. Cannot be null.
 */
#define ICALLLOGSRV_GetLogStatus(pICntlr, p1, p2)   GET_FUNCTBL((pICntlr), ICALLLOGSRV)->GetLogStatus( pICntlr, p1, p2)

/**
 Purpose: This external interface is provided to get the last dialed call log (sync function)
Parameter:
<pLog>: the return result. Cannot be null.

 */
#define ICALLLOGSRV_GetLastDialedCallLog(pICntlr, p1)   GET_FUNCTBL((pICntlr), ICALLLOGSRV)->GetLastDialedCallLog( pICntlr, p1)

/**
Purpose: This external interface is provided to get the previous call state (sync function)
Parameter:
<pLog>: the return result. Cannot be null.

*/
#define ICALLLOGSRV_GetPrevAddLogType(pICntlr, p1, p2)   GET_FUNCTBL((pICntlr), ICALLLOGSRV)->GetPrevAddLogType( pICntlr, p1, p2)

/**
Register notification
*/
#define ICALLLOGSRV_RegisterNotification(pICntlr, p1, p2)    GET_FUNCTBL((pICntlr), ICALLLOGSRV)->RegisterNotification( pICntlr, p1, p2)

/**
Deregister notification
*/
#define ICALLLOGSRV_DeRegisterNotification(pICntlr, p1, p2)  GET_FUNCTBL((pICntlr), ICALLLOGSRV)->DeRegisterNotification( pICntlr, p1, p2)


#if !defined(__MMI_PHB_DISABLE_BLACKLIST__) && defined(__MMI_CALLLOG_SUPPORT_BKLOG__)
/**
 Purpose: This external interface is provided for other APs to add a listener to the blocked call counter
Parameter:
<pMdl>: the model listener
 */
#define ICALLLOGSRV_AddBlockCallCountListener(pICntlr, p1) GET_FUNCTBL((pICntlr), ICALLLOGSRV)->AddBlockCallCountListener( pICntlr, p1)

/**
Purpose: provide for CC to notify others the blocked call count is changed.
*/
#define ICALLLOGSRV_NotifyBlockedCallCountChange(pICntlr)    GET_FUNCTBL((pICntlr), ICALLLOGSRV)->NotifyBlockedCallCountChange( pICntlr)

/**
Reset Blocking Call count
*/
#define ICALLLOGSRV_ResetBlockCallCount(pICntlr, p1) GET_FUNCTBL((pICntlr), ICALLLOGSRV)->ResetBlockCallCount( pICntlr, p1)

/**
Get Blocking Call count
*/
#define ICALLLOGSRV_GetBlockCallCount(pICntlr, p1) GET_FUNCTBL((pICntlr), ICALLLOGSRV)->GetBlockCallCount( pICntlr, p1 )

u16 mmi_CALLLOGSRV_GetBlockCallCountBySim(ICALLLOGSRV *pThis, u8 u8DualSim);

#endif //#if !defined(__MMI_PHB_DISABLE_BLACKLIST__) && defined(__MMI_CALLLOG_SUPPORT_BKLOG__)

/*=============================================================*/
// Global function definition
/*=============================================================*/

void CALLLOGSRV_Init(void);

__SLDPM_FREE__ MAE_Ret CALLLOGSRV_New(MAE_ClsId id, void **ppObj);

/**mmi_CALLLOGSRV_FuzzySearchByNumber
* @brief: Fuzzy search calllog data by number
* @param[in]  pICALLLOGSRV      Pointer to the pICALLLOGSRV interface
* @param[out] pIVectorMdl       Pointer to the search result by call log
* @param[out] pu8Number         Pointer to the search number
* @return     MAE_RET_SUCCESS     if successful
*             MAE_RET_NOT_SUPPORTED if not support fot this compiler option
*/
MAE_Ret mmi_CALLLOGSRV_FuzzySearchByNumber(ICALLLOGSRV *pICALLLOGSRV, VectorClass_t *pVectorClass, u8 *pu8Number);

// check if calllog ready
boolean mmi_CALLLOGSRV_IsReady(ICALLLOGSRV *pICALLLOGSRV);

MAE_Ret mmi_CALLLOGSRV_ResetLogCounter(ICALLLOGSRV *pICALLLOGSRV, MMI_CALLLOG_TYPE_E u8LogType, MMI_CALLLOG_SIM_TYPE_E u8SimType);

__SLDPM_FREE__ u16 mmi_CALLLOGSRV_GetMissCallCountBySim(ICALLLOGSRV *pThis, u8 u8DualSim);
u16 mmi_CALLLOGSRV_GetLogSortingIdxByNum(ICALLLOGSRV *pICALLLOGSRV, u8 *pu8Num, u8 u8LogType, u8 *pu8IMSI, CallLogCallType_e eCallLogCallType,
														u8 u8ListType, MMI_CALLLOG_SIM_TYPE_E u8DisplaySimType);
MAE_Ret mmi_CALLLOGSRV_AddCallLogTimeDuration(ICALLLOGSRV *pICALLLOGSRV, Mmi_CallLogSrvAddLogReq_t *ptReq);

#endif /* __MMI_CALLLOGSRV_H__ */
