/**
* @file mmi_evtcentersrv.h
*
* Service without using State Machine - EVTCENTERSRV
* Generated by XFSM v1.0, CodeVer=v0.24
*
* Class Id: CLSID_EVTCENTERSRV
* Interface Id: IID_EVTCENTERSRV
*
* @version $Id$
*/
#ifndef __MMI_EVTCENTERSRV_H__
#define __MMI_EVTCENTERSRV_H__

#include "mmi_mae_common_def.h"
#include "mmi_mae_applet.h"
#include "mmi_mae_class.h"
#include "mmi_common_sms.h"
#include "mmi_mae_datamodel.h"
#include "mmi_mae_vectormodel.h"
#include "mmi_mae_arraymodel.h"
#include "mmi_clstbl.h"
#include "mmi_base_util.h"

#define EVTCENTER_DIALOG_AUTO_CLOSE_TIMER (2000)
#define EVTCENTER_DIALOG_ALWAYS_SHOW_TIMER (0) /*means always stays on screen unless user press any key*/
#define EVTCENTER_DIALOG_DIALOG_MUST_SHOW_GENERAL_TIMER 3000
#define EVTCENTER_DIALOG_ALARM_TIMER 50000 //Set an auto snooze to 1 minute for alarm alert dialog.

#define EVTCENTER_DIALOG_BATT_NORMAL_TIMER EVTCENTER_DIALOG_AUTO_CLOSE_TIMER
#define EVTCENTER_DIALOG_ACCESSORY_TIMER EVTCENTER_DIALOG_AUTO_CLOSE_TIMER
#define EVTCENTER_DIALOG_GENERAL_TIMER EVTCENTER_DIALOG_AUTO_CLOSE_TIMER

#define EVTCENTER_DIALOG_SMS_TIMER EVTCENTER_DIALOG_ALWAYS_SHOW_TIMER
#define EVTCENTER_DIALOG_MISSEDCALL_TIMER EVTCENTER_DIALOG_ALWAYS_SHOW_TIMER
#define EVTCENTER_DIALOG_SYNC_AUTO_TIME_ZONE_TIMER EVTCENTER_DIALOG_ALWAYS_SHOW_TIMER
#define EVTCENTER_DIALOG_SYNC_SIM_PHONEBOOK_TIMER EVTCENTER_DIALOG_ALWAYS_SHOW_TIMER
#define EVTCENTER_DIALOG_PHONE_FULL_TIMER EVTCENTER_DIALOG_ALWAYS_SHOW_TIMER

#define EVTCENTER_DIALOG_SMS_STATUS_REPORT_TIMER EVTCENTER_DIALOG_DIALOG_MUST_SHOW_GENERAL_TIMER //larger than 2000 to prevent closed by dialog app when dialog app is suspend.
#define EVTCENTER_DIALOG_MSG_BG_SENDING_TIMER EVTCENTER_DIALOG_DIALOG_MUST_SHOW_GENERAL_TIMER   //larger than 2000 to prevent closed by dialog app when dialog app is suspend.
#define EVTCENTER_DIALOG_MSG_BG_RECEIVING_TIMER EVTCENTER_DIALOG_DIALOG_MUST_SHOW_GENERAL_TIMER //larger than 2000 to prevent closed by dialog app when dialog app is suspend.

#define EVTCENTER_DIALOG_PERIODIC_ALERT_TIMER 90000 /* For unread SMS message, play an alert tone every 3 minute to warn user*/
#define EVTCENTER_DIALOG_SHORT_VIBRATION_TIMER 2500

#define EVTCENTER_REPEAT_RING_TIMEOUT EVTCENTER_DIALOG_ALARM_TIMER
#define EVTCENTER_DEFAULT_RING_TIMEOUT 0 //Default Time Out
#define EVTCENTER_ONCE_RING_TIMEOUT   15000 //15 secs
#define EVTCENTER_AZAN_RING_TIMEOUT  160000 //160 secs, it need sync to azan sound

/* Add for New Feature #437 */
#define EVTCENTER_DIALOG_BTSTATUS_TIMER                 EVTCENTER_DIALOG_ALWAYS_SHOW_TIMER

enum
{
    EVTCENTER_LOG_TYPE_ALL = 0
   ,EVTCENTER_LOG_TYPE_ALARM
   ,EVTCENTER_LOG_TYPE_BATT
   ,EVTCENTER_LOG_TYPE_SIM
   ,EVTCENTER_LOG_TYPE_SMS
   ,EVTCENTER_LOG_TYPE_MMS
   ,EVTCENTER_LOG_TYPE_CB
   ,EVTCENTER_LOG_TYPE_OTHER
   ,EVTCENTER_LOG_TYPE_ALL_EXCEPT_MSG //except SMS and MMS
};
typedef u8 EvtCenter_Log_Type_e;

typedef enum
{
    EVTCENTER_DIALOG_ALERT_ONCE
   ,EVTCENTER_DIALOG_ALERT_CONTINEOUS
   ,EVTCENTER_DIALOG_ALERT_PERIODIC
} EvtCenter_Alert_Mode_e;

typedef enum
{
    EVTCENTER_DIALOG_TYPE_BATT_NORMAL = 1
   ,EVTCENTER_DIALOG_TYPE_BATT_URGENT
   ,EVTCENTER_DIALOG_TYPE_SMS
   ,EVTCENTER_DIALOG_TYPE_ACCESSORY
,    //no ring tone.
    EVTCENTER_DIALOG_TYPE_MISSEDCALL
   ,EVTCENTER_DIALOG_TYPE_CALENDAR
   ,EVTCENTER_DIALOG_TYPE_ALARM
   ,EVTCENTER_DIALOG_TYPE_TODO
   ,EVTCENTER_DIALOG_TYPE_MM
   ,EVTCENTER_DIALOG_TYPE_GENERAL
 ,  //no ring tone.
    EVTCENTER_DIALOG_TYPE_SMS_STATUS_REPORT
   ,EVTCENTER_DIALOG_TYPE_PHONEBOOK
   ,EVTCENTER_DIALOG_TYPE_BT
   ,EVTCENTER_DIALOG_TYPE_CB
   ,EVTCENTER_DIALOG_TYPE_MMS
#ifdef __MMS_READ_REPORT__
   ,EVTCENTER_DIALOG_TYPE_MMS_READ_REPORT
#endif
#ifdef __SXMENGINE__
   ,EVTCENTER_DIALOG_TYPE_VIDEO         //cn code for videochat
#endif
#ifdef __APP_MMI_ANSWERING_MACHINE__
	,EVTCENTER_DIALOG_TYPE_VOICEBOX
#endif
    ,EVTCENTER_DIALOG_TYPE_COUNTDOWNTIMER
    ,EVTCENTER_DIALOG_TYPE_SHOWTOPDIALOG //currently only show auto power-on dialg
    ,EVTCENTER_DIALOG_TYPE_SHOWDIALOG
    ,EVTCENTER_DIALOG_TYPE_AZAN

    /* Add for New Feature #437 */
    ,EVTCENTER_DIALOG_TYPE_BT_STATUS
#ifdef __SIM_NO_RSP_HANDLING__
    ,EVTCENTER_DIALOG_TYPE_SIM_NORSP
    ,EVTCENTER_DIALOG_TYPE_SIM_NORSP_WAIT
    ,EVTCENTER_DIALOG_TYPE_SIM2_NORSP
    ,EVTCENTER_DIALOG_TYPE_SIM2_NORSP_WAIT
#endif //__SIM_NO_RSP_HANDLING__
} EvtCenter_Dialog_Type_e;

#ifdef __SMS_MMI_SIM_MESSAGE_BOX_SUPPORT__
typedef struct _EVTCenterNewMsgNum_t
{
	u16 MasterSimMsgNum;
	u16 SlaveSimMsgNum;
	u16 MMSMsgNum;
}EVTCenterNewMsgNum_t;
#endif

typedef struct
{
    u32 nTextID;
    u32 nDialogID;
    u32 nTimeOutMS;
    MAE_ClsId nClsID;
}EVTCENETERSRV_DialogData;

typedef struct _EVTCENTERSRV_DialogParamData_t
{
    MAE_EventId eventID;
    EVTCENETERSRV_DialogData *ptDialogData;
    u32 nParam2;    
}EVTCENTERSRV_DialogParamData_t;

typedef struct _EVTCenterStatus_t
{
    u16 nMissedCall;
    u16 nSMS;
    u16 nCB;
    u16 nMMS;
    u16 nVoiceMail;
    u16 nAlarm;
    u16 nBatt;
    u16 nOther;
	u16 u16MissedCall_M;
	u16 u16MissedCall_S;
#ifdef __SMS_MMI_SIM_MESSAGE_BOX_SUPPORT__
	EVTCenterNewMsgNum_t tNewMessageNum;
#endif
#ifdef __MMI_STATUSBAR_SUPPORT_UNREAD_MESSAGE_BY_IMSI__
	u16 nMMS_Master;
	u16 nMMS_Slave;
#endif
}EVTCenterStatus_t;

typedef struct _EVTCntrLogRecord_t
{
    u32 LID;
    u32 LogTime;
    u32 LogContentID; //Could be Text label ID or Alarm/Calendar Event ID depend on Type
    MAE_WChar *pLogText;
    EvtCenter_Log_Type_e LogType;
}EVTCntrLogRecord_t;

enum
{
    EvtCenter_Notify_Mask_NewMessageNum = (1 << 0)
   ,EvtCenter_Notify_Mask_MissedCallNum = (1 << 1)
   ,EvtCenter_Notify_Mask_NewAlarmId = (1 << 2)
   ,EvtCenter_Notify_Mask_StartDialog = (1 << 3)
   ,EvtCenter_Notify_Mask_EventHandleType = (1 << 4)
   ,EvtCenter_Notify_Mask_All = 0xFF
};
typedef u8 EvtCenter_Notify_Mask_e;
typedef enum
{
    EVTCenter_Alert_For_Normal = 0
   ,EVTCenter_Alert_For_AliveWidget
}EVTCenter_Alert_For_e;


enum
{
    EvtCenter_Message_Type_ALL = 0
,         //SMS + MMS
    EvtCenter_Message_Type_SMS
,             //SMS saved in Phone and Both SIM card
    EvtCenter_Message_Type_SMS_SIM1Inbox
,   //SMS saved in Master SIM
    EvtCenter_Message_Type_SMS_SIM2Inbox
,   //SMS saved in Slave SIM
    EvtCenter_Message_Type_MMS
   ,EvtCenter_Message_Type_WAP
   ,EvtCenter_Message_Type_Email
   ,EvtCenter_Message_Type_CB
};
typedef u8 EvtCenter_Message_Type_e;

enum
{
    EvtCenter_DialogAction_None = 0
   ,EvtCenter_DialogAction_CleanDialog
   ,EvtCenter_DialogAction_UpdateOneDialog
   ,EvtCenter_DialogAction_DeleteOneDialog
   ,EvtCenter_DialogAction_DeleteTopDialog
};
typedef u32 EvtCenter_DialogAction_e;

enum
{
    EvtCenter_Event_Handle_Normal = 0
   ,EvtCenter_Event_Handle_NoFlushNoView
   ,EvtCenter_Event_Handle_AutoMissedAndSnooze
};
typedef u8 EvtCenter_Event_Handle_Type_e;

typedef enum
{
    ConnProfile_MMS = 0
   ,ConnProfile_WAP
   ,ConnProfile_JAVA
   ,ConnProfile_LBS
#ifdef __EMAIL_MMI__
   ,ConnProfile_EMAIL
#endif // __EMAIL_MMI__
#ifdef __NCCQQ_MMI__
   ,ConnProfile_QQ
#endif // __NCCQQ_MMI__
#ifdef __STREAMING_MODULE__
   ,ConnProfile_STREAMING
#endif // __STREAMING_MODULE__
#ifdef __WLAN_MMI__
   ,ConnProfile_OTHER
#endif
#ifdef __APP_MMI_NTP__
   ,ConnProfile_NTP
#endif
}ConnProfile_Type_e;

enum
{
    EvtCenter_Keyguard_Active = 0
   ,EvtCenter_Keyguard_Suspend
   ,EvtCenter_Keyguard_Close
   ,EvtCenter_Keyguard_Dialog_AutoTimeOut,
};
typedef u8 EvtCenter_Keyguard_Evt_e;

/**
* @brief   The free data function prototype for param argument of log data
*
* @param   pData(void*)     A pointer of data to be freed.
* @param   pOwner(IBase*)   A pointer of IBase object which is the owner of freed data.
*/
typedef void (*LOGDATAFREE_FUNC_PTR) (void *pData, IBase *pOwner);

#define EVTCENTER_BASE_INDEX           0
#define EVTCENTER_EXTERNAL_INDEX   20
typedef enum
{
    //Status Data Model Event Index
    EVTCENTER_MODEL_EVT_MISSEDCALL = (CLSID_EVTCENTERSRV << 16 | (EVTCENTER_BASE_INDEX + 1))
   ,EVTCENTER_MODEL_EVT_SMS = (CLSID_EVTCENTERSRV << 16 | (EVTCENTER_BASE_INDEX + 2))
   ,EVTCENTER_MODEL_EVT_CB = (CLSID_EVTCENTERSRV << 16 | (EVTCENTER_BASE_INDEX + 3))
   ,EVTCENTER_MODEL_EVT_MMS = (CLSID_EVTCENTERSRV << 16 | (EVTCENTER_BASE_INDEX + 4))
   ,EVTCENTER_MODEL_EVT_VOICEMAIL = (CLSID_EVTCENTERSRV << 16 | (EVTCENTER_BASE_INDEX + 5))
   ,EVTCENTER_MODEL_EVT_ALARM = (CLSID_EVTCENTERSRV << 16 | (EVTCENTER_BASE_INDEX + 6))
   ,EVTCENTER_MODEL_EVT_BATT = (CLSID_EVTCENTERSRV << 16 | (EVTCENTER_BASE_INDEX + 7))
   ,EVTCENTER_MODEL_EVT_OTHER = (CLSID_EVTCENTERSRV << 16 | (EVTCENTER_BASE_INDEX + 8))
   ,EVTCENTER_MODEL_EVT_ALL = (CLSID_EVTCENTERSRV << 16 | (EVTCENTER_BASE_INDEX + 9))
   ,EVTCENTER_MODEL_EVT_VOICEBOX = (CLSID_EVTCENTERSRV << 16 | (EVTCENTER_BASE_INDEX + 10))
   ,EVTCENTER_MODEL_EVT_SHOWDIALOG = (CLSID_EVTCENTERSRV << 16 |(EVTCENTER_BASE_INDEX +  11))
   ,EVTCENTER_MODEL_EVT_DIALOGKEYPRESS = (CLSID_EVTCENTERSRV << 16 |(EVTCENTER_BASE_INDEX +  12))
} EvtCenter_Model_Index_e;
/**
 * External Events
 */
#define EVTCENTERSRV_EVT_NewMessageNum                       (CLSID_EVTCENTERSRV << 16 | (EVTCENTER_EXTERNAL_INDEX + 1))
#define EVTCENTERSRV_EVT_MissedCallNum                       (CLSID_EVTCENTERSRV << 16 | (EVTCENTER_EXTERNAL_INDEX + 2))
#define EVTCENTERSRV_EVT_NewAlarmId                            (CLSID_EVTCENTERSRV << 16 | (EVTCENTER_EXTERNAL_INDEX + 3))
#define EVTCENTERSRV_EVT_ProcessDialogQueue              (CLSID_EVTCENTERSRV << 16 | (EVTCENTER_EXTERNAL_INDEX + 4))
#define EVTCENTERSRV_EVT_StartDialogNotify                (CLSID_EVTCENTERSRV << 16 |(EVTCENTER_EXTERNAL_INDEX + 5))
#define EVTCENTERSRV_EVT_DialogModelListener            (CLSID_EVTCENTERSRV << 16 | (EVTCENTER_EXTERNAL_INDEX + 6))
#define EVTCENTERSRV_EVT_BattModelListener                (CLSID_EVTCENTERSRV << 16 | (EVTCENTER_EXTERNAL_INDEX + 7))
#define EVTCENTERSRV_EVT_AccessaryModelListener       (CLSID_EVTCENTERSRV << 16 | (EVTCENTER_EXTERNAL_INDEX + 8))
#define EVTCENTERSRV_EVT_AlarmModelListener              (CLSID_EVTCENTERSRV << 16 | (EVTCENTER_EXTERNAL_INDEX + 9))
#define EVTCENTERSRV_EVT_CallLogModelListener           (CLSID_EVTCENTERSRV << 16 | (EVTCENTER_EXTERNAL_INDEX + 10))
#define EVTCENTERSRV_EVT_EventHandleTypeNotify         (CLSID_EVTCENTERSRV << 16 | (EVTCENTER_EXTERNAL_INDEX + 11))
#define EVTCENTERSRV_EVT_CONTEXT_SWITCH_DO_NOTIFY    (CLSID_EVTCENTERSRV << 16 | (EVTCENTER_EXTERNAL_INDEX + 12))
#define EVTCENTERSRV_EVT_ToShowDialog                         (CLSID_EVTCENTERSRV << 16 | (EVTCENTER_EXTERNAL_INDEX + 13))

/**
 * IEVTCENTERSRV Interfaces
 */
#define INHERIT_IEVTCENTERSRV(IName) \
    INHERIT_IHandler(IName); \
    MAE_Ret     (*GetStatusModel)       ( IName * , IDataModel** ppStatusModel, IBase* pOwner);  \
    u32         (*GetLastMessageID)     ( IName * , EvtCenter_Model_Index_e eType);  \
    u32         (*GetLogRecordCountbyType)      ( IName * , EvtCenter_Log_Type_e eLogType);  \
    MAE_Ret     (*GetAllLogRecordsbyType)       ( IName * , EvtCenter_Log_Type_e eLogType, ArrayClass_t* pLogArray);  \
    MAE_Ret     (*RemoveAllLogRecordsbyType)        ( IName * , EvtCenter_Log_Type_e eLogType);  \
    MAE_Ret     (*RemoveLogRecordbyID)      ( IName * , u32 LogID, EvtCenter_Log_Type_e eLogType);  \
    MAE_Ret     (*GetEvtCenterStatus)       ( IName * , EVTCenterStatus_t *pEvtCenterStatus);  \
    void        (*ResetMissedNumber)        ( IName * , EvtCenter_Model_Index_e eModelType);  \
    void        (*IgnoreBatteryEvent)       ( IName * );  \
    void        (*CheckBatteryEvent)        ( IName * );  \
    u32         (*GetMissedEventCount)      ( IName * );  \
    void        (*StopMelody)       ( IName * , EVTCenter_Alert_For_e eStopMelodyFor);  \
    MAE_Ret     (*RegisterNotification)     ( IName * , void* pInstance, EvtCenter_Notify_Mask_e eMask);  \
    MAE_Ret     (*DeregisterNotification)       ( IName * , void* pInstance, EvtCenter_Notify_Mask_e eMask);  \
    u32         (*GetNewMessageNum)     ( IName * , EvtCenter_Message_Type_e eMsgType);  \
    u32         (*GetMissedCallNum)     ( IName * );  \
    void        (*CleanMessageLog)      ( IName * , EvtCenter_Message_Type_e eMsgType);  \
    u32     (*GetAlarmUserCode)     ( IName * );  \
    boolean     (*IsLastMMSComplete)        ( IName * );  \
    IModel*     (*GetDialogModel)       ( IName * , void* pInstance);  \
    void        (*AutoProcessEventWithoutDialog)        ( IName * , boolean bAuto);  \
    MAE_Ret     (*GetDialogActionModel)     ( IName * , IDataModel** ppActionModel, IBase* pOwner);  \
    void        (*SetEventHandleType)       ( IName * , EvtCenter_Event_Handle_Type_e eType);  \
    EvtCenter_Event_Handle_Type_e       (*GetEventHandleType)       ( IName * );  \
    MAE_Ret     (*CloseAlarmDialog)     ( IName * , u32 nAlarmUserCode);  \
    MAE_Ret     (*GetDialogInfoByID)        ( IName * , u32 nId, EvtCenter_Dialog_Type_e* peDialogType, MAE_WChar** ppDialogString, u32* pnDialogTimer);  \
    MAE_Ret     (*ProcessKeyguardNotice)        ( IName * , u32 nMsgId, EvtCenter_Keyguard_Evt_e eDialogEvt);  \
    void        (*HomeAPReadyForEventReminder)      ( IName * );  \
    MAE_Ret     (*GetCurrentDialogInfo)     ( IName * , u32 * pnID, EvtCenter_Dialog_Type_e* peDialogType, MAE_WChar** ppDialogString, u32* pnDialogTimer);  \
    void        (*IgnoreSMSEvent)          ( IName * , boolean bIgnore); \
    MAE_Ret    (*SendEvt_CreateDialog) (IName *, u32 nTextID, u32 nDialogID, u32 nTimeOutMS, MAE_ClsId nClsID)
DEFINE_INTERFACE(IEVTCENTERSRV);


#define IEVTCENTERSRV_QueryInterface(pICntlr, id, pp, po)           GET_FUNCTBL((pICntlr), IEVTCENTERSRV)->QueryInterface(pICntlr, id, pp, po)
#define IEVTCENTERSRV_HandleEvent(pICntlr, e, p1, p2)               GET_FUNCTBL((pICntlr), IEVTCENTERSRV)->HandleEvent(pICntlr, e, p1, p2)
/**
Mmi_evtcenterapp.c Mmi_idleapp.c Mmi_mainmenuapp.c
 */
#define IEVTCENTERSRV_GetStatusModel(pICntlr, p1, p2)   GET_FUNCTBL((pICntlr), IEVTCENTERSRV)->GetStatusModel( pICntlr, p1, p2)
/**
Mmi_evtcenterapp.c Mmi_idleappgadget_util.c Mmi_srv_evtcenter.c
 */
#define IEVTCENTERSRV_GetLastMessageID(pICntlr, p1) GET_FUNCTBL((pICntlr), IEVTCENTERSRV)->GetLastMessageID( pICntlr, p1)
/**
Mmi_srv_evtcenter.c
 */
#define IEVTCENTERSRV_GetLogRecordCountbyType(pICntlr, p1)  GET_FUNCTBL((pICntlr), IEVTCENTERSRV)->GetLogRecordCountbyType( pICntlr, p1)
/**
Mmi_evtcenterapp.c Mmi_srv_evtcenter.c
 */
#define IEVTCENTERSRV_GetAllLogRecordsbyType(pICntlr, p1, p2)   GET_FUNCTBL((pICntlr), IEVTCENTERSRV)->GetAllLogRecordsbyType( pICntlr, p1, p2)
/**
Mmi_evtcenterapp.c Mmi_evtcentersrv.c Mmi_srv_evtcenter.c
 */
#define IEVTCENTERSRV_RemoveAllLogRecordsbyType(pICntlr, p1)    GET_FUNCTBL((pICntlr), IEVTCENTERSRV)->RemoveAllLogRecordsbyType( pICntlr, p1)
/**
Mmi_evtcenterapp.c Mmi_srv_evtcenter.c
 */
#define IEVTCENTERSRV_RemoveLogRecordbyID(pICntlr, p1, p2)  GET_FUNCTBL((pICntlr), IEVTCENTERSRV)->RemoveLogRecordbyID( pICntlr, p1, p2)
/**
Mmi_alivewdgsrv.c Mmi_alivewidget.c
 */
#define IEVTCENTERSRV_GetEvtCenterStatus(pICntlr, p1)   GET_FUNCTBL((pICntlr), IEVTCENTERSRV)->GetEvtCenterStatus( pICntlr, p1)
/**
Mmi_alivewidget.c Mmi_evtcenterapp.c Mmi_idleappgadget_util.c Mmi_srv_evtcenter.c
 */
#define IEVTCENTERSRV_ResetMissedNumber(pICntlr, p1)    GET_FUNCTBL((pICntlr), IEVTCENTERSRV)->ResetMissedNumber( pICntlr, p1)
/**
Mmi_offapp.c Mmi_onapp.c Mmi_srv_evtcenter.c
 */
#define IEVTCENTERSRV_IgnoreBatteryEvent(pICntlr)   GET_FUNCTBL((pICntlr), IEVTCENTERSRV)->IgnoreBatteryEvent( pICntlr)
/**
Mmi_offapp.c Mmi_onapp.c Mmi_srv_evtcenter.c
 */
#define IEVTCENTERSRV_CheckBatteryEvent(pICntlr)    GET_FUNCTBL((pICntlr), IEVTCENTERSRV)->CheckBatteryEvent( pICntlr)
/**
Mmi_shortcutssrv.c Mmi_srv_evtcenter.c
 */
#define IEVTCENTERSRV_GetMissedEventCount(pICntlr)  GET_FUNCTBL((pICntlr), IEVTCENTERSRV)->GetMissedEventCount( pICntlr)
/**
 Stop current playing melody
 Mmi_alivewidget.c Mmi_btapp.c Mmi_dialogapp.c Mmi_srv_evtcenter.c
 */
#define IEVTCENTERSRV_StopMelody(pICntlr, p1)   GET_FUNCTBL((pICntlr), IEVTCENTERSRV)->StopMelody( pICntlr, p1)
/**
 Register event count notify
Mmi_dialogapp.c Mmi_keyguardapp.c Mmi_mca.c
 */
#define IEVTCENTERSRV_RegisterNotification(pICntlr, p1, p2) GET_FUNCTBL((pICntlr), IEVTCENTERSRV)->RegisterNotification( pICntlr, p1, p2)
/**
 Deregister event count notify

 */
#define IEVTCENTERSRV_DeregisterNotification(pICntlr, p1, p2)   GET_FUNCTBL((pICntlr), IEVTCENTERSRV)->DeregisterNotification( pICntlr, p1, p2)
/**
 Get new Message number
 Mmi_dialogapp.c Mmi_keyguardapp.c Mmi_mca.c
 */
#define IEVTCENTERSRV_GetNewMessageNum(pICntlr, p1) GET_FUNCTBL((pICntlr), IEVTCENTERSRV)->GetNewMessageNum( pICntlr, p1)
/**
 Get missed call number
Mmi_keyguardapp.c Mmi_srv_evtcenter.c
 */
#define IEVTCENTERSRV_GetMissedCallNum(pICntlr) GET_FUNCTBL((pICntlr), IEVTCENTERSRV)->GetMissedCallNum( pICntlr)
/**
 Clean message log
Mmi_mca.c Mmi_offapp.c Mmi_smi.c Mmi_srv_evtcenter.c
 */
#define IEVTCENTERSRV_CleanMessageLog(pICntlr, p1)  GET_FUNCTBL((pICntlr), IEVTCENTERSRV)->CleanMessageLog( pICntlr, p1)
/**
Mmi_keyguardapp.c Mmi_srv_evtcenter.c
 */
#define IEVTCENTERSRV_GetAlarmUserCode(pICntlr) GET_FUNCTBL((pICntlr), IEVTCENTERSRV)->GetAlarmUserCode( pICntlr)
/**
 Check if the last MMS complete or not
Mmi_evtcenterapp.c Mmi_idleappgadget_util.c Mmi_srv_evtcenter.c
 */
#define IEVTCENTERSRV_IsLastMMSComplete(pICntlr)    GET_FUNCTBL((pICntlr), IEVTCENTERSRV)->IsLastMMSComplete( pICntlr)
/**
 Get dialog model
No one used
 */
#define IEVTCENTERSRV_GetDialogModel(pICntlr, p1)   GET_FUNCTBL((pICntlr), IEVTCENTERSRV)->GetDialogModel( pICntlr, p1)
/**
 Set if need to auto process event without dialog like during power off handset.
No one used
 */
#define IEVTCENTERSRV_AutoProcessEventWithoutDialog(pICntlr, p1)    GET_FUNCTBL((pICntlr), IEVTCENTERSRV)->AutoProcessEventWithoutDialog( pICntlr, p1)
/**
 Get action model for dialog
Mmi_dialogapp.c Mmi_srv_evtcenter.c
 */
#define IEVTCENTERSRV_GetDialogActionModel(pICntlr, p1, p2) GET_FUNCTBL((pICntlr), IEVTCENTERSRV)->GetDialogActionModel( pICntlr, p1, p2)
/**
 Set event handle type and send notify too.
 Mmi_offapp.c Mmi_onapp.c Mmi_srv_evtcenter.c
 */
#define IEVTCENTERSRV_SetEventHandleType(pICntlr, p1)   GET_FUNCTBL((pICntlr), IEVTCENTERSRV)->SetEventHandleType( pICntlr, p1)
/**
 Get event handle type
Mmi_ccapp.c Mmi_srv_evtcenter.c
 */
#define IEVTCENTERSRV_GetEventHandleType(pICntlr)   GET_FUNCTBL((pICntlr), IEVTCENTERSRV)->GetEventHandleType( pICntlr)
/**
 This function is to close dialog that match the nAlarmuserCode.
 Mmi_alarmsrv.c Mmi_srv_evtcenter.c
 */
#define IEVTCENTERSRV_CloseAlarmDialog(pICntlr, p1) GET_FUNCTBL((pICntlr), IEVTCENTERSRV)->CloseAlarmDialog( pICntlr, p1)
/**
Get Dialog info by Dialog ID
Mmi_dialogapp.c Mmi_keyguardapp.c Mmi_srv_evtcenter.c
*/
#define IEVTCENTERSRV_GetDialogInfoByID(pICntlr, p1, p2, p3, p4)    GET_FUNCTBL((pICntlr), IEVTCENTERSRV)->GetDialogInfoByID( pICntlr, p1, p2, p3, p4)
/**
Process keyguard app notice event
Mmi_keyguardapp.c Mmi_srv_evtcenter.c
*/
#define IEVTCENTERSRV_ProcessKeyguardNotice(pICntlr, p1, p2)    GET_FUNCTBL((pICntlr), IEVTCENTERSRV)->ProcessKeyguardNotice( pICntlr, p1, p2)
/**
HomeAPReady: Home AP is ready.
The event reminder could start if home AP and other service are ready.
Mmi_onapp.c Mmi_srv_evtcenter.c
*/
#define IEVTCENTERSRV_HomeAPReadyForEventReminder(pICntlr)  GET_FUNCTBL((pICntlr), IEVTCENTERSRV)->HomeAPReadyForEventReminder( pICntlr)
/**
Get Current Dialog information. If no dialog, return MAE_RET_NOT_FOUND.
Mmi_keyguardapp.c Mmi_srv_evtcenter.c
*/
#define IEVTCENTERSRV_GetCurrentDialogInfo(pICntlr, p1, p2, p3, p4) GET_FUNCTBL((pICntlr), IEVTCENTERSRV)->GetCurrentDialogInfo( pICntlr, p1, p2, p3, p4)

/**
Ignore SMS event
mmi_vendorsrv.c
*/
#define IEVTCENTERSRV_IgnoreSMSEvent(pICntlr, p1) GET_FUNCTBL((pICntlr), IEVTCENTERSRV)->IgnoreSMSEvent( pICntlr, p1)

/**
Send event to show dialog
mmi_srv_evtcenter.c
*/
#define IEVTCENTERSRV_CreateDialog(pICntlr, p1, p2, p3, p4) GET_FUNCTBL((pICntlr), IEVTCENTERSRV)->SendEvt_CreateDialog(pICntlr, p1, p2, p3, p4)

MAE_Ret mmi_EVTCENTERSRV_AddListener(IEVTCENTERSRV *pIEVTCENTERSRV, ModelListener_t *pModelListener);
MAE_Ret mmi_EVTCENTERSRV_CancelListener(IEVTCENTERSRV *pIEVTCENTERSRV, ModelListener_t *pModelListener);

/**
 * Functions
 */
void EVTCENTERSRV_Init(void);
__SLDPM_FREE__ MAE_Ret EVTCENTERSRV_New(MAE_ClsId id, void **ppObj);

#endif /* __MMI_EVTCENTERSRV_H__ */
