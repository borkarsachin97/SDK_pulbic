/**
* @file mmi_pedometersrv.h
*
* Service without using State Machine - PEDOMETERSRV
* Generated by XFSM v1.0, CodeVer=v0.24
*
* Class Id: CLSID_PEDOMETERSRV
* Interface Id: IID_PEDOMETERSRV
*
* @version $Id$
*/
#ifndef __MMI_PEDOMETERSRV_H__
#define __MMI_PEDOMETERSRV_H__

/*-------------------------------------------------------------------------*/

#include "mmi_mae_common_def.h"
#include "mmi_mae_applet.h"
#include "mmi_mae_class.h"
#include "mmi_mae_battery.h"
#include "mmi_mae_notifier.h"
#include "mmi_mae_clock.h"

#include "mmi_cfgsrv.h"
#include "mmi_calendarapp_cfg.h"
#include "mmi_pedometersrv_cfg.h"

//MAX Data Definition.
#define MAX_PEDOMETER_AGE 120
#define MAX_PEDOMETER_HEIGHT 300    //CM
#define MAX_PEDOMETER_WEIGHT 800    //Kg
#define MAX_PEDOMETER_GOAL 65535
#define MAX_PEDOMETER_HEIGHT_IN 118  //IN
#define MAX_PEDOMETER_WEIGHT_LB 1762 //LB

typedef enum PEDOMETERSRV_NOTIFY_MASK_TAG
{
    PEDOMETERSRV_Notify_Mask_ValidateStep = 0x000001,
} PEDOMETERSRV_NOTIFY_MASK_e;

/*-------------------------------------------------------------------------*/

/**
 * External Events
 */
#define PEDOMETERSRV_EVT_BattModelListener              (CLSID_PEDOMETERSRV << 16 | 1)
#define PEDOMETERSRV_EVT_SensorModelListener                (CLSID_PEDOMETERSRV << 16 | 2)
#define PEDOMETERSRV_EVT_GoalReachNotifier              (CLSID_PEDOMETERSRV << 16 | 3)
#define PEDOMETERSRV_EVT_ResetDone              (CLSID_PEDOMETERSRV << 16 | 4)


/**
 * IPEDOMETERSRV Interfaces
 */
#define INHERIT_IPEDOMETERSRV(IName) \
    INHERIT_IHandler(IName); \
    void        (*EnablePedometer)      ( IName * , boolean bEnable);  \
    boolean     (*ResetPedometer)       ( IName * , PedometerResetType_e eResetType);  \
    boolean     (*IsPedometerEnable)        ( IName * );  \
    MAE_Ret     (*GetCurRecord)     ( IName * , PedometerStatItem_t* ptStatItem);  \
    MAE_Ret     (*GetWeekRecord)        ( IName * , PedometerStatItem_t* ptStatItems, u32* pu32AvgSteps);  \
    MAE_Ret     (*GetRecordFromNow)     ( IName * , PedometerDay_t* ptDateTime, u32* u32TotalSteps);  \
    MAE_Ret     (*GetMonthRecord)       ( IName * , u8 u8Month, u8* pu8Days, u16* pu16Year, u32* pu32AvgSteps, PedometerStatItem_t* ptStatItems);  \
    MAE_Ret     (*SetUserName)      ( IName * , MAE_WChar* pwName);  \
    MAE_Ret     (*GetUserName)      ( IName * , MAE_WChar* pwName);  \
    MAE_Ret     (*SetUserSex)       ( IName * , PedometerSexType_e eSexType);  \
    PedometerSexType_e      (*GetUserSex)       ( IName * );  \
    void        (*EnableReminder)       ( IName * , boolean bEnable);  \
    boolean     (*IsReminderEnable)     ( IName * );  \
    MAE_Ret     (*SetMeasureUnits)      ( IName * , PedometerUnitType_e eUnitsType);  \
    PedometerUnitType_e     (*GetMeasureUnits)      ( IName * );  \
    MAE_Ret     (*SetUserData)      ( IName * , PedometerDataType_e eDataType, u32 u32DataValue);  \
    MAE_Ret     (*GetUserData)      ( IName * , PedometerDataType_e eDataType, u32* pu32DataValue);  \
    MAE_Ret     (*RegisterNotification)     ( IName * , void* pCallerID, u32 u32Mask);  \
    MAE_Ret     (*DeRegisterNotification)       ( IName * , void* *pCallerID, u32 u32Mask);  \
    boolean     (*IsIllegalDate)        ( IName * )

DEFINE_INTERFACE(IPEDOMETERSRV);


#define IPEDOMETERSRV_QueryInterface(pICntlr, id, pp, po)           GET_FUNCTBL((pICntlr), IPEDOMETERSRV)->QueryInterface(pICntlr, id, pp, po)
#define IPEDOMETERSRV_HandleEvent(pICntlr, e, p1, p2)               GET_FUNCTBL((pICntlr), IPEDOMETERSRV)->HandleEvent(pICntlr, e, p1, p2)
/**
 Set Pedometer Enable or Disable
 */
#define IPEDOMETERSRV_EnablePedometer(pICntlr, p1)  GET_FUNCTBL((pICntlr), IPEDOMETERSRV)->EnablePedometer( pICntlr, p1)
/**
 Reset recording data by diff type.
 */
#define IPEDOMETERSRV_ResetPedometer(pICntlr, p1)   GET_FUNCTBL((pICntlr), IPEDOMETERSRV)->ResetPedometer( pICntlr, p1)
/**
 Check is pedometer service enable
 */
#define IPEDOMETERSRV_IsPedometerEnable(pICntlr)    GET_FUNCTBL((pICntlr), IPEDOMETERSRV)->IsPedometerEnable( pICntlr)
/**
 Get steps and Cals of today
 */
#define IPEDOMETERSRV_GetCurRecord(pICntlr, p1) GET_FUNCTBL((pICntlr), IPEDOMETERSRV)->GetCurRecord( pICntlr, p1)
/**
 Get steps, Cals and average steps of this week
Output: ptDateTime, Cals, steps of this week.
Output: pu32AvgSteps, Average steps of this week.
 */
#define IPEDOMETERSRV_GetWeekRecord(pICntlr, p1, p2)    GET_FUNCTBL((pICntlr), IPEDOMETERSRV)->GetWeekRecord( pICntlr, p1, p2)
/**
 Get statistical start day, total steps from now
Output: ptDateTime, Start day of statisitc.
Output: u32TotalSteps, Total steps from now.
 */
#define IPEDOMETERSRV_GetRecordFromNow(pICntlr, p1, p2) GET_FUNCTBL((pICntlr), IPEDOMETERSRV)->GetRecordFromNow( pICntlr, p1, p2)
/**
 Get record of a month;
Input: u8Month, Record of month you need.
Output: pu8Days=> get days of this month in this year.
Output: pu16Year => get year info.
Output: pu32AvgSteps, average steps of month.
Output: ptStatItems, Array for getting data of days in month .
Example: Need records of January, array of ptStatItems must be 31*sizeof(PedometerStatItem_t)
 */
#define IPEDOMETERSRV_GetMonthRecord(pICntlr, p1, p2, p3, p4, p5)   GET_FUNCTBL((pICntlr), IPEDOMETERSRV)->GetMonthRecord( pICntlr, p1, p2, p3, p4, p5)
/**
 Set User Name
Input: pwName, String of usr name.
 */
#define IPEDOMETERSRV_SetUserName(pICntlr, p1)  GET_FUNCTBL((pICntlr), IPEDOMETERSRV)->SetUserName( pICntlr, p1)
/**
 Get User Name
Onput: pwName, String of usr name.
 */
#define IPEDOMETERSRV_GetUserName(pICntlr, p1)  GET_FUNCTBL((pICntlr), IPEDOMETERSRV)->GetUserName( pICntlr, p1)
/**
 Set User Sex
Input: eSexType,  user sex type.
 */
#define IPEDOMETERSRV_SetUserSex(pICntlr, p1)   GET_FUNCTBL((pICntlr), IPEDOMETERSRV)->SetUserSex( pICntlr, p1)
/**
 Get User Sex
Return: User sex type.
 */
#define IPEDOMETERSRV_GetUserSex(pICntlr)   GET_FUNCTBL((pICntlr), IPEDOMETERSRV)->GetUserSex( pICntlr)
/**
 Enable/Disable Pedometer Reminder
Input:bEnable, true/false setting reminder.
 */
#define IPEDOMETERSRV_EnableReminder(pICntlr, p1)   GET_FUNCTBL((pICntlr), IPEDOMETERSRV)->EnableReminder( pICntlr, p1)
/**
 Is Pedometer Reminder Enabled
Return: true/false.
 */
#define IPEDOMETERSRV_IsReminderEnable(pICntlr) GET_FUNCTBL((pICntlr), IPEDOMETERSRV)->IsReminderEnable( pICntlr)
/**
 Set weight and height measure unit
Input: eUnitsType, measure unit.
 */
#define IPEDOMETERSRV_SetMeasureUnits(pICntlr, p1)  GET_FUNCTBL((pICntlr), IPEDOMETERSRV)->SetMeasureUnits( pICntlr, p1)
/**
 Get Measure Units
Return: Measure type.
 */
#define IPEDOMETERSRV_GetMeasureUnits(pICntlr)  GET_FUNCTBL((pICntlr), IPEDOMETERSRV)->GetMeasureUnits( pICntlr)
/**
 Set Pedometer Data:Age, Height, Weight, Goal Steps
Input:eDataType, enum type:Age, Height, Weight, Goal Steps.
Input:u32DataValue, Data value.
 */
#define IPEDOMETERSRV_SetUserData(pICntlr, p1, p2)  GET_FUNCTBL((pICntlr), IPEDOMETERSRV)->SetUserData( pICntlr, p1, p2)
/**
 Set Pedometer Data:Age, Height, Weight, Goal Steps
Input:eDataType, enum type:Age, Height, Weight, Goal Steps.
Output:u32DataValue, Data value.
 */
#define IPEDOMETERSRV_GetUserData(pICntlr, p1, p2)  GET_FUNCTBL((pICntlr), IPEDOMETERSRV)->GetUserData( pICntlr, p1, p2)
/**
 To register interesting notifier event.
 */
#define IPEDOMETERSRV_RegisterNotification(pICntlr, p1, p2) GET_FUNCTBL((pICntlr), IPEDOMETERSRV)->RegisterNotification( pICntlr, p1, p2)
/**
 De-register notifier.
 */
#define IPEDOMETERSRV_DeRegisterNotification(pICntlr, p1, p2)   GET_FUNCTBL((pICntlr), IPEDOMETERSRV)->DeRegisterNotification( pICntlr, p1, p2)
/**
 Return True : If Current Date before Start Date
 */
#define IPEDOMETERSRV_IsIllegalDate(pICntlr)    GET_FUNCTBL((pICntlr), IPEDOMETERSRV)->IsIllegalDate( pICntlr)



/**
 * Functions
 */

void PEDOMETERSRV_Init(void);

MAE_Ret PEDOMETERSRV_New(MAE_ClsId id, void **ppObj);

/*-------------------------------------------------------------------------*/
#endif /* __MMI_PEDOMETERSRV_H__ */
