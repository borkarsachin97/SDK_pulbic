/**
 * @file mmi_statusbarsrv.h
 *
 * State Machine Service - STATUSBARSRV
 *
 * Class Id: CLSID_STATUSBARSRV
 * Interface Id: IID_STATUSBARSRV
 *
 * $Id: mmi_statusbarsrv.h 36766 2009-07-29 09:19:46Z otto.wu $
 */
#ifndef __MMI_STATUSBARSRV_H__
#define __MMI_STATUSBARSRV_H__

#include "mmi_mae_common_def.h"
#include "mmi_mae_applet.h"
#include "mmi_mae_model.h"
#include "mmi_mae_image.h"

/**
 * External Events
 */

#define STATUSBAR_STATUS_NONE      0x00
#define STATUSBAR_RSSI_BASE        0x10
#define STATUSBAR_NTYPE_BASE       0x30
#define STATUSBAR_PROFILE_BASE     0x50
#define STATUSBAR_CC_BASE          0x60
#define STATUSBAR_SS_BASE          0x70
#define STATUSBAR_WAP_BASE         0x80
#define STATUSBAR_MSG_BASE         0x90
#define STATUSBAR_OTHER_BASE       0x100
#define STATUSBAR_BG_BASE          0x110
#define STATUSBAR_WIFI_BASE        0x120
#define STATUSBAR_BATT_BASE        0x130
#define STATUSBAR_MISSCALL_BASE    0x140
#define STATUSBAR_BT_DEVICE_BASE   0x150
#ifdef __NCCQQ_MMI__
#define STATUSBAR_QQ_BASE          0x170
#endif

#define STATUSBAR_TIME_STRING_SIZE 8 // "00:00 AM"
#define STATUSBAR_CUSTOM_ICON_NUM 1

typedef struct
{
    MAE_WChar TimeString[STATUSBAR_TIME_STRING_SIZE + 1];    //the string which should be displayed
} StatusBar_Time_t;

typedef struct
{
	u32 nIconIndex;
	IImage* pICustomImg;
} StatusBar_Custom_Icon_t;

typedef enum
{
    STATUSBAR_BATT_CHARGING = STATUSBAR_BATT_BASE
   ,STATUSBAR_BATT_LEVEL_0
   ,STATUSBAR_BATT_LEVEL_1
   ,STATUSBAR_BATT_LEVEL_2
   ,STATUSBAR_BATT_LEVEL_3
   ,STATUSBAR_BATT_LEVEL_4
   ,STATUSBAR_BATT_LEVEL_5
#ifdef __DUAL_BATT_MMI__
   ,STATUSBAR_BATT_PLUGOUT
   ,STATUSBAR_BATT_CHARGING_SLAVE
   ,STATUSBAR_BATT_LEVEL_0_SLAVE
   ,STATUSBAR_BATT_LEVEL_1_SLAVE
   ,STATUSBAR_BATT_LEVEL_2_SLAVE
   ,STATUSBAR_BATT_LEVEL_3_SLAVE
   ,STATUSBAR_BATT_LEVEL_4_SLAVE
   ,STATUSBAR_BATT_LEVEL_5_SLAVE
   ,STATUSBAR_BATT_PLUGOUT_SLAVE
#endif
   ,STATUSBAR_BATT_LEVEL_END
} StatusBar_Batt_e;

typedef struct
{
    StatusBar_Batt_e eBattStatus; // Battery status
    boolean bIsActive; // Updated battery is active or not
} StatusBar_BatteryInfo_t;

typedef enum
{
    STATUSBAR_RSSI_NO_SERVICE = STATUSBAR_RSSI_BASE
   ,STATUSBAR_RSSI_LEVEL_0
   ,STATUSBAR_RSSI_LEVEL_1
   ,STATUSBAR_RSSI_LEVEL_2
   ,STATUSBAR_RSSI_LEVEL_3
   ,STATUSBAR_RSSI_LEVEL_4
   ,STATUSBAR_RSSI_LEVEL_5
   ,
#ifdef __DUAL_SIM_MMI__
    STATUSBAR_RSSI_NO_SERVICE_SLAVE
   ,STATUSBAR_RSSI_LEVEL_0_SLAVE
   ,STATUSBAR_RSSI_LEVEL_1_SLAVE
   ,STATUSBAR_RSSI_LEVEL_2_SLAVE
   ,STATUSBAR_RSSI_LEVEL_3_SLAVE
   ,STATUSBAR_RSSI_LEVEL_4_SLAVE
   ,STATUSBAR_RSSI_LEVEL_5_SLAVE
   ,
#endif
    STATUSBAR_RSSI_AIRPLANE_MODE
   ,STATUSBAR_RSSI_LEVEL_END
} StatusBar_RSSI_e;

#ifdef __NCCQQ_MMI__
typedef enum
{
    STATUSBAR_QQSRV_STATUS_OFFLINE= STATUSBAR_QQ_BASE,
    STATUSBAR_QQSRV_STATUS_ONLINE,
    STATUSBAR_QQSRV_STATUS_NEW_MSG
} StatusBar_QQSrvStatus_e;
#endif // #ifdef __NCCQQ_MMI__

typedef enum
{
    STATUSBAR_NTYPE_NO_SERVICE = STATUSBAR_NTYPE_BASE
   ,STATUSBAR_NTYPE_HSDPA_HZ
   ,/* HSDPA Home Network */
    STATUSBAR_NTYPE_HSDPA_RM
   ,/* HSDPA Roaming Network */
    STATUSBAR_NTYPE_UMTS_HZ
   ,/* UMTS Home Network */
    STATUSBAR_NTYPE_UMTS_RM
   ,/* UMTS Roaming Network */
    STATUSBAR_NTYPE_EGPRS_HZ
   ,/* EGPRS Home Network */
    STATUSBAR_NTYPE_EGPRS_RM
   ,/* EGPRS Roaming Network */
    STATUSBAR_NTYPE_GPRS_HZ
   ,/* GPRS Home Network */
    STATUSBAR_NTYPE_GPRS_RM
   ,/* GPRS Roaming Network */
    STATUSBAR_NTYPE_GSM_HZ
   ,/* GSM Home Network */
    STATUSBAR_NTYPE_GSM_RM
   ,/* GSM Roaming Network */
#ifdef __DUAL_SIM_MMI__
    STATUSBAR_NTYPE_NO_SERVICE_SLAVE
   ,STATUSBAR_NTYPE_HSDPA_HZ_SLAVE
   ,/* HSDPA Home Network */
    STATUSBAR_NTYPE_HSDPA_RM_SLAVE
   ,/* HSDPA Roaming Network */
    STATUSBAR_NTYPE_UMTS_HZ_SLAVE
   ,/* UMTS Home Network */
    STATUSBAR_NTYPE_UMTS_RM_SLAVE
   ,/* UMTS Roaming Network */
    STATUSBAR_NTYPE_EGPRS_HZ_SLAVE
   ,/* EGPRS Home Network */
    STATUSBAR_NTYPE_EGPRS_RM_SLAVE
   ,/* EGPRS Roaming Network */
    STATUSBAR_NTYPE_GPRS_HZ_SLAVE
   ,/* GPRS Home Network */
    STATUSBAR_NTYPE_GPRS_RM_SLAVE
   ,/* GPRS Roaming Network */
    STATUSBAR_NTYPE_GSM_HZ_SLAVE
   ,/* GSM Home Network */
    STATUSBAR_NTYPE_GSM_RM_SLAVE
   ,/* GSM Roaming Network */

#endif //__DUAL_SIM_MMI__


    STATUSBAR_NTYPE_RM_Master
	/* Statusbar Shows R1 */
   ,STATUSBAR_NTYPE_RM_SLAVE
   /* Statusbar Shows R2 */
   ,STATUSBAR_NTYPE_HOME_Master_SLAVE
   ,/* SIM1 and SIM2 all in home Network */
    STATUSBAR_NTYPE_RM_Master_SLAVE
   ,/* SIM1 and SIM2 all in Roaming Network (R12)*/

    STATUSBAR_NTYPE_GSM_ONLY
   ,/* SIM1 and SIM2 all in GSM Network */
#ifdef __GPRS_MMI__
    STATUSBAR_NTYPE_GPRS_Master
   ,/* SIM1 in GPRS Network */
    STATUSBAR_NTYPE_GPRS_Master_TRAFFIC
   ,/* SIM1 in GPRS Network with traffic, For __MMI_DISPLAY_GPRS_TRAFFIC__ */
    STATUSBAR_NTYPE_GPRS_SLAVE
   ,/* SIM2 in GPRS Network */
    STATUSBAR_NTYPE_GPRS_SLAVE_TRAFFIC
   ,/* SIM2 in GPRS Network with traffic, For __MMI_DISPLAY_GPRS_TRAFFIC__ */
    STATUSBAR_NTYPE_EGPRS_Master
   ,/* SIM1 in EGPRS Network */
    STATUSBAR_NTYPE_EGPRS_Master_TRAFFIC
   ,/* SIM1 in EGPRS Network with traffic, For __MMI_DISPLAY_GPRS_TRAFFIC__ */
    STATUSBAR_NTYPE_EGPRS_SLAVE
   ,/* SIM2 in EGPRS Network */
    STATUSBAR_NTYPE_EGPRS_SLAVE_TRAFFIC
   ,/* SIM2 in EGPRS Network with traffic, For __MMI_DISPLAY_GPRS_TRAFFIC__ */
#endif //__GPRS_MMI__   
    STATUSBAR_NTYPE_UMTS_Master
   ,/* SIM1 in UMTS Network */
    STATUSBAR_NTYPE_UMTS_Master_TRAFFIC
   ,/* SIM1 in UMTS Network with traffic, For __MMI_DISPLAY_GPRS_TRAFFIC__ */
    STATUSBAR_NTYPE_UMTS_SLAVE
   ,/* SIM2 in UMTS Network */
    STATUSBAR_NTYPE_UMTS_SLAVE_TRAFFIC
   ,/* SIM2 in UMTS Network with traffic, For __MMI_DISPLAY_GPRS_TRAFFIC__ */
    STATUSBAR_NTYPE_HSDPA_Master
   ,/* SIM1 in HSDPA Network */
    STATUSBAR_NTYPE_HSDPA_Master_TRAFFIC
   ,/* SIM1 in HSDPA Network with traffic, For __MMI_DISPLAY_GPRS_TRAFFIC__ */
    STATUSBAR_NTYPE_HSDPA_SLAVE
   ,/* SIM2 in HSDPA Network */
    STATUSBAR_NTYPE_HSDPA_SLAVE_TRAFFIC
   ,/* SIM2 in HSDPA Network with traffic, For __MMI_DISPLAY_GPRS_TRAFFIC__ */
    STATUSBAR_NTYPE_END
} StatusBar_NetworkType_e;

#ifdef __MMI_STATUSBAR_SUPPORT_PROFILE_STATUS__
typedef enum
{
    STATUSBAR_PROFILE_GENERAL = STATUSBAR_PROFILE_BASE,
    STATUSBAR_PROFILE_MEETING,
    STATUSBAR_PROFILE_OUTDOOR,
    STATUSBAR_PROFILE_SILENT,
    STATUSBAR_PROFILE_CUSTOM,
    STATUSBAR_PROFILE_POWERSAVING, // __POWER_SAVING_PROFILE_MMI__
    STATUSBAR_PROFILE_HEADSET,
    STATUSBAR_PROFILE_BT_HFP,
    STATUSBAR_PROFILE_BT_A2DP, // __BLUETOOTH_A2DP_MMI__
    STATUSBAR_PROFILE_BT_HFP_A2DP, // __BLUETOOTH_A2DP_MMI__
    STATUSBAR_PROFILE_STATUS_NUM
} StatusBar_ProfileStatus_e;
#else
typedef enum
{
    STATUSBAR_PROFILE_IND_DEFAULT = STATUSBAR_PROFILE_BASE
   ,STATUSBAR_PROFILE_IND_SILENT
   ,STATUSBAR_PROFILE_IND_MEETING
   ,STATUSBAR_PROFILE_IND_OUTDOOR
   ,STATUSBAR_PROFILE_IND_USER1
   ,STATUSBAR_PROFILE_IND_USER2
   ,STATUSBAR_PROFILE_IND_HANDSFREE
   ,STATUSBAR_PROFILE_IND_HEADSET
   ,STATUSBAR_PROFILE_IND_SILENT_HEADSET,
} StatusBar_UsrProfileInd_e;
#endif // __MMI_STATUSBAR_SUPPORT_PROFILE_STATUS__


typedef enum
{
    STATUSBAR_CC_VOICECALL = STATUSBAR_CC_BASE
   ,STATUSBAR_CC_VIDEOCALL
   ,
#ifdef __DUAL_SIM_MMI__
    STATUSBAR_CC_VOICECALL_SLAVE
   ,STATUSBAR_CC_VIDEOCALL_SLAVE
   ,
#endif
    STATUSBAR_CC_END
} StatusBar_CCInCallType_e;

typedef enum
{
    STATUSBAR_SS_LINE1 = STATUSBAR_SS_BASE,/* Line 1 */
    STATUSBAR_SS_LINE1_CFU,/* Line 1 Call Forward Unconditional */
    STATUSBAR_SS_LINE2,/* Line 2 */
    STATUSBAR_SS_LINE2_CFU,/* Line 2 Call Forward Unconditional */
#ifdef __DUAL_SIM_MMI__
    STATUSBAR_SS_LINE1_SLAVE,/* Line 1 */
    STATUSBAR_SS_LINE1_CFU_SLAVE,/* Line 1 Call Forward Unconditional */
    STATUSBAR_SS_LINE2_SLAVE,/* Line 2 */
    STATUSBAR_SS_LINE2_CFU_SLAVE,/* Line 2 Call Forward Unconditional */
#endif
    STATUSBAR_SS_END
} StatusBar_SSType_e;

typedef enum
{
    STATUSBAR_WAP_TRANSMITTING = STATUSBAR_WAP_BASE
   ,STATUSBAR_WAP_TRANSMITTING2
   ,STATUSBAR_WAP_TRANSMITTING3
   ,STATUSBAR_WAP_TRANSMITTING4
   ,STATUSBAR_WAP_TRANSMITTING_END
} StatusBar_WAPStatus_e;

typedef enum
{
    //STATUSBAR_MSG_SIMFULL = STATUSBAR_MSG_BASE,
    STATUSBAR_MSG_FULL = STATUSBAR_MSG_BASE
,
    //STATUSBAR_MSG_NEWMSG,
    STATUSBAR_MSG_VOICEMAIL
   ,STATUSBAR_MSG_UNREADMSG
   ,STATUSBAR_MSG_TRANSMITTING
   ,STATUSBAR_MSG_UNREADMSG1
   ,STATUSBAR_MSG_UNREADMSG2
   ,STATUSBAR_MSG_UNREADMSGBOTH
} StatusBar_MsgStatus_e;

typedef enum
{
    STATUSBAR_OTHER_MEMCARD = STATUSBAR_OTHER_BASE
   ,STATUSBAR_OTHER_MEMCARD_CONNECT
   ,STATUSBAR_OTHER_MPLAYER
   ,STATUSBAR_OTHER_MPLAYER_PAUSE
   ,STATUSBAR_OTHER_FMRADIO
   ,STATUSBAR_OTHER_USB
   ,STATUSBAR_OTHER_BLUETOOTH
   ,
#ifdef __BLUETOOTH_OBEX_MMI__
    STATUSBAR_OTHER_BLUETOOTH_OBEX
   ,
#endif // __BLUETOOTH_OBEX_MMI__

    STATUSBAR_OTHER_HEADSET         // REMOVED
   ,STATUSBAR_OTHER_BT_HEADSET      // REMOVED
   ,STATUSBAR_OTHER_BT_HEADFREE     // REMOVED
   ,STATUSBAR_OTHER_BT_A2DP         // REMOVED
   ,STATUSBAR_OTHER_BT_HEADSET_A2DP // REMOVED
   ,STATUSBAR_OTHER_SILENT          // REMOVED
   ,STATUSBAR_OTHER_ALARM_ENABLE
#ifdef __MMI_CALLLOG_SUPPORT_BKLOG__
   ,STATUSBAR_OTHER_BLOCKCALL_BOTH
   ,STATUSBAR_OTHER_BLOCKCALL_MASTER
   ,STATUSBAR_OTHER_BLOCKCALL_SLAVE
#endif // __MMI_CALLLOG_SUPPORT_BKLOG__
   ,STATUSBAR_OTHER_VIBRATE_ENABLE // REMOVED
   ,STATUSBAR_OTHER_CUSTOM_1
   // ---- For 3rd party Image icon ----
   // [define from ven_ui_statusbar_image_t and count from 1 => Java = STATUSBAR_OTHER_CUSTOM_1+1]
   ,STATUSBAR_OTHER_CUSTOM_JAVA
   ,STATUSBAR_OTHER_CUSTOM_QQ
   ,STATUSBAR_OTHER_CUSTOM_TQQ_BLANK
   // ------------------------------
#if defined(__APP_MMI_CHECKDISK__)
   ,STATUSBAR_OTHER_CHECK_DISK
#endif // __APP_MMI_CHECKDISK__
,
    STATUSBAR_OTHER_END
} StatusBar_OtherStatus_e;

typedef enum
{
    STATUSBAR_BG_NORMAL = STATUSBAR_BG_BASE,/* Normal */
    STATUSBAR_BG_FACTORY,/* Factory mode */
    STATUSBAR_BG_M2_RESET_COLOR_1,/* M2 reset mode */
    STATUSBAR_BG_M2_RESET_COLOR_2,/* M2 reset mode */
    STATUSBAR_BG_M2_RESET_COLOR_3,/* M2 reset mode */
    STATUSBAR_BG_END
} StatusBar_BGStatus_e;

typedef enum
{
	STATUSBAR_MISSCALL_OFF = STATUSBAR_MISSCALL_BASE,
	STATUSBAR_MISSCALL_ON_MASTER, /* miss call on Master card*/
	STATUSBAR_MISSCALL_ON_SLAVE,  /* miss call on Slave card*/
	STATUSBAR_MISSCALL_ON_BOTH    /* miss call on Both card*/
} StatusBar_MissCallType_e;
#ifdef __WLAN_MMI__
typedef enum
{
    STATUSBAR_WIFI_ON = STATUSBAR_WIFI_BASE
   ,STATUSBAR_WIFI_OFF
   ,STATUSBAR_WIFI_CONNECTED
   ,STATUSBAR_WIFI_CONNECT_LIMITED
   ,
}StatusBar_WiFiType_e;
#endif

typedef enum
{
    //Status Vector Model Index
    STATUSBAR_QUEUE_BATT_INDEX = 0
#ifdef __DUAL_BATT_MMI__
    ,STATUSBAR_QUEUE_BATT_SLAVE_INDEX
#endif
   ,STATUSBAR_QUEUE_RSSI_INDEX
   ,STATUSBAR_QUEUE_NTYPE_INDEX
#ifndef __MMI_STATUSBAR_SUPPORT_PROFILE_STATUS__
   ,STATUSBAR_QUEUE_USRPROFILE_INDEX
#else
   ,STATUSBAR_QUEUE_PROFILE_MODE_INDEX
#endif // __MMI_STATUSBAR_SUPPORT_PROFILE_STATUS__
   ,STATUSBAR_QUEUE_CCSS_INDEX
   ,STATUSBAR_QUEUE_WAPMSG1_INDEX
   ,STATUSBAR_QUEUE_WAPMSG2_INDEX
   ,STATUSBAR_QUEUE_CUSTOM_ICON_INDEX
   ,STATUSBAR_QUEUE_OTHER_INDEX
   ,STATUSBAR_QUEUE_BACKGROUND_INDEX
   ,
#ifdef __DUAL_SIM_MMI__
    STATUSBAR_QUEUE_CCSS_SLAVE_INDEX
   ,STATUSBAR_QUEUE_SIM_STATUS_INDEX
   ,STATUSBAR_QUEUE_RSSI_SLAVE_INDEX
   ,STATUSBAR_QUEUE_NTYPE_SLAVE_INDEX
   ,
#endif
    //#ifdef __UI_STYLE_MMI_IFONE__
    STATUSBAR_QUEUE_ROAMING_INDEX
   ,STATUSBAR_QUEUE_GPRS_EGPRS_INDEX
   ,STATUSBAR_QUEUE_VIBRATE_INDEX // !__MMI_STATUSBAR_SUPPORT_PROFILE_STATUS__
   ,STATUSBAR_QUEUE_BT_INDEX
#ifdef __WLAN_MMI__
   ,STATUSBAR_QUEUE_WIFI_INDEX
#endif
   ,STATUSBAR_QUEUE_MEDIA_INDEX
   ,STATUSBAR_QUEUE_ALARM_INDEX
#if (defined(__MMI_STATUSBAR_SUPPORT_MISSED_CALL__)||defined(__MMI_STATUSBAR_SUPPORT_MISSED_CALL_DUAL__))
   ,STATUSBAR_QUEUE_MISSCALL_INDEX
#endif
#ifdef __MMI_CALLLOG_SUPPORT_BKLOG__
   ,STATUSBAR_QUEUE_BLOCKCALL_INDEX
#endif
#ifdef __NCCQQ_MMI__
   ,STATUSBAR_QUEUE_QQ_INDEX
#endif
   ,STATUSBAR_QUEUE_SOUND_MODE_INDEX // !__MMI_STATUSBAR_SUPPORT_PROFILE_STATUS__
   ,STATUSBAR_QUEUE_TIME_INDEX
,
    //#endif
    STATUSBAR_QUEUE_DUMMY_INDEX_END
} StatusBar_QueueIndex_e;

/**
 * ISTATUSBARSRV Interfaces
 */
#define INHERIT_ISTATUSBARSRV(IName) \
    INHERIT_IHandler(IName)

DEFINE_INTERFACE(ISTATUSBARSRV);

#define ISTATUSBARSRV_QueryInterface(pICntlr, id, pp, po)   GET_FUNCTBL((pICntlr), ISTATUSBARSRV)->QueryInterface(pICntlr, id, pp, po)
#define ISTATUSBARSRV_HandleEvent(pICntlr, e, p1, p2)       GET_FUNCTBL((pICntlr), ISTATUSBARSRV)->HandleEvent(pICntlr, e, p1, p2)
#define ISTATUSBARSRV_SetHandler(pICntlr, pHd)              GET_FUNCTBL((pICntlr), ISTATUSBARSRV)->SetHandler(pICntlr, pHd)

/**
 * Functions
 */
MAE_Ret STATUSBARSRV_New(MAE_ClsId id, void **ppObj);
void STATUSBARSRV_FileMgrTaskReq(ISTATUSBARSRV *pISTATUSBARSRV);
#endif /* __MMI_STATUSBARSRV_H__ */
