/**
* @file mmi_mmstranssrv.h
*
* Service without using State Machine - MMSTRANSSRV
* Generated by XFSM v1.0, CodeVer=v0.24
*
* Class Id: CLSID_MMSTRANSSRV
* Interface Id: IID_MMSTRANSSRV
*
* @version $Id$
*/
#ifndef __MMI_MMSTRANSACTIONSRV_H__
#define __MMI_MMSTRANSACTIONSRV_H__

#include "mmi_mae_common_def.h"
#include "mmi_mae_applet.h"
#include "mmi_mae_class.h"
#include "mmi_mae_notifier.h"
#include "mmi_common_mms.h"
#include "mmi_req_cdmms.h"
#include "mmi_if_cdmms.h"
#include "mmi_common_sms_master.h"

typedef enum
{
    MMSTRANSSRV_Notify_Mask_MmsNotifyCnf            = 0x000001,
	MMSTRANSSRV_Notify_Mask_DelItemCnf              = 0x000002,
    MMSTRANSSRV_Notify_Mask_All                     = 0xFFFFFF
} MMSTRANSSRV_Notify_Mask_e;

/**
 * External Events
 */
#define MMSTRANSSRV_EVT_BOOTUP_CNF                  (CLSID_MMSTRANSSRV << 16 | 1)
#define MMSTRANSSRV_EVT_GET_RECVLIST_CNF            (CLSID_MMSTRANSSRV << 16 | 2)
#define MMSTRANSSRV_EVT_GET_SENDER_CNF              (CLSID_MMSTRANSSRV << 16 | 3)
#define MMSTRANSSRV_EVT_GET_HEADINFO_CNF            (CLSID_MMSTRANSSRV << 16 | 4)
#define MMSTRANSSRV_EVT_GET_ITEMINFO_CNF            (CLSID_MMSTRANSSRV << 16 | 5)
#define MMSTRANSSRV_EVT_GET_SUBJECT_CNF             (CLSID_MMSTRANSSRV << 16 | 6)
#define MMSTRANSSRV_EVT_GET_STATUS_CNF              (CLSID_MMSTRANSSRV << 16 | 7)
#define MMSTRANSSRV_EVT_GET_ALL_SLIDES_CNF          (CLSID_MMSTRANSSRV << 16 | 8)
#define MMSTRANSSRV_EVT_GET_ALL_ATTACHES_CNF        (CLSID_MMSTRANSSRV << 16 | 9)
#define MMSTRANSSRV_EVT_SAVE_MMS_CNF                (CLSID_MMSTRANSSRV << 16 | 10)
#define MMSTRANSSRV_EVT_SEND_BYBUFR_CNF             (CLSID_MMSTRANSSRV << 16 | 11)
#define MMSTRANSSRV_EVT_SEND_BYBOX_CNF              (CLSID_MMSTRANSSRV << 16 | 12)
#define MMSTRANSSRV_EVT_TRANS_CANCEL_CNF            (CLSID_MMSTRANSSRV << 16 | 13)
#define MMSTRANSSRV_EVT_RECV_MAIL_CNF               (CLSID_MMSTRANSSRV << 16 | 14)
#define MMSTRANSSRV_EVT_DEL_ITEM_CNF                (CLSID_MMSTRANSSRV << 16 | 15)
#define MMSTRANSSRV_EVT_DEL_ALL_ITEMS_CNF           (CLSID_MMSTRANSSRV << 16 | 16)
#define MMSTRANSSRV_EVT_NEW_MMS_NOTIFY_CNF          (CLSID_MMSTRANSSRV << 16 | 17)
#define MMSTRANSSRV_EVT_RETRV_CDMMS_CNF             (CLSID_MMSTRANSSRV << 16 | 18)
#define MMSTRANSSRV_EVT_SEND_MMS_NOTIFY_RSP_CNF     (CLSID_MMSTRANSSRV << 16 | 19)
#define MMSTRANSSRV_EVT_SEND_MMS_READ_REPLY_CNF     (CLSID_MMSTRANSSRV << 16 | 20)
#define MMSTRANSSRV_EVT_MOVE_MMS_CNF                (CLSID_MMSTRANSSRV << 16 | 21)
#define MMSTRANSSRV_EVT_GET_MMS_RAW_ITEM_CNF        (CLSID_MMSTRANSSRV << 16 | 22)
#define MMSTRANSSRV_EVT_SAVE_MMS_RAW_ITEM_CNF       (CLSID_MMSTRANSSRV << 16 | 23)
#define MMSTRANSSRV_EVT_SAVE_MMS_SDK_CNF            (CLSID_MMSTRANSSRV << 16 | 24)
#define MMSTRANSSRV_EVT_RECV_MMS_SDK_CNF            (CLSID_MMSTRANSSRV << 16 | 25)


/**
 * IMMSTRANSSRV Interfaces
 */
#define INHERIT_IMMSTRANSSRV(IName) \
    INHERIT_IHandler(IName); \
    MAE_Ret     (*SaveMmsReq)                       ( IName * , MMI_MMS_Composer_Cntx* pMmsCnt, SMI_MsgID_t msgId, SMI_MsgLocation_e msgLoc, void* pInst);  \
    MAE_Ret     (*GetMmsReceiverListReq)            ( IName * , u16 msgId, MMI_MMS_FS_MAILBOX_e msgBox, void* pInst);  \
    MAE_Ret     (*GetMmsSenderAddrReq)              ( IName * , u16 msgId, MMI_MMS_FS_MAILBOX_e msgBox, void* pInst);  \
    MAE_Ret     (*GetMmsItemInfoReq)                ( IName * , u16 msgId, MMI_MMS_FS_MAILBOX_e msgBox, void* pInst);  \
    MAE_Ret     (*GetMmsSubjectInfoReq)             ( IName * , u16 msgId, MMI_MMS_FS_MAILBOX_e msgBox, void* pInst);  \
    MAE_Ret     (*GetMmsStatusInfoReq)              ( IName * , u16 msgId, MMI_MMS_FS_MAILBOX_e msgBox, void* pInst);  \
    MAE_Ret     (*GetMmsAllSlidesReq)               ( IName * , u16 msgId, SMI_MsgLocation_e msgLoc, void* pInst);  \
    MAE_Ret     (*SendMmsByBufReq)                  ( IName * , IModel* pMmsCnt, MMI_MMS_FS_MAILBOX_e msgBox, void* pInst);  \
    MAE_Ret     (*SendMmsByBoxReq)                  ( IName * , u16 msgId, MMI_MMS_FS_MAILBOX_e msgBox, u8 SimModule, void* pInst);  \
    MAE_Ret     (*MmsTransCancelReq)                ( IName * , void* pInst);  \
    MAE_Ret     (*RecvMmsBodyReq)                   ( IName * , u16 msgId, MMI_MMS_FS_MAILBOX_e msgBox, u8 SimModule, void* pInst);  \
    MAE_Ret     (*DelMmsByIdReq)                    ( IName * , u16 msgId, SMI_MsgLocation_e msgLoc, void* pInst);  \
    MAE_Ret     (*DelMmsByboxReq)                   ( IName * , SMI_MsgLocation_e msgLoc, void* pInst);  \
    MAE_Ret     (*MmsBootUpReq)                     ( IName * , void* pInst);  \
    MAE_Ret     (*MmsShutDown)                      ( IName * , void* pInst);  \
    MAE_Ret     (*Register_Notification)            ( IName * , void* pInst, MMSTRANSSRV_Notify_Mask_e mask);  \
    MAE_Ret     (*Deregister_Notification)          ( IName * , void* pInst, MMSTRANSSRV_Notify_Mask_e mask);  \
    MAE_Ret     (*MmsNewNote)                       ( IName * , MMI_NewMmsNote_t* pNewMmsNote);  \
    MAE_Ret     (*GetMmsAllAttachReq)               ( IName * , u16 msgId, SMI_MsgLocation_e location, void* pInst);  \
    MAE_Ret     (*DeregisterInstance)               ( IName * , void* pInst);  \
    MAE_Ret     (*RetrvCdMmsReq)                    ( IName * , SMI_MsgLocation_e msgLoc, void* pInst);  \
    MAE_Ret     (*SendMmsNotiRespReq)               ( IName * , u16 msgId, SMI_MsgLocation_e location, u8 SimModule, void* pInst);  \
    MAE_Ret     (*SendMmsReadReplyReq)              ( IName * , u16 msgId, SMI_MsgLocation_e location, u8 SimModule, void* pInst);  \
    MAE_Ret     (*MoveMmsReq)                       ( IName * , SMI_MsgID_t msgId, SMI_MsgLocation_e  eSourceLoc, SMI_MsgLocation_e  eDesLoc, void * pInst);\
	MAE_Ret		(*GetMmsRawItemReq)		            ( IName * , u16 nMsgId, SMI_MsgLocation_e eLocation, void* pInst);  \
	MAE_Ret		(*SaveMmsRawItemReq)		        ( IName * , MMI_MMS_FS_MAILBOX_e eMailBox, void* pHeadInfo, void* pItemInfo, u8* pBuffer, u32 nBufferLen, void* pInst)

DEFINE_INTERFACE(IMMSTRANSSRV);


#define IMMSTRANSSRV_QueryInterface(pICntlr, id, pp, po)            GET_FUNCTBL((pICntlr), IMMSTRANSSRV)->QueryInterface(pICntlr, id, pp, po)
#define IMMSTRANSSRV_HandleEvent(pICntlr, e, p1, p2)                GET_FUNCTBL((pICntlr), IMMSTRANSSRV)->HandleEvent(pICntlr, e, p1, p2)
/**

Request to save the editing MMI_MMS_Composer_Cntx data to a draft message.
This is an asynchronous method. So, if the return value is #MAE_RET_SUCCESS, the processed result
will be sent to the registered listener later. In order to receive the processed result, the caller
should register a listener via the method IMMSTRANSSRV_Register_Notification with mask value
#MMSTRANSSRV_Notify_Mask_MmsNotifyCnf first.

@param pMmsCnt
       The pointer to data structure MMI_MMS_Composer_Cntx.
@param msgId
       The message id for this request.
@param msgLoc
       The mailbox of specified message.
@param pInst
       The instance pointer of requestor.
@return
       Return the result of method call.
@result
       #MMSTRANSSRV_EVT_SAVE_MMS_CNF
       param1: The pointer to data structure MMI_SaveMmsCnf_t

 */
#define IMMSTRANSSRV_SaveMmsReq(pICntlr, p1, p2, p3, p4)    GET_FUNCTBL((pICntlr), IMMSTRANSSRV)->SaveMmsReq( pICntlr, p1, p2, p3, p4)
/**

Request to get the receiver list of the specified message by id.
This is an asynchronous method. So, if the return value is #MAE_RET_SUCCESS, the processed result
will be sent to the registered listener later. In order to receive the processed result, the caller
should register a listener via the method IMMSTRANSSRV_Register_Notification with mask value
#MMSTRANSSRV_Notify_Mask_MmsNotifyCnf first.

@param msgId
       The message id for this request.
@param msgBox
       The mailbox of specified message.
@param pInst
       The instance pointer of requestor.
@return
       Return the result of method call.
@result
       #MMSTRANSSRV_EVT_GET_RECVLIST_CNF
       param1: The pointer to data structure MMI_GetMmsReceiverListCnf_t

 */
#define IMMSTRANSSRV_GetMmsReceiverListReq(pICntlr, p1, p2, p3) GET_FUNCTBL((pICntlr), IMMSTRANSSRV)->GetMmsReceiverListReq( pICntlr, p1, p2, p3)
/**

Request to get the sender address of the specified message by id.
This is an asynchronous method. So, if the return value is #MAE_RET_SUCCESS, the processed result
will be sent to the registered listener later. In order to receive the processed result, the caller
should register a listener via the method IMMSTRANSSRV_Register_Notification with mask value
#MMSTRANSSRV_Notify_Mask_MmsNotifyCnf first.

@param msgId
       The message id for this request.
@param msgBox
       The mailbox of specified message.
@param pInst
       The instance pointer of requestor.
@return
       Return the result of method call.
@result
       #MMSTRANSSRV_EVT_GET_SENDER_CNF
       param1: The pointer to data structure MMI_GetMmsSenderAddrCnf_t

 */
#define IMMSTRANSSRV_GetMmsSenderAddrReq(pICntlr, p1, p2, p3)   GET_FUNCTBL((pICntlr), IMMSTRANSSRV)->GetMmsSenderAddrReq( pICntlr, p1, p2, p3)
/**

Request to get the item info of the specified message by id.
This is an asynchronous method. So, if the return value is #MAE_RET_SUCCESS, the processed result
will be sent to the registered listener later. In order to receive the processed result, the caller
should register a listener via the method IMMSTRANSSRV_Register_Notification with mask value
#MMSTRANSSRV_Notify_Mask_MmsNotifyCnf first.

@param msgId
       The message id for this request.
@param msgBox
       The mailbox of specified message.
@param pInst
       The instance pointer of requestor.
@return
       Return the result of method call.
@result
       #MMSTRANSSRV_EVT_GET_ITEMINFO_CNF
       param1: The pointer to data structure MMI_GetMmsItemInfoCnf_t

 */
#define IMMSTRANSSRV_GetMmsItemInfoReq(pICntlr, p1, p2, p3) GET_FUNCTBL((pICntlr), IMMSTRANSSRV)->GetMmsItemInfoReq( pICntlr, p1, p2, p3)
/**

Request to get the subject info of the specified message by id.
This is an asynchronous method. So, if the return value is #MAE_RET_SUCCESS, the processed result
will be sent to the registered listener later. In order to receive the processed result, the caller
should register a listener via the method IMMSTRANSSRV_Register_Notification with mask value
#MMSTRANSSRV_Notify_Mask_MmsNotifyCnf first.

@param msgId
       The message id for this request.
@param msgBox
       The mailbox of specified message.
@param pInst
       The instance pointer of requestor.
@return
       Return the result of method call.
@result
       #MMSTRANSSRV_EVT_GET_SUBJECT_CNF
       param1: The pointer to data structure MMI_GetMmsSubjectInfoCnf_t

 */
#define IMMSTRANSSRV_GetMmsSubjectInfoReq(pICntlr, p1, p2, p3)  GET_FUNCTBL((pICntlr), IMMSTRANSSRV)->GetMmsSubjectInfoReq( pICntlr, p1, p2, p3)
/**

This method is abandoned.

 */
#define IMMSTRANSSRV_GetMmsStatusInfoReq(pICntlr, p1, p2, p3)   GET_FUNCTBL((pICntlr), IMMSTRANSSRV)->GetMmsStatusInfoReq( pICntlr, p1, p2, p3)
/**

Request to get the content of all slides by a specified id. This method is pair with IMMSTRANSSRV_FreeMmsAllSlides.
IMMSTRANSSRV_FreeMmsAllSlides needs to be called to release the buffer allocated by IMMSTRANSSRV_GetMmsAllSlidesReq.
This is an asynchronous method. So, if the return value is #MAE_RET_SUCCESS, the processed result
will be sent to the registered listener later. In order to receive the processed result, the caller
should register a listener via the method IMMSTRANSSRV_Register_Notification with mask value
#MMSTRANSSRV_Notify_Mask_MmsNotifyCnf first.

@param msgId
       The message id for this request.
@param msgLoc
       The mailbox of specified message.
@param pInst
       The instance pointer of requestor.
@return
       Return the result of method call.
@result
       #MMSTRANSSRV_EVT_GET_ALL_SLIDES_CNF
       param1: A pointer to data structure MMI_GetMmsAllSlidesCnf_t

 */
#define IMMSTRANSSRV_GetMmsAllSlidesReq(pICntlr, p1, p2, p3)    GET_FUNCTBL((pICntlr), IMMSTRANSSRV)->GetMmsAllSlidesReq( pICntlr, p1, p2, p3)
/**

This method is abandoned.

 */
#define IMMSTRANSSRV_SendMmsByBufReq(pICntlr, p1, p2, p3)   GET_FUNCTBL((pICntlr), IMMSTRANSSRV)->SendMmsByBufReq( pICntlr, p1, p2, p3)
/**

<< This method SHOULD only be called by the MMS service >>

Request to send a message by a specified id.
This is an asynchronous method. So, if the return value is #MAE_RET_SUCCESS, the processed result
will be sent to the registered listener later. In order to receive the processed result, the caller
should register a listener via the method IMMSTRANSSRV_Register_Notification with mask value
#MMSTRANSSRV_Notify_Mask_MmsNotifyCnf first.

@param msgId
       The message id for this request.
@param msgBox
       The mailbox of specified message.
@param SimModule
       The SIM module id.
@param pInst
       The instance pointer of requestor.
@return
       Return the result of method call.
@result
       #MMSTRANSSRV_EVT_SEND_BYBOX_CNF
       param1: The message id
       param2: The processed result

 */
#define IMMSTRANSSRV_SendMmsByBoxReq(pICntlr, p1, p2, p3, p4)   GET_FUNCTBL((pICntlr), IMMSTRANSSRV)->SendMmsByBoxReq( pICntlr, p1, p2, p3, p4)
/**

<< This method SHOULD only be called by the MMS service >>

Request to cancel the current transmission.
This is an asynchronous method. So, if the return value is #MAE_RET_SUCCESS, the processed result
will be sent to the registered listener later. In order to receive the processed result, the caller
should register a listener via the method IMMSTRANSSRV_Register_Notification with mask value
#MMSTRANSSRV_Notify_Mask_MmsNotifyCnf first.

@param pInst
       The instance pointer of requestor.
@return
       Return the result of method call.
@result
       #MMSTRANSSRV_EVT_TRANS_CANCEL_CNF
       param1:  A pointer to data structure MMI_TransCancelCnf_t

 */
#define IMMSTRANSSRV_MmsTransCancelReq(pICntlr, p1) GET_FUNCTBL((pICntlr), IMMSTRANSSRV)->MmsTransCancelReq( pICntlr, p1)
/**

<< This method SHOULD only be called by the MMS service >>

Request to receive the MMS body by a specified id.
This is an asynchronous method. So, if the return value is #MAE_RET_SUCCESS, the processed result
will be sent to the registered listener later. In order to receive the processed result, the caller
should register a listener via the method IMMSTRANSSRV_Register_Notification with mask value
#MMSTRANSSRV_Notify_Mask_MmsNotifyCnf first.

@param msgId
       The message id for this request.
@param msgBox
       The mailbox of specified message.
@param SimModule
       The SIM module id.
@param pInst
       The instance pointer of requestor.
@return
       Return the result of method call.
@result
       #MMSTRANSSRV_EVT_RECV_MAIL_CNF
       param1: The message id
       param2: The processed result

 */
#define IMMSTRANSSRV_RecvMmsBodyReq(pICntlr, p1, p2, p3, p4)    GET_FUNCTBL((pICntlr), IMMSTRANSSRV)->RecvMmsBodyReq( pICntlr, p1, p2, p3, p4)
/**

Request to delete a message by a specified id.
This is an asynchronous method. So, if the return value is #MAE_RET_SUCCESS, the processed result
will be sent to the registered listener later. In order to receive the processed result, the caller
should register a listener via the method IMMSTRANSSRV_Register_Notification with mask value
#MMSTRANSSRV_Notify_Mask_MmsNotifyCnf first.

@param msgId
       The message id for this request.
@param msgLoc
       The mailbox of specified message.
@param pInst
       The instance pointer of requestor.
@return
       Return the result of method call.
@result
       #MMSTRANSSRV_EVT_DEL_ITEM_CNF
       param1: The pointer to data structure MMI_DelMmsByIdCnf_t

 */
#define IMMSTRANSSRV_DelMmsByIdReq(pICntlr, p1, p2, p3) GET_FUNCTBL((pICntlr), IMMSTRANSSRV)->DelMmsByIdReq( pICntlr, p1, p2, p3)
/**

Request to delete messages for a specified mailbox.
This is an asynchronous method. So, if the return value is #MAE_RET_SUCCESS, the processed result
will be sent to the registered listener later. In order to receive the processed result, the caller
should register a listener via the method IMMSTRANSSRV_Register_Notification with mask value
#MMSTRANSSRV_Notify_Mask_MmsNotifyCnf first.

@param msgLoc
       A mailbox that all messages will be deleted.
@param pInst
       The instance pointer of requestor.
@return
       Return the result of method call.
@result
       #MMSTRANSSRV_EVT_DEL_ALL_ITEMS_CNF
       param1: A pointer to data structure MMI_DelMmsByBoxCnf_t

 */
#define IMMSTRANSSRV_DelMmsByboxReq(pICntlr, p1, p2)    GET_FUNCTBL((pICntlr), IMMSTRANSSRV)->DelMmsByboxReq( pICntlr, p1, p2)
/**

This method is abandoned.

 */
#define IMMSTRANSSRV_MmsBootUpReq(pICntlr, p1)  GET_FUNCTBL((pICntlr), IMMSTRANSSRV)->MmsBootUpReq( pICntlr, p1)
/**

This method is abandoned.

 */
#define IMMSTRANSSRV_MmsShutDown(pICntlr, p1)   GET_FUNCTBL((pICntlr), IMMSTRANSSRV)->MmsShutDown( pICntlr, p1)
/**

Add the listener associated with the specified instance.

@param pInst
        A pointer to a specified instance.
@param mask
       This value is used for defining event filter rules. The mask value is composited by following
       #MMSTRANSSRV_Notify_Mask_MmsNotifyCnf
           Bit mask for the mms notify cnf.
@return
       Return the result of method call.

 */
#define IMMSTRANSSRV_Register_Notification(pICntlr, p1, p2) GET_FUNCTBL((pICntlr), IMMSTRANSSRV)->Register_Notification( pICntlr, p1, p2)
/**

Remove the listener associated with the specified instance.

@param pInst
        A pointer to a specified instance.
@param mask
       This value is used for un-defining event filter rules. The mask value is composited by following
       #MMSTRANSSRV_Notify_Mask_MmsNotifyCnf
           Bit mask for the mms notify cnf.
@return
       Return the result of method call.

 */
#define IMMSTRANSSRV_Deregister_Notification(pICntlr, p1, p2)   GET_FUNCTBL((pICntlr), IMMSTRANSSRV)->Deregister_Notification( pICntlr, p1, p2)
/**

Post wap push notify to MMS task.

@param pNewMmsNote
       The structure data of new MMS note.
@return
       Return the result of method call.

 */
#define IMMSTRANSSRV_MmsNewNote(pICntlr, p1)    GET_FUNCTBL((pICntlr), IMMSTRANSSRV)->MmsNewNote( pICntlr, p1)
/**

This method is not using currently.

 */
#define IMMSTRANSSRV_GetMmsAllAttachReq(pICntlr, p1, p2, p3)    GET_FUNCTBL((pICntlr), IMMSTRANSSRV)->GetMmsAllAttachReq( pICntlr, p1, p2, p3)
/**

Deregister the registeded instance to avoid posting event to invalid instance.

@param pInst
       A pointer to a specified instance.
@return
       Return the result of method call.

 */
#define IMMSTRANSSRV_DeregisterInstance(pICntlr, p1)    GET_FUNCTBL((pICntlr), IMMSTRANSSRV)->DeregisterInstance( pICntlr, p1)
/**

<< This method SHOULD only be called by the MMS service >>

Request to sync cdmms data with specified mailbox.
This is an asynchronous method. So, if the return value is #MAE_RET_SUCCESS, the processed result
will be sent to the registered listener later. In order to receive the processed result, the caller
should register a listener via the method IMMSTRANSSRV_Register_Notification with mask value
#MMSTRANSSRV_Notify_Mask_MmsNotifyCnf first.

@param msgLoc
       The specified mailbox to sync.
@param pInst
       The instance pointer of requestor.
@return
       Return the result of method call.
@result
       #MMSTRANSSRV_EVT_RETRV_CDMMS_CNF

 */
#define IMMSTRANSSRV_RetrvCdMmsReq(pICntlr, p1, p2) GET_FUNCTBL((pICntlr), IMMSTRANSSRV)->RetrvCdMmsReq( pICntlr, p1, p2)
/**
 Request to send a MMS notify response.

@param msgId
       The message id for this request.
@param location
       The mailbox of specified message.
@param pInst
       The instance pointer of requestor.
@param SimModule
       The SIM module id.
@return
       Return the result of method call.
 */
#define IMMSTRANSSRV_SendMmsNotiRespReq(pICntlr, p1, p2, p3, p4)    GET_FUNCTBL((pICntlr), IMMSTRANSSRV)->SendMmsNotiRespReq( pICntlr, p1, p2, p3, p4)
/**
 Request to send a MMS read reply.

@param msgId
       The message id for this request.
@param location
       The mailbox of specified message.
@param pInst
       The instance pointer of requestor.
@param SimModule
       The SIM module id.
@return
       Return the result of method call.
 */
#define IMMSTRANSSRV_SendMmsReadReplyReq(pICntlr, p1, p2, p3, p4)    GET_FUNCTBL((pICntlr), IMMSTRANSSRV)->SendMmsReadReplyReq( pICntlr, p1, p2, p3, p4)
/**
 move mms message from eSourceLoc to eDesLoc , current limitation outbox->draft
 */
#define IMMSTRANSSRV_MoveMmsReq(pICntlr, p1, p2, p3, p4)    GET_FUNCTBL((pICntlr), IMMSTRANSSRV)->MoveMmsReq( pICntlr, p1, p2, p3, p4)
/**
 
 */
#define IMMSTRANSSRV_GetMmsRawItemReq(pICntlr, p1, p2, p3)	GET_FUNCTBL((pICntlr), IMMSTRANSSRV)->GetMmsRawItemReq( pICntlr, p1, p2, p3)
/**
 
 */
#define IMMSTRANSSRV_SaveMmsRawItemReq(pICntlr, p1, p2, p3, p4, p5, p6)	GET_FUNCTBL((pICntlr), IMMSTRANSSRV)->SaveMmsRawItemReq( pICntlr, p1, p2, p3, p4, p5, p6)



/**
 * Functions
 */

void MMSTRANSSRV_Init(void);

__SLDPM_FREE__ MAE_Ret MMSTRANSSRV_New(MAE_ClsId id, void **ppObj);

#endif /* __MMI_MMSTRANSACTIONSRV_H__ */
