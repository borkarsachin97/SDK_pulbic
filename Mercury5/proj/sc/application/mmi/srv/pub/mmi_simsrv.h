/**
* @file mmi_simsrv.h
*
* State Machine Service - SIMSRV
* Generated by XFSM v1.0, CodeVer=v0.24
*
* Class Id: CLSID_SIMSRV
*
*
* @version $Id$
*/
#ifndef __MMI_SIMSRV_H__
#define __MMI_SIMSRV_H__

#include "mmi_mae_common_def.h"
#include "mmi_mae_applet.h"
#include "mmi_mae_class.h"
#include "mmi_mae_notifier.h"
#include "mmi_simsrv_def.h"
#include "mmi_secapp_cfg.h"
#include "mmi_sys_cfg.h"
#include "mmi_common_sim.h"

/**
 * External Events
 */
#define SIMSRV_EVT_SIMActiveInd             (CLSID_SIMSRV << 16 | 1)
#define SIMSRV_EVT_SIMReadyInd              (CLSID_SIMSRV << 16 | 2)
#define SIMSRV_EVT_SIMAbsenceInd                (CLSID_SIMSRV << 16 | 3)
#define SIMSRV_EVT_EnablePINCnf             (CLSID_SIMSRV << 16 | 4)
#define SIMSRV_EVT_DisablePINCnf                (CLSID_SIMSRV << 16 | 5)
#define SIMSRV_EVT_VerifyPINCnf             (CLSID_SIMSRV << 16 | 6)
#define SIMSRV_EVT_ChangePINCnf             (CLSID_SIMSRV << 16 | 7)
#define SIMSRV_EVT_UnblockPINCnf                (CLSID_SIMSRV << 16 | 8)
#define SIMSRV_EVT_ReadSIMFileCnf               (CLSID_SIMSRV << 16 | 9)
#define SIMSRV_EVT_WriteSIMFileCnf              (CLSID_SIMSRV << 16 | 10)
#define SIMSRV_EVT_SetPreferredLangCnf              (CLSID_SIMSRV << 16 | 11)
#define SIMSRV_EVT_EnablePINReq             (CLSID_SIMSRV << 16 | 12)
#define SIMSRV_EVT_DisablePINReq                (CLSID_SIMSRV << 16 | 13)
#define SIMSRV_EVT_VerifyPINReq             (CLSID_SIMSRV << 16 | 14)
#define SIMSRV_EVT_ChangePINReq             (CLSID_SIMSRV << 16 | 15)
#define SIMSRV_EVT_UnblockPINReq                (CLSID_SIMSRV << 16 | 16)
#define SIMSRV_EVT_ReadSIMFileReq               (CLSID_SIMSRV << 16 | 17)
#define SIMSRV_EVT_WriteSIMFileReq              (CLSID_SIMSRV << 16 | 18)
#define SIMSRV_EVT_SetPreferredLangReq              (CLSID_SIMSRV << 16 | 19)
#define SIMSRV_EVT_PINStatusInd             (CLSID_SIMSRV << 16 | 20)
#define SIMSRV_EVT_SIMErrorInd              (CLSID_SIMSRV << 16 | 21)
#define SIMSRV_EVT_CheckWaitingQueue                (CLSID_SIMSRV << 16 | 22)
#define SIMSRV_EVT_STKMenuInd               (CLSID_SIMSRV << 16 | 23)
#define SIMSRV_EVT_InitSIMData              (CLSID_SIMSRV << 16 | 24)
#define SIMSRV_EVT_ActivateSIMCnf               (CLSID_SIMSRV << 16 | 25)
#define SIMSRV_EVT_DeactivateSIMCnf             (CLSID_SIMSRV << 16 | 26)
#define SIMSRV_EVT_ActivateMasterSIMReq             (CLSID_SIMSRV << 16 | 27)
#define SIMSRV_EVT_ActivateSlaveSIMReq              (CLSID_SIMSRV << 16 | 28)
#define SIMSRV_EVT_SIMIndReadyInd               (CLSID_SIMSRV << 16 | 29)
#define SIMSRV_EVT_TimeExpired              (CLSID_SIMSRV << 16 | 30)
#define SIMSRV_EVT_SIMIndTimeout                (CLSID_SIMSRV << 16 | 31)
#define SIMSRV_EVT_SIMStatusChangeInd               (CLSID_SIMSRV << 16 | 32)
#define SIMSRV_EVT_STKRefreshMasterReq              (CLSID_SIMSRV << 16 | 33)
#define SIMSRV_EVT_STKRefreshSlaveReq               (CLSID_SIMSRV << 16 | 34)
#define SIMSRV_EVT_SIMChangedInd                (CLSID_SIMSRV << 16 | 35)
#define SIMSRV_EVT_NeedVerifyPINInd             (CLSID_SIMSRV << 16 | 36)
#define SIMSRV_EVT_SIMMasterFileReady               (CLSID_SIMSRV << 16 | 37)
#define SIMSRV_EVT_InitSMSReadyInd              (CLSID_SIMSRV << 16 | 38)
#define SIMSRV_EVT_NoSIMInd             (CLSID_SIMSRV << 16 | 39)
#define SIMSRV_EVT_AbortInitProcess             (CLSID_SIMSRV << 16 | 40)
#define SIMSRV_EVT_StatusSIMFileReq             (CLSID_SIMSRV << 16 | 41)
#define SIMSRV_EVT_StatusSIMFileCnf             (CLSID_SIMSRV << 16 | 42)
#define SIMSRV_EVT_SIMIMSIFileReady             (CLSID_SIMSRV << 16 | 43)
#define SIMSRV_EVT_DeactivateSIMforShutdownReq              (CLSID_SIMSRV << 16 | 44)
#define SIMSRV_EVT_DeactivateSIMforShutdownCnf              (CLSID_SIMSRV << 16 | 45)
#define SIMSRV_EVT_DeactivateAppFinished                (CLSID_SIMSRV << 16 | 46)
#define SIMSRV_EVT_SIMDeactivateInd             (CLSID_SIMSRV << 16 | 47)
#define SIMSRV_EVT_InitAppStartInd              (CLSID_SIMSRV << 16 | 48)
#define SIMSRV_EVT_InitAppFinishedInd               (CLSID_SIMSRV << 16 | 49)
#define SIMSRV_EVT_Init_VerifyPINReq                (CLSID_SIMSRV << 16 | 50)
#define SIMSRV_EVT_Init_UnblockPINReq               (CLSID_SIMSRV << 16 | 51)
#define SIMSRV_EVT_ActivateBothSIMReq               (CLSID_SIMSRV << 16 | 52)
#define SIMSRV_EVT_SIMNoRspErrInd				(CLSID_SIMSRV << 16 | 53)

/**
 * ISIMSRV Interfaces
 */
#ifdef __QUAD_SIM_DUAL_STANDBY__
#define INHERIT_ISIMSRV(IName) \
    INHERIT_IHandler(IName); \
    MAE_Ret     (*RegisterNotification)     ( IName * , void *pInstance, SIMSRV_NOTIFY_MASK_e mask);  \
    MAE_Ret     (*GetPINStatus)     ( IName * , SIMSRV_PIN_STATUS_t * pStatus, SIMSRV_SIM_ID_e eSIMID);  \
    MAE_Ret     (*GetPreferredLanguage)     ( IName * , MAE_LANG_CODE_e * pLangCode, SIMSRV_SIM_ID_e eSIMID);  \
    MAE_Ret     (*GetEmergencyCode)     ( IName * , SIMSRV_ECC_t * pEcc, SIMSRV_SIM_ID_e eSIMID);  \
    MAE_Ret     (*GetIMSI)      ( IName * , u8* pIMSI, SIMSRV_SIM_ID_e eSIMID);  \
    boolean     (*GetSIMServiceTable)       ( IName * , SIMSRV_SST_FEATURE_e feature, SIMSRV_SIM_ID_e eSIMID);  \
    MAE_Ret     (*EnablePINReq)     ( IName * , void *pCaller, u8* pPINValue, SIMSRV_SIM_ID_e eSIMID);  \
    MAE_Ret     (*DisablePINReq)        ( IName * , void *pCaller, u8* pPINValue, SIMSRV_SIM_ID_e eSIMID);  \
    MAE_Ret     (*VerifyPINReq)     ( IName * , void *pCaller, SIMSRV_PIN_TYPE_e type, u8* pPINValue, SIMSRV_SIM_ID_e eSIMID);  \
    MAE_Ret     (*ChangePINReq)     ( IName * , void *pCaller, SIMSRV_PIN_TYPE_e type, u8* pOldValue, u8* pNewValue, SIMSRV_SIM_ID_e eSIMID);  \
    MAE_Ret     (*UnblockPINReq)        ( IName * , void *pCaller, SIMSRV_PIN_TYPE_e type, u8* pPUKValue, u8* pPINValue, SIMSRV_SIM_ID_e eSIMID);  \
    MAE_Ret     (*ReadFileReq)      ( IName * , void *pCaller, SIMSRV_SIM_FILE_ID_e FileID, SIMSRV_SIM_ID_e eSIMID);  \
    MAE_Ret     (*UpdateFileReq)        ( IName * , void *pCaller, SIMSRV_SIM_FILE_ID_e FileID, u8 nDataLen, u8 * pData, SIMSRV_SIM_ID_e eSIMID);  \
    MAE_Ret     (*DeRegisterNotification)       ( IName * , void *pInstance, SIMSRV_NOTIFY_MASK_e mask);  \
    MAE_Ret     (*SetPreferredLanguage)     ( IName * , void *pCaller, MAE_LANG_CODE_e LangCode, SIMSRV_SIM_ID_e eSIMID);  \
    MAE_Ret     (*GetMccMnc)        ( IName * , MccMnc_t* pMccMnc, SIMSRV_SIM_ID_e eSIMID, boolean bActiveSIM);  \
    boolean     (*IsWhiteSIMCard)       ( IName * , SIMSRV_SIM_ID_e eSIMID);  \
    COMMON_SIM_CARD_STATUS_e        (*GetSIMCardStatus)     ( IName * );  \
    void        (*ActivateSIMReq)       ( IName * , void *pCaller, boolean bActivated, SIMSRV_SIM_ID_e eSIMID);  \
    SIMSRV_SIM_INSERT_e     (*GetSIMInsertStatus)       ( IName * );  \
    MAE_Ret	 (*GetSIMRackInsertStatus)		 ( IName * , SIMSRV_SIM_INSERT_NEW_e *p_eAllRackInsertedStaus);  \
    MAE_Ret	 (*SelectRack)		 ( IName * , SIMSRV_SIM_ID_e eIPId, SIMSRV_SIM_RACK_ID_e eRackId);	\
    boolean     (*IsSIMReady)       ( IName * );  \
    boolean     (*IsSIMIndicationReady)     ( IName * );  \
    MAE_Ret     (*CancelActivateSIMReq)     ( IName * , void *pCaller, SIMSRV_SIM_ID_e eSIMID);  \
    boolean     (*IsSIMChanged)     ( IName * , SIMSRV_SIM_ID_e eSIMID);  \
    boolean     (*IsSIMMasterFileReady)     ( IName * , SIMSRV_SIM_ID_e eSIMID);  \
    void        (*Shutdown)     ( IName * , ONOFF_Cause_e eCause, boolean bSavePowerOnOffCause);  \
    MAE_Ret     (*IsSSTFeatureValid)        ( IName * , SIMSRV_SST_FEATURE_e feature, SIMSRV_SIM_ID_e eSIMID, boolean* pbIsValid);  \
    MAE_Ret     (*StatusFileReq)        ( IName * , void *pCaller, SIMSRV_SIM_FILE_ID_e FileID, SIMSRV_SIM_ID_e eSIMID);  \
    boolean     (*IsSIMIMSIFileReady)       ( IName * , SIMSRV_SIM_ID_e eSIMID);  \
    void        (*SendSIMCardStatusChangedReq)      ( IName * );  \
    void        (*IgnoreSIMCardStatusChangeInd)     ( IName * );  \
    MAE_Ret     (*CancelPINPUKCheckingAndDeactivateSIMReq)      ( IName * , void *pCaller, SIMSRV_SIM_ID_e eSIMID);  \
    void        (*DeactivateSIMForShutdown)     ( IName * , void *pCaller);  \
    boolean     (*IsInitAppFinished)        ( IName * , SIMSRV_INITAPP_TYPE_e eInitAppType);  \
    boolean     (*IsSIMPreviousInserted)        ( IName * , SIMSRV_SIM_ID_e eSIMID);  \
    MAE_Ret     (*GetPreviousIMSI)      ( IName * , u8* pIMSI, SIMSRV_SIM_ID_e eSIMID);  \
    void        (*SaveIMSItoInsertedIMSIList)       ( IName * , SIMSRV_SIM_ID_e eSIMID);  \
    boolean     (*IsSIMActive)      ( IName * , SIMSRV_SIM_ID_e eSIMID);  \
    MAE_Ret     (*GetSIMOPName)     ( IName * , SIMSRV_SIM_FILE_ID_e eFileID, SIMSRV_OPName_t* pstOPName, SIMSRV_SIM_ID_e eSIMID);  \
    boolean (*GetSIMInfo)     ( IName * ,SIMSRV_SimInfo_t *ptSimInfo);  \
    void      (*ActivateBothSIMReq)       ( IName * , void * pCaller, boolean bActivated); \
    void      (*DisableSIM)      (IName * , SIMSRV_SIM_ID_e eSIMID); \
    void        (*RawIMSIToASCII) (IName * , u8 *pRawIMSI, u8 *pstrASCII); \
    MAE_Ret (*GetMccMncFromIMSI) (IName * , u8* pIMSI, MccMnc_t* pMccMnc); \
    void        (*TestSIMNoRspInd)    (IName *, SIMSRV_SIM_ID_e eSIMID)
#else
#define INHERIT_ISIMSRV(IName) \
    INHERIT_IHandler(IName); \
    MAE_Ret     (*RegisterNotification)     ( IName * , void *pInstance, SIMSRV_NOTIFY_MASK_e mask);  \
    MAE_Ret     (*GetPINStatus)     ( IName * , SIMSRV_PIN_STATUS_t * pStatus, SIMSRV_SIM_ID_e eSIMID);  \
    MAE_Ret     (*GetPreferredLanguage)     ( IName * , MAE_LANG_CODE_e * pLangCode, SIMSRV_SIM_ID_e eSIMID);  \
    MAE_Ret     (*GetEmergencyCode)     ( IName * , SIMSRV_ECC_t * pEcc, SIMSRV_SIM_ID_e eSIMID);  \
    MAE_Ret     (*GetIMSI)      ( IName * , u8* pIMSI, SIMSRV_SIM_ID_e eSIMID);  \
    boolean     (*GetSIMServiceTable)       ( IName * , SIMSRV_SST_FEATURE_e feature, SIMSRV_SIM_ID_e eSIMID);  \
    MAE_Ret     (*EnablePINReq)     ( IName * , void *pCaller, u8* pPINValue, SIMSRV_SIM_ID_e eSIMID);  \
    MAE_Ret     (*DisablePINReq)        ( IName * , void *pCaller, u8* pPINValue, SIMSRV_SIM_ID_e eSIMID);  \
    MAE_Ret     (*VerifyPINReq)     ( IName * , void *pCaller, SIMSRV_PIN_TYPE_e type, u8* pPINValue, SIMSRV_SIM_ID_e eSIMID);  \
    MAE_Ret     (*ChangePINReq)     ( IName * , void *pCaller, SIMSRV_PIN_TYPE_e type, u8* pOldValue, u8* pNewValue, SIMSRV_SIM_ID_e eSIMID);  \
    MAE_Ret     (*UnblockPINReq)        ( IName * , void *pCaller, SIMSRV_PIN_TYPE_e type, u8* pPUKValue, u8* pPINValue, SIMSRV_SIM_ID_e eSIMID);  \
    MAE_Ret     (*ReadFileReq)      ( IName * , void *pCaller, SIMSRV_SIM_FILE_ID_e FileID, SIMSRV_SIM_ID_e eSIMID);  \
    MAE_Ret     (*UpdateFileReq)        ( IName * , void *pCaller, SIMSRV_SIM_FILE_ID_e FileID, u8 nDataLen, u8 * pData, SIMSRV_SIM_ID_e eSIMID);  \
    MAE_Ret     (*DeRegisterNotification)       ( IName * , void *pInstance, SIMSRV_NOTIFY_MASK_e mask);  \
    MAE_Ret     (*SetPreferredLanguage)     ( IName * , void *pCaller, MAE_LANG_CODE_e LangCode, SIMSRV_SIM_ID_e eSIMID);  \
    MAE_Ret     (*GetMccMnc)        ( IName * , MccMnc_t* pMccMnc, SIMSRV_SIM_ID_e eSIMID, boolean bActiveSIM);  \
    boolean     (*IsWhiteSIMCard)       ( IName * , SIMSRV_SIM_ID_e eSIMID);  \
    COMMON_SIM_CARD_STATUS_e        (*GetSIMCardStatus)     ( IName * );  \
    void        (*ActivateSIMReq)       ( IName * , void *pCaller, boolean bActivated, SIMSRV_SIM_ID_e eSIMID);  \
    SIMSRV_SIM_INSERT_e     (*GetSIMInsertStatus)       ( IName * );  \
    boolean     (*IsSIMReady)       ( IName * );  \
    boolean     (*IsSIMIndicationReady)     ( IName * );  \
    MAE_Ret     (*CancelActivateSIMReq)     ( IName * , void *pCaller, SIMSRV_SIM_ID_e eSIMID);  \
    boolean     (*IsSIMChanged)     ( IName * , SIMSRV_SIM_ID_e eSIMID);  \
    boolean     (*IsSIMMasterFileReady)     ( IName * , SIMSRV_SIM_ID_e eSIMID);  \
    void        (*Shutdown)     ( IName * , ONOFF_Cause_e eCause, boolean bSavePowerOnOffCause);  \
    MAE_Ret     (*IsSSTFeatureValid)        ( IName * , SIMSRV_SST_FEATURE_e feature, SIMSRV_SIM_ID_e eSIMID, boolean* pbIsValid);  \
    MAE_Ret     (*StatusFileReq)        ( IName * , void *pCaller, SIMSRV_SIM_FILE_ID_e FileID, SIMSRV_SIM_ID_e eSIMID);  \
    boolean     (*IsSIMIMSIFileReady)       ( IName * , SIMSRV_SIM_ID_e eSIMID);  \
    void        (*SendSIMCardStatusChangedReq)      ( IName * );  \
    void        (*IgnoreSIMCardStatusChangeInd)     ( IName * );  \
    MAE_Ret     (*CancelPINPUKCheckingAndDeactivateSIMReq)      ( IName * , void *pCaller, SIMSRV_SIM_ID_e eSIMID);  \
    void        (*DeactivateSIMForShutdown)     ( IName * , void *pCaller);  \
    boolean     (*IsInitAppFinished)        ( IName * , SIMSRV_INITAPP_TYPE_e eInitAppType);  \
    boolean     (*IsSIMPreviousInserted)        ( IName * , SIMSRV_SIM_ID_e eSIMID);  \
    MAE_Ret     (*GetPreviousIMSI)      ( IName * , u8* pIMSI, SIMSRV_SIM_ID_e eSIMID);  \
    void        (*SaveIMSItoInsertedIMSIList)       ( IName * , SIMSRV_SIM_ID_e eSIMID);  \
    boolean     (*IsSIMActive)      ( IName * , SIMSRV_SIM_ID_e eSIMID);  \
    MAE_Ret     (*GetSIMOPName)     ( IName * , SIMSRV_SIM_FILE_ID_e eFileID, SIMSRV_OPName_t* pstOPName, SIMSRV_SIM_ID_e eSIMID);  \
    void        (*ActivateBothSIMReq)       ( IName * , void * pCaller, boolean bActivated); \
    void        (*RawIMSIToASCII) (IName * , u8 *pRawIMSI, u8 *pstrASCII); \
    MAE_Ret     (*GetMccMncFromIMSI) (IName * , u8* pIMSI, MccMnc_t* pMccMnc); \
    void        (*TestSIMNoRspInd)    (IName *, u8 u8SIMID)
#endif

DEFINE_INTERFACE(ISIMSRV);


#define ISIMSRV_QueryInterface(pICntlr, id, pp, po)         GET_FUNCTBL((pICntlr), ISIMSRV)->QueryInterface(pICntlr, id, pp, po)
#define ISIMSRV_HandleEvent(pICntlr, e, p1, p2)             GET_FUNCTBL((pICntlr), ISIMSRV)->HandleEvent(pICntlr, e, p1, p2)
/**

 */
#define ISIMSRV_RegisterNotification(pICntlr, p1, p2)   GET_FUNCTBL((pICntlr), ISIMSRV)->RegisterNotification( pICntlr, p1, p2)
/**

 */
#define ISIMSRV_GetPINStatus(pICntlr, p1, p2)   GET_FUNCTBL((pICntlr), ISIMSRV)->GetPINStatus( pICntlr, p1, p2)
/**

 */
#define ISIMSRV_GetPreferredLanguage(pICntlr, p1, p2)   GET_FUNCTBL((pICntlr), ISIMSRV)->GetPreferredLanguage( pICntlr, p1, p2)
/**

 */
#define ISIMSRV_GetEmergencyCode(pICntlr, p1, p2)   GET_FUNCTBL((pICntlr), ISIMSRV)->GetEmergencyCode( pICntlr, p1, p2)
/**

 */
#define ISIMSRV_GetIMSI(pICntlr, p1, p2)    GET_FUNCTBL((pICntlr), ISIMSRV)->GetIMSI( pICntlr, p1, p2)
/**

 */
#define ISIMSRV_GetSIMServiceTable(pICntlr, p1, p2) GET_FUNCTBL((pICntlr), ISIMSRV)->GetSIMServiceTable( pICntlr, p1, p2)
/**

 */
#define ISIMSRV_EnablePINReq(pICntlr, p1, p2, p3)   GET_FUNCTBL((pICntlr), ISIMSRV)->EnablePINReq( pICntlr, p1, p2, p3)
/**

 */
#define ISIMSRV_DisablePINReq(pICntlr, p1, p2, p3)  GET_FUNCTBL((pICntlr), ISIMSRV)->DisablePINReq( pICntlr, p1, p2, p3)
/**

 */
#define ISIMSRV_VerifyPINReq(pICntlr, p1, p2, p3, p4)   GET_FUNCTBL((pICntlr), ISIMSRV)->VerifyPINReq( pICntlr, p1, p2, p3, p4)
/**

 */
#define ISIMSRV_ChangePINReq(pICntlr, p1, p2, p3, p4, p5)   GET_FUNCTBL((pICntlr), ISIMSRV)->ChangePINReq( pICntlr, p1, p2, p3, p4, p5)
/**

 */
#define ISIMSRV_UnblockPINReq(pICntlr, p1, p2, p3, p4, p5)  GET_FUNCTBL((pICntlr), ISIMSRV)->UnblockPINReq( pICntlr, p1, p2, p3, p4, p5)
/**

 */
#define ISIMSRV_ReadFileReq(pICntlr, p1, p2, p3)    GET_FUNCTBL((pICntlr), ISIMSRV)->ReadFileReq( pICntlr, p1, p2, p3)
/**

 */
#define ISIMSRV_UpdateFileReq(pICntlr, p1, p2, p3, p4, p5)  GET_FUNCTBL((pICntlr), ISIMSRV)->UpdateFileReq( pICntlr, p1, p2, p3, p4, p5)
/**

 */
#define ISIMSRV_DeRegisterNotification(pICntlr, p1, p2) GET_FUNCTBL((pICntlr), ISIMSRV)->DeRegisterNotification( pICntlr, p1, p2)
/**

 */
#define ISIMSRV_SetPreferredLanguage(pICntlr, p1, p2, p3)   GET_FUNCTBL((pICntlr), ISIMSRV)->SetPreferredLanguage( pICntlr, p1, p2, p3)
/**

 */
#define ISIMSRV_GetMccMnc(pICntlr, p1, p2, p3)  GET_FUNCTBL((pICntlr), ISIMSRV)->GetMccMnc( pICntlr, p1, p2, p3)
/**

 */
#define ISIMSRV_IsWhiteSIMCard(pICntlr, p1) GET_FUNCTBL((pICntlr), ISIMSRV)->IsWhiteSIMCard( pICntlr, p1)
/**

 */
#define ISIMSRV_GetSIMCardStatus(pICntlr)   GET_FUNCTBL((pICntlr), ISIMSRV)->GetSIMCardStatus( pICntlr)
/**

 */
#define ISIMSRV_ActivateSIMReq(pICntlr, p1, p2, p3) GET_FUNCTBL((pICntlr), ISIMSRV)->ActivateSIMReq( pICntlr, p1, p2, p3)
/**

 */
#define ISIMSRV_GetSIMInsertStatus(pICntlr) GET_FUNCTBL((pICntlr), ISIMSRV)->GetSIMInsertStatus( pICntlr)
#ifdef __QUAD_SIM_DUAL_STANDBY__
/**

 */
#define ISIMSRV_GetSIMRackInsertStatus(pICntlr, p1) GET_FUNCTBL((pICntlr), ISIMSRV)->GetSIMRackInsertStatus( pICntlr, p1)
/**

 */
#define ISIMSRV_SelectRack(pICntlr, p1, p2) GET_FUNCTBL((pICntlr), ISIMSRV)->SelectRack( pICntlr, p1, p2)
#endif
/**

 */
#define ISIMSRV_IsSIMReady(pICntlr) GET_FUNCTBL((pICntlr), ISIMSRV)->IsSIMReady( pICntlr)
/**

 */
#define ISIMSRV_IsSIMIndicationReady(pICntlr)   GET_FUNCTBL((pICntlr), ISIMSRV)->IsSIMIndicationReady( pICntlr)
/**

 */
#define ISIMSRV_CancelActivateSIMReq(pICntlr, p1, p2)   GET_FUNCTBL((pICntlr), ISIMSRV)->CancelActivateSIMReq( pICntlr, p1, p2)
/**

 */
#define ISIMSRV_IsSIMChanged(pICntlr, p1)   GET_FUNCTBL((pICntlr), ISIMSRV)->IsSIMChanged( pICntlr, p1)
/**

 */
#define ISIMSRV_IsSIMMasterFileReady(pICntlr, p1)   GET_FUNCTBL((pICntlr), ISIMSRV)->IsSIMMasterFileReady( pICntlr, p1)
/**

 */
#define ISIMSRV_Shutdown(pICntlr, p1, p2)   GET_FUNCTBL((pICntlr), ISIMSRV)->Shutdown( pICntlr, p1, p2)
/**

 */
#define ISIMSRV_IsSSTFeatureValid(pICntlr, p1, p2, p3)  GET_FUNCTBL((pICntlr), ISIMSRV)->IsSSTFeatureValid( pICntlr, p1, p2, p3)
/**

 */
#define ISIMSRV_StatusFileReq(pICntlr, p1, p2, p3)  GET_FUNCTBL((pICntlr), ISIMSRV)->StatusFileReq( pICntlr, p1, p2, p3)
/**

 */
#define ISIMSRV_IsSIMIMSIFileReady(pICntlr, p1) GET_FUNCTBL((pICntlr), ISIMSRV)->IsSIMIMSIFileReady( pICntlr, p1)
/**

 */
#define ISIMSRV_SendSIMCardStatusChangedReq(pICntlr)    GET_FUNCTBL((pICntlr), ISIMSRV)->SendSIMCardStatusChangedReq( pICntlr)
/**

 */
#define ISIMSRV_IgnoreSIMCardStatusChangeInd(pICntlr)   GET_FUNCTBL((pICntlr), ISIMSRV)->IgnoreSIMCardStatusChangeInd( pICntlr)
/**

 */
#define ISIMSRV_CancelPINPUKCheckingAndDeactivateSIMReq(pICntlr, p1, p2)    GET_FUNCTBL((pICntlr), ISIMSRV)->CancelPINPUKCheckingAndDeactivateSIMReq( pICntlr, p1, p2)
/**

 */
#define ISIMSRV_DeactivateSIMForShutdown(pICntlr, p1)   GET_FUNCTBL((pICntlr), ISIMSRV)->DeactivateSIMForShutdown( pICntlr, p1)
/**

 */
#define ISIMSRV_IsInitAppFinished(pICntlr, p1)  GET_FUNCTBL((pICntlr), ISIMSRV)->IsInitAppFinished( pICntlr, p1)
/**

 */
#define ISIMSRV_IsSIMPreviousInserted(pICntlr, p1)  GET_FUNCTBL((pICntlr), ISIMSRV)->IsSIMPreviousInserted( pICntlr, p1)
/**

 */
#define ISIMSRV_GetPreviousIMSI(pICntlr, p1, p2)    GET_FUNCTBL((pICntlr), ISIMSRV)->GetPreviousIMSI( pICntlr, p1, p2)
/**
 1.Update IMSI to CFGIT_SIMSRV_LAST_INSERTED_IMSI2.
2.copy the original IMSI in CFGIT_SIMSRV_LAST_INSERTED_IMSI2
to CFGIT_SIMSRV_LAST_INSERTED_IMSI1.

 */
#define ISIMSRV_SaveIMSItoInsertedIMSIList(pICntlr, p1) GET_FUNCTBL((pICntlr), ISIMSRV)->SaveIMSItoInsertedIMSIList( pICntlr, p1)
/**
 Check is SIM card active or not.
 */
#define ISIMSRV_IsSIMActive(pICntlr, p1)    GET_FUNCTBL((pICntlr), ISIMSRV)->IsSIMActive( pICntlr, p1)
/**
 Get SIMSRV_FILE_SPN, SIMSRV_FILE_ONS or SIMSRV_FILE_SONS name.
 */
#define ISIMSRV_GetSIMOPName(pICntlr, p1, p2, p3)   GET_FUNCTBL((pICntlr), ISIMSRV)->GetSIMOPName( pICntlr, p1, p2, p3)
#ifdef __QUAD_SIM_DUAL_STANDBY__
/**
 Get Sim Info.
 */
#define ISIMSRV_GetSIMInfo(pICntlr, p1) GET_FUNCTBL((pICntlr), ISIMSRV)->GetSIMInfo( pICntlr, p1)
#endif
/**
 Activate/Deactivate both SIM
 */
#define ISIMSRV_ActivateBothSIMReq(pICntlr, p1, p2) GET_FUNCTBL((pICntlr), ISIMSRV)->ActivateBothSIMReq( pICntlr, p1, p2)
#ifdef __QUAD_SIM_DUAL_STANDBY__
/**
 Disable SIM
 */
#define ISIMSRV_DisableSIM(pICntlr, p1) GET_FUNCTBL((pICntlr), ISIMSRV)->DisableSIM( pICntlr, p1)
#endif
/**
Transfer raw IMSI BCD format to ASCII string

 */
#define ISIMSRV_RawIMSIToASCII(pICntlr, p1, p2) GET_FUNCTBL((pICntlr), ISIMSRV)->RawIMSIToASCII( pICntlr, p1, p2)

/**

 */
#define ISIMSRV_GetMccMncFromIMSI(pICntlr, p1, p2)  GET_FUNCTBL((pICntlr), ISIMSRV)->GetMccMncFromIMSI( pICntlr, p1, p2)

/**

 */
#define ISIMSRV_TestSIMNoRspInd(pICntlr, p1)  GET_FUNCTBL((pICntlr), ISIMSRV)->TestSIMNoRspInd( pICntlr, p1)

/**
 * Functions
 */

void SIMSRV_Init(void);

__SLDPM_FREE__ MAE_Ret SIMSRV_New(MAE_ClsId id, void **ppObj);

#endif /* __MMI_SIMSRV_H__ */
