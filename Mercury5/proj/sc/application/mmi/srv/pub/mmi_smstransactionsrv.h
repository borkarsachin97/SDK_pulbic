/**
* @file mmi_txi.h
*
* Service without using State Machine - TXI
* Generated by XFSM v1.0, CodeVer=v0.24 
*
* Class Id: CLSID_TXI
* Interface Id: IID_TXI
*
* @version $Id: mmi_txi.h 33461 2009-06-16 08:06:40Z mark.yang $
*/
#ifndef __MMI_SMSTRANSACTIONSRV_H__
#define __MMI_SMSTRANSACTIONSRV_H__

/*-------------------------------------------------------------------------*/

#include "mmi_mae_common_def.h"
#include "mmi_mae_applet.h"
#include "mmi_mae_class.h"
#include "mmi_mae_filemgr.h"
#include "mmi_mae_vectormodel.h"
#include "mmi_mae_notifier.h"
#include "mmi_req_sms.h" // it has include "mmi_if_sms.h" in "mmi_req_sms.h"
#include "mmi_messageorganizationsrv.h"
#include "mmi_common_sms_master.h"
#include "mmi_common_sms.h"
typedef enum
{
    TX_Notify_Mask_SmsSend = 0x000001
   ,/*for sms send cnf notify*/
    TX_Notify_Mask_SmsRead = 0x000002
   ,TX_Notify_Mask_SmsStore = 0x000004
   ,TX_Notify_Mask_SmsDel = 0x000008
   ,TX_Notify_Mask_SmsSetSca = 0x000010
   ,TX_Notify_Mask_SmsQrySca = 0x000020
   ,TX_Notify_Mask_SmsModStatus = 0x000040
   ,TX_Notify_Mask_SmsQryStorage = 0x000080
   ,TX_Notify_Mask_SmsSetParam = 0x000100
   ,TX_Notify_Mask_SmsQryParam = 0x000200
   ,TX_Notify_Mask_SmsSetRecvStorage = 0x000400
   ,TX_Notify_Mask_SetCbmType = 0x000800
   ,TX_Notify_Mask_SetCbmi = 0x001000
   ,TX_Notify_Mask_QryCbmi = 0x002000
   ,TX_Notify_Mask_SmsMtInd = 0x004000
   ,TX_Notify_Mask_CbInd = 0x008000
   ,TX_Notify_Mask_SrInd = 0x010000
   ,TX_Notify_Mask_SimReadyInd = 0x020000
   ,TX_Notify_Mask_SimFullInd = 0x040000
   ,TX_Notify_Mask_SimNotFullInd = 0x080000
   ,TX_Notify_Mask_NoSimInd = 0x100000
   ,TX_Notify_Mask_SimStatusInd = 0x200000
   ,TX_Notify_Mask_SimDeactivateInd = 0x400000
   ,TX_Notify_Mask_RetrvSimMsgOK = 0x800000
   ,TX_Notify_Mask_StkRefresh = 0x1000000
   ,TX_Notify_Mask_SmsReadyInd = 0x2000000
   ,TX_Notify_Mask_SmsDeactivateOK = 0x4000000
   ,TX_Notify_Mask_SmsUnableToReceiveInd = 0x10000000
} TX_Notify_Mask_e;

typedef enum
{
    TX_DEL_INDEX
   ,TX_DEL_READ
   ,TX_DEL_READ_SENT
   ,TX_DEL_READ_SENT_UNSENT
   ,TX_DEL_SIM1_ALL
   ,TX_DEL_SIM2_ALL
   ,TX_DEL_UNKNOWN
} TX_SMS_DelFlag_e;

typedef enum
{
    TX_SMS_REC_UNREAD
,             // 0 
    TX_SMS_REC_READ
,               // 1
    TX_SMS_STO_UNSENT
,             // 2
    TX_SMS_STO_SENT
,               // 3
    TX_SMS_STATUS_INVALID = 0xFF
}TX_SMS_Status_e;

typedef struct
{
    SMI_MsgID_t MsgID;
    SMI_MsgLocation_e MsgLoc;
    u8 simIndex[MAX_CONCATENATE_PACKAGE];
    u8 nMaxPdu;
    u8 nCurrentIdx; //The current operation PDU index, the index of simIndex
}TXI_SMS_Store_Cnf_t;

/*-------------------------------------------------------------------------*/

/**
 * External Events
 */
#define TXI_EVT_SmsSendCnf              (CLSID_TXI << 16 | 1)
#define TXI_EVT_SmsReadCnf              (CLSID_TXI << 16 | 2)
#define TXI_EVT_SmsStoreCnf             (CLSID_TXI << 16 | 3)
#define TXI_EVT_SmsDelCnf               (CLSID_TXI << 16 | 4)
#define TXI_EVT_SmsSetScaCnf                (CLSID_TXI << 16 | 5)
#define TXI_EVT_SmsQryScaCnf                (CLSID_TXI << 16 | 6)
#define TXI_EVT_SmsModStatusCnf             (CLSID_TXI << 16 | 7)
#define TXI_EVT_SmsQryStorageCnf                (CLSID_TXI << 16 | 8)
#define TXI_EVT_SmsSetParamCnf              (CLSID_TXI << 16 | 9)
#define TXI_EVT_SmsQryParamCnf              (CLSID_TXI << 16 | 10)
#define TXI_EVT_SmsSetRecvStorageCnf                (CLSID_TXI << 16 | 11)
#define TXI_EVT_SetCbmTypeCnf               (CLSID_TXI << 16 | 12)
#define TXI_EVT_SetCbmiCnf              (CLSID_TXI << 16 | 13)
#define TXI_EVT_QryCbmiCnf              (CLSID_TXI << 16 | 14)
#define TXI_EVT_SmsMtInd                (CLSID_TXI << 16 | 15)
#define TXI_EVT_CbInd               (CLSID_TXI << 16 | 16)
#define TXI_EVT_SrInd               (CLSID_TXI << 16 | 17)
#define TXI_EVT_SimReadyInd             (CLSID_TXI << 16 | 18)
#define TXI_EVT_SimFullInd              (CLSID_TXI << 16 | 19)
#define TXI_EVT_SimNotFullInd               (CLSID_TXI << 16 | 20)
#define TXI_EVT_ActiveCbmiCnf               (CLSID_TXI << 16 | 21)
#define TXI_EVT_NoSimInd                (CLSID_TXI << 16 | 22)
#define TXI_EVT_SimStatusInd                (CLSID_TXI << 16 | 23)
#define TXI_EVT_SimDeactivateInd                (CLSID_TXI << 16 | 24)
#define TXI_EVT_ActiveRngCbmiCnf                (CLSID_TXI << 16 | 25)
#define TXI_EVT_StkRefresh              (CLSID_TXI << 16 | 26)
#define TXI_EVT_SmsSetStatusReportCnf               (CLSID_TXI << 16 | 27)
#define TXI_EVT_SmsReadyInd             (CLSID_TXI << 16 | 28)
#define TXI_EVT_SmsDeactivateOK             (CLSID_TXI << 16 | 29)
#define TXI_EVT_SmsUnableToReceiveInd   (CLSID_TXI << 16 | 30)


/**
 * ITXI Interfaces
 */
#define INHERIT_ITXI(IName) \
    INHERIT_IHandler(IName); \
    MAE_Ret     (*SMS_SEND_REQ)     ( IName * , SMI_MsgHdr_t *pSmHdr, void *pInst, u8 simModule);  \
    MAE_Ret     (*SMS_READ_REQ)     ( IName * , u16 msgIdx, void *pInst, boolean bAddMsgSortByTime, u16 simRead, u8 simModule);  \
    MAE_Ret     (*SMS_STORE_REQ)        ( IName * , SMI_MsgHdr_t *pSmHdr, u8 *pMsgData, u32 nDataByteLen, SMI_MsgID_t SrcMsgID, IBase *pInst);  \
    MAE_Ret     (*SMS_DEL_REQ)      ( IName * , SMI_MsgHdr_t *pSmHdr, TX_SMS_DelFlag_e delFlag, void *pInst);  \
    MAE_Ret     (*SMS_SET_SCA_REQ)      ( IName * , MMI_SMS_SetSCAReq_t *pSetScaReq, void *pInst);  \
    MAE_Ret     (*SMS_QUERY_SCA_REQ)        ( IName * , void *pInst, u8 simModule);  \
    MAE_Ret     (*SMS_MOD_STATUS_REQ)       ( IName * , SMI_MsgHdr_t *pSmHdr, TX_SMS_Status_e modStsReq, void *pInst);  \
    MAE_Ret     (*SMS_QUERY_STORAGE_REQ)        ( IName * , void *pInst, u8 simModule);  \
    MAE_Ret     (*SMS_SET_PARAM_REQ)        ( IName * , MMI_SMS_SetParamReq_t *pSetParmReq, void *pInst);  \
    MAE_Ret     (*SMS_QUERY_PARAM_REQ)      ( IName * , void *pInst, u8 simModule);  \
    MAE_Ret     (*SMS_SET_RECV_STORAGE_REQ)     ( IName * , MMI_SMS_SetRecvStorageReq_t *pSetRecvStrgReq, void *pInst);  \
    MAE_Ret     (*SMS_SET_CBM_TYPE_REQ)     ( IName * , MMI_SMS_SetCBMTypeReq_t *pSetCBMtpReq, void *pInst);  \
    MAE_Ret     (*SMS_SET_CBMI_REQ)     ( IName * , MMI_CB_SetCBMIReq_t *pSetCbmiReq, void *pInst);  \
    MAE_Ret     (*SMS_ACTIVE_CBMI_REQ)      ( IName * , MMI_CB_ActiveCBMIReq_t *pActiveCbmiReq, void *pInst);  \
    MAE_Ret     (*SMS_QUERY_CBMI_REQ)       ( IName * , void *pInst);  \
    MAE_Ret     (*SMS_ABORT_REQ)        ( IName * , void *pInst, u8 simModule);  \
    MAE_Ret     (*SMS_MT_IND)       ( IName * , MMI_SMS_MTInd_t *pSmInd);  \
    MAE_Ret     (*Register_Notification)        ( IName * , void *pInst, TX_Notify_Mask_e mask);  \
    MAE_Ret     (*Deregister_Notification)      ( IName * , void *pInst, TX_Notify_Mask_e mask);  \
    void        (*SIM_Ready_IND)        ( IName * );  \
    void        (*SIM_IND)      ( IName * , u8 simStatus, u8 simModule, u8 bStkRefresh);  \
    void        (*SIM_Deactivate)       ( IName * , u8 simModule);  \
    MAE_Ret     (*SMS_Set_Store_Me_Index_REQ)       ( IName * , MMI_SMS_SetStoreMeIndexReq_t *pSetStoreMeIndexReq, void *pInst);  \
    MAE_Ret     (*SMS_Set_Capacity_REQ)     ( IName * , MMI_SMS_SetCapacityReq_t *pSetCapacityReq, void *pInst);  \
    MAE_Ret     (*SMS_ACTIVE_RNG_CBMI_REQ)      ( IName * , MMI_CB_ActiveRngCBMIReq_t *pActiveRngCbmiReq, void *pInst);  \
    MAE_Ret     (*SMS_SET_STATUS_REPORT_REQ)        ( IName * , MMI_SMS_SetStatusReportReq_t *pSetStatusReportReq, void *pInst);  \
    void        (*SMS_DeactivateOK)     ( IName * , u8 simModule);  \
    void        (*RetrvSimMsgAbort)     ( IName * , u8 simModule);  \
    MAE_Ret     (*SMS_Set_More_Msg_REQ)     ( IName * , MMI_SMS_SetMoreMsgReq_t *pSetMoreMsgReq, void *pInst);  \
    MAE_Ret     (*RetrvTpduFromBuffer)      ( IName * , u8 *pMsgData, u32 nDataLenBytes, MMI_SMS_MoReq_t **ppTpdu, u8 *pTpduNum);  \
    MAE_Ret     (*SendFromBufferReq)        ( IName * , MMI_SMS_MoReq_t *pTpdu, u8 nTpduNum, u8 nResentPduIdx, u16 nMsgId, u8 nSimModule, void *pInst)

DEFINE_INTERFACE(ITXI);


#define ITXI_QueryInterface(pICntlr, id, pp, po)            GET_FUNCTBL((pICntlr), ITXI)->QueryInterface(pICntlr, id, pp, po)
#define ITXI_HandleEvent(pICntlr, e, p1, p2)                GET_FUNCTBL((pICntlr), ITXI)->HandleEvent(pICntlr, e, p1, p2)
/**
 Sending the message to MRL for AT+CMGS
 */
#define ITXI_SMS_SEND_REQ(pICntlr, p1, p2, p3)  GET_FUNCTBL((pICntlr), ITXI)->SMS_SEND_REQ( pICntlr, p1, p2, p3)
/**
 Read a SMS at a index of a certain storage area
 */
#define ITXI_SMS_READ_REQ(pICntlr, p1, p2, p3, p4, p5)  GET_FUNCTBL((pICntlr), ITXI)->SMS_READ_REQ( pICntlr, p1, p2, p3, p4, p5)
/**
 Stores a message to SIM (either SMS-Submit or SMS-Deliver)
if pMsgData is NULL
    => get the message data from phone message ID, SrcMsgID (Copy phone message to SIM)
else
    => message data buffer. (Store Buffer to SIM)
 */
#define ITXI_SMS_STORE_REQ(pICntlr, p1, p2, p3, p4, p5) GET_FUNCTBL((pICntlr), ITXI)->SMS_STORE_REQ( pICntlr, p1, p2, p3, p4, p5)
/**
 Delete one or several messages frome selected message storage
 */
#define ITXI_SMS_DEL_REQ(pICntlr, p1, p2, p3)   GET_FUNCTBL((pICntlr), ITXI)->SMS_DEL_REQ( pICntlr, p1, p2, p3)
/**
 After using AT+CSCA to set the SCA, MRL should use the AT+CSAS to store the setting into E2P
 */
#define ITXI_SMS_SET_SCA_REQ(pICntlr, p1, p2)   GET_FUNCTBL((pICntlr), ITXI)->SMS_SET_SCA_REQ( pICntlr, p1, p2)
/**
 AT+CSCA?   Get service center address
 */
#define ITXI_SMS_QUERY_SCA_REQ(pICntlr, p1, p2) GET_FUNCTBL((pICntlr), ITXI)->SMS_QUERY_SCA_REQ( pICntlr, p1, p2)
/**
 Mesage status modification: READ<->UNREAD, SENT<->UNSENT
 */
#define ITXI_SMS_MOD_STATUS_REQ(pICntlr, p1, p2, p3)    GET_FUNCTBL((pICntlr), ITXI)->SMS_MOD_STATUS_REQ( pICntlr, p1, p2, p3)
/**
 Query storage status for each kind of storage area
 */
#define ITXI_SMS_QUERY_STORAGE_REQ(pICntlr, p1, p2) GET_FUNCTBL((pICntlr), ITXI)->SMS_QUERY_STORAGE_REQ( pICntlr, p1, p2)
/**
 Set the SMS parameters
 */
#define ITXI_SMS_SET_PARAM_REQ(pICntlr, p1, p2) GET_FUNCTBL((pICntlr), ITXI)->SMS_SET_PARAM_REQ( pICntlr, p1, p2)
/**
 Query the SMS parameters
 */
#define ITXI_SMS_QUERY_PARAM_REQ(pICntlr, p1, p2)   GET_FUNCTBL((pICntlr), ITXI)->SMS_QUERY_PARAM_REQ( pICntlr, p1, p2)
/**
 Set storage status for each kind of storage area
 */
#define ITXI_SMS_SET_RECV_STORAGE_REQ(pICntlr, p1, p2)  GET_FUNCTBL((pICntlr), ITXI)->SMS_SET_RECV_STORAGE_REQ( pICntlr, p1, p2)
/**
 This command selects which types of cell broadcast messages to be received by ME
 */
#define ITXI_SMS_SET_CBM_TYPE_REQ(pICntlr, p1, p2)  GET_FUNCTBL((pICntlr), ITXI)->SMS_SET_CBM_TYPE_REQ( pICntlr, p1, p2)
/**
 save the parameter to EF-CBMI SIM file
 */
#define ITXI_SMS_SET_CBMI_REQ(pICntlr, p1, p2)  GET_FUNCTBL((pICntlr), ITXI)->SMS_SET_CBMI_REQ( pICntlr, p1, p2)
/**
 active the CBMI
 */
#define ITXI_SMS_ACTIVE_CBMI_REQ(pICntlr, p1, p2)   GET_FUNCTBL((pICntlr), ITXI)->SMS_ACTIVE_CBMI_REQ( pICntlr, p1, p2)
/**
 query the parameter from EF-CBMI SIM file
 */
#define ITXI_SMS_QUERY_CBMI_REQ(pICntlr, p1)    GET_FUNCTBL((pICntlr), ITXI)->SMS_QUERY_CBMI_REQ( pICntlr, p1)
/**
 abort related operation
 */
#define ITXI_SMS_ABORT_REQ(pICntlr, p1, p2) GET_FUNCTBL((pICntlr), ITXI)->SMS_ABORT_REQ( pICntlr, p1, p2)
/**
 post TXI_EVT_SmsMtInd and SMS data
 */
#define ITXI_SMS_MT_IND(pICntlr, p1)    GET_FUNCTBL((pICntlr), ITXI)->SMS_MT_IND( pICntlr, p1)
/**
 
 */
#define ITXI_Register_Notification(pICntlr, p1, p2) GET_FUNCTBL((pICntlr), ITXI)->Register_Notification( pICntlr, p1, p2)
/**
 provide the calling function for SIM ready
 */
#define ITXI_Deregister_Notification(pICntlr, p1, p2)   GET_FUNCTBL((pICntlr), ITXI)->Deregister_Notification( pICntlr, p1, p2)
/**
 
 */
#define ITXI_SIM_Ready_IND(pICntlr) GET_FUNCTBL((pICntlr), ITXI)->SIM_Ready_IND( pICntlr)
/**
 SIM ready ind or No SIM ind
 */
#define ITXI_SIM_IND(pICntlr, p1, p2, p3)   GET_FUNCTBL((pICntlr), ITXI)->SIM_IND( pICntlr, p1, p2, p3)
/**
 
 */
#define ITXI_SIM_Deactivate(pICntlr, p1)    GET_FUNCTBL((pICntlr), ITXI)->SIM_Deactivate( pICntlr, p1)
/**
 
 */
#define ITXI_SMS_Set_Store_Me_Index_REQ(pICntlr, p1, p2)    GET_FUNCTBL((pICntlr), ITXI)->SMS_Set_Store_Me_Index_REQ( pICntlr, p1, p2)
/**
 
 */
#define ITXI_SMS_Set_Capacity_REQ(pICntlr, p1, p2)  GET_FUNCTBL((pICntlr), ITXI)->SMS_Set_Capacity_REQ( pICntlr, p1, p2)
/**
 
 */
#define ITXI_SMS_ACTIVE_RNG_CBMI_REQ(pICntlr, p1, p2)   GET_FUNCTBL((pICntlr), ITXI)->SMS_ACTIVE_RNG_CBMI_REQ( pICntlr, p1, p2)
/**
 
 */
#define ITXI_SMS_SET_STATUS_REPORT_REQ(pICntlr, p1, p2) GET_FUNCTBL((pICntlr), ITXI)->SMS_SET_STATUS_REPORT_REQ( pICntlr, p1, p2)
/**
 
 */
#define ITXI_SMS_DeactivateOK(pICntlr, p1)  GET_FUNCTBL((pICntlr), ITXI)->SMS_DeactivateOK( pICntlr, p1)
/**
 
 */
#define ITXI_RetrvSimMsgAbort(pICntlr, p1)  GET_FUNCTBL((pICntlr), ITXI)->RetrvSimMsgAbort( pICntlr, p1)
/**
 
 */
#define ITXI_SMS_Set_More_Msg_REQ(pICntlr, p1, p2)  GET_FUNCTBL((pICntlr), ITXI)->SMS_Set_More_Msg_REQ( pICntlr, p1, p2)
/**

 */
#define ITXI_RetrvTpduFromBuffer(pICntlr, p1, p2, p3, p4)  GET_FUNCTBL((pICntlr), ITXI)->RetrvTpduFromBuffer( pICntlr, p1, p2, p3, p4)
/**

 */
#define ITXI_SendFromBufferReq(pICntlr, p1, p2, p3, p4, p5, p6)  GET_FUNCTBL((pICntlr), ITXI)->SendFromBufferReq( pICntlr, p1, p2, p3, p4, p5, p6)

/**
 * Functions
 */

void TXI_Init(void);

__SLDPM_FREE__ MAE_Ret TXI_New(MAE_ClsId id, void **ppObj);

/*-------------------------------------------------------------------------*/
#endif /* __MMI_SMSTRANSACTIONSRV_H__ */
