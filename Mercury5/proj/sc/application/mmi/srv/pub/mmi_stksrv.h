/**
* @file mmi_stksrv.h
*
* Service without using State Machine - STKSRV
* Generated by XFSM v1.0, CodeVer=v0.24 
*
* Class Id: CLSID_STKSRV
* Interface Id: IID_STKSRV
*
* @version $Id: mmi_stksrv.h 33461 2009-06-16 08:06:40Z mark.yang $
*/
#ifndef __MMI_STKSRV_H__
#define __MMI_STKSRV_H__

/*-------------------------------------------------------------------------*/

#include "mmi_mae_common_def.h"
#include "mmi_mae_applet.h"
#include "mmi_mae_class.h"
#include "mmi_stksrv_def.h"

/*-------------------------------------------------------------------------*/

/**
* External Events
*/
#define STKSRV_EVT_SetupMenuInd             (CLSID_STKSRV << 16 | 1)
#define STKSRV_EVT_DisplayTextInd               (CLSID_STKSRV << 16 | 2)
#define STKSRV_EVT_GetInkeyInd              (CLSID_STKSRV << 16 | 3)
#define STKSRV_EVT_GetInputInd              (CLSID_STKSRV << 16 | 4)
#define STKSRV_EVT_SetupCallInd             (CLSID_STKSRV << 16 | 5)
#define STKSRV_EVT_PlayToneInd              (CLSID_STKSRV << 16 | 6)
#define STKSRV_EVT_SelectItemInd                (CLSID_STKSRV << 16 | 7)
#define STKSRV_EVT_RefreshInd               (CLSID_STKSRV << 16 | 8)
#define STKSRV_EVT_SendSSInd                (CLSID_STKSRV << 16 | 9)
#define STKSRV_EVT_SendSMSInd               (CLSID_STKSRV << 16 | 10)
#define STKSRV_EVT_SendUSSDInd              (CLSID_STKSRV << 16 | 11)
#define STKSRV_EVT_SetupEventListInd                (CLSID_STKSRV << 16 | 12)
#define STKSRV_EVT_SetupIdleTextInd             (CLSID_STKSRV << 16 | 13)
#define STKSRV_EVT_SendDTMFInd              (CLSID_STKSRV << 16 | 14)
#define STKSRV_EVT_LangNotificationInd              (CLSID_STKSRV << 16 | 15)
#define STKSRV_EVT_LaunchBrowserInd              (CLSID_STKSRV << 16 | 16)
#define STKSRV_EVT_ErrorInd             (CLSID_STKSRV << 16 | 17)


/**
* ISTKSRV Interfaces
*/
#define INHERIT_ISTKSRV(IName) \
	INHERIT_IHandler(IName); \
	MAE_Ret     (*RegisterNotification)     ( IName * , void *pInstance, STKSRV_NOTIFY_MASK_e mask);  \
	MAE_Ret     (*DeRegisterNotification)       ( IName * , void *pInstance, STKSRV_NOTIFY_MASK_e mask);  \
	void        (*SetStkAppPointer)     ( IName * , u8 u8ModuleID, void* pStkApp);  \
	MAE_Ret     (*MenuSelectionReq)     ( IName * , u8 u8ModuleID, u8 u8MenuItem);  \
	MAE_Ret     (*SelectItemRsp)        ( IName * , u8 u8ModuleID, STKSRV_RSP_RSLT_e rslt, u8 u8MenuItem);  \
	MAE_Ret     (*DisplayTextRsp)       ( IName * , u8 u8ModuleID, STKSRV_RSP_RSLT_e rslt);  \
    MAE_Ret     (*LaunchBrowserRsp)     ( IName * , u8 u8ModuleID, STKSRV_RSP_RSLT_e rslt);  \
	MAE_Ret     (*GetInkeyRsp)      ( IName * , u8 u8ModuleID, STKSRV_RSP_RSLT_e rslt, MAE_WChar* rsltString);  \
	MAE_Ret     (*GetInputRsp)      ( IName * , u8 u8ModuleID, STKSRV_RSP_RSLT_e rslt, MAE_WChar* rsltString);  \
	MAE_Ret     (*SetupCallRsp)     ( IName * , u8 u8ModuleID, STKSRV_RSP_RSLT_e rslt);  \
	MAE_Ret     (*PlayToneRsp)      ( IName * , u8 u8ModuleID, STKSRV_RSP_RSLT_e rslt);  \
	MAE_Ret     (*SetLanguageReq)      ( IName * , MAE_LANG_CODE_e maeLangCode);  \
	STKSRV_SetupMenu_t *        (*GetMainMenuPointer)       ( IName * , u8 u8ModuleID);  \
	STKSRV_CommandType_e        (*GetIndicationType)        ( IName * , u8 u8ModuleID);  \
	STKSRV_Ind_t *      (*GetIndicationData)        ( IName * , u8 u8ModuleID);  \
	MAE_WChar *     (*GetIdleTextString)        ( IName * , u8 u8ModuleID);  \
	MAE_WChar *     (*GetMainMenuTitle)     ( IName * , u8 u8ModuleID);  \
	void        (*MSFinishStartupCB)        ( IName * )

DEFINE_INTERFACE(ISTKSRV);


#define ISTKSRV_QueryInterface(pICntlr, id, pp, po)         GET_FUNCTBL((pICntlr), ISTKSRV)->QueryInterface(pICntlr, id, pp, po)
#define ISTKSRV_HandleEvent(pICntlr, e, p1, p2)             GET_FUNCTBL((pICntlr), ISTKSRV)->HandleEvent(pICntlr, e, p1, p2)
/**
Description: Let other APP/SRV to register interesting notifier event.

Param: mask: Notifier event mask
Return: MAE_RET_SUCCESS: If successful.
Return: MAE_RET_FAILED: If unsuccessful.
*/
#define ISTKSRV_RegisterNotification(pICntlr, p1, p2)   GET_FUNCTBL((pICntlr), ISTKSRV)->RegisterNotification( pICntlr, p1, p2)
/**
Description: Let other APP/SRV to de-register notifier.

Return: MAE_RET_SUCCESS: If successful.
Return: MAE_RET_FAILED: If unsuccessful.
*/
#define ISTKSRV_DeRegisterNotification(pICntlr, p1, p2) GET_FUNCTBL((pICntlr), ISTKSRV)->DeRegisterNotification( pICntlr, p1, p2)
/**
Description: To Notify if StkApp exist or not

Param: u8ModuleID: Master or Slave SIM
Param: pStkApp: pointer of STK Application
Return: MAE_RET_SUCCESS: If successful.
Return: MAE_RET_FAILED: If unsuccessful.
*/
#define ISTKSRV_SetStkAppPointer(pICntlr, p1, p2)   GET_FUNCTBL((pICntlr), ISTKSRV)->SetStkAppPointer( pICntlr, p1, p2)
/**
Description: Send Menu Selection Request to RIL.

Param: u8ModuleID: Master or Slave SIM
Param: u8MenuItem: User selected menu item
Return: MAE_RET_SUCCESS: If successful.
Return: MAE_RET_FAILED: If unsuccessful.
*/
#define ISTKSRV_MenuSelectionReq(pICntlr, p1, p2)   GET_FUNCTBL((pICntlr), ISTKSRV)->MenuSelectionReq( pICntlr, p1, p2)
/**
Description: Send Select Item Respond to RIL.

Param: u8ModuleID: Master or Slave SIM
Param: rslt: User respond type
Param: u8MenuItem: User selected menu item
Return: MAE_RET_SUCCESS: If successful.
Return: MAE_RET_FAILED: If unsuccessful.
*/
#define ISTKSRV_SelectItemRsp(pICntlr, p1, p2, p3)  GET_FUNCTBL((pICntlr), ISTKSRV)->SelectItemRsp( pICntlr, p1, p2, p3)
/**
Description: Send Display Text Respond to RIL.

Param: u8ModuleID: Master or Slave SIM
Param: rslt: User respond type
Return: MAE_RET_SUCCESS: If successful.
Return: MAE_RET_FAILED: If unsuccessful.
*/
#define ISTKSRV_DisplayTextRsp(pICntlr, p1, p2) GET_FUNCTBL((pICntlr), ISTKSRV)->DisplayTextRsp( pICntlr, p1, p2)
/**
Description: Send Launch Browser Respond to RIL.

Param: u8ModuleID: Master or Slave SIM
Param: rslt: User respond type
Return: MAE_RET_SUCCESS: If successful.
Return: MAE_RET_FAILED: If unsuccessful.
*/
#define ISTKSRV_LaunchBrowserRsp(pICntlr, p1, p2) GET_FUNCTBL((pICntlr), ISTKSRV)->LaunchBrowserRsp( pICntlr, p1, p2)

/**
Description: Send Get Inkey Respond to RIL.

Param: u8ModuleID: Master or Slave SIM
Param: rslt: User respond type
Param: rsltString: User input string
Return: MAE_RET_SUCCESS: If successful.
Return: MAE_RET_FAILED: If unsuccessful.
*/
#define ISTKSRV_GetInkeyRsp(pICntlr, p1, p2, p3)    GET_FUNCTBL((pICntlr), ISTKSRV)->GetInkeyRsp( pICntlr, p1, p2, p3)
/**
Description: Send Get Input Respond to RIL.

Param: u8ModuleID: Master or Slave SIM
Param: rslt: User respond type
Param: rsltString: User input string
Return: MAE_RET_SUCCESS: If successful.
Return: MAE_RET_FAILED: If unsuccessful.
*/
#define ISTKSRV_GetInputRsp(pICntlr, p1, p2, p3)    GET_FUNCTBL((pICntlr), ISTKSRV)->GetInputRsp( pICntlr, p1, p2, p3)
/**
Description: Send Setup Call Respond to RIL.

Param: u8ModuleID: Master or Slave SIM
Param: rslt: User respond type
Return: MAE_RET_SUCCESS: If successful.
Return: MAE_RET_FAILED: If unsuccessful.
*/
#define ISTKSRV_SetupCallRsp(pICntlr, p1, p2)   GET_FUNCTBL((pICntlr), ISTKSRV)->SetupCallRsp( pICntlr, p1, p2)
/**
Description: Send Play Tone Respond to RIL.

Param: u8ModuleID: Master or Slave SIM
Param: rslt: User respond type
Return: MAE_RET_SUCCESS: If successful.
Return: MAE_RET_FAILED: If unsuccessful.
*/
#define ISTKSRV_PlayToneRsp(pICntlr, p1, p2)    GET_FUNCTBL((pICntlr), ISTKSRV)->PlayToneRsp( pICntlr, p1, p2)
/**
Description: Send Set Language Request to RIL.

Param: MAE_LANG_CODE_e maeLangCode
Return: MAE_RET_SUCCESS: If successful.
Return: MAE_RET_FAILED: If unsuccessful.
*/
#define ISTKSRV_SetLanguageReq(pICntlr, p1)    GET_FUNCTBL((pICntlr), ISTKSRV)->SetLanguageReq( pICntlr, p1)

/**
Description: Get STK main Menu Data pointer.

Param: u8ModuleID: Master or Slave SIM
Return: STK main Menu Data pointer.
*/
#define ISTKSRV_GetMainMenuPointer(pICntlr, p1) GET_FUNCTBL((pICntlr), ISTKSRV)->GetMainMenuPointer( pICntlr, p1)
/**
Description: Get STK Indication Data type.

Param: u8ModuleID: Master or Slave SIM
Return: STK Indication Data type.
*/
#define ISTKSRV_GetIndicationType(pICntlr, p1)  GET_FUNCTBL((pICntlr), ISTKSRV)->GetIndicationType( pICntlr, p1)
/**
Description: Get STK Indication Data pointer.

Param: u8ModuleID: Master or Slave SIM
Return: STK Indication Data pointer.
*/
#define ISTKSRV_GetIndicationData(pICntlr, p1)  GET_FUNCTBL((pICntlr), ISTKSRV)->GetIndicationData( pICntlr, p1)
/**
Description: Get STK Idle text.

Param: u8ModuleID: Master or Slave SIM
Return: STK Idle text.
*/
#define ISTKSRV_GetIdleTextString(pICntlr, p1)  GET_FUNCTBL((pICntlr), ISTKSRV)->GetIdleTextString( pICntlr, p1)
/**
Description: Get STK main menu title string.

Param: u8ModuleID: Master or Slave SIM
Return: STK main menu title string.
*/
#define ISTKSRV_GetMainMenuTitle(pICntlr, p1)   GET_FUNCTBL((pICntlr), ISTKSRV)->GetMainMenuTitle( pICntlr, p1)
/**
when onapp stop , will call the function to do
re malloc setup menu memory , avoid heap memory fragment
*/
#define ISTKSRV_MSFinishStartupCB(pICntlr)  GET_FUNCTBL((pICntlr), ISTKSRV)->MSFinishStartupCB( pICntlr)



/**
* Functions
*/

void STKSRV_Init(void);

__SLDPM_FREE__ MAE_Ret STKSRV_New(MAE_ClsId id, void **ppObj);

/*-------------------------------------------------------------------------*/
#endif /* __MMI_STKSRV_H__ */
