/**
* @file mmi_sssrv.h
*
* State Machine Service - SSSRV
* Generated by XFSM v1.0, CodeVer=v0.24
*
* Class Id: CLSID_SSSRV
*
*
* @version $Id: mmi_sssrv.h 33461 2009-06-16 08:06:40Z mark.yang $
*/
#ifndef __MMI_SSSRV_H__
#define __MMI_SSSRV_H__

#include "mmi_mae_common_def.h"
#include "mmi_mae_applet.h"
#include "mmi_mae_class.h"
#include "mmi_sssrv_def.h"

#ifdef __SS_TEST__

#define SSSRV_DELAY_TIMER       1000
#define SSSRV_NETWORK_NOT_TIMER 10000

#endif

#define SSSRV_NETWORK_TIMEOUT_TIMER 30000


/**
 * External Events
 */
#define SSSRV_EVT_CFXReq                (CLSID_SSSRV << 16 | 1)
#define SSSRV_EVT_CFXCnf                (CLSID_SSSRV << 16 | 2)
#define SSSRV_EVT_CBXReq                (CLSID_SSSRV << 16 | 3)
#define SSSRV_EVT_CBXCnf                (CLSID_SSSRV << 16 | 4)
#define SSSRV_EVT_CWXReq                (CLSID_SSSRV << 16 | 5)
#define SSSRV_EVT_CWXCnf                (CLSID_SSSRV << 16 | 6)
#define SSSRV_EVT_CLXReq                (CLSID_SSSRV << 16 | 7)
#define SSSRV_EVT_CLXCnf                (CLSID_SSSRV << 16 | 8)
#define SSSRV_EVT_USSDReq               (CLSID_SSSRV << 16 | 9)
#define SSSRV_EVT_USSDCnf               (CLSID_SSSRV << 16 | 10)
#define SSSRV_EVT_USSDInd               (CLSID_SSSRV << 16 | 11)
#define SSSRV_EVT_USSDErr               (CLSID_SSSRV << 16 | 12)
#define SSSRV_EVT_USSDNot               (CLSID_SSSRV << 16 | 13)
#define SSSRV_EVT_USSDRel               (CLSID_SSSRV << 16 | 14)
#define SSSRV_EVT_PWDReq                (CLSID_SSSRV << 16 | 15)
#define SSSRV_EVT_PWDCnf                (CLSID_SSSRV << 16 | 16)
#define SSSRV_EVT_CSSI_Not              (CLSID_SSSRV << 16 | 17)
#define SSSRV_EVT_CheckWaitingQueue             (CLSID_SSSRV << 16 | 18)
#define SSSRV_EVT_SetCUGReq             (CLSID_SSSRV << 16 | 19)
#define SSSRV_EVT_SetCUGCnf             (CLSID_SSSRV << 16 | 20)
#define SSSRV_EVT_QueCUGReq             (CLSID_SSSRV << 16 | 21)
#define SSSRV_EVT_QueCUGCnf             (CLSID_SSSRV << 16 | 22)
#define SSSRV_EVT_SetAOCReq             (CLSID_SSSRV << 16 | 23)
#define SSSRV_EVT_SetAOCCnf             (CLSID_SSSRV << 16 | 24)
#define SSSRV_EVT_QueAOCReq             (CLSID_SSSRV << 16 | 25)
#define SSSRV_EVT_QueAOCCnf             (CLSID_SSSRV << 16 | 26)
#define SSSRV_EVT_ACMReq                (CLSID_SSSRV << 16 | 27)
#define SSSRV_EVT_ACMCnf                (CLSID_SSSRV << 16 | 28)
#define SSSRV_EVT_AMMReq                (CLSID_SSSRV << 16 | 29)
#define SSSRV_EVT_AMMCnf                (CLSID_SSSRV << 16 | 30)
#define SSSRV_EVT_PUCReq                (CLSID_SSSRV << 16 | 31)
#define SSSRV_EVT_PUCCnf                (CLSID_SSSRV << 16 | 32)


/**
 * ISSSRV Interfaces
 */
#define INHERIT_ISSSRV(IName) \
    INHERIT_IHandler(IName); \
    MMI_SSSRV_Status_e      (*GetSSServiceStatus)       ( IName * );  \
    MAE_Ret     (*CallDivertReq)        ( IName * , void* pCaller, SSSRV_CallDivertReq_t *pReqData, u8 u8DualID);  \
    MAE_Ret     (*CallBarringReq)       ( IName * , void* pCaller, SSSRV_CallBarringReq_t *pReqData, u8 u8DualID);  \
    MAE_Ret     (*ChangeBarringPwdReq)      ( IName * , void* pCaller, SSSRV_ChangeBarringPwdReq_t *pReqData, u8 u8DualID);  \
    MAE_Ret     (*CallWaitingReq)       ( IName * , void* pCaller, SSSRV_CallWaitingReq_t *pReqData, u8 u8DualID);  \
    MAE_Ret     (*USSDReq)      ( IName * , void* pCaller, SSSRV_USSDReq_t *pReqData, u8 u8DualID);  \
    MAE_Ret     (*USSDCancelReq)        ( IName * , void* pCaller, u8 u8DualID);  \
    MAE_Ret     (*SetUserGroupReq)      ( IName * , void* pCaller, SSSRV_UserGroupReq_t *pReqData, u8 u8DualID);  \
    MAE_Ret     (*QueryUserGroupReq)        ( IName * , void* pCaller, u8 u8DualID);  \
    MAE_Ret     (*SetAoCReq)        ( IName * , void* pCaller, MMI_SSSRV_AOC_ReqType_e  eReqType, u8 u8DualID);  \
    MAE_Ret     (*QueryAoCReq)      ( IName * , void* pCaller, u8 u8DualID);  \
    MAE_Ret     (*ACMReq)       ( IName * , void* pCaller, SSSRV_ACMReq_t *pReqData, u8 u8DualID);  \
    MAE_Ret     (*ACMMaxReq)        ( IName * , void* pCaller, SSSRV_ACMMaxReq_t *pReqData, u8 u8DualID);  \
    MAE_Ret     (*PUCReq)       ( IName * , void* pCaller, SSSRV_PUCReq_t *pReqData, u8 u8DualID);  \
    MAE_Ret     (*ActionCancelReq)      ( IName * , void* pCaller, SSSRV_REQUEST_TYPE_e    eReqType);  \
    MAE_Ret     (*LineIdentityQueryReq)     ( IName * , void* pCaller, MMI_SSSRV_CI_ReqType_e eCIType, u8 u8DualID)

DEFINE_INTERFACE(ISSSRV);


#define ISSSRV_QueryInterface(pICntlr, id, pp, po)          GET_FUNCTBL((pICntlr), ISSSRV)->QueryInterface(pICntlr, id, pp, po)
#define ISSSRV_HandleEvent(pICntlr, e, p1, p2)              GET_FUNCTBL((pICntlr), ISSSRV)->HandleEvent(pICntlr, e, p1, p2)
/**
 Purpose: The external interface is provided to get SS Service status
Parameter: None
Return: MMI_SSSRV_Status_e

 */
#define ISSSRV_GetSSServiceStatus(pICntlr)  GET_FUNCTBL((pICntlr), ISSSRV)->GetSSServiceStatus( pICntlr)
/**
 Purpose: The external interface is provided to activate, deactivate, query and erase call divert setting.
Parameter:
<pCaller>: the caller instance ID.
<pRegData>: call divert request data.
<u8DualID>: DualSIM ID.
Return: MAE_Ret

 */
#define ISSSRV_CallDivertReq(pICntlr, p1, p2, p3)   GET_FUNCTBL((pICntlr), ISSSRV)->CallDivertReq( pICntlr, p1, p2, p3)
/**
 Purpose: The external interface is provided to change call barring setting.
Parameter:
<pCaller>: the caller instance ID.
<pRegData>: change barring request data.
<u8DualID>: DualSIM ID.
Return: MAE_Ret

 */
#define ISSSRV_CallBarringReq(pICntlr, p1, p2, p3)  GET_FUNCTBL((pICntlr), ISSSRV)->CallBarringReq( pICntlr, p1, p2, p3)
/**
 Purpose: The external interface is provided to change barring network code.
Parameter:
<pCaller>: the caller instance ID.
<pRegData>: change barring password request data.
<u8DualID>: DualSIM ID.
Return: MAE_Ret

 */
#define ISSSRV_ChangeBarringPwdReq(pICntlr, p1, p2, p3) GET_FUNCTBL((pICntlr), ISSSRV)->ChangeBarringPwdReq( pICntlr, p1, p2, p3)
/**
 Purpose: The external interface is provided to change call waiting setting.
Parameter:
<pCaller>: the caller instance ID.
<pRegData>: call waiting request data.
<u8DualID>: DualSIM ID.
Return: MAE_Ret

 */
#define ISSSRV_CallWaitingReq(pICntlr, p1, p2, p3)  GET_FUNCTBL((pICntlr), ISSSRV)->CallWaitingReq( pICntlr, p1, p2, p3)
/**
 Purpose: The external interface is provided to send a USSD string to network.
Parameter:
<pCaller>: the caller instance ID.
<pRegData>: USSD request data.
Return: MAE_Ret

 */
#define ISSSRV_USSDReq(pICntlr, p1, p2, p3) GET_FUNCTBL((pICntlr), ISSSRV)->USSDReq( pICntlr, p1, p2, p3)
/**
 Purpose: The external interface is provided to cancle current USSD request.
Parameter:
<pCaller>: the caller instance ID.
<u8DualID>: DualSIM ID.
Return: MAE_Ret

 */
#define ISSSRV_USSDCancelReq(pICntlr, p1, p2)   GET_FUNCTBL((pICntlr), ISSSRV)->USSDCancelReq( pICntlr, p1, p2)
/**
 Purpose: The external interface is provided to set closed user group.
Parameter: <pRegData>: user group request data.
<u8DualID>: DualSIM ID.
Return: MAE_Ret

 */
#define ISSSRV_SetUserGroupReq(pICntlr, p1, p2, p3) GET_FUNCTBL((pICntlr), ISSSRV)->SetUserGroupReq( pICntlr, p1, p2, p3)
/**
 Purpose: The external interface is provided to query closed user group info.
Parameter:
<u8DualID>: DualSIM ID.
Return: MAE_Ret

 */
#define ISSSRV_QueryUserGroupReq(pICntlr, p1, p2)   GET_FUNCTBL((pICntlr), ISSSRV)->QueryUserGroupReq( pICntlr, p1, p2)
/**
 Purpose: The external interface is provided to set AoC information.
Parameter: <eRegType>: requested operation.
<u8DualID>: DualSIM ID.
Return: MAE_Ret

 */
#define ISSSRV_SetAoCReq(pICntlr, p1, p2, p3)   GET_FUNCTBL((pICntlr), ISSSRV)->SetAoCReq( pICntlr, p1, p2, p3)
/**
 Purpose: The external interface is provided to query current AoC setting.
Parameter:
<u8DualID>: DualSIM ID.
Return: MAE_Ret

 */
#define ISSSRV_QueryAoCReq(pICntlr, p1, p2) GET_FUNCTBL((pICntlr), ISSSRV)->QueryAoCReq( pICntlr, p1, p2)
/**
 Purpose: The external interface is provided to set and query the Advice Of Charge for Accumulated Call Meter (ACM) value in SIM file.
Parameter: <pRegData>: ACM request data.
<u8DualID>: DualSIM ID.
Return: MAE_Ret

 */
#define ISSSRV_ACMReq(pICntlr, p1, p2, p3)  GET_FUNCTBL((pICntlr), ISSSRV)->ACMReq( pICntlr, p1, p2, p3)
/**
 Purpose: The external interface is provided to set and query the Advice Of Charge related to Accumulated Call Meter maximum value in SIM file.
Parameter: <pRegData>: ACMMax request data.
<u8DualID>: DualSIM ID.
Return: MAE_Ret

 */
#define ISSSRV_ACMMaxReq(pICntlr, p1, p2, p3)   GET_FUNCTBL((pICntlr), ISSSRV)->ACMMaxReq( pICntlr, p1, p2, p3)
/**
 Purpose: The external interface is provided to set and query price per unit and currency setting in SIM file.
Parameter: <pRegData>: PUC request data.
<u8DualID>: DualSIM ID.
Return: MAE_Ret

 */
#define ISSSRV_PUCReq(pICntlr, p1, p2, p3)  GET_FUNCTBL((pICntlr), ISSSRV)->PUCReq( pICntlr, p1, p2, p3)
/**

 */
#define ISSSRV_ActionCancelReq(pICntlr, p1, p2) GET_FUNCTBL((pICntlr), ISSSRV)->ActionCancelReq( pICntlr, p1, p2)
/**

 */
#define ISSSRV_LineIdentityQueryReq(pICntlr, p1, p2, p3)    GET_FUNCTBL((pICntlr), ISSSRV)->LineIdentityQueryReq( pICntlr, p1, p2, p3)



/**
 * Functions
 */

void SSSRV_Init(void);

MAE_Ret SSSRV_New(MAE_ClsId id, void **ppObj);

#endif /* __MMI_SSSRV_H__ */
