/**
* @file mmi_moi.h
*
* Service without using State Machine - MOI
* Generated by XFSM v1.0, CodeVer=v0.24
*
* Class Id: CLSID_MOI
* Interface Id: IID_MOI
*
* @version $Id: mmi_moi.h 33461 2009-06-16 08:06:40Z mark.yang $
*/
#ifndef __MMI_MESSAGEORGANIZATIONSRV_H__
#define __MMI_MESSAGEORGANIZATIONSRV_H__

/*-------------------------------------------------------------------------*/

#include "mmi_mae_common_def.h"
#include "mmi_mae_applet.h"
#include "mmi_mae_class.h"
#include "mmi_mae_vectormodel.h"
#include "mmi_mae_notifier.h"
#include "mmi_common_sms_master.h"
#include "mmi_if_sms.h"
#include "mmi_common_sms.h"


#define MOI_SMS_SIZE_MAX (175*9)
#define MOI_SMS_PDU_SIZE_MAX (175)
#define MCA_MSG_BLACKLIST_SUPPORT_MAX   20  
#define SECAPP_BLACKLIST_KEYWORD_LENGTH	30

typedef enum
{
    MOI_Notify_Mask_SmsInd = 0x000001
   ,/*for msg ind notify*/
    MOI_Notify_Mask_CbInd = 0x000002
   ,MOI_Notify_Mask_SrInd = 0x000004
   ,MOI_Notify_Mask_WapPushInd = 0x000008
   ,MOI_Notify_Mask_RetrvSimMsgOK = 0x000010
} MOI_Notify_Mask_e;

typedef struct
{
    u8 SimModule;
    u8 PduData[MOI_SMS_SIZE_MAX];
    u8 DataLength;
    u8 bClass0;
    MMI_SMS_Status_e Status;
    s16 Index;
    boolean bSim;
} MOI_SmsInd_t;

typedef struct
{
    u8 PduData[MOI_SMS_PDU_SIZE_MAX];
    u8 DataLength;
    u8 simModule;
} MOI_CbInd_t;

typedef struct
{
    u8 SimModule;
    u8 PduData[MOI_SMS_PDU_SIZE_MAX];
    u8 DataLength;
} MOI_SrInd_t;

typedef struct
{
    u16 *pduData;
    u16 nChannel;
    u8 simModule;
} MOI_CbData_t;

/*-------------------------------------------------------------------------*/

/**
 * External Events
 */
#define MOI_EVT_SmsInd              (CLSID_MOI << 16 | 1)
#define MOI_EVT_CbInd               (CLSID_MOI << 16 | 2)
#define MOI_EVT_SrInd               (CLSID_MOI << 16 | 3)
#define MOI_EVT_WapPushInd              (CLSID_MOI << 16 | 4)
#define MOI_EVT_RetrvSimMsgOK               (CLSID_MOI << 16 | 5)
#define MOI_EVT_PortSmsInd              (CLSID_MOI << 16 | 6)
#define MOI_EVT_TelNoSmsInd             (CLSID_MOI << 16 | 7)
#ifdef __SXMENGINE__
#define MOI_EVT_VideoChatInd				(CLSID_MOI << 16 | 8)
#endif

/**
 * IMOI Interfaces
 */
#define INHERIT_IMOI(IName) \
    INHERIT_IHandler(IName); \
    MAE_Ret     (*SMS_MT_IND)       ( IName * , MOI_SmsInd_t *pSmInd);  \
    void        (*SMS_CB_IND)       ( IName * , MOI_CbInd_t *pCbInd);  \
    void        (*SMS_SR_IND)       ( IName * , MOI_SrInd_t *pSrInd);  \
    MAE_Ret     (*SMS_WapPush_IND)      ( IName * , MOI_SmsInd_t *pWapPushInd);  \
    MAE_Ret     (*Register_Notification)        ( IName * , void *pinst, MOI_Notify_Mask_e mask);  \
    MAE_Ret     (*Deregister_Notification)      ( IName * , void *pinst, MOI_Notify_Mask_e mask);  \
    MAE_Ret     (*SMS_PortMT_IND)       ( IName * , MOI_SmsInd_t* pSmInd, u16 port);  \
    MAE_Ret     (*RetrvWapPushData)     ( IName * , SMI_MsgHdr_t* pSmHdr, u8* pWapPushCnt, u32* pWapPushCntLen);  \
    MAE_Ret     (*AddSMS)       ( IName * , MOI_SmsInd_t * pSmInd, boolean bCheckExitPackage, SMI_MsgLocation_e * pMsgLoc, SMI_MsgID_t * pMsgId);  \
    MAE_Ret     (*AppendSMS)        ( IName * , MOI_SmsInd_t * pSmInd, SMI_MsgLocation_e MsgLoc, SMI_MsgID_t MsgId)

DEFINE_INTERFACE(IMOI);


#define IMOI_QueryInterface(pICntlr, id, pp, po)            GET_FUNCTBL((pICntlr), IMOI)->QueryInterface(pICntlr, id, pp, po)
#define IMOI_HandleEvent(pICntlr, e, p1, p2)                GET_FUNCTBL((pICntlr), IMOI)->HandleEvent(pICntlr, e, p1, p2)
/**
 post the sms indication and complete data
post MOI_EVT_SmsInd and data "MOI_SmsInd_t"
 */
#define IMOI_SMS_MT_IND(pICntlr, p1)    GET_FUNCTBL((pICntlr), IMOI)->SMS_MT_IND( pICntlr, p1)
/**
 post the cb indication and data
post MOI_EVT_CbInd and data "MOI_CbInd_t"
 */
#define IMOI_SMS_CB_IND(pICntlr, p1)    GET_FUNCTBL((pICntlr), IMOI)->SMS_CB_IND( pICntlr, p1)
/**
 post the sms status report indication and data
post MOI_EVT_SrInd and data "MOI_SrInd_t"
 */
#define IMOI_SMS_SR_IND(pICntlr, p1)    GET_FUNCTBL((pICntlr), IMOI)->SMS_SR_IND( pICntlr, p1)
/**
 post the WAP Push indication and complete data
post MOI_EVT_WapPushInd
 */
#define IMOI_SMS_WapPush_IND(pICntlr, p1)   GET_FUNCTBL((pICntlr), IMOI)->SMS_WapPush_IND( pICntlr, p1)
/**

 */
#define IMOI_Register_Notification(pICntlr, p1, p2) GET_FUNCTBL((pICntlr), IMOI)->Register_Notification( pICntlr, p1, p2)
/**

 */
#define IMOI_Deregister_Notification(pICntlr, p1, p2)   GET_FUNCTBL((pICntlr), IMOI)->Deregister_Notification( pICntlr, p1, p2)
/**
 port message indication
 */
#define IMOI_SMS_PortMT_IND(pICntlr, p1, p2)    GET_FUNCTBL((pICntlr), IMOI)->SMS_PortMT_IND( pICntlr, p1, p2)
/**
 Retrieve the WAP push data for CD Kernel
 */
#define IMOI_RetrvWapPushData(pICntlr, p1, p2, p3)  GET_FUNCTBL((pICntlr), IMOI)->RetrvWapPushData( pICntlr, p1, p2, p3)
/**
 Add a SMS.
@param[in]bCheckExitPackage
    TRUE: Need to check if exit other package of the same message in the same location
    FALSE: Don't need to check. Using a new message id.
@param[out]pMsgLoc    message location
@param[out]pMsgId    message Id
 */
#define IMOI_AddSMS(pICntlr, p1, p2, p3, p4)    GET_FUNCTBL((pICntlr), IMOI)->AddSMS( pICntlr, p1, p2, p3, p4)
/**
 Append the concatenate package to the message raw data
 */
#define IMOI_AppendSMS(pICntlr, p1, p2, p3) GET_FUNCTBL((pICntlr), IMOI)->AppendSMS( pICntlr, p1, p2, p3)



/**
 * Functions
 */

void MOI_Init(void);

__SLDPM_FREE__ MAE_Ret MOI_New(MAE_ClsId id, void **ppObj);

/*-------------------------------------------------------------------------*/
#endif /* __MMI_MESSAGEORGANIZATIONSRV_H__ */
