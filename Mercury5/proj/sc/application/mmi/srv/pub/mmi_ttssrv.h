/**
* @file mmi_ttssrv.h
*
* Service without using State Machine - TTSSRV
* Generated by XFSM v1.0, CodeVer=v0.24
*
* Class Id: CLSID_TTSSRV
* Interface Id: IID_TTSSRV
*
* @version $Id: mmi_ttssrv.h $
*/
#ifndef __MMI_TTSSRV_H__
#define __MMI_TTSSRV_H__

#include "mmi_mae_common_def.h"
#include "mmi_mae_applet.h"
#include "mmi_mae_class.h"

#define __FEATURE__LOCK_UNLOCK__ /// the feature only for gax workaround
#define __FEATURE__LOCK_UNLOCK_ALWAYS_SUCCESS__ /// the feature only for gax workaround

//Notify event (check if need)
#define TTSSRV_EVT_1                    (CLSID_TTSSRV <<16  | 1)

//Enum and Data Structure define

typedef void* TTSHdl_t;

#define INHERIT_ITTSSRV(IName) \
    INHERIT_IHandler(IName)

DEFINE_INTERFACE(ITTSSRV);

typedef enum TTSSRV_HANDLEEVENT_TAG
{
    TTSSRV_HandleEvent_NoParam = 0X00,
    TTSSRV_HandleEvent_PlaySuccess,
	TTSSRV_HandleEvent_PlayFail,
	TTSSRV_HandleEvent_StopSuccess,
	TTSSRV_HandleEvent_StopFail,
	TTSSRV_HandleEvent_Suspend,
    TTSSRV_HandleEvent_FailDueToLock,
	TTSSRV_HandleEvent_FailDueToAudResInterrupt,
	TTSSRV_HandleEvent_PlayEnd,
	TTSSRV_HandleEvent_Num,
}TTSSRV_HANDLE_EVENT_e;

typedef enum TTSSRV_HANDLESTATUS_TAG
{
	TTSSRV_HandleStatus_Idle = 0X00,  
	TTSSRV_HandleStatus_Playing,
	TTSSRV_HandleStatus_Num,
}TTSSRV_HANDLESTATUS_e;

typedef enum TTSSRV_ATTR_READDIGIT_TAG
{
	TTSSRV_Attr_ReadDigit_NonChanged = 0X00, /// don't change the initial value zero
    TTSSRV_Attr_ReadDigit_Auto,
	TTSSRV_Attr_ReadDigit_AsNumber,
	TTSSRV_Attr_ReadDigit_AsValue,
	TTSSRV_Attr_ReadDigit_Last,
    TTSSRV_Attr_ReadDigit_Num = TTSSRV_Attr_ReadDigit_Last,
}TTSSRV_ATTR_READDIGIT_e;

typedef enum TTSSRV_ATTR_CHINESENUMONE_TAG
{
	TTSSRV_Attr_ChineseNumOne_NonChanged = 0X00, /// don't change the initial value zero
    TTSSRV_Attr_ChineseNumOne_Yao,
	TTSSRV_Attr_ChineseNumOne_Yi,
	TTSSRV_Attr_ChineseNumOne_Last,
    TTSSRV_Attr_ChineseNumOne_Num = TTSSRV_Attr_ChineseNumOne_Last,
}TTSSRV_ATTR_CHINESENUMONE_e;


typedef enum TTSSRV_ATTR_ROLE_TAG
{
    TTSSRV_Attr_Role_NonChanged = 0X00,
    TTSSRV_Attr_Role_YanPing,
    TTSSRV_Attr_Role_Yufeng,
	TTSSRV_Attr_Role_NanNan,
	TTSSRV_Attr_Role_XiaoQian,
	TTSSRV_Attr_Role_XiaoRong,
	TTSSRV_Attr_Role_XiaoMei,
    TTSSRV_Attr_Role_John,
	TTSSRV_Attr_Role_Terry,
	TTSSRV_Attr_Role_JiuXu,
	TTSSRV_Attr_Role_DouXu,
	TTSSRV_Attr_Role_XiaoPing,
	TTSSRV_Attr_Role_DonaldDuck ,
	TTSSRV_Attr_Role_BabyXu,
	TTSSRV_Attr_Role_User,
	TTSSRV_Attr_Role_Last,
	TTSSRV_Attr_Role_Num = TTSSRV_Attr_Role_Last,
}TTSSRV_ATTR_ROLE_e;

typedef enum TTSSRV_ATTR_LANGUAGE_TAG
{
	TTSSRV_Attr_Language_NonChanged = 0X00,
    TTSSRV_Attr_Language_Chinese,
	TTSSRV_Attr_Language_English,
	TTSSRV_Attr_Language_Last,
	TTSSRV_Attr_Language_Num = TTSSRV_Attr_Language_Last,
}TTSSRV_ATTR_LANGUAGE_e;

typedef enum TTSSRV_ATTR_STYLE_TAG
{
	TTSSRV_Attr_Style_NonChanged = 0X00,
    TTSSRV_Attr_Style_Plain,
    TTSSRV_Attr_Style_Normal,
	TTSSRV_Attr_Style_Last,
	TTSSRV_Attr_Style_Num = TTSSRV_Attr_Style_Last,
}TTSSRV_ATTR_STYLE_e;

typedef enum TTSSRV_ATTR_SPEED_TAG
{
	TTSSRV_Attr_NonChanged = 0X00,
    TTSSRV_Attr_Min,
    TTSSRV_Attr_Low,
	TTSSRV_Attr_Normal,
	TTSSRV_Attr_High,
	TTSSRV_Attr_Max,
	TTSSRV_Attr_Last,
	TTSSRV_Attr_Num = TTSSRV_Attr_Last,
}TTSSRV_ATTR_SPEED_e;

typedef enum TTSSRV_ATTR_PITCH_TAG
{
    TTSSRV_Attr_Pitch_NonChanged = 0X00,
	TTSSRV_Attr_Pitch_Min,
	TTSSRV_Attr_Pitch_Low,
	TTSSRV_Attr_Pitch_Normal,
	TTSSRV_Attr_Pitch_High,
	TTSSRV_Attr_Pitch_Max,
	TTSSRV_Attr_Pitch_Last,
	TTSSRV_Attr_Pitch_Num = TTSSRV_Attr_Pitch_Last,
}TTSSRV_ATTR_PITCH_e;

typedef enum TTSSRV_VOLUME_TAG
{
    TTSSRV_Attr_Volume_NonChanged = 0X00,
	TTSSRV_Attr_Volume_Min,
	TTSSRV_Attr_Volume_Low,
	TTSSRV_Attr_Volume_Normal,
	TTSSRV_Attr_Volume_High,
	TTSSRV_Attr_Volume_Max,
	TTSSRV_Attr_Volume_Last,
	TTSSRV_Attr_Volume_Num = TTSSRV_Attr_Volume_Last,
}TTSSRV_ATTR_VOLUME_e;

typedef enum TTSSRV_ATTR_VEMODE_TAG
{
    TTSSrv_Attr_VeMode_NonChanged = 0X00,
    TTSSrv_Attr_VeMode_None,
	TTSSrv_Attr_VeMode_Wander,
	TTSSrv_Attr_VeMode_Echo,
	TTSSrv_Attr_VeMode_Robert,
	TTSSrv_Attr_VeMode_Chrous,
	TTSSrv_Attr_VeMode_UnderWater,
	TTSSrv_Attr_VeMode_Reverb,
	TTSSrv_Attr_VeMode_EccEntric,
	TTSSrv_Attr_VeMode_Last,
	TTSSrv_Attr_VeMode_Num = TTSSrv_Attr_VeMode_Last,
}TTSSRV_ATTR_VEMODE_e;

typedef enum TTSSRV_VOLUMESETTING_TAG
{
	TTSSRV_VolumeSetting_Default = 0,
	TTSSRV_VolumeSetting_0 = TTSSRV_VolumeSetting_Default,
	TTSSRV_VolumeSetting_1,
	TTSSRV_VolumeSetting_2,
	TTSSRV_VolumeSetting_3,
	TTSSRV_VolumeSetting_4,
	TTSSRV_VolumeSetting_5,
	TTSSRV_VolumeSetting_6,
	TTSSRV_VolumeSetting_7,
	TTSSRV_VolumeSetting_8,
	TTSSRV_VolumeSetting_Num,
}TTSSRV_VOLUMESETTING_e;

typedef enum
{
    TTSSRV_SrvCurStatus_Lock = 0,
    TTSSRV_SrvCurStatus_Unlock,
	TTSSRV_SrvCurStatus_Num,
}TTSSRV_SRVSTATUS_e;

/// for profile setting
typedef struct
{
	TTSSRV_ATTR_STYLE_e eStyle;
	TTSSRV_ATTR_SPEED_e eSpeed;
	TTSSRV_ATTR_PITCH_e ePitch;
    TTSSRV_ATTR_READDIGIT_e eReadDigit;//add by xucancheng . 
    TTSSRV_ATTR_LANGUAGE_e eLanguage;//add by xucancheng . 
}TTSSetting_t;

typedef struct
{
    TTSSRV_ATTR_READDIGIT_e eReadDigit;
    TTSSRV_ATTR_CHINESENUMONE_e eChineseOne;
	TTSSRV_ATTR_ROLE_e eRole;
	TTSSRV_ATTR_LANGUAGE_e eLanguage;
	TTSSRV_ATTR_STYLE_e eStyle;
	TTSSRV_ATTR_SPEED_e eSpeed;
	TTSSRV_ATTR_PITCH_e ePitch;
	TTSSRV_ATTR_VOLUME_e eVolume;
    TTSSRV_ATTR_VEMODE_e eVeMode;
}TTSSrvAttr_t;

typedef enum
{
	TTSSRV_Cmd_Play_Req = 0X0000EE00,
	TTSSRV_Cmd_Play_Rsp,
	TTSSRV_Cmd_Stop_Req,
    TTSSRV_Cmd_Stop_Rsp,
	TTSSRV_Cmd_Init_Req,
	TTSSRV_Cmd_Init_Rsp,
	TTSSRV_Cmd_Uninit_Req,
	TTSSRV_Cmd_Uninit_Rsp,
	TTSSRV_Cmd_Lock_Req,
	TTSSRV_Cmd_UnLock_Req,
    TTSSRV_Cmd_Adujst_Volume_Req,
	TTSSRV_Cmd_PlayError_Ind,
	TTSSRV_Cmd_PlayEnd_Ind,
	TTSSRV_Cmd_Num = TTSSRV_Cmd_PlayEnd_Ind - TTSSRV_Cmd_Play_Req + 1, /// it should be changed when adding a new command type
}TtsSrvCmd_e;

typedef void (*TTSStatusUpdateCB)(void* pvCaller, TTSHdl_t hTts, TTSSRV_HANDLE_EVENT_e eEvent, TTSSRV_HANDLESTATUS_e eHandleStatus);
typedef void (*TTSLockCB)(IBase* pCaller, MAE_Ret nRet, TTSSRV_SRVSTATUS_e eCurStatus);

#ifdef __TTS__

MAE_Ret TTSSrv_OpenSession(ITTSSRV *pThis, IBase* pOwner);
MAE_Ret TTSSrv_CloseSession(ITTSSRV *pThis, IBase* pOwner);
MAE_Ret TTSSrv_SetTtsProfile(ITTSSRV *pThis, TTSSetting_t* psProfile);
MAE_Ret TTSSrv_GetTtsProfile(ITTSSRV *pThis, TTSSetting_t* psProfile);

MAE_Ret TTSSrv_CreateTextHandle(ITTSSRV *pThis, IBase* pCaller, u16* pUcs2, u16 uLen, TTSSRV_VOLUMESETTING_e eVolume, TTSStatusUpdateCB pfnStatusUpdateCb, TTSHdl_t *phOutTts);
MAE_Ret TTSSrv_SetHandleAttr(TTSHdl_t hTts ,TTSSrvAttr_t* psAttrs);
MAE_Ret TTSSrv_AdjustVolume(TTSHdl_t hTts, TTSSRV_VOLUMESETTING_e eVolume);
MAE_Ret TTSSrv_PlayText(TTSHdl_t hTts);
MAE_Ret TTSSrv_ResumePlayText(TTSHdl_t hTts);
MAE_Ret TTSSrv_Stop(TTSHdl_t hTts);
MAE_Ret TTSSrv_DestroyTextHandle(TTSHdl_t hTts);
MAE_Ret TTSSrv_PlayTextNoResume(ITTSSRV *pThis, IBase* pOwner, u16* pUcs2, u16 uLen, TTSSRV_VOLUMESETTING_e eVolume, TTSStatusUpdateCB pfnStatusUpdateCb);

boolean TTSSrv_IsValidTextHandle(TTSHdl_t hTts);

#ifdef __FEATURE__LOCK_UNLOCK__
MAE_Ret TTSSrv_LockAsync(ITTSSRV *pThis, IBase* pOwner, TTSLockCB pfnLockCb);
MAE_Ret TTSSrv_UnLockAsync(ITTSSRV *pThis, IBase* pOwner, TTSLockCB pfnUnLockCb);
#endif/* __FEATURE__LOCK_UNLOCK__ */

#endif/* __TTS__ */

#endif/* __MMI_TTSSRV_H__ */
