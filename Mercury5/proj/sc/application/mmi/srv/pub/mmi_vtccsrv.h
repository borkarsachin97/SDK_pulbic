/**
* @file mmi_vtccsrv.h
*
* State Machine Service - VTCCSRV
* Generated by XFSM v1.0, CodeVer=v0.24
* * Class Id: CLSID_VTCCSRV
*
*
* @version $Id: mmi_vtccsrv.h $
*/
#ifndef __MMI_VTCCSRV_H__
#define __MMI_VTCCSRV_H__

#include "mmi_mae_common_def.h"
#include "mmi_mae_applet.h"
#include "mmi_mae_class.h"
#include "mmi_mae_datamodel.h"
#include "mmi_vtccsrv_def.h"

#ifdef __VT_3G324M__

typedef enum
{
    VTCC_MASK_OUTGOINGCALL = 1 << 0
   ,VTCC_MASK_INCOMINGCALL = 1 << 1
   ,VTCC_MASK_HANGUPCALL = 1 << 2
   ,VTCC_MASK_CHLD_OPER = 1 << 3
   ,VTCC_MASK_INCALL = 1 << 4
   ,VTCC_MASK_RELEASECALL = 1 << 5
   ,VTCC_MASK_NOTIFY = 1 << 6
   ,VTCC_MASK_OTHER = 1 << 7
   ,VTCC_MASK_AUDIO = 1 << 8
   ,VTCC_MASK_ALL = (s32) 0xFFFFFFFF
} VTCCSRV_Event_Mask_e;

/*
***** Event/Mask mapping table *****
#define VTCCSRV_EVT_MakeCallCnf               (CLSID_VTCCSRV << 16 | 1)             //VT_MASK_OUTGOINGCALL
#define VTCCSRV_EVT_AcceptCallCnf             (CLSID_VTCCSRV << 16 | 2)         //VT_MASK_INCOMINGCALL      // keyguard
#define VTCCSRV_EVT_RingInd                   (CLSID_VTCCSRV << 16 | 3)                 //VT_MASK_INCOMINGCALL      // mmsrv , idle
#define VTCCSRV_EVT_AlertInd                  (CLSID_VTCCSRV << 16 | 4)                 //VT_MASK_OUTGOINGCALL
#define VTCCSRV_EVT_HangUpCallCnf             (CLSID_VTCCSRV << 16 | 5)         //VT_MASK_HANGUPCALL
#define VTCCSRV_EVT_HangUpOutgoingCallCnf     (CLSID_VTCCSRV << 16 | 6) //VT_MASK_HANGUPCALL
#define VTCCSRV_EVT_ReleaseHoldCallCnf        (CLSID_VTCCSRV << 16 | 7)         //VT_MASK_HANGUPCALL
#define VTCCSRV_EVT_ReleaseSpecificCallCnf    (CLSID_VTCCSRV << 16 | 8)         //VT_MASK_CHLD_OPER
#define VTCCSRV_EVT_RejectWaitingCallCnf      (CLSID_VTCCSRV << 16 | 9)     //VT_MASK_INCOMINGCALL
#define VTCCSRV_EVT_ReplaceActiveCallCnf      (CLSID_VTCCSRV << 16 | 10)        //VT_MASK_INCALL
#define VTCCSRV_EVT_ReplaceActiveInWaitingCnf (CLSID_VTCCSRV << 16 | 11)    //VT_MASK_INCOMINGCALL
#define VTCCSRV_EVT_ReplaceHoldInWaitingCnf   (CLSID_VTCCSRV << 16 | 12)    //VT_MASK_INCOMINGCALL
#define VTCCSRV_EVT_ReleaseInd                (CLSID_VTCCSRV << 16 | 13)                    //VT_MASK_RELEASECALL
#define VTCCSRV_EVT_ReleaseIncomingCallInd    (CLSID_VTCCSRV << 16 | 14)        //VT_MASK_INCOMINGCALL
#define VTCCSRV_EVT_ReleaseOutgoingCallInd    (CLSID_VTCCSRV << 16 | 15)        //VT_MASK_RELEASECALL
#define VTCCSRV_EVT_ReleaseActiveCallInd      (CLSID_VTCCSRV << 16 | 16)            //VT_MASK_RELEASECALL (not used)
#define VTCCSRV_EVT_ReleaseHoldCallInd        (CLSID_VTCCSRV << 16 | 17)            //VT_MASK_RELEASECALL (not used)
#define VTCCSRV_EVT_ReleaseWaitingCallInd     (CLSID_VTCCSRV << 16 | 18)        //VT_MASK_INCOMINGCALL
#define VTCCSRV_EVT_WaitingCallInd            (CLSID_VTCCSRV << 16 | 19)                //VT_MASK_INCOMINGCALL (not used)
#define VTCCSRV_EVT_HoldCallCnf               (CLSID_VTCCSRV << 16 | 20)                //VT_MASK_CHLD_OPER
#define VTCCSRV_EVT_RetrieveCallCnf           (CLSID_VTCCSRV << 16 | 21)                //VT_MASK_CHLD_OPER
#define VTCCSRV_EVT_JoinMPTYCallCnf           (CLSID_VTCCSRV << 16 | 22)        //VT_MASK_CHLD_OPER
#define VTCCSRV_EVT_SplitCallCnf              (CLSID_VTCCSRV << 16 | 23)                //VT_MASK_CHLD_OPER
#define VTCCSRV_EVT_SwapCallCnf               (CLSID_VTCCSRV << 16 | 24)                //VT_MASK_CHLD_OPER
#define VTCCSRV_EVT_TransferCallCnf           (CLSID_VTCCSRV << 16 | 25)                //VT_MASK_CHLD_OPER
#define VTCCSRV_EVT_FuncMakeCallReq           (CLSID_VTCCSRV << 16 | 26)            //VT_MASK_OUTGOINGCALL      // idle
#define VTCCSRV_EVT_DTMFCnf                   (CLSID_VTCCSRV << 16 | 27)                //VT_MASK_INCALL
#define VTCCSRV_EVT_NoCallExistedInd          (CLSID_VTCCSRV << 16 | 28)            //VT_MASK_OTHER                     //idle
#define VTCCSRV_EVT_CallSetupNotifyInd        (CLSID_VTCCSRV << 16 | 29)            //VT_MASK_NOTIFY
#define VTCCSRV_EVT_InCallNotifyInd           (CLSID_VTCCSRV << 16 | 30)                //VT_MASK_NOTIFY
#define VTCCSRV_EVT_AudioChannelInd           (CLSID_VTCCSRV << 16 | 31)            //VT_MASK_AUDIO
#define VTCCSRV_EVT_ReleaseActiveCallCnf      (CLSID_VTCCSRV << 16 | 32)        //VT_MASK_RELEASECALL
#define VTCCSRV_EVT_InCallSessionTimer        (CLSID_VTCCSRV << 16 | 33)            //VT_MASK_INCALL
#define VTCCSRV_EVT_AbortDTMFCnf              (CLSID_VTCCSRV << 16 | 34)        //VT_MASK_INCALL
*/

/**
 * External Events
 */
#define VTCCSRV_EVT_MakeCallCnf               (CLSID_VTCCSRV << 16 | 1)
#define VTCCSRV_EVT_AcceptCallCnf             (CLSID_VTCCSRV << 16 | 2)
#define VTCCSRV_EVT_RingInd               (CLSID_VTCCSRV << 16 | 3)
#define VTCCSRV_EVT_AlertInd              (CLSID_VTCCSRV << 16 | 4)
#define VTCCSRV_EVT_HangUpCallCnf             (CLSID_VTCCSRV << 16 | 5)
#define VTCCSRV_EVT_HangUpOutgoingCallCnf             (CLSID_VTCCSRV << 16 | 6)
#define VTCCSRV_EVT_ReleaseHoldCallCnf                (CLSID_VTCCSRV << 16 | 7)
#define VTCCSRV_EVT_ReleaseSpecificCallCnf                (CLSID_VTCCSRV << 16 | 8)
#define VTCCSRV_EVT_RejectWaitingCallCnf              (CLSID_VTCCSRV << 16 | 9)
#define VTCCSRV_EVT_ReplaceActiveCallCnf              (CLSID_VTCCSRV << 16 | 10)
#define VTCCSRV_EVT_ReplaceActiveInWaitingCnf             (CLSID_VTCCSRV << 16 | 11)
#define VTCCSRV_EVT_ReplaceHoldInWaitingCnf               (CLSID_VTCCSRV << 16 | 12)
#define VTCCSRV_EVT_ReleaseInd                (CLSID_VTCCSRV << 16 | 13)
#define VTCCSRV_EVT_ReleaseIncomingCallInd                (CLSID_VTCCSRV << 16 | 14)
#define VTCCSRV_EVT_ReleaseOutgoingCallInd                (CLSID_VTCCSRV << 16 | 15)
#define VTCCSRV_EVT_ReleaseActiveCallInd              (CLSID_VTCCSRV << 16 | 16)
#define VTCCSRV_EVT_ReleaseHoldCallInd                (CLSID_VTCCSRV << 16 | 17)
#define VTCCSRV_EVT_ReleaseWaitingCallInd             (CLSID_VTCCSRV << 16 | 18)
#define VTCCSRV_EVT_WaitingCallInd                (CLSID_VTCCSRV << 16 | 19)
#define VTCCSRV_EVT_HoldCallCnf               (CLSID_VTCCSRV << 16 | 20)
#define VTCCSRV_EVT_RetrieveCallCnf               (CLSID_VTCCSRV << 16 | 21)
#define VTCCSRV_EVT_JoinMPTYCallCnf               (CLSID_VTCCSRV << 16 | 22)
#define VTCCSRV_EVT_SplitCallCnf              (CLSID_VTCCSRV << 16 | 23)
#define VTCCSRV_EVT_SwapCallCnf               (CLSID_VTCCSRV << 16 | 24)
#define VTCCSRV_EVT_TransferCallCnf               (CLSID_VTCCSRV << 16 | 25)
#define VTCCSRV_EVT_FuncMakeCallReq               (CLSID_VTCCSRV << 16 | 26)
#define VTCCSRV_EVT_DTMFCnf               (CLSID_VTCCSRV << 16 | 27)
#define VTCCSRV_EVT_NoCallExistedInd              (CLSID_VTCCSRV << 16 | 28)
#define VTCCSRV_EVT_CallSetupNotifyInd                (CLSID_VTCCSRV << 16 | 29)
#define VTCCSRV_EVT_InCallNotifyInd               (CLSID_VTCCSRV << 16 | 30)
#define VTCCSRV_EVT_AudioChannelInd               (CLSID_VTCCSRV << 16 | 31)
#define VTCCSRV_EVT_ReleaseActiveCallCnf              (CLSID_VTCCSRV << 16 | 32)
#define VTCCSRV_EVT_InCallSessionTimer                (CLSID_VTCCSRV << 16 | 33)
#define VTCCSRV_EVT_AbortDTMFCnf              (CLSID_VTCCSRV << 16 | 34)
#define VTCCSRV_EVT_AllCallReleasedInd                (CLSID_VTCCSRV << 16 | 35)
#define VTCCSRV_EVT_WaitingToIncomingCallInd              (CLSID_VTCCSRV << 16 | 36)
#define VTCCSRV_EVT_ProgressInd               (CLSID_VTCCSRV << 16 | 37)
#define VTCCSRV_EVT_AnsweringMachineFailedInd               (CLSID_VTCCSRV << 16 | 38)
#define VTCCSRV_EVT_3G324MCallStateNotifyInd                (CLSID_VTCCSRV << 16 | 39)
#define VTCCSRV_EVT_CmDisconnectNotifyInd               (CLSID_VTCCSRV << 16 | 40)
#define VTCCSRV_EVT_FallbackCnf               (CLSID_VTCCSRV << 16 | 41)
#define VTCCSRV_EVT_3G324MChannelOnOffInd              (CLSID_VTCCSRV << 16 | 42)

/**
 * IVTCCSRV Interfaces
 */
#define INHERIT_IVTCCSRV(IName) \
    INHERIT_IHandler(IName); \
    VTCCSRV_MO_ERROR_CODE     (*MakeCallReq)      ( IName * , MmiMakeCallReq_t* pMakeCallData, u8 DualMode);  \
    MAE_Ret     (*Make2ndCallReq)       ( IName * , MmiMakeCallReq_t* pMakeCallData);  \
    MAE_Ret     (*HangUpCallReq)        ( IName * );  \
    MAE_Ret     (*HangUpOutgoingCallReq)        ( IName * );  \
    MAE_Ret     (*AcceptCallReq)        ( IName * );  \
    MAE_Ret     (*ReleaseHoldCallReq)       ( IName * );  \
    MAE_Ret     (*ReleaseActiveCallReq)     ( IName * );  \
    MAE_Ret     (*ReleaseSpecificCallReq)       ( IName * , u8 u8CallID);  \
    MAE_Ret     (*RejectWaitingCallReq)     ( IName * );  \
    MAE_Ret     (*ReplaceActiveCallReq)     ( IName * );  \
    MAE_Ret     (*ReplaceActiveInWaitingReq)        ( IName * );  \
    MAE_Ret     (*ReplaceHoldInWaitingReq)      ( IName * );  \
    MAE_Ret     (*HoldCallReq)      ( IName * );  \
    MAE_Ret     (*RetrieveCallReq)      ( IName * );  \
    MAE_Ret     (*JoinMPTYCalllReq)     ( IName * );  \
    MAE_Ret     (*SplitCalllReq)        ( IName * , u8 u8CallID);  \
    MAE_Ret     (*SwapCalllReq)     ( IName * );  \
    MAE_Ret     (*TransferCalllReq)     ( IName * );  \
    MAE_Ret     (*SendDTMFReq)      ( IName * , u8 u8KeyCode, MMI_VTCCSRV_DTMF_OP_e DTMFOper, u8 u8Duration);  \
    VTCCSRV_Mode_e        (*GetActiveMode)        ( IName * );  \
    MAE_Ret     (*RegisterListener)     ( IName * , void* instance, u32 mask);  \
    MAE_Ret     (*DeregisterListener)       ( IName * , void* instance, u32 mask);  \
    CallTable_t*     (*GetCallTableData)        ( IName * , IBase* pOwner);  \
    boolean     (*IsEmergencyCall)      ( IName * , u8* number);  \
    VTCCSRV_DUO_STATUS_e      (*GetDuoCallStatus)     ( IName * );  \
    boolean     (*IsMissCallExisted)        ( IName * );  \
    MAE_Ret     (*ResetMissCallStatus)      ( IName * );  \
    u32     (*GetInCallDuration)        ( IName * , VTCCSRV_DURATION_Type_e eDurationType);  \
    MAE_Ret     (*AbortDTMFReq)     ( IName * );  \
    void        (*SetAutoRedialStatus)      ( IName * , boolean bStatus);  \
    boolean     (*IsAtoRedialActive)        ( IName * );  \
    void        (*SetPreMOCallStatus)       ( IName * , boolean bStatus);  \
    boolean     (*IsPreMOCallActive)        ( IName * );  \
    boolean     (*IsTryToReleaseAllCall)        ( IName * ); \
    void     	(*CMDisconnectReq)        ( IName * );  \
	MAE_Ret		(*NotifyAnsweringMachineFailed)		( IName * , ANSWERING_MACHINE_FAILED_TYPE_e eAnsweringMachineFailedType)
DEFINE_INTERFACE(IVTCCSRV);


#define IVTCCSRV_QueryInterface(pICntlr, id, pp, po)          GET_FUNCTBL((pICntlr), IVTCCSRV)->QueryInterface(pICntlr, id, pp, po)
#define IVTCCSRV_HandleEvent(pICntlr, e, p1, p2)              GET_FUNCTBL((pICntlr), IVTCCSRV)->HandleEvent(pICntlr, e, p1, p2)
/**
 mmi_VTCCSRV_MakeCallReq
@brief  The interface is use to MO call

@param[in]  pIVTCCSRV              Pointer to the pIVTCCSRV interface
@param[in]  pMakeCallData     MO call data (Number is necessary)
@param[in]  DualMode             MO call by Master or Slave SIM card

@return VTCCSRV_MO_NO_ERROR                      If successful.
@return VTCCSRV_MO_FAILED                             If an error happen.
@return VTCCSRV_MO_CALL_NO_SIM_CARD    Can't handle this request.

Corresponding feedback confirm is VTCCSRV_EVT_MakeCallCnf

 */
#define IVTCCSRV_MakeCallReq(pICntlr, p1, p2) GET_FUNCTBL((pICntlr), IVTCCSRV)->MakeCallReq( pICntlr, p1, p2)
/**
 mmi_VTCCSRV_Make2ndCallReq
@brief  The interface is use to MO call

@param[in]  pIVTCCSRV              Pointer to the pIVTCCSRV interface
@param[in]  pMakeCallData     MO call data (Number is necessary)

@return MAE_RET_SUCCESS        If successful.
@return MAE_RET_FAILED           If an error happen.
@return MAE_RET_BUSY              Can't handle this request.

Corresponding feedback confirm is VTCCSRV_EVT_MakeCallCnf

 */
#define IVTCCSRV_Make2ndCallReq(pICntlr, p1)  GET_FUNCTBL((pICntlr), IVTCCSRV)->Make2ndCallReq( pICntlr, p1)
/**
 mmi_VTCCSRV_HangUpCallReq
@brief  The interface is use to release call,  include active, held or waiting call

@param[in]  pIVTCCSRV              Pointer to the pIVTCCSRV interface

@return MAE_RET_SUCCESS        If successful.
@return MAE_RET_FAILED           If an error happen.
@return MAE_RET_BUSY              Can't handle this request.

Corresponding feedback confirm is VTCCSRV_EVT_HangUpCallCnf

 */
#define IVTCCSRV_HangUpCallReq(pICntlr)   GET_FUNCTBL((pICntlr), IVTCCSRV)->HangUpCallReq( pICntlr)
/**
 mmi_VTCCSRV_HangUpOutgoingCallReq
@brief  The interface is use to release outgoing call. It's very useful to release outgoing call without affecting the active or held call

@param[in]  pIVTCCSRV              Pointer to the pIVTCCSRV interface

@return MAE_RET_SUCCESS        If successful.
@return MAE_RET_FAILED           If an error happen.
@return MAE_RET_BUSY              Can't handle this request.

Corresponding feedback confirm is VTCCSRV_EVT_HangUpOutgoingCallCnf
 */
#define IVTCCSRV_HangUpOutgoingCallReq(pICntlr)   GET_FUNCTBL((pICntlr), IVTCCSRV)->HangUpOutgoingCallReq( pICntlr)
/**
 mmi_VTCCSRV_AcceptCallReq
@brief  The interface is provided to accept incoming call or accept waiting call. The active call will be held automatically if accept a waiting call.

@param[in]  pIVTCCSRV              Pointer to the pIVTCCSRV interface

@return MAE_RET_SUCCESS        If successful.
@return MAE_RET_FAILED           If an error happen.
@return MAE_RET_BUSY              Can't handle this request.

Corresponding feedback confirm is VTCCSRV_EVT_AcceptCallCnf

 */
#define IVTCCSRV_AcceptCallReq(pICntlr)   GET_FUNCTBL((pICntlr), IVTCCSRV)->AcceptCallReq( pICntlr)
/**
 mmi_VTCCSRV_ReleaseHoldCallReq
@brief  The interface is provided to release held calls.

@param[in]  pIVTCCSRV              Pointer to the pIVTCCSRV interface

@return MAE_RET_SUCCESS        If successful.
@return MAE_RET_FAILED           If an error happen.
@return MAE_RET_BUSY              Can't handle this request.

Corresponding feedback confirm is VTCCSRV_EVT_ReleaseHoldCallCnf

 */
#define IVTCCSRV_ReleaseHoldCallReq(pICntlr)  GET_FUNCTBL((pICntlr), IVTCCSRV)->ReleaseHoldCallReq( pICntlr)
/**
 mmi_VTCCSRV_ReleaseActiveCallReq
@brief The interface is provided to release active calls
@paramp[in] pIVTCCSRV
Pointer to the pIVTCCSRV interface
@return MAE_RET_SUCCESS ,if success
@return MAE_RET_FAILED, if an error happens
@return MAE_RET_BUSY, can't handle this request
Corresponding feedback confirmation is VTCCSRV_EVT_ReleaseActiveCallCnf
 */
#define IVTCCSRV_ReleaseActiveCallReq(pICntlr)    GET_FUNCTBL((pICntlr), IVTCCSRV)->ReleaseActiveCallReq( pICntlr)
/**
 mmi_VTCCSRV_ReleaseSpecificCallReq
@brief  The interface is provided to release any specific call. Caller have to provide the Call ID he want to release.

@param[in]  pIVTCCSRV              Pointer to the pIVTCCSRV interface
@param[in] u8CallID                Release Call ID

@return MAE_RET_SUCCESS        If successful.
@return MAE_RET_FAILED           If an error happen.
@return MAE_RET_BUSY              Can't handle this request.

Corresponding feedback confirm is VTCCSRV_EVT_ReleaseSpecificCallCnf

 */
#define IVTCCSRV_ReleaseSpecificCallReq(pICntlr, p1)  GET_FUNCTBL((pICntlr), IVTCCSRV)->ReleaseSpecificCallReq( pICntlr, p1)
/**
 mmi_VTCCSRV_RejectWaitingCallReq
@brief  The interface is provided to reject a waiting call.

@param[in]  pIVTCCSRV              Pointer to the pIVTCCSRV interface

@return MAE_RET_SUCCESS        If successful.
@return MAE_RET_FAILED           If an error happen.
@return MAE_RET_BUSY              Can't handle this request.

Corresponding feedback confirm is VTCCSRV_EVT_RejectWaitingCallCnf

 */
#define IVTCCSRV_RejectWaitingCallReq(pICntlr)    GET_FUNCTBL((pICntlr), IVTCCSRV)->RejectWaitingCallReq( pICntlr)
/**
 mmi_VTCCSRV_ReplaceActiveCallReq
@brief   The interface is to release active call and retrieve held call. However, it can't be used with waiting call existed.

@param[in]  pIVTCCSRV              Pointer to the pIVTCCSRV interface

@return MAE_RET_SUCCESS        If successful.
@return MAE_RET_FAILED           If an error happen.
@return MAE_RET_BUSY              Can't handle this request.

Corresponding feedback confirm is VTCCSRV_EVT_ReplaceActiveCallCnf

 */
#define IVTCCSRV_ReplaceActiveCallReq(pICntlr)    GET_FUNCTBL((pICntlr), IVTCCSRV)->ReplaceActiveCallReq( pICntlr)
/**
 mmi_VTCCSRV_ReplaceActiveInWaitingReq
@brief   The interface is use to replace active call by waiting call. All the active calls will be released first.

@param[in]  pIVTCCSRV              Pointer to the pIVTCCSRV interface

@return MAE_RET_SUCCESS        If successful.
@return MAE_RET_FAILED           If an error happen.
@return MAE_RET_BUSY              Can't handle this request.

Corresponding feedback confirm is VTCCSRV_EVT_ReplaceActiveInWaitingCnf

 */
#define IVTCCSRV_ReplaceActiveInWaitingReq(pICntlr)   GET_FUNCTBL((pICntlr), IVTCCSRV)->ReplaceActiveInWaitingReq( pICntlr)
/**
 mmi_VTCCSRV_ReplaceHoldInWaitingReq
@brief   The interface is to replace held call by waiting call. All the held calls will be released first.

@param[in]  pIVTCCSRV              Pointer to the pIVTCCSRV interface

@return MAE_RET_SUCCESS        If successful.
@return MAE_RET_FAILED           If an error happen.
@return MAE_RET_BUSY              Can't handle this request.

Corresponding feedback confirm is VTCCSRV_EVT_ReplaceHoldInWaitingCnf

 */
#define IVTCCSRV_ReplaceHoldInWaitingReq(pICntlr) GET_FUNCTBL((pICntlr), IVTCCSRV)->ReplaceHoldInWaitingReq( pICntlr)
/**
 mmi_VTCCSRV_HoldCallReq
@brief   The interface is provided to hold an active call.

@param[in]  pIVTCCSRV              Pointer to the pIVTCCSRV interface

@return MAE_RET_SUCCESS        If successful.
@return MAE_RET_FAILED           If an error happen.
@return MAE_RET_BUSY              Can't handle this request.

Corresponding feedback confirm is VTCCSRV_EVT_HoldCallCnf

 */
#define IVTCCSRV_HoldCallReq(pICntlr) GET_FUNCTBL((pICntlr), IVTCCSRV)->HoldCallReq( pICntlr)
/**
 mmi_VTCCSRV_RetrieveCallReq
@brief   The interface is provided to retrieve a held call .

@param[in]  pIVTCCSRV              Pointer to the pIVTCCSRV interface

@return MAE_RET_SUCCESS        If successful.
@return MAE_RET_FAILED           If an error happen.
@return MAE_RET_BUSY              Can't handle this request.

Corresponding feedback confirm is VTCCSRV_EVT_RetrieveCallCnf

 */
#define IVTCCSRV_RetrieveCallReq(pICntlr) GET_FUNCTBL((pICntlr), IVTCCSRV)->RetrieveCallReq( pICntlr)
/**
 mmi_VTCCSRV_JoinMPTYCallReq
@brief   The interface is provided to host a conference call.

@param[in]  pIVTCCSRV              Pointer to the pIVTCCSRV interface

@return MAE_RET_SUCCESS        If successful.
@return MAE_RET_FAILED           If an error happen.
@return MAE_RET_BUSY              Can't handle this request.

Corresponding feedback confirm is VTCCSRV_EVT_JoinMPTYCallCnf

 */
#define IVTCCSRV_JoinMPTYCalllReq(pICntlr)    GET_FUNCTBL((pICntlr), IVTCCSRV)->JoinMPTYCalllReq( pICntlr)
/**
 mmi_VTCCSRV_SplitCallReq
@brief   The interface is provided to split a member from the conference call.

@param[in]  pIVTCCSRV              Pointer to the pIVTCCSRV interface
@param[in]  u8CallID               Split Call ID

@return MAE_RET_SUCCESS        If successful.
@return MAE_RET_FAILED           If an error happen.
@return MAE_RET_BUSY              Can't handle this request.

Corresponding feedback confirm is VTCCSRV_EVT_SplitCallCnf

 */
#define IVTCCSRV_SplitCalllReq(pICntlr, p1)   GET_FUNCTBL((pICntlr), IVTCCSRV)->SplitCalllReq( pICntlr, p1)
/**
 mmi_VTCCSRV_SwapCallReq
@brief   The interface is provided to change the status between active and held call.

@param[in]  pIVTCCSRV              Pointer to the pIVTCCSRV interface

@return MAE_RET_SUCCESS        If successful.
@return MAE_RET_FAILED           If an error happen.
@return MAE_RET_BUSY              Can't handle this request.

Corresponding feedback confirm is VTCCSRV_EVT_SwapCallCnf

 */
#define IVTCCSRV_SwapCalllReq(pICntlr)    GET_FUNCTBL((pICntlr), IVTCCSRV)->SwapCalllReq( pICntlr)
/**
 mmi_VTCCSRV_TransferCallReq
@brief   The interface is used to transfer the calls and leave the in-call session.

@param[in]  pIVTCCSRV              Pointer to the pIVTCCSRV interface

@return MAE_RET_SUCCESS        If successful.
@return MAE_RET_FAILED           If an error happen.
@return MAE_RET_BUSY              Can't handle this request.

Corresponding feedback confirm is VTCCSRV_EVT_TransferCallCnf

 */
#define IVTCCSRV_TransferCalllReq(pICntlr)    GET_FUNCTBL((pICntlr), IVTCCSRV)->TransferCalllReq( pICntlr)
/**
 mmi_VTCCSRV_SendDTMFReq
@brief   The interface is used to send DTMF to protocol stack.

@param[in]  pIVTCCSRV              Pointer to the pIVTCCSRV interface
@param[in]  u8KeyCode           The key user pressd
@param[in]  DTMFOper            Start to send or Stop to send the DTMF
@param[in]  u8duration            1~254*100ms if DTMFOper is Start
                                                  255 is infinite DTMF playing
                                                  Don't care if DTMFOper is Stop

@return MAE_RET_SUCCESS        If successful.
@return MAE_RET_FAILED           If an error happen.
@return MAE_RET_BUSY              Can't handle this request.

Corresponding feedback confirm is VTCCSRV_EVT_DTMFCnf

 */
#define IVTCCSRV_SendDTMFReq(pICntlr, p1, p2, p3) GET_FUNCTBL((pICntlr), IVTCCSRV)->SendDTMFReq( pICntlr, p1, p2, p3)
/**
 mmi_VTCCSRV_GetActiveMode
@brief  The interface is provided to APP to query the mode status of VT Service.

@param[in]  pIVTCCSRV              Pointer to the pIVTCCSRV interface

@return VTCCSRV_IDLE                       No call
@return VTCCSRV_1A                           Active call(s)
@return VTCCSRV_1H                           Held call(s)
@return VTCCSRV_1A1H                      Active call + Held call(s) or Active call(s) + Held call
@return VTCCSRV_1AW                       Active call(s) with 1 Waiting call
@return VTCCSRV_1HW                       Held call(s) with 1 Waiting call
@return VTCCSRV_1AHW                    Active call + Held call(s)+ Waiting call or Active call(s) + Held call + Waiting call
@return VTCCSRV_MAKE2NDCALL   Held call(s) + 1 Outgoing call
@return VTCCSRV_OUTGOING           1 Outgoing call
@return VTCCSRV_INCOMING            1 Incoming call
@return VTCCSRV_Unknown                Unknow
 */
#define IVTCCSRV_GetActiveMode(pICntlr)   GET_FUNCTBL((pICntlr), IVTCCSRV)->GetActiveMode( pICntlr)
/**
 mmi_VTCCSRV_RegisterNotify
@brief   The interface is provided APPs to listen VTCCSRV events that he interested.

@param[in]  pIVTCCSRV              Pointer to the pIVTCCSRV interface
@param[in]  instance                 Object pointer to the APP
@param[in]  mask                     Event mask

@return MAE_RET_SUCCESS           If successful.
@return MAE_RET_FAILED              If an error happen.
@return MAE_RET_BAD_PARAM    If an error happen.

 */
#define IVTCCSRV_RegisterListener(pICntlr, p1, p2)    GET_FUNCTBL((pICntlr), IVTCCSRV)->RegisterListener( pICntlr, p1, p2)
/**
 mmi_VTCCSRV_DeregisterNotify
@brief   The interface is provided APPs to stop listen events that he interested.

@param[in]  pIVTCCSRV              Pointer to the pIVTCCSRV interface
@param[in]  instance                 Object pointer to the APP
@param[in]  mask                     Event mask

@return MAE_RET_SUCCESS           If successful.
@return MAE_RET_FAILED              If an error happen.
@return MAE_RET_BAD_PARAM    If an error happen.

 */
#define IVTCCSRV_DeregisterListener(pICntlr, p1, p2)  GET_FUNCTBL((pICntlr), IVTCCSRV)->DeregisterListener( pICntlr, p1, p2)
/**
 mmi_VTCCSRV_GetCallTableData
@brief   The interface is provided APPs to get the Call table data model.

@param[in]  pIVTCCSRV             Pointer to the pIVTCCSRV interface
@param[in]  pOwner              Instance of the caller

@return CallTable_t             If successful.
@return NULL                    If an error happen.
 */
#define IVTCCSRV_GetCallTableData(pICntlr, p1)   GET_FUNCTBL((pICntlr), IVTCCSRV)->GetCallTableData( pICntlr, p1)
/**
 mmi_VTCCSRV_IsEmgegencyCall
@brief   The interface is use to check Emergency number

@param[in]  pIVTCCSRV             Pointer to the pIVTCCSRV interface
@param[in] number                 Phone number to be checked

@return TRUE           Emergency call.
@return FALSE         Not a Emergency call.
 */
#define IVTCCSRV_IsEmergencyCall(pICntlr, p1) GET_FUNCTBL((pICntlr), IVTCCSRV)->IsEmergencyCall( pICntlr, p1)
/**
 mmi_VTCCSRV_GetDuoCallStatus
@brief   The interface is use to get the duo status of current call

@param[in]  pIVTCCSRV             Pointer to the pIVTCCSRV interface

@return VTCCSRV_MASTER_CALL_EXISTED      Current call session belong to Master mode
@return VTCCSRV_SLAVE_CALL_EXISTED         Current call session belong to Slave mode
@return VTCCSRV_NO_CALL                                 No call existed
 */
#define IVTCCSRV_GetDuoCallStatus(pICntlr)    GET_FUNCTBL((pICntlr), IVTCCSRV)->GetDuoCallStatus( pICntlr)
/**
 mmi_VTCCSRV_IsMissCallExisted
@brief   The interface is use to check Miss Call existed when VTCCSRV is active

@param[in]  pIVTCCSRV             Pointer to the pIVTCCSRV interface

@return TRUE           Miss call existed
@return FALSE         No miss call
 */
#define IVTCCSRV_IsMissCallExisted(pICntlr)   GET_FUNCTBL((pICntlr), IVTCCSRV)->IsMissCallExisted( pICntlr)
/**
 mmi_VTCCSRV_ResetMissCallStatus
@brief   The interface is use to reset Miss Call flag for VTCCSRV

@param[in]  pIVTCCSRV             Pointer to the pIVTCCSRV interface

@return MAE_RET_SUCCESS           If successful.
@return MAE_RET_FAILED              If an error happen.
 */
#define IVTCCSRV_ResetMissCallStatus(pICntlr) GET_FUNCTBL((pICntlr), IVTCCSRV)->ResetMissCallStatus( pICntlr)
/**
 mmi_VTCCSRV_GetInCallDuration
@brief   The interface is use to get the InCallDuration

@param[in]  pIVTCCSRV             Pointer to the pIVTCCSRV interface
@param[in]  eDurationType    Duration type
@return x seconds

 */
#define IVTCCSRV_GetInCallDuration(pICntlr, p1)   GET_FUNCTBL((pICntlr), IVTCCSRV)->GetInCallDuration( pICntlr, p1)
/**
 mmi_VTCCSRV_AbortDTMFReq
@brief   The interface is used to force abort DTMF during in-call session.

@param[in]  pIVTCCSRV              Pointer to the pIVTCCSRV interface

@return MAE_RET_SUCCESS        If successful.
@return MAE_RET_FAILED           If an error happen.
@return MAE_RET_BUSY              Can't handle this request.

Corresponding feedback confirm is VTCCSRV_EVT_AbortDTMFCnf

 */
#define IVTCCSRV_AbortDTMFReq(pICntlr)    GET_FUNCTBL((pICntlr), IVTCCSRV)->AbortDTMFReq( pICntlr)
/**
 mmi_VTCCSRV_SetAutoRedialStatus
@brief   The interface is use to set Auto Redial status
 */
#define IVTCCSRV_SetAutoRedialStatus(pICntlr, p1) GET_FUNCTBL((pICntlr), IVTCCSRV)->SetAutoRedialStatus( pICntlr, p1)
/**
 mmi_VTCCSRV_IsAtoRedialActive
@brief   The interface is use to check Auto Redial status

 */
#define IVTCCSRV_IsAtoRedialActive(pICntlr)   GET_FUNCTBL((pICntlr), IVTCCSRV)->IsAtoRedialActive( pICntlr)
/**
 mmi_VTCCSRV_SetPreMOCallStatus
@brief   The interface is use to set Pre-MO call status(For Check dual or IP call)
 */
#define IVTCCSRV_SetPreMOCallStatus(pICntlr, p1)  GET_FUNCTBL((pICntlr), IVTCCSRV)->SetPreMOCallStatus( pICntlr, p1)
/**
 mmi_VTCCSRV_IsPreMOCallActive
@brief   The interface is use to check Pre MO call status
 */
#define IVTCCSRV_IsPreMOCallActive(pICntlr)   GET_FUNCTBL((pICntlr), IVTCCSRV)->IsPreMOCallActive( pICntlr)
/**
 mmi_VTCCSRV_IsTryToReleaseAllCall
@brief   The interface is use to check release all call status
 */
#define IVTCCSRV_IsTryToReleaseAllCall(pICntlr)   GET_FUNCTBL((pICntlr), IVTCCSRV)->IsTryToReleaseAllCall( pICntlr)
/**
 mmi_VTCCSRV_NotifyAnsweringMachineFailed
@brief The interface is used to notify that launching Answering Machine failed with cause.
 */
#define IVTCCSRV_NotifyAnsweringMachineFailed(pICntlr, p1)	GET_FUNCTBL((pICntlr), IVTCCSRV)->NotifyAnsweringMachineFailed( pICntlr, p1)

MAE_Ret mmi_VTCCSRV_FallbackReq(IVTCCSRV *pIVTCCSRV);

MAE_Ret mmi_VTCCSRV_3G324ChannelOnOffReq(IVTCCSRV *pIVTCCSRV, VtCc3G324MOnOffState_e eState, VtCc3G324MChannelType_e eType, VtCc3G324MChannelNotify_e eNotify);

#define IVTCCSRV_CMDisconnectReq(pICntlr)   GET_FUNCTBL((pICntlr), IVTCCSRV)->CMDisconnectReq( pICntlr)

/**
 * Functions
 */

void VTCCSRV_Init(void);

MAE_Ret VtCcSrvNew(MAE_ClsId id, void **ppObj);

#endif//__VT_3G324M__
#endif /* __MMI_VTCCSRV_H__ */

