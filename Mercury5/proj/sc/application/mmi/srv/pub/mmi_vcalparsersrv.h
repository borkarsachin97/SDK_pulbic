/**
 * @file mmi_vcalparser.h
 *
 * Service without using State Machine  - VCALPARSER
 * Generated by AP Designer v0.16, 2007-30-10 15:33
 *
 * Class Id: CLSID_VCALPARSER
 * Interface Id: IID_VCALPARSER
 *
 * @version $Id$
 */
#ifndef __MMI_VCALPARSERSRV_H__
#define __MMI_VCALPARSERSRV_H__

#ifdef __CALENDAR_SUPPORT_VCS_MMI__
/*=============================================================*/
// Include files
/*=============================================================*/

#include "mmi_mae_common_def.h"
#include "mmi_mae_applet.h"
#include "mmi_mae_class.h"
#include "mmi_class.h"
#include "mmi_mae_eventdb_forward.h"
#include "mmi_vcalparsersrv_properties.h"

/*=============================================================*/
// Macro definition
/*=============================================================*/

/*=============================================================*/
// Data type definition
/*=============================================================*/

/*=============================================================*/
// Local function prototype declaration and definition
/*=============================================================*/

/**
 * IVPARAM Interfaces
 */
#define INHERIT_IVPARAM(IName) \
    INHERIT_IBase(IName); \
    MAE_Ret (*GetBuffer)            (IName *pIVPARAM, u8* pBuffer, u32* pSize); \
    MAE_Ret (*SetBuffer)            (IName *pIVPARAM, u8* pBuffer, u32 nSize); \
    s32 (*GetValueCount)        (IName *pIVPARAM); \
    MAE_Ret (*GetParamValue)        (IName *pIVPARAM, u32 nIndex, u8* pParamValue, u32* pSize); \
    VCALParameter_e (*GetParamId)       (IName *pIVPARAM); \
    MAE_Ret (*SetPropertyId)        (IName *pIVPARAM, VCALProperty_e nPropId); \
    MAE_Ret (*InitParamById)        (IName *pIVPARAM, VCALParameter_e nParamId, u32 nParamValue); \
    MAE_Ret (*AddParamValue)        (IName *pIVPARAM, u32 nParamValue); \
    MAE_Ret (*ParseValue)           (IName *pIVPARAM, u32 nIndex, u32* pValue)

DEFINE_INTERFACE(IVPARAM);

#define IVPARAM_QueryInterface(pIVPARAM, id, pp, po)                        GET_FUNCTBL((pIVPARAM), IVPARAM)->QueryInterface(pIVPARAM, id, pp, po)
#define IVPARAM_GetBuffer(pIVPARAM, pBuffer, pSize)                     GET_FUNCTBL((pIVPARAM), IVPARAM)->GetBuffer(pIVPARAM, pBuffer, pSize)
#define IVPARAM_SetBuffer(pIVPARAM, pBuffer, nSize)                     GET_FUNCTBL((pIVPARAM), IVPARAM)->SetBuffer(pIVPARAM, pBuffer, nSize)
#define IVPARAM_GetValueCount(pIVPARAM)                             GET_FUNCTBL((pIVPARAM), IVPARAM)->GetValueCount(pIVPARAM)
#define IVPARAM_GetParamValue(pIVPARAM, nIndex, pParamValue, pSize) GET_FUNCTBL((pIVPARAM), IVPARAM)->GetParamValue(pIVPARAM, nIndex, pParamValue, pSize)
#define IVPARAM_GetParamId(pIVPARAM)                                    GET_FUNCTBL((pIVPARAM), IVPARAM)->GetParamId(pIVPARAM)
#define IVPARAM_SetPropertyId(pIVPARAM, nPropId)                        GET_FUNCTBL((pIVPARAM), IVPARAM)->SetPropertyId(pIVPARAM, nPropId)
#define IVPARAM_InitParamById(pIVPARAM, nParamId, nParamValue)      GET_FUNCTBL((pIVPARAM), IVPARAM)->InitParamById(pIVPARAM, nParamId, nParamValue)
#define IVPARAM_AddParamValue(pIVPARAM, nParamValue)                    GET_FUNCTBL((pIVPARAM), IVPARAM)->AddParamValue(pIVPARAM, nParamValue)
#define IVPARAM_ParseValue(pIVPARAM, nIndex, pValue)                    GET_FUNCTBL((pIVPARAM), IVPARAM)->ParseValue(pIVPARAM, nIndex, pValue)

/**
 * Functions
 */
MAE_Ret VPARAM_New(MAE_ClsId id, void **ppObj);

/**
 * IVPROPERTY Interfaces
 */
#define INHERIT_IVPROPERTY(IName) \
    INHERIT_IBase(IName); \
    MAE_Ret (*GetBuffer)                (IName *pIVPROPERTY, u8* pBuffer, u32* pSize); \
    MAE_Ret (*SetBuffer)                (IName *pIVPROPERTY, u8* pBuffer, u32 nSize); \
    MAE_Ret (*AddParam)             (IName *pIVPROPERTY, IVPARAM* pIVPARAM); \
    MAE_Ret (*GetParam)             (IName *pIVPROPERTY, u32 nIndex, IVPARAM** ppIVPARAM); \
    MAE_Ret (*GetParamById)         (IName *pIVPROPERTY, VCALParameter_e nParamId, IVPARAM** ppIVPARAM); \
    s32 (*GetParamCount)            (IName *pIVPROPERTY); \
    VCALProperty_e  (*GetPropertyId)    (IName *pIVPROPERTY); \
    MAE_Ret (*GetPropertyName)      (IName *pIVPROPERTY, u8* pPropName, u32* pSize); \
    MAE_Ret (*InitPropertyById)     (IName *pIVPROPERTY, VCALProperty_e nPropId, void* pPropValue, u32 nSize, u8* pGroupName); \
    MAE_Ret (*InitPropertyByName)       (IName *pIVPROPERTY, u8* pPropName, void* pPropValue, u32 nSize, u8* pGroupName); \
    MAE_Ret (*GetGroupName)         (IName *pIVPROPERTY, u8* pGroupName, u32* pSize); \
    MAE_Ret (*GetPropertyValue)     (IName *pIVPROPERTY, u8* pPropValue, u32* pSize); \
    MAE_Ret (*ParseValue)               (IName *pIVPROPERTY, void* pBuffer, u32* pSize);\
    MAE_Ret (*CharSetIsUTF8)               (IName *pIVPROPERTY)
DEFINE_INTERFACE(IVPROPERTY);

#define IVPROPERTY_QueryInterface(pIVPROPERTY, id, pp, po)                                      GET_FUNCTBL((pIVPROPERTY), IVPROPERTY)->QueryInterface(pIVPROPERTY, id, pp, po)
#define IVPROPERTY_GetBuffer(pIVPROPERTY, pBuffer, pSize)                                       GET_FUNCTBL((pIVPROPERTY), IVPROPERTY)->GetBuffer(pIVPROPERTY, pBuffer, pSize)
#define IVPROPERTY_SetBuffer(pIVPROPERTY, pBuffer, nSize)                                       GET_FUNCTBL((pIVPROPERTY), IVPROPERTY)->SetBuffer(pIVPROPERTY, pBuffer, nSize)
#define IVPROPERTY_AddParam(pIVPROPERTY, pIVPARAM)                                          GET_FUNCTBL((pIVPROPERTY), IVPROPERTY)->AddParam(pIVPROPERTY, pIVPARAM)
#define IVPROPERTY_GetParam(pIVPROPERTY, nIndex, ppIVPARAM)                                 GET_FUNCTBL((pIVPROPERTY), IVPROPERTY)->GetParam(pIVPROPERTY, nIndex, ppIVPARAM)
#define IVPROPERTY_GetParamById(pIVPROPERTY, nParamId, ppIVPARAM)                           GET_FUNCTBL((pIVPROPERTY), IVPROPERTY)->GetParamById(pIVPROPERTY, nParamId, ppIVPARAM)
#define IVPROPERTY_GetParamCount(pIVPROPERTY)                                                   GET_FUNCTBL((pIVPROPERTY), IVPROPERTY)->GetParamCount(pIVPROPERTY)
#define IVPROPERTY_GetPropertyId(pIVPROPERTY)                                                   GET_FUNCTBL((pIVPROPERTY), IVPROPERTY)->GetPropertyId(pIVPROPERTY)
#define IVPROPERTY_GetPropertyName(pIVPROPERTY, pPropName, pSize)                               GET_FUNCTBL((pIVPROPERTY), IVPROPERTY)->GetPropertyName(pIVPROPERTY, pPropName, pSize)
#define IVPROPERTY_InitPropertyById(pIVPROPERTY, nPropId, pPropValue, nSize, pGroupName)        GET_FUNCTBL((pIVPROPERTY), IVPROPERTY)->InitPropertyById(pIVPROPERTY, nPropId, pPropValue, nSize, pGroupName)
#define IVPROPERTY_InitPropertyByName(pIVPROPERTY, pPropName, pPropValue, nSize, pGroupName)    GET_FUNCTBL((pIVPROPERTY), IVPROPERTY)->InitPropertyByName(pIVPROPERTY, pPropName, pPropValue, nSize, pGroupName)
#define IVPROPERTY_GetGroupName(pIVPROPERTY, pGroupName, pSize)                             GET_FUNCTBL((pIVPROPERTY), IVPROPERTY)->GetGroupName(pIVPROPERTY, pGroupName, pSize)
#define IVPROPERTY_GetPropertyValue(pIVPROPERTY, pPropValue, pSize)                             GET_FUNCTBL((pIVPROPERTY), IVPROPERTY)->GetPropertyValue(pIVPROPERTY, pPropValue, pSize)
#define IVPROPERTY_ParseValue(pIVPROPERTY, pBuffer, pSize)                                      GET_FUNCTBL((pIVPROPERTY), IVPROPERTY)->ParseValue(pIVPROPERTY, pBuffer, pSize)
#define IVPROPERTY_CharSetIsUTF8(pIVPROPERTY)                                      GET_FUNCTBL((pIVPROPERTY), IVPROPERTY)->CharSetIsUTF8(pIVPROPERTY)
/**
 * Functions
 */
MAE_Ret VPROPERTY_New(MAE_ClsId id, void **ppObj);

/**
 * IVEVENT Interfaces
 */
#define INHERIT_IVEVENT(IName) \
    INHERIT_IBase(IName); \
    MAE_Ret (*GetBuffer)            (IName *pIVEVENT, u8* pBuffer, u32* pSize); \
    MAE_Ret (*SetBuffer)            (IName *pIVEVENT, u8* pBuffer, u32 nSize); \
    MAE_Ret (*AddProperty)      (IName *pIVEVENT, IVPROPERTY* pIVPROPERTY); \
    MAE_Ret (*GetProperty)      (IName *pIVEVENT, u32 nIndex, IVPROPERTY** ppIVPROPERTY); \
    MAE_Ret (*GetPropertyById)  (IName *pIVEVENT, VCALProperty_e nPropId, IVPROPERTY** ppIVPROPERTY); \
    MAE_Ret (*GetPropertyByName)    (IName *pIVEVENT, u8* pPropName, IVPROPERTY** ppIVPROPERTY); \
    MAE_Ret (*RemoveProperty)   (IName *pIVEVENT, IVPROPERTY* pIVPROPERTY); \
    s32 (*GetPropertyCount) (IName *pIVEVENT)

DEFINE_INTERFACE(IVEVENT);

#define IVEVENT_QueryInterface(pIVEVENT, id, pp, po)                        GET_FUNCTBL((pIVEVENT), IVEVENT)->QueryInterface(pIVEVENT, id, pp, po)
#define IVEVENT_GetBuffer(pIVEVENT, pBuffer, pSize)                     GET_FUNCTBL((pIVEVENT), IVEVENT)->GetBuffer(pIVEVENT, pBuffer, pSize)
#define IVEVENT_SetBuffer(pIVEVENT, pBuffer, nSize)                     GET_FUNCTBL((pIVEVENT), IVEVENT)->SetBuffer(pIVEVENT, pBuffer, nSize)
#define IVEVENT_AddProperty(pIVEVENT, pIVPROPERTY)                      GET_FUNCTBL((pIVEVENT), IVEVENT)->AddProperty(pIVEVENT, pIVPROPERTY)
#define IVEVENT_GetProperty(pIVEVENT, nIndex, ppIVPROPERTY)         GET_FUNCTBL((pIVEVENT), IVEVENT)->GetProperty(pIVEVENT, nIndex, ppIVPROPERTY)
#define IVEVENT_GetPropertyById(pIVEVENT, nPropId, ppIVPROPERTY)        GET_FUNCTBL((pIVEVENT), IVEVENT)->GetPropertyById(pIVEVENT, nPropId, ppIVPROPERTY)
#define IVEVENT_GetPropertyByName(pIVEVENT, pPropName, ppIVPROPERTY)    GET_FUNCTBL((pIVEVENT), IVEVENT)->GetPropertyByName(pIVEVENT, pPropName, ppIVPROPERTY)
#define IVEVENT_RemoveProperty(pIVEVENT, pIVPROPERTY)                   GET_FUNCTBL((pIVEVENT), IVEVENT)->RemoveProperty(pIVEVENT, pIVPROPERTY)
#define IVEVENT_GetPropertyCount(pIVEVENT)                              GET_FUNCTBL((pIVEVENT), IVEVENT)->GetPropertyCount(pIVEVENT)

/**
 * Functions
 */
MAE_Ret VEVENT_New(MAE_ClsId id, void **ppObj);

#ifdef __APP_MMI_TODOLIST_VTODO__
/**
 * IVTODO Interfaces
 */
#define INHERIT_IVTODO(IName) \
    INHERIT_IBase(IName); \
    MAE_Ret (*GetBuffer)            (IName *pIVTODO, u8* pBuffer, u32* pSize); \
    MAE_Ret (*SetBuffer)            (IName *pIVTODO, u8* pBuffer, u32 nSize); \
    MAE_Ret (*AddProperty)      (IName *pIVTODO, IVPROPERTY* pIVPROPERTY); \
    MAE_Ret (*GetProperty)      (IName *pIVTODO, u32 nIndex, IVPROPERTY** ppIVPROPERTY); \
    MAE_Ret (*GetPropertyById)  (IName *pIVTODO, VCALProperty_e nPropId, IVPROPERTY** ppIVPROPERTY); \
    MAE_Ret (*GetPropertyByName)    (IName *pIVTODO, u8* pPropName, IVPROPERTY** ppIVPROPERTY); \
    MAE_Ret (*RemoveProperty)   (IName *pIVTODO, IVPROPERTY* pIVPROPERTY); \
    s32 (*GetPropertyCount) (IName *pIVTODO)

DEFINE_INTERFACE(IVTODO);

#define IVTODO_QueryInterface(pIVTODO, id, pp, po)                        GET_FUNCTBL((pIVTODO), IVTODO)->QueryInterface(pIVTODO, id, pp, po)
#define IVTODO_GetBuffer(pIVTODO, pBuffer, pSize)                     GET_FUNCTBL((pIVTODO), IVTODO)->GetBuffer(pIVTODO, pBuffer, pSize)
#define IVTODO_SetBuffer(pIVTODO, pBuffer, nSize)                     GET_FUNCTBL((pIVTODO), IVTODO)->SetBuffer(pIVTODO, pBuffer, nSize)
#define IVTODO_AddProperty(pIVTODO, pIVPROPERTY)                      GET_FUNCTBL((pIVTODO), IVTODO)->AddProperty(pIVTODO, pIVPROPERTY)
#define IVTODO_GetProperty(pIVTODO, nIndex, ppIVPROPERTY)         GET_FUNCTBL((pIVTODO), IVTODO)->GetProperty(pIVTODO, nIndex, ppIVPROPERTY)
#define IVTODO_GetPropertyById(pIVTODO, nPropId, ppIVPROPERTY)        GET_FUNCTBL((pIVTODO), IVTODO)->GetPropertyById(pIVTODO, nPropId, ppIVPROPERTY)
#define IVTODO_GetPropertyByName(pIVTODO, pPropName, ppIVPROPERTY)    GET_FUNCTBL((pIVTODO), IVTODO)->GetPropertyByName(pIVTODO, pPropName, ppIVPROPERTY)
#define IVTODO_RemoveProperty(pIVTODO, pIVPROPERTY)                   GET_FUNCTBL((pIVTODO), IVTODO)->RemoveProperty(pIVTODO, pIVPROPERTY)
#define IVTODO_GetPropertyCount(pIVTODO)                              GET_FUNCTBL((pIVTODO), IVTODO)->GetPropertyCount(pIVTODO)

/**
 * Functions
 */
MAE_Ret VTODO_New(MAE_ClsId id, void **ppObj);
#endif

/**
 * IVCALENDAR Interfaces
 */
#ifdef __APP_MMI_TODOLIST_VTODO__
#define INHERIT_IVCALENDAR(IName) \
    INHERIT_IBase(IName); \
    MAE_Ret (*GetBuffer)            (IName *pIVCALENDAR, u8* pBuffer, u32* pSize); \
    MAE_Ret (*SetBuffer)            (IName *pIVCALENDAR, u8* pBuffer, u32 nSize); \
    MAE_Ret (*AddProperty)      	(IName *pIVCALENDAR, IVPROPERTY* pIVPROPERTY); \
    MAE_Ret (*GetProperty)      	(IName *pIVCALENDAR, u32 nIndex, IVPROPERTY** ppIVPROPERTY); \
    MAE_Ret (*GetPropertyById)  	(IName *pIVCALENDAR, VCALProperty_e nPropId, IVPROPERTY** ppIVPROPERTY); \
    s32 (*GetPropertyCount) 		(IName *pIVCALENDAR); \
    MAE_Ret (*AddEvent)         	(IName *pIVCALENDAR, IVEVENT* pIVEVENT); \
    MAE_Ret (*GetEvent)         	(IName *pIVCALENDAR, u32 nIndex, IVEVENT** ppIVEVENT); \
    MAE_Ret (*RemoveEvent)      	(IName *pIVCALENDAR, IVEVENT* pIVEVENT); \
    s32 (*GetEventCount)        	(IName *pIVCALENDAR); \
    boolean (*IsValidVCalendar)     (IName *pIVCALENDAR, u8* pBuffer); \
    u8 (*GetEventBeginStrCount)     (IName *pIVCALENDAR, u8* pBuffer); \
    u8 (*GetToDoBeginStrCount)      (IName *pIVCALENDAR, u8* pBuffer); \
    MAE_Ret (*AddTodo)         		(IName *pIVCALENDAR, IVTODO* pIVTODO); \
    MAE_Ret (*GetTodo)         		(IName *pIVCALENDAR, u32 nIndex, IVTODO** ppIVTODO); \
    MAE_Ret (*RemoveTodo)     		(IName *pIVCALENDAR, IVTODO* pIVTODO); \
    s32 (*GetTodoCount)      		(IName *pIVCALENDAR)
#else
#define INHERIT_IVCALENDAR(IName) \
    INHERIT_IBase(IName); \
    MAE_Ret (*GetBuffer)            (IName *pIVCALENDAR, u8* pBuffer, u32* pSize); \
    MAE_Ret (*SetBuffer)            (IName *pIVCALENDAR, u8* pBuffer, u32 nSize); \
    MAE_Ret (*AddProperty)          (IName *pIVCALENDAR, IVPROPERTY* pIVPROPERTY); \
    MAE_Ret (*GetProperty)          (IName *pIVCALENDAR, u32 nIndex, IVPROPERTY** ppIVPROPERTY); \
    MAE_Ret (*GetPropertyById)      (IName *pIVCALENDAR, VCALProperty_e nPropId, IVPROPERTY** ppIVPROPERTY); \
    s32 (*GetPropertyCount)         (IName *pIVCALENDAR); \
    MAE_Ret (*AddEvent)             (IName *pIVCALENDAR, IVEVENT* pIVEVENT); \
    MAE_Ret (*GetEvent)             (IName *pIVCALENDAR, u32 nIndex, IVEVENT** ppIVEVENT); \
    MAE_Ret (*RemoveEvent)          (IName *pIVCALENDAR, IVEVENT* pIVEVENT); \
    s32 (*GetEventCount)            (IName *pIVCALENDAR); \
    boolean (*IsValidVCalendar)     (IName *pIVCALENDAR, u8* pBuffer); \
    u8 (*GetEventBeginStrCount)     (IName *pIVCALENDAR, u8* pBuffer); \
    u8 (*GetToDoBeginStrCount)      (IName *pIVCALENDAR, u8* pBuffer)
#endif
DEFINE_INTERFACE(IVCALENDAR);

#define IVCALENDAR_QueryInterface(pIVCALENDAR, id, pp, po)                  GET_FUNCTBL((pIVCALENDAR), IVCALENDAR)->QuertInterface(pIVCALENDAR, id, pp, po)
#define IVCALENDAR_GetBuffer(pIVCALENDAR, pBuffer, pSize)                   GET_FUNCTBL((pIVCALENDAR), IVCALENDAR)->GetBuffer(pIVCALENDAR, pBuffer, pSize)
#define IVCALENDAR_SetBuffer(pIVCALENDAR, pBuffer, nSize)                   GET_FUNCTBL((pIVCALENDAR), IVCALENDAR)->SetBuffer(pIVCALENDAR, pBuffer, nSize)
#define IVCALENDAR_AddProperty(pIVCALENDAR, pIVPROPERTY)                    GET_FUNCTBL((pIVCALENDAR), IVCALENDAR)->AddProperty(pIVCALENDAR, pIVPROPERTY)
#define IVCALENDAR_GetProperty(pIVCALENDAR, nIndex, ppIVPROPERTY)           GET_FUNCTBL((pIVCALENDAR), IVCALENDAR)->GetProperty(pIVCALENDAR, nIndex, ppIVPROPERTY)
#define IVCALENDAR_GetPropertyById(pIVCALENDAR, nPropId, ppIVPROPERTY)      GET_FUNCTBL((pIVCALENDAR), IVCALENDAR)->GetPropertyById(pIVCALENDAR, nPropId, ppIVPROPERTY)
#define IVCALENDAR_GetPropertyCount(pIVCALENDAR)                            GET_FUNCTBL((pIVCALENDAR), IVCALENDAR)->GetPropertyCount(pIVCALENDAR)
#define IVCALENDAR_AddEvent(pIVCALENDAR, pIVEVENT)                          GET_FUNCTBL((pIVCALENDAR), IVCALENDAR)->AddEvent(pIVCALENDAR, pIVEVENT)
#define IVCALENDAR_GetEvent(pIVCALENDAR, nIndex, ppIVEVENT)                 GET_FUNCTBL((pIVCALENDAR), IVCALENDAR)->GetEvent(pIVCALENDAR, nIndex, ppIVEVENT)
#define IVCALENDAR_RemoveEvent(pIVCALENDAR, pIVEVENT)                       GET_FUNCTBL((pIVCALENDAR), IVCALENDAR)->RemoveEvent(pIVCALENDAR, pIVEVENT)
#define IVCALENDAR_GetEventCount(pIVCALENDAR)                               GET_FUNCTBL((pIVCALENDAR), IVCALENDAR)->GetEventCount(pIVCALENDAR)
#define IVCALENDAR_IsValidVCalendar(pIVCALENDAR, pBuffer)                   GET_FUNCTBL((pIVCALENDAR), IVCALENDAR)->IsValidVCalendar(pIVCALENDAR, pBuffer)
#define IVCALENDAR_GetEventBeginStrCount(pIVCALENDAR, pBuffer)              GET_FUNCTBL((pIVCALENDAR), IVCALENDAR)->GetEventBeginStrCount(pIVCALENDAR, pBuffer)
#define IVCALENDAR_GetToDoBeginStrCount(pIVCALENDAR, pBuffer)               GET_FUNCTBL((pIVCALENDAR), IVCALENDAR)->GetToDoBeginStrCount(pIVCALENDAR, pBuffer)
#ifdef __APP_MMI_TODOLIST_VTODO__
#define IVCALENDAR_AddTodo(pIVCALENDAR, pIVTODO)                            GET_FUNCTBL((pIVCALENDAR), IVCALENDAR)->AddTodo(pIVCALENDAR, pIVTODO)
#define IVCALENDAR_GetTodo(pIVCALENDAR, nIndex, ppIVTODO)                   GET_FUNCTBL((pIVCALENDAR), IVCALENDAR)->GetTodo(pIVCALENDAR, nIndex, ppIVTODO)
#define IVCALENDAR_RemoveTodo(pIVCALENDAR, pIVTODO)                         GET_FUNCTBL((pIVCALENDAR), IVCALENDAR)->RemoveTodo(pIVCALENDAR, pIVTODO)
#define IVCALENDAR_GetTodoCount(pIVCALENDAR)                                GET_FUNCTBL((pIVCALENDAR), IVCALENDAR)->GetTodoCount(pIVCALENDAR)
#endif

/**
 * Functions
 */
MAE_Ret VCALENDAR_New(MAE_ClsId id, void **ppObj);

/*-------------------------------------------------------------------------*/

/**
 * External Events
 */

/**
 * IVCALPARSER Interfaces
 */
#define INHERIT_IVCALPARSER(IName) \
    INHERIT_IHandler(IName); \
    MAE_Ret     (*GetBuffer)                                    (IName *, u8* pBuffer, u32* pSize); \
    MAE_Ret     (*SetBuffer)                                    (IName *, u8* pBuffer, u32 nSize); \
    MAE_Ret     (*AddCalendar)                                  (IName *, IVCALENDAR* pIVCALENDAR); \
    MAE_Ret     (*GetCalendar)                                  (IName *, u32 nIndex, IVCALENDAR** ppIVCALENDAR); \
    s32         (*GetCalendarCount)                         (IName *); \
    MAE_Ret     (*ParseAlarmToString)                           (IName *, VCALAlarm_t* pAlarm, u8** ppBuffer); \
    MAE_Ret     (*ParseStringToAlarm)                           (IName *, u8* pBuffer, VCALAlarm_t* pAlarm); \
    MAE_Ret     (*ParseRRuleToString)                           (IName *, VCALRRule_t* pRRule, u8** ppBuffer); \
    MAE_Ret     (*ParseStringToRRule)                           (IName *, u8* pBuffer, VCALRRule_t* pRRule)

DEFINE_INTERFACE(IVCALPARSER);

#define IVCALPARSER_QueryInterface(pICntlr, id, pp, po)     GET_FUNCTBL((pICntlr), IVCALPARSER)->QueryInterface(pICntlr, id, pp, po)
#define IVCALPARSER_HandleEvent(pICntlr, e, p1, p2)         GET_FUNCTBL((pICntlr), IVCALPARSER)->HandleEvent(pICntlr, e, p1, p2)
#define IVCALPARSER_SetHandler(pICntlr, pHd)                GET_FUNCTBL((pICntlr), IVCALPARSER)->SetHandler(pICntlr, pHd)
#define IVCALPARSER_GetBuffer(pICntlr, p1, p2)              GET_FUNCTBL((pICntlr), IVCALPARSER)->GetBuffer(pICntlr, p1, p2)
#define IVCALPARSER_SetBuffer(pICntlr, p1, p2)              GET_FUNCTBL((pICntlr), IVCALPARSER)->SetBuffer(pICntlr, p1, p2)
#define IVCALPARSER_AddCalendar(pICntlr, p1)                GET_FUNCTBL((pICntlr), IVCALPARSER)->AddCalendar(pICntlr, p1)
#define IVCALPARSER_GetCalendar(pICntlr, p1, p2)            GET_FUNCTBL((pICntlr), IVCALPARSER)->GetCalendar(pICntlr, p1, p2)
#define IVCALPARSER_GetCalendarCount(pICntlr)               GET_FUNCTBL((pICntlr), IVCALPARSER)->GetCalendarCount(pICntlr)
#define IVCALPARSER_ParseAlarmToString(pICntlr, p1, pp2)        GET_FUNCTBL((pICntlr), IVCALPARSER)->ParseAlarmToString(pICntlr, p1, pp2)
#define IVCALPARSER_ParseStringToAlarm(pICntlr, p1, p2)     GET_FUNCTBL((pICntlr), IVCALPARSER)->ParseStringToAlarm(pICntlr, p1, p2)
#define IVCALPARSER_ParseRRuleToString(pICntlr, p1, pp2)        GET_FUNCTBL((pICntlr), IVCALPARSER)->ParseRRuleToString(pICntlr, p1, pp2)
#define IVCALPARSER_ParseStringToRRule(pICntlr, p1, p2)     GET_FUNCTBL((pICntlr), IVCALPARSER)->ParseStringToRRule(pICntlr, p1, p2)

/**
 * Functions
 */
void VCALPARSER_Init(void);

MAE_Ret VCALPARSER_New(MAE_ClsId id, void **ppObj);

/*-------------------------------------------------------------------------*/
#endif /* End of __CALENDAR_SUPPORT_VCS_MMI__ */
#endif /* __MMI_VCALPARSERSRV_H__ */
