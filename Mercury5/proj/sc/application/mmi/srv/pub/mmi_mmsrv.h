/**
* @file mmi_mmsrv.h
*
* State Machine Service - MMSRV
* Generated by XFSM v1.0, CodeVer=v0.24
*
* Class Id: CLSID_MMSRV
*
*
* @version $Id: mmi_mmsrv.h 41541 2009-09-28 03:11:36Z lih.wang $
*/
#ifndef __MMI_MMSRV_H__
#define __MMI_MMSRV_H__

#include "mmi_mae_common_def.h"
#include "mmi_mae_applet.h"
#include "mmi_mae_class.h"
#include "mmi_mmsrv_def.h"

#define MMSRV_NET_INFO_QUERY_TIMER      3000 // Network info query repeat interval: 3 seconds
#define MMSRV_NET_INFO_QUERY_TIMES      120  // Network info query repeate times:   120 times
#define MMSRV_CFU_STATUS_QUERY_TIMER    3000 // CFU status query repeat interval: 3 seconds
#define MMSRV_CFU_STATUS_QUERY_TIMES    10   // CFU status query repeate times:   10 times


#ifdef __MM_TEST__

#define MMSRV_RSSI_TIMER            8000
#ifdef __GPRS_MMI__
#define MMSRV_GPRS_REG_TIMER        7000
#endif //__GPRS_MMI__
#define MMSRV_NETWORK_REG_TIMER     6000

#define MMSRV_DELAY_TIMER           1000

#endif

typedef enum
{
    NITZInd_Mask = 1 << 1
   ,SignalStrengthInd_Mask = 1 << 2
   ,NetworkKLostInd_Mask = 1 << 3
   ,EmergencyCallOnlyInd_Mask = 1 << 4
   ,GPRSRegStatusInd_Mask = 1 << 5
   ,NetworkRegInd_Mask = 1 << 6
   ,NetworkTypeInd_Mask = 1 << 7
   ,LineServiceInd_Mask = 1 << 8
   ,All_MMSRV_Evt_Mask = (s32) 0xFFFFFFFF
} MMSRV_Event_Mask_e;

/**
 * External Events
 */
#define MMSRV_EVT_NetworkSearchReq              (CLSID_MMSRV << 16 | 1)
#define MMSRV_EVT_NetworkSearchCnf              (CLSID_MMSRV << 16 | 2)
#define MMSRV_EVT_NetworkRegReq             (CLSID_MMSRV << 16 | 3)
#define MMSRV_EVT_NetworkRegCnf             (CLSID_MMSRV << 16 | 4)
#define MMSRV_EVT_CellInfoReq               (CLSID_MMSRV << 16 | 5)
#define MMSRV_EVT_CellInfoCnf               (CLSID_MMSRV << 16 | 6)
#define MMSRV_EVT_UpdatePreferredPLMNListReq                (CLSID_MMSRV << 16 | 7)
#define MMSRV_EVT_UpdatePreferredPLMNListCnf                (CLSID_MMSRV << 16 | 8)
#define MMSRV_EVT_QueryPreferredPLMNListReq             (CLSID_MMSRV << 16 | 9)
#define MMSRV_EVT_QueryPreferredPLMNListCnf             (CLSID_MMSRV << 16 | 10)
#define MMSRV_EVT_ChangeBandReq             (CLSID_MMSRV << 16 | 11)
#define MMSRV_EVT_ChangeBandCnf             (CLSID_MMSRV << 16 | 12)
#define MMSRV_EVT_QueryBandReq              (CLSID_MMSRV << 16 | 13)
#define MMSRV_EVT_QueryBandCnf              (CLSID_MMSRV << 16 | 14)
#define MMSRV_EVT_ChangeLineReq             (CLSID_MMSRV << 16 | 15)
#define MMSRV_EVT_ChangeLineCnf             (CLSID_MMSRV << 16 | 16)
#define MMSRV_EVT_QueryLineReq              (CLSID_MMSRV << 16 | 17)
#define MMSRV_EVT_QueryLineCnf              (CLSID_MMSRV << 16 | 18)
#define MMSRV_EVT_GPRSAttachReq             (CLSID_MMSRV << 16 | 19)
#define MMSRV_EVT_GPRSAttachCnf             (CLSID_MMSRV << 16 | 20)
#define MMSRV_EVT_AbortReq              (CLSID_MMSRV << 16 | 21)
#define MMSRV_EVT_AbortCnf              (CLSID_MMSRV << 16 | 22)
#define MMSRV_EVT_NITZInd               (CLSID_MMSRV << 16 | 23)
#define MMSRV_EVT_SignalStrengthInd             (CLSID_MMSRV << 16 | 24)
#define MMSRV_EVT_NetworkKLostInd               (CLSID_MMSRV << 16 | 25)
#define MMSRV_EVT_EmergencyCallOnlyInd              (CLSID_MMSRV << 16 | 26)
#define MMSRV_EVT_GPRSRegStatusInd              (CLSID_MMSRV << 16 | 27)
#define MMSRV_EVT_NetworkRegInd             (CLSID_MMSRV << 16 | 28)
#define MMSRV_EVT_NetworkTypeInd                (CLSID_MMSRV << 16 | 29)
#define MMSRV_EVT_OnlineReq             (CLSID_MMSRV << 16 | 30)
#define MMSRV_EVT_OnlineCnf             (CLSID_MMSRV << 16 | 31)
#define MMSRV_EVT_OfflineReq                (CLSID_MMSRV << 16 | 32)
#define MMSRV_EVT_OfflineCnf                (CLSID_MMSRV << 16 | 33)
#define MMSRV_EVT_CheckWaitingQueue             (CLSID_MMSRV << 16 | 34)
#define MMSRV_EVT_LineServiceInd                (CLSID_MMSRV << 16 | 35)
#define MMSRV_EVT_UpdateWgprsReq                (CLSID_MMSRV << 16 | 36)
#define MMSRV_EVT_UpdateWgprsCnf                (CLSID_MMSRV << 16 | 37)
#define MMSRV_EVT_QueryWgprsReq             (CLSID_MMSRV << 16 | 38)
#define MMSRV_EVT_QueryWgprsCnf             (CLSID_MMSRV << 16 | 39)
#define MMSRV_EVT_MSClassReq                (CLSID_MMSRV << 16 | 40)
#define MMSRV_EVT_MSClassCnf                (CLSID_MMSRV << 16 | 41)
#define MMSRV_EVT_GPRS_PDPContextActReq             (CLSID_MMSRV << 16 | 42)
#define MMSRV_EVT_GPRS_PDPContextActCnf             (CLSID_MMSRV << 16 | 43)
#define MMSRV_EVT_GPRS_AddPDPContextReq             (CLSID_MMSRV << 16 | 44)
#define MMSRV_EVT_GPRS_AddPDPContextCnf             (CLSID_MMSRV << 16 | 45)
#define MMSRV_EVT_GPRS_DeletePDPContextReq              (CLSID_MMSRV << 16 | 46)
#define MMSRV_EVT_GPRS_DeletePDPContextCnf              (CLSID_MMSRV << 16 | 47)
#define MMSRV_EVT_GPRS_SetQoSReq                (CLSID_MMSRV << 16 | 48)
#define MMSRV_EVT_GPRS_SetQoSCnf                (CLSID_MMSRV << 16 | 49)
#define MMSRV_EVT_GPRS_QueQoSReq                (CLSID_MMSRV << 16 | 50)
#define MMSRV_EVT_GPRS_QueQoSCnf                (CLSID_MMSRV << 16 | 51)
#define MMSRV_EVT_SyncAutoTimeZone              (CLSID_MMSRV << 16 | 52)
#define MMSRV_EVT_ChangeNetAccessModeReq                (CLSID_MMSRV << 16 | 53)
#define MMSRV_EVT_ChangeNetAccessModeCnf                (CLSID_MMSRV << 16 | 54)
#define MMSRV_EVT_CleanBAListCnf                (CLSID_MMSRV << 16 | 55)
#define MMSRV_EVT_SetIMEIReq                (CLSID_MMSRV << 16 | 56)
#define MMSRV_EVT_SetIMEICnf                (CLSID_MMSRV << 16 | 57)

/**
 * IMMSRV Interfaces
 */
#ifdef __3G_RIL_MMI__
#define INHERIT_IMMSRV(IName) \
    INHERIT_IHandler(IName); \
    MAE_Ret     (*RegisterListener)     ( IName * , void* callerID, u32 mask);  \
    MAE_Ret     (*DeregisterListener)       ( IName * , void* callerID, u32 mask);  \
    MMI_MMSRV_Status_e      (*GetMMServiceStatus)       ( IName * );  \
    MAE_Ret     (*NetworkSearchReq)     ( IName * , void* callerID, u8 DualMode);  \
    MAE_Ret     (*NetworkRegReq)        ( IName * , void* callerID, MMI_MMSRV_RegMode_e  regMode, MMI_MMSRV_Oper_Format_e operFormat, u8* pOper, u8 DualMode);  \
    MAE_Ret     (*NetworkRegReqEx)        ( IName * , void* callerID, MMI_MMSRV_RegMode_e  regMode, MMI_MMSRV_Oper_Format_e operFormat, u8* pOper, MMI_MMSRV_RR_ACT_e eAct, u8 DualMode);  \
    MAE_Ret     (*UpdatePreferredListReq)       ( IName * , void* callerID, u8 index, MMI_MMSRV_Oper_Format_e  operFormat, u8* pOper, u8 DualMode);  \
    MAE_Ret     (*UpdatePreferredListReqEx)       ( IName * , void* callerID, u8 index, MMI_MMSRV_Oper_Format_e  operFormat, u8* pOper, u16 uActMask, u8 DualMode);  \
    MAE_Ret     (*QueryPreferredListReq)        ( IName * , void* pCallerID, u8 DualMode);  \
    MAE_Ret     (*ChangeBandReq)        ( IName * , void* callerID, MMI_MMSRV_Band_e  bandID, u8 DualMode);  \
    MAE_Ret     (*ChangeBandReqEx)        ( IName * , void* callerID, MMSRV_BandSelectionInfo_t  bandSel, u8 DualMode);  \
    MAE_Ret     (*ChangeLineReq)        ( IName * , void* callerID, MMI_MMSRV_Line_Service_e  lineNumber, u8 DualMode);  \
    MAE_Ret     (*GprsAttachReq)        ( IName * , void* callerID, MMI_MMSRV_GPRS_Reg_e operation, u8 DualMode);  \
    MAE_Ret     (*AbortReq)     ( IName * , void* callerID, u8 DualMode);  \
    MAE_Ret     (*QueryNetworkStatus)       ( IName * , MMSRV_NetworkRegInfo_t* pOut, u8 DualMode);  \
    MAE_Ret     (*OnlineReq)        ( IName * , void* pCallerID, MMI_MMSRV_SearchMode_e  mode);  \
    MAE_Ret     (*OfflineReq)       ( IName * , void* pCallerID);  \
    MAE_Ret     (*QueryLineReq)     ( IName * , void* pCallerID, u8 DualMode);  \
    MAE_Ret     (*QueryBandReq)     ( IName * , void* pCallerID, u8 DualMode);  \
    MAE_Ret     (*MSClassReq)       ( IName * , void* pCallerID, MMSRV_MSClassReq_t *pReq, u8 DualMode);  \
    MAE_Ret     (*GPRSPDPContextActReq)     ( IName * , void* pCallerID, MMSRV_GPRSPDPContextActReq_t *pReq, u8 DualMode);  \
    MAE_Ret     (*GPRSAddPDPContextReq)     ( IName * , void* pCallerID, MMSRV_GPRSPDPContextAddReq_t *pReq, u8 DualMode);  \
    MAE_Ret     (*GPRSDeletePDPContextReq)      ( IName * , void* pCallerID, u8 Cid, u8 DualMode);  \
    MAE_Ret     (*GPRSSetQoSReq)        ( IName * , void* pCallerID, MMSRV_GPRSQoSSetReq_t *pReq, u8 DualMode);  \
    MAE_Ret     (*GPRSQueQoSReq)        ( IName * , void* pCallerID, MMSRV_GPRSQoSQueReq_t *pReq, u8 DualMode);  \
    MAE_Ret     (*CellInfoReq)      ( IName * , void* pCallerID, MMSRV_CellInfoReq_t *pReq, u8 DualMode);  \
    MMI_MMSRV_Line_Service_e        (*GetLineStatus)        ( IName * , u8 DualMode);  \
    MAE_Ret     (*SyncWithTimezone)     ( IName * , boolean bYesNo);  \
    MAE_Ret     (*QueryNITZNetworkInfo)     ( IName * , u8 nCurDualID, MMSRV_NITZNetworkInfo_t  *pOut);  \
    MAE_Ret     (*ResetNetworkReq)      ( IName * , void* pCallerID);  \
    MAE_Ret     (*QueryGprsStatus)      ( IName * , MMSRV_GPRSRegInfo_t* pOut, u8 DualMode);  \
    MAE_Ret     (*SetWgprsReq)      ( IName * , void* pCallerID, MMSRV_WGPRSReq_t *pReq, u8 DualMode);  \
    MAE_Ret     (*QueryWgprsReq)        ( IName * , void* pCallerID, MMSRV_QueryWGPRSReq_t *pReq, u8 DualMode);  \
    MAE_Ret     (*ChangeNetAccessModeReg)       ( IName * , void* pCallerID, MMI_MMSRV_NetAccess_Mode_e AccessMode, u8 DualMode);  \
    MAE_Ret     (*SetIMEIReq)     ( IName * , void* pCallerID, u8 DualMode, u8 *pIMEI); \
    MAE_Ret     (*GetNetworkQueryStatusReq)     ( IName * , u8 DualMode, boolean *bIsNetworkInfoQueried);  \
    MAE_Ret     (*SetNetworkQueryStatusReq)     ( IName * , u8 DualMode, boolean bIsNetworkInfoQueried);  \
    MAE_Ret     (*GetNetworkSettingInfoReq)     ( IName * , u8 DualMode, MMSRV_NetworkSettingInfo_t *pNetworkSettingInfo)

DEFINE_INTERFACE(IMMSRV);
#else  //#ifdef __3G_RIL_MMI__
#ifdef __GPRS_MMI__
#define INHERIT_IMMSRV(IName) \
    INHERIT_IHandler(IName); \
    MAE_Ret     (*RegisterListener)     ( IName * , void* callerID, u32 mask);  \
    MAE_Ret     (*DeregisterListener)       ( IName * , void* callerID, u32 mask);  \
    MMI_MMSRV_Status_e      (*GetMMServiceStatus)       ( IName * );  \
    MAE_Ret     (*NetworkSearchReq)     ( IName * , void* callerID, u8 DualMode);  \
    MAE_Ret     (*NetworkRegReq)        ( IName * , void* callerID, MMI_MMSRV_RegMode_e  regMode, MMI_MMSRV_Oper_Format_e operFormat, u8* pOper, u8 DualMode);  \
    MAE_Ret     (*UpdatePreferredListReq)       ( IName * , void* callerID, u8 index, MMI_MMSRV_Oper_Format_e  operFormat, u8* pOper, u8 DualMode);  \
    MAE_Ret     (*QueryPreferredListReq)        ( IName * , void* pCallerID, u8 DualMode);  \
    MAE_Ret     (*ChangeBandReq)        ( IName * , void* callerID, MMI_MMSRV_Band_e  bandID, u8 DualMode);  \
    MAE_Ret     (*ChangeLineReq)        ( IName * , void* callerID, MMI_MMSRV_Line_Service_e  lineNumber, u8 DualMode);  \
    MAE_Ret     (*GprsAttachReq)        ( IName * , void* callerID, MMI_MMSRV_GPRS_Reg_e operation, u8 DualMode);  \
    MAE_Ret     (*AbortReq)     ( IName * , void* callerID, u8 DualMode);  \
    MAE_Ret     (*QueryNetworkStatus)       ( IName * , MMSRV_NetworkRegInfo_t* pOut, u8 DualMode);  \
    MAE_Ret     (*OnlineReq)        ( IName * , void* pCallerID, MMI_MMSRV_SearchMode_e  mode);  \
    MAE_Ret     (*OfflineReq)       ( IName * , void* pCallerID);  \
    MAE_Ret     (*QueryLineReq)     ( IName * , void* pCallerID, u8 DualMode);  \
    MAE_Ret     (*QueryBandReq)     ( IName * , void* pCallerID, u8 DualMode);  \
    MAE_Ret     (*MSClassReq)       ( IName * , void* pCallerID, MMSRV_MSClassReq_t *pReq, u8 DualMode);  \
    MAE_Ret     (*GPRSPDPContextActReq)     ( IName * , void* pCallerID, MMSRV_GPRSPDPContextActReq_t *pReq, u8 DualMode);  \
    MAE_Ret     (*GPRSAddPDPContextReq)     ( IName * , void* pCallerID, MMSRV_GPRSPDPContextAddReq_t *pReq, u8 DualMode);  \
    MAE_Ret     (*GPRSDeletePDPContextReq)      ( IName * , void* pCallerID, u8 Cid, u8 DualMode);  \
    MAE_Ret     (*GPRSSetQoSReq)        ( IName * , void* pCallerID, MMSRV_GPRSQoSSetReq_t *pReq, u8 DualMode);  \
    MAE_Ret     (*GPRSQueQoSReq)        ( IName * , void* pCallerID, MMSRV_GPRSQoSQueReq_t *pReq, u8 DualMode);  \
    MAE_Ret     (*CellInfoReq)      ( IName * , void* pCallerID, MMSRV_CellInfoReq_t *pReq, u8 DualMode);  \
    MAE_Ret     (*CleanBAListReq)      ( IName * , void* pCallerID );  \
    MMI_MMSRV_Line_Service_e        (*GetLineStatus)        ( IName * , u8 DualMode);  \
    MAE_Ret     (*SyncWithTimezone)     ( IName * , boolean bYesNo);  \
    MAE_Ret     (*QueryNITZNetworkInfo)     ( IName * , u8 nCurDualID, MMSRV_NITZNetworkInfo_t  *pOut);  \
    MAE_Ret     (*ResetNetworkReq)      ( IName * , void* pCallerID);  \
    MAE_Ret     (*QueryGprsStatus)      ( IName * , MMSRV_GPRSRegInfo_t* pOut, u8 DualMode);  \
    MAE_Ret     (*SetWgprsReq)      ( IName * , void* pCallerID, MMSRV_WGPRSReq_t *pReq, u8 DualMode);  \
    MAE_Ret     (*QueryWgprsReq)        ( IName * , void* pCallerID, MMSRV_QueryWGPRSReq_t *pReq, u8 DualMode);  \
    MAE_Ret     (*ChangeNetAccessModeReg)       ( IName * , void* pCallerID, MMI_MMSRV_NetAccess_Mode_e AccessMode, u8 DualMode); \
    MAE_Ret     (*SetIMEIReq)     ( IName * , void* pCallerID, u8 DualMode, u8 *pIMEI)
#else
#define INHERIT_IMMSRV(IName) \
    INHERIT_IHandler(IName); \
    MAE_Ret     (*RegisterListener)     ( IName * , void* callerID, u32 mask);  \
    MAE_Ret     (*DeregisterListener)       ( IName * , void* callerID, u32 mask);  \
    MMI_MMSRV_Status_e      (*GetMMServiceStatus)       ( IName * );  \
    MAE_Ret     (*NetworkSearchReq)     ( IName * , void* callerID, u8 DualMode);  \
    MAE_Ret     (*NetworkRegReq)        ( IName * , void* callerID, MMI_MMSRV_RegMode_e  regMode, MMI_MMSRV_Oper_Format_e operFormat, u8* pOper, u8 DualMode);  \
    MAE_Ret     (*UpdatePreferredListReq)       ( IName * , void* callerID, u8 index, MMI_MMSRV_Oper_Format_e  operFormat, u8* pOper, u8 DualMode);  \
    MAE_Ret     (*QueryPreferredListReq)        ( IName * , void* pCallerID, u8 DualMode);  \
    MAE_Ret     (*ChangeBandReq)        ( IName * , void* callerID, MMI_MMSRV_Band_e  bandID, u8 DualMode);  \
    MAE_Ret     (*ChangeLineReq)        ( IName * , void* callerID, MMI_MMSRV_Line_Service_e  lineNumber, u8 DualMode);  \
    MAE_Ret     (*AbortReq)     ( IName * , void* callerID, u8 DualMode);  \
    MAE_Ret     (*QueryNetworkStatus)       ( IName * , MMSRV_NetworkRegInfo_t* pOut, u8 DualMode);  \
    MAE_Ret     (*OnlineReq)        ( IName * , void* pCallerID, MMI_MMSRV_SearchMode_e  mode);  \
    MAE_Ret     (*OfflineReq)       ( IName * , void* pCallerID);  \
    MAE_Ret     (*QueryLineReq)     ( IName * , void* pCallerID, u8 DualMode);  \
    MAE_Ret     (*QueryBandReq)     ( IName * , void* pCallerID, u8 DualMode);  \
    MAE_Ret     (*CellInfoReq)      ( IName * , void* pCallerID, MMSRV_CellInfoReq_t *pReq, u8 DualMode);  \
    MAE_Ret     (*CleanBAListReq)      ( IName * , void* pCallerID );  \
    MMI_MMSRV_Line_Service_e        (*GetLineStatus)        ( IName * , u8 DualMode);  \
    MAE_Ret     (*SyncWithTimezone)     ( IName * , boolean bYesNo);  \
    MAE_Ret     (*QueryNITZNetworkInfo)     ( IName * , u8 nCurDualID, MMSRV_NITZNetworkInfo_t  *pOut);  \
    MAE_Ret     (*ResetNetworkReq)      ( IName * , void* pCallerID); \
    MAE_Ret     (*SetIMEIReq)     ( IName * , void* pCallerID, u8 DualMode, u8 *pIMEI)

#endif //__GPRS_MMI__
DEFINE_INTERFACE(IMMSRV);
#endif  //#ifdef __3G_RIL_MMI__


#define IMMSRV_QueryInterface(pICntlr, id, pp, po)          GET_FUNCTBL((pICntlr), IMMSRV)->QueryInterface(pICntlr, id, pp, po)
#define IMMSRV_HandleEvent(pICntlr, e, p1, p2)              GET_FUNCTBL((pICntlr), IMMSRV)->HandleEvent(pICntlr, e, p1, p2)
/**
 Purpose: The interface is provided APPs to register listener for some significant events for MM Service status
 */
#define IMMSRV_RegisterListener(pICntlr, p1, p2)    GET_FUNCTBL((pICntlr), IMMSRV)->RegisterListener( pICntlr, p1, p2)
/**
 Purpose: The interface is provided APPs to register listener for some significant events for MM Service status
 */
#define IMMSRV_DeregisterListener(pICntlr, p1, p2)  GET_FUNCTBL((pICntlr), IMMSRV)->DeregisterListener( pICntlr, p1, p2)
/**
 Purpose: This external interface is provided to get MM Service status
Parameter: None
Return: MMSRV_STATUS_e

 */
#define IMMSRV_GetMMServiceStatus(pICntlr)  GET_FUNCTBL((pICntlr), IMMSRV)->GetMMServiceStatus( pICntlr)
/**
 Purpose: This external interface is provided to search available network.
Parameter:
<callerID>: the caller instance ID.
Return: MAE_RETCODE

 */
#define IMMSRV_NetworkSearchReq(pICntlr, p1, p2)    GET_FUNCTBL((pICntlr), IMMSRV)->NetworkSearchReq( pICntlr, p1, p2)
/**
 Purpose: This external interface is provided to register or de-register on PLMN.
Parameter:
<callerID>: the caller instance ID.
<regData>: network registration request data.
Return: MAE_RETCODE

 */
#define IMMSRV_NetworkRegReq(pICntlr, p1, p2, p3, p4, p5)   GET_FUNCTBL((pICntlr), IMMSRV)->NetworkRegReq( pICntlr, p1, p2, p3, p4, p5)

#ifdef __3G_RIL_MMI__
/**
 Purpose: This external interface is provided to register or de-register on PLMN. Add one more extra ACT parameter for 3G
Parameter:
<callerID>: the caller instance ID.
<regData>: network registration request data.
Return: MAE_RETCODE

 */
#define IMMSRV_NetworkRegReqEx(pICntlr, p1, p2, p3, p4, p5, p6)   GET_FUNCTBL((pICntlr), IMMSRV)->NetworkRegReqEx( pICntlr, p1, p2, p3, p4, p5, p6)
#endif // #ifdef __3G_RIL_MMI__

/**
 Purpose: The external interface is provided to update the preferred PLMN list in EF_PLMNsel SIM file.
Parameter:
<callerID>: the caller instance ID.
<index>: index
<operFormat>: operator format.
<pOper>: operator data
Return: MAE_RETCODE

 */
#define IMMSRV_UpdatePreferredListReq(pICntlr, p1, p2, p3, p4, p5)  GET_FUNCTBL((pICntlr), IMMSRV)->UpdatePreferredListReq( pICntlr, p1, p2, p3, p4, p5)

#ifdef __3G_RIL_MMI__
/**
 Purpose: The external interface is provided to update the preferred PLMN list in EF_PLMNsel SIM file.
Parameter:
<callerID>: the caller instance ID.
<index>: index
<operFormat>: operator format.
<pOper>: operator data
Return: MAE_RETCODE
 */
#define IMMSRV_UpdatePreferredListReqEx(pICntlr, p1, p2, p3, p4, p5, p6)  GET_FUNCTBL((pICntlr), IMMSRV)->UpdatePreferredListReqEx( pICntlr, p1, p2, p3, p4, p5, p6)
#endif // #ifdef __3G_RIL_MMI__

/**
 Purpose: The external interface is provided to query the preferred PLMN list in EF_PLMNsel SIM file.
Parameter:
<pCallerID>: the caller instance ID.
Return: MAE_RETCODE

 */
#define IMMSRV_QueryPreferredListReq(pICntlr, p1, p2)   GET_FUNCTBL((pICntlr), IMMSRV)->QueryPreferredListReq( pICntlr, p1, p2)
/**
 Purpose: The external interface is provided to change call waiting setting.
Parameter:
<callerID>: the caller instance ID.
<bandID>:  band frequency.
Return: MAE_RETCODE

 */
#define IMMSRV_ChangeBandReq(pICntlr, p1, p2, p3)   GET_FUNCTBL((pICntlr), IMMSRV)->ChangeBandReq( pICntlr, p1, p2, p3)
#ifdef __3G_RIL_MMI__
/**
 Purpose: The external interface is provided to change band selection setting for 3G phone.
Parameter:
<callerID>: the caller instance ID.
<bandID>:  band frequency.
Return: MAE_RETCODE

 */
#define IMMSRV_ChangeBandReqEx(pICntlr, p1, p2, p3)   GET_FUNCTBL((pICntlr), IMMSRV)->ChangeBandReqEx( pICntlr, p1, p2, p3)
#endif //#ifdef __3G_RIL_MMI__
/**
 Purpose: This external interface is provided to change active line.
Parameter:
<callerID>: the caller instance ID.
<lineNumber>: line number to activate.
Return: MAE_RETCODE

 */
#define IMMSRV_ChangeLineReq(pICntlr, p1, p2, p3)   GET_FUNCTBL((pICntlr), IMMSRV)->ChangeLineReq( pICntlr, p1, p2, p3)
/**
 Purpose: This external interface is provided to attach or detach GPRS network.
Parameter:
<callerID>: the caller instance ID.
<operType>: assign to attach or detach.
Return: MAE_RETCODE

 */
#ifdef __GPRS_MMI__
#define IMMSRV_GprsAttachReq(pICntlr, p1, p2, p3)   GET_FUNCTBL((pICntlr), IMMSRV)->GprsAttachReq( pICntlr, p1, p2, p3)
#endif //__GPRS_MMI__
/**
 Purpose: This external interface is provided to cancel current RIL network request.
Parameter:
<callerID>: the caller instance ID..
Return: MAE_RETCODE

 */
#define IMMSRV_AbortReq(pICntlr, p1, p2)    GET_FUNCTBL((pICntlr), IMMSRV)->AbortReq( pICntlr, p1, p2)
/**
 Purpose: This external interface is provided to get current network registration status.
Parameter:
<pOut>: The network registration information output data which is prepared by caller.
Return: MAE_RETCODE

 */
#define IMMSRV_QueryNetworkStatus(pICntlr, p1, p2)  GET_FUNCTBL((pICntlr), IMMSRV)->QueryNetworkStatus( pICntlr, p1, p2)
/**

 */
#define IMMSRV_OnlineReq(pICntlr, p1, p2)   GET_FUNCTBL((pICntlr), IMMSRV)->OnlineReq( pICntlr, p1, p2)
/**
 Purpose: This external interface is provided to set the MS on offline mode, MM service will camp off network.
Parameter:
Return: MAE_RETCODE

 */
#define IMMSRV_OfflineReq(pICntlr, p1)  GET_FUNCTBL((pICntlr), IMMSRV)->OfflineReq( pICntlr, p1)
/**
 Purpose: This external interface is provided to query current MS line service setting.
Parameter: <callerID>: the caller instance ID.
Return: MAE_RETCODE

 */
#define IMMSRV_QueryLineReq(pICntlr, p1, p2)    GET_FUNCTBL((pICntlr), IMMSRV)->QueryLineReq( pICntlr, p1, p2)
/**
 Purpose: This external interface is provided to query current MS band setting.
Parameter: <pCallerID>: the caller instance ID.
Return: MAE_RETCODE

 */
#define IMMSRV_QueryBandReq(pICntlr, p1, p2)    GET_FUNCTBL((pICntlr), IMMSRV)->QueryBandReq( pICntlr, p1, p2)
/**

 */
#define IMMSRV_MSClassReq(pICntlr, p1, p2, p3)  GET_FUNCTBL((pICntlr), IMMSRV)->MSClassReq( pICntlr, p1, p2, p3)
/**

 */
#ifdef __GPRS_MMI__
#define IMMSRV_GPRSPDPContextActReq(pICntlr, p1, p2, p3)    GET_FUNCTBL((pICntlr), IMMSRV)->GPRSPDPContextActReq( pICntlr, p1, p2, p3)
/**

 */
#define IMMSRV_GPRSAddPDPContextReq(pICntlr, p1, p2, p3)    GET_FUNCTBL((pICntlr), IMMSRV)->GPRSAddPDPContextReq( pICntlr, p1, p2, p3)
/**

 */
#define IMMSRV_GPRSDeletePDPContextReq(pICntlr, p1, p2, p3) GET_FUNCTBL((pICntlr), IMMSRV)->GPRSDeletePDPContextReq( pICntlr, p1, p2, p3)
/**

 */
#define IMMSRV_GPRSSetQoSReq(pICntlr, p1, p2, p3)   GET_FUNCTBL((pICntlr), IMMSRV)->GPRSSetQoSReq( pICntlr, p1, p2, p3)
/**

 */
#define IMMSRV_GPRSQueQoSReq(pICntlr, p1, p2, p3)   GET_FUNCTBL((pICntlr), IMMSRV)->GPRSQueQoSReq( pICntlr, p1, p2, p3)
#endif //__GPRS_MMI__
/**

 */
#define IMMSRV_CellInfoReq(pICntlr, p1, p2, p3) GET_FUNCTBL((pICntlr), IMMSRV)->CellInfoReq( pICntlr, p1, p2, p3)
/**

 */
#define IMMSRV_CleanBAListReq(pICntlr, p1) GET_FUNCTBL((pICntlr), IMMSRV)->CleanBAListReq( pICntlr, p1)

/**

 */
#define IMMSRV_GetLineStatus(pICntlr, p1)   GET_FUNCTBL((pICntlr), IMMSRV)->GetLineStatus( pICntlr, p1)
/**

 */
#define IMMSRV_SyncWithTimezone(pICntlr, p1)    GET_FUNCTBL((pICntlr), IMMSRV)->SyncWithTimezone( pICntlr, p1)
/**
 Purpose: This external interface is provided to query NITZ network name.
Parameter:
<mcc>: mobile country code.
<mnc>: mobile network code.
<pOut>: result structure if PLMN record found.
Return: MAE_RETCODE

 */
#define IMMSRV_QueryNITZNetworkInfo(pICntlr, p1, p2)    GET_FUNCTBL((pICntlr), IMMSRV)->QueryNITZNetworkInfo( pICntlr, p1, p2)
/**
 Purpose: This external interface is provided to set the MS to reset network  , if ms is online , ms will offline then online , or donothing
Parameter:
Return: MAE_RETCODE
 */
#define IMMSRV_ResetNetworkReq(pICntlr, p1) GET_FUNCTBL((pICntlr), IMMSRV)->ResetNetworkReq( pICntlr, p1)
/**
 Purpose: This external interface is provided to get current GPRS network registration status.
Parameter:
<pOut>: The GPRS network registration information output data which is prepared by caller.
Return: MAE_RETCODE

 */
#ifdef __GPRS_MMI__
#define IMMSRV_QueryGprsStatus(pICntlr, p1, p2) GET_FUNCTBL((pICntlr), IMMSRV)->QueryGprsStatus( pICntlr, p1, p2)
/**
 Purpose: This external interface is provided to set GPRS related initialize settings.
 */
#define IMMSRV_SetWgprsReq(pICntlr, p1, p2, p3) GET_FUNCTBL((pICntlr), IMMSRV)->SetWgprsReq( pICntlr, p1, p2, p3)
/**
 Purpose: This external interface is provided to query GPRS related initialize settings.
 */
#define IMMSRV_QueryWgprsReq(pICntlr, p1, p2, p3)   GET_FUNCTBL((pICntlr), IMMSRV)->QueryWgprsReq( pICntlr, p1, p2, p3)
#endif //__GPRS_MMI__
/**
 Purpose: This external interface is provided to get current GPRS network registration status.
 */
#define IMMSRV_ChangeNetAccessModeReg(pICntlr, p1, p2, p3)  GET_FUNCTBL((pICntlr), IMMSRV)->ChangeNetAccessModeReg( pICntlr, p1, p2, p3)
/**
 Purpose: This external interface is provided to set IMEI.
 */
#define IMMSRV_SetIMEIReq(pICntlr, p1, p2, p3)    GET_FUNCTBL((pICntlr), IMMSRV)->SetIMEIReq( pICntlr, p1, p2, p3)

#if defined(__3G_RIL_MMI__)
/**
 Purpose: This external interface is provided to get network query status.
 */
#define IMMSRV_GetNetworkQueryStatusReq(pICntlr, p1, p2)   GET_FUNCTBL((pICntlr), IMMSRV)->GetNetworkQueryStatusReq( pICntlr, p1, p2)

/**
 Purpose: This external interface is provided to set network query status.
 */
#define IMMSRV_SetNetworkQueryStatusReq(pICntlr, p1, p2)   GET_FUNCTBL((pICntlr), IMMSRV)->SetNetworkQueryStatusReq( pICntlr, p1, p2)

/**
 Purpose: This external interface is provided to get network setting info.
 */
#define IMMSRV_GetNetworkSettingInfoReq(pICntlr, p1, p2)   GET_FUNCTBL((pICntlr), IMMSRV)->GetNetworkSettingInfoReq( pICntlr, p1, p2)
#endif //__3G_RIL_MMI__


/**
 * Functions
 */

void MMSRV_Init(void);

__SLDPM_FREE__ MAE_Ret MMSRV_New(MAE_ClsId id, void **ppObj);

#endif /* __MMI_MMSRV_H__ */
