/**
* @file mmi_ccsrv.h
*
* State Machine Service - CCSRV
* Generated by XFSM v1.0, CodeVer=v0.24
*
* Class Id: CLSID_CCSRV
*
*
* @version $Id: mmi_ccsrv.h 40036 2009-09-11 12:34:27Z lih.wang $
*/
#ifndef __MMI_CCSRV_H__
#define __MMI_CCSRV_H__

/*=============================================================*/
// Include files
/*=============================================================*/

#include "mmi_mae_common_def.h"
#include "mmi_mae_applet.h"
#include "mmi_mae_class.h"
#include "mmi_mae_datamodel.h"
#include "mmi_ccsrv_def.h"
#include "mmi_common_cfg.h"

/*=============================================================*/
// Macro definition
/*=============================================================*/

/*=============================================================*/
// Data type definition
/*=============================================================*/

typedef enum
{
    CC_MASK_OUTGOINGCALL = 1 << 0
   ,CC_MASK_INCOMINGCALL = 1 << 1
   ,CC_MASK_HANGUPCALL = 1 << 2
   ,CC_MASK_CHLD_OPER = 1 << 3
   ,CC_MASK_INCALL = 1 << 4
   ,CC_MASK_RELEASECALL = 1 << 5
   ,CC_MASK_NOTIFY = 1 << 6
   ,CC_MASK_OTHER = 1 << 7
   ,CC_MASK_AUDIO = 1 << 8
   ,CC_MASK_ALL = (s32) 0xFFFFFFFF
} CCSRV_Event_Mask_e;

/*
***** Event/Mask mapping table *****
#define CCSRV_EVT_MakeCallCnf               (CLSID_CCSRV << 16 | 1)             //CC_MASK_OUTGOINGCALL
#define CCSRV_EVT_AcceptCallCnf             (CLSID_CCSRV << 16 | 2)         //CC_MASK_INCOMINGCALL      // keyguard
#define CCSRV_EVT_RingInd                   (CLSID_CCSRV << 16 | 3)                 //CC_MASK_INCOMINGCALL      // mmsrv , idle
#define CCSRV_EVT_AlertInd                  (CLSID_CCSRV << 16 | 4)                 //CC_MASK_OUTGOINGCALL
#define CCSRV_EVT_HangUpCallCnf             (CLSID_CCSRV << 16 | 5)         //CC_MASK_HANGUPCALL
#define CCSRV_EVT_HangUpOutgoingCallCnf     (CLSID_CCSRV << 16 | 6) //CC_MASK_HANGUPCALL
#define CCSRV_EVT_ReleaseHoldCallCnf        (CLSID_CCSRV << 16 | 7)         //CC_MASK_HANGUPCALL
#define CCSRV_EVT_ReleaseSpecificCallCnf    (CLSID_CCSRV << 16 | 8)         //CC_MASK_CHLD_OPER
#define CCSRV_EVT_RejectWaitingCallCnf      (CLSID_CCSRV << 16 | 9)     //CC_MASK_INCOMINGCALL
#define CCSRV_EVT_ReplaceActiveCallCnf      (CLSID_CCSRV << 16 | 10)        //CC_MASK_INCALL
#define CCSRV_EVT_ReplaceActiveInWaitingCnf (CLSID_CCSRV << 16 | 11)    //CC_MASK_INCOMINGCALL
#define CCSRV_EVT_ReplaceHoldInWaitingCnf   (CLSID_CCSRV << 16 | 12)    //CC_MASK_INCOMINGCALL
#define CCSRV_EVT_ReleaseInd                (CLSID_CCSRV << 16 | 13)                    //CC_MASK_RELEASECALL
#define CCSRV_EVT_ReleaseIncomingCallInd    (CLSID_CCSRV << 16 | 14)        //CC_MASK_INCOMINGCALL
#define CCSRV_EVT_ReleaseOutgoingCallInd    (CLSID_CCSRV << 16 | 15)        //CC_MASK_RELEASECALL
#define CCSRV_EVT_ReleaseActiveCallInd      (CLSID_CCSRV << 16 | 16)            //CC_MASK_RELEASECALL (not used)
#define CCSRV_EVT_ReleaseHoldCallInd        (CLSID_CCSRV << 16 | 17)            //CC_MASK_RELEASECALL (not used)
#define CCSRV_EVT_ReleaseWaitingCallInd     (CLSID_CCSRV << 16 | 18)        //CC_MASK_INCOMINGCALL
#define CCSRV_EVT_WaitingCallInd            (CLSID_CCSRV << 16 | 19)                //CC_MASK_INCOMINGCALL (not used)
#define CCSRV_EVT_HoldCallCnf               (CLSID_CCSRV << 16 | 20)                //CC_MASK_CHLD_OPER
#define CCSRV_EVT_RetrieveCallCnf           (CLSID_CCSRV << 16 | 21)                //CC_MASK_CHLD_OPER
#define CCSRV_EVT_JoinMPTYCallCnf           (CLSID_CCSRV << 16 | 22)        //CC_MASK_CHLD_OPER
#define CCSRV_EVT_SplitCallCnf              (CLSID_CCSRV << 16 | 23)                //CC_MASK_CHLD_OPER
#define CCSRV_EVT_SwapCallCnf               (CLSID_CCSRV << 16 | 24)                //CC_MASK_CHLD_OPER
#define CCSRV_EVT_TransferCallCnf           (CLSID_CCSRV << 16 | 25)                //CC_MASK_CHLD_OPER
#define CCSRV_EVT_FuncMakeCallReq           (CLSID_CCSRV << 16 | 26)            //CC_MASK_OUTGOINGCALL      // idle
#define CCSRV_EVT_DTMFCnf                   (CLSID_CCSRV << 16 | 27)                //CC_MASK_INCALL
#define CCSRV_EVT_NoCallExistedInd          (CLSID_CCSRV << 16 | 28)            //CC_MASK_OTHER                     //idle
#define CCSRV_EVT_CallSetupNotifyInd        (CLSID_CCSRV << 16 | 29)            //CC_MASK_NOTIFY
#define CCSRV_EVT_InCallNotifyInd           (CLSID_CCSRV << 16 | 30)                //CC_MASK_NOTIFY
#define CCSRV_EVT_AudioChannelInd           (CLSID_CCSRV << 16 | 31)            //CC_MASK_AUDIO
#define CCSRV_EVT_ReleaseActiveCallCnf      (CLSID_CCSRV << 16 | 32)        //CC_MASK_RELEASECALL
#define CCSRV_EVT_InCallSessionTimer        (CLSID_CCSRV << 16 | 33)            //CC_MASK_INCALL
#define CCSRV_EVT_AbortDTMFCnf              (CLSID_CCSRV << 16 | 34)        //CC_MASK_INCALL
*/

/**
 * External Events
 */
#define CCSRV_EVT_MakeCallCnf               (CLSID_CCSRV << 16 | 1)
#define CCSRV_EVT_AcceptCallCnf             (CLSID_CCSRV << 16 | 2)
#define CCSRV_EVT_RingInd               (CLSID_CCSRV << 16 | 3)
#define CCSRV_EVT_AlertInd              (CLSID_CCSRV << 16 | 4)
#define CCSRV_EVT_HangUpCallCnf             (CLSID_CCSRV << 16 | 5)
#define CCSRV_EVT_HangUpOutgoingCallCnf             (CLSID_CCSRV << 16 | 6)
#define CCSRV_EVT_ReleaseHoldCallCnf                (CLSID_CCSRV << 16 | 7)
#define CCSRV_EVT_ReleaseSpecificCallCnf                (CLSID_CCSRV << 16 | 8)
#define CCSRV_EVT_RejectWaitingCallCnf              (CLSID_CCSRV << 16 | 9)
#define CCSRV_EVT_ReplaceActiveCallCnf              (CLSID_CCSRV << 16 | 10)
#define CCSRV_EVT_ReplaceActiveInWaitingCnf             (CLSID_CCSRV << 16 | 11)
#define CCSRV_EVT_ReplaceHoldInWaitingCnf               (CLSID_CCSRV << 16 | 12)
#define CCSRV_EVT_ReleaseInd                (CLSID_CCSRV << 16 | 13)
#define CCSRV_EVT_ReleaseIncomingCallInd                (CLSID_CCSRV << 16 | 14)
#define CCSRV_EVT_ReleaseOutgoingCallInd                (CLSID_CCSRV << 16 | 15)
#define CCSRV_EVT_ReleaseActiveCallInd              (CLSID_CCSRV << 16 | 16)
#define CCSRV_EVT_ReleaseHoldCallInd                (CLSID_CCSRV << 16 | 17)
#define CCSRV_EVT_ReleaseWaitingCallInd             (CLSID_CCSRV << 16 | 18)
#define CCSRV_EVT_WaitingCallInd                (CLSID_CCSRV << 16 | 19)
#define CCSRV_EVT_HoldCallCnf               (CLSID_CCSRV << 16 | 20)
#define CCSRV_EVT_RetrieveCallCnf               (CLSID_CCSRV << 16 | 21)
#define CCSRV_EVT_JoinMPTYCallCnf               (CLSID_CCSRV << 16 | 22)
#define CCSRV_EVT_SplitCallCnf              (CLSID_CCSRV << 16 | 23)
#define CCSRV_EVT_SwapCallCnf               (CLSID_CCSRV << 16 | 24)
#define CCSRV_EVT_TransferCallCnf               (CLSID_CCSRV << 16 | 25)
#define CCSRV_EVT_FuncMakeCallReq               (CLSID_CCSRV << 16 | 26)
#define CCSRV_EVT_DTMFCnf               (CLSID_CCSRV << 16 | 27)
#define CCSRV_EVT_NoCallExistedInd              (CLSID_CCSRV << 16 | 28)
#define CCSRV_EVT_CallSetupNotifyInd                (CLSID_CCSRV << 16 | 29)
#define CCSRV_EVT_InCallNotifyInd               (CLSID_CCSRV << 16 | 30)
#define CCSRV_EVT_AudioChannelInd               (CLSID_CCSRV << 16 | 31)
#define CCSRV_EVT_ReleaseActiveCallCnf              (CLSID_CCSRV << 16 | 32)
#define CCSRV_EVT_InCallSessionTimer                (CLSID_CCSRV << 16 | 33)
#define CCSRV_EVT_AbortDTMFCnf              (CLSID_CCSRV << 16 | 34)
#define CCSRV_EVT_AllCallReleasedInd                (CLSID_CCSRV << 16 | 35)
#define CCSRV_EVT_WaitingToIncomingCallInd              (CLSID_CCSRV << 16 | 36)
#define CCSRV_EVT_ProgressInd               (CLSID_CCSRV << 16 | 37)
#define CCSRV_EVT_AnsweringMachineFailedInd               (CLSID_CCSRV << 16 | 38)
#define CCSRV_EVT_ChangeCBSSettingInd               (CLSID_CCSRV << 16 | 39)
#define CCSRV_EVT_CallRefIDInd               (CLSID_CCSRV << 16 | 40)



/**
 * ICCSRV Interfaces
 */
#define INHERIT_ICCSRV(IName) \
    INHERIT_IHandler(IName); \
    CCSRV_MO_ERROR_CODE     (*MakeCallReq)      ( IName * , MmiMakeCallReq_t* pMakeCallData, u8 DualMode);  \
    MAE_Ret     (*Make2ndCallReq)       ( IName * , MmiMakeCallReq_t* pMakeCallData);  \
    MAE_Ret     (*HangUpCallReq)        ( IName * );  \
    MAE_Ret     (*HangUpOutgoingCallReq)        ( IName * );  \
    MAE_Ret     (*AcceptCallReq)        ( IName * );  \
    MAE_Ret     (*ReleaseHoldCallReq)       ( IName * );  \
    MAE_Ret     (*ReleaseActiveCallReq)     ( IName * );  \
    MAE_Ret     (*ReleaseSpecificCallReq)       ( IName * , u8 u8CallID);  \
    MAE_Ret     (*RejectWaitingCallReq)     ( IName * );  \
    MAE_Ret     (*ReplaceActiveCallReq)     ( IName * );  \
    MAE_Ret     (*ReplaceActiveInWaitingReq)        ( IName * );  \
    MAE_Ret     (*ReplaceHoldInWaitingReq)      ( IName * );  \
    MAE_Ret     (*HoldCallReq)      ( IName * );  \
    MAE_Ret     (*RetrieveCallReq)      ( IName * );  \
    MAE_Ret     (*JoinMPTYCalllReq)     ( IName * );  \
    MAE_Ret     (*SplitCalllReq)        ( IName * , u8 u8CallID);  \
    MAE_Ret     (*SwapCalllReq)     ( IName * );  \
    MAE_Ret     (*TransferCalllReq)     ( IName * );  \
    MAE_Ret     (*SendDTMFReq)      ( IName * , u8 u8KeyCode, MMI_CCSRV_DTMF_OP_e DTMFOper, u8 u8Duration);  \
    CCSRV_Mode_e        (*GetActiveMode)        ( IName * );  \
    MAE_Ret     (*RegisterListener)     ( IName * , void* instance, u32 mask);  \
    MAE_Ret     (*DeregisterListener)       ( IName * , void* instance, u32 mask);  \
    CallTable_t*     (*GetCallTableData)        ( IName * , IBase* pOwner);  \
    boolean     (*IsEmergencyCall)      ( IName * , u8* number);  \
    CCSRV_DUO_STATUS_e      (*GetDuoCallStatus)     ( IName * );  \
    boolean     (*IsMissCallExisted)        ( IName * );  \
    MAE_Ret     (*ResetMissCallStatus)      ( IName * );  \
    u32     (*GetInCallDuration)        ( IName * , CCSRV_DURATION_Type_e eDurationType);  \
    MAE_Ret     (*AbortDTMFReq)     ( IName * );  \
    MAE_Ret     (*SetAutoRedialStatus)      ( IName * , boolean bStatus);  \
    boolean     (*IsAtoRedialActive)        ( IName * );  \
    MAE_Ret     (*SetPreMOCallStatus)       ( IName * , boolean bStatus);  \
    boolean     (*IsPreMOCallActive)        ( IName * );  \
    boolean     (*IsTryToReleaseAllCall)        ( IName * ); \
	MAE_Ret		(*NotifyAnsweringMachineFailed)		( IName * , ANSWERING_MACHINE_FAILED_TYPE_e eAnsweringMachineFailedType); \
	MAE_Ret		(*SetAnsweringMachineInProgress)	( IName * , boolean bInProgress); \
	boolean		(*IsAnsweringMachineInProgress)	( IName * ); \
	MAE_Ret		(*SetDistortedVoiceSettings)        ( IName * , boolean bStatus, MMI_CALLSETTING_DISTORTED_EFFECT_e eEffect); \
	MAE_Ret		(*GetDistortedVoiceSettings)        ( IName * , boolean * bStatus, MMI_CALLSETTING_DISTORTED_EFFECT_e * eEffect); \
	MAE_Ret		(*SetCallBackgroundSoundSettings)        ( IName * , u32 eCFGItemID, const u8 u8Data); \
	MAE_Ret		(*GetCallBackgroundSoundSettings)        ( IName * , u32 eCFGItemID, u8 *pData)
DEFINE_INTERFACE(ICCSRV);


#define ICCSRV_QueryInterface(pICntlr, id, pp, po)          GET_FUNCTBL((pICntlr), ICCSRV)->QueryInterface(pICntlr, id, pp, po)
#define ICCSRV_HandleEvent(pICntlr, e, p1, p2)              GET_FUNCTBL((pICntlr), ICCSRV)->HandleEvent(pICntlr, e, p1, p2)
/**
 mmi_CCSRV_MakeCallReq
@brief  The interface is used to MO call

@param[in]  pICCSRV              Pointer to the pICCSRV interface
@param[in]  pMakeCallData     MO call data (Number is necessary)
@param[in]  DualMode             MO call by Master or Slave SIM card

@return CCSRV_MO_NO_ERROR                      If successful.
@return CCSRV_MO_FAILED                             If an error happen.
@return CCSRV_MO_CALL_NO_SIM_CARD    Can't handle this request.

Corresponding feedback confirm is CCSRV_EVT_MakeCallCnf

 */
#define ICCSRV_MakeCallReq(pICntlr, p1, p2) GET_FUNCTBL((pICntlr), ICCSRV)->MakeCallReq( pICntlr, p1, p2)
/**
 mmi_CCSRV_Make2ndCallReq
@brief  The interface is used to MO call

@param[in]  pICCSRV              Pointer to the pICCSRV interface
@param[in]  pMakeCallData     MO call data (Number is necessary)

@return MAE_RET_SUCCESS        If successful.
@return MAE_RET_FAILED           If an error happen.
@return MAE_RET_BUSY              Can't handle this request.

Corresponding feedback confirm is CCSRV_EVT_MakeCallCnf

 */
#define ICCSRV_Make2ndCallReq(pICntlr, p1)  GET_FUNCTBL((pICntlr), ICCSRV)->Make2ndCallReq( pICntlr, p1)
/**
 mmi_CCSRV_HangUpCallReq
@brief  The interface is used to release call,  include active, held or waiting call

@param[in]  pICCSRV              Pointer to the pICCSRV interface

@return MAE_RET_SUCCESS        If successful.
@return MAE_RET_FAILED           If an error happen.
@return MAE_RET_BUSY              Can't handle this request.

Corresponding feedback confirm is CCSRV_EVT_HangUpCallCnf

 */
#define ICCSRV_HangUpCallReq(pICntlr)   GET_FUNCTBL((pICntlr), ICCSRV)->HangUpCallReq( pICntlr)
/**
 mmi_CCSRV_HangUpOutgoingCallReq
@brief  The interface is used to release outgoing call. It's very useful to release outgoing call without affecting the active or held call

@param[in]  pICCSRV              Pointer to the pICCSRV interface

@return MAE_RET_SUCCESS        If successful.
@return MAE_RET_FAILED           If an error happen.
@return MAE_RET_BUSY              Can't handle this request.

Corresponding feedback confirm is CCSRV_EVT_HangUpOutgoingCallCnf
 */
#define ICCSRV_HangUpOutgoingCallReq(pICntlr)   GET_FUNCTBL((pICntlr), ICCSRV)->HangUpOutgoingCallReq( pICntlr)
/**
 mmi_CCSRV_AcceptCallReq
@brief  The interface is provided to accept incoming call or accept waiting call. The active call will be held automatically if accept a waiting call.

@param[in]  pICCSRV              Pointer to the pICCSRV interface

@return MAE_RET_SUCCESS        If successful.
@return MAE_RET_FAILED           If an error happen.
@return MAE_RET_BUSY              Can't handle this request.

Corresponding feedback confirm is CCSRV_EVT_AcceptCallCnf

 */
#define ICCSRV_AcceptCallReq(pICntlr)   GET_FUNCTBL((pICntlr), ICCSRV)->AcceptCallReq( pICntlr)
/**
 mmi_CCSRV_ReleaseHoldCallReq
@brief  The interface is provided to release held calls.

@param[in]  pICCSRV              Pointer to the pICCSRV interface

@return MAE_RET_SUCCESS        If successful.
@return MAE_RET_FAILED           If an error happen.
@return MAE_RET_BUSY              Can't handle this request.

Corresponding feedback confirm is CCSRV_EVT_ReleaseHoldCallCnf

 */
#define ICCSRV_ReleaseHoldCallReq(pICntlr)  GET_FUNCTBL((pICntlr), ICCSRV)->ReleaseHoldCallReq( pICntlr)
/**
 mmi_CCSRV_ReleaseActiveCallReq
@brief The interface is provided to release active calls
@paramp[in] pICCSRV
Pointer to the pICCSRV interface
@return MAE_RET_SUCCESS ,if success
@return MAE_RET_FAILED, if an error happens
@return MAE_RET_BUSY, can't handle this request
Corresponding feedback confirmation is CCSRV_EVT_ReleaseActiveCallCnf
 */
#define ICCSRV_ReleaseActiveCallReq(pICntlr)    GET_FUNCTBL((pICntlr), ICCSRV)->ReleaseActiveCallReq( pICntlr)
/**
 mmi_CCSRV_ReleaseSpecificCallReq
@brief  The interface is provided to release any specific call. Caller have to provide the Call ID he want to release.

@param[in]  pICCSRV              Pointer to the pICCSRV interface
@param[in] u8CallID                Release Call ID

@return MAE_RET_SUCCESS        If successful.
@return MAE_RET_FAILED           If an error happen.
@return MAE_RET_BUSY              Can't handle this request.

Corresponding feedback confirm is CCSRV_EVT_ReleaseSpecificCallCnf

 */
#define ICCSRV_ReleaseSpecificCallReq(pICntlr, p1)  GET_FUNCTBL((pICntlr), ICCSRV)->ReleaseSpecificCallReq( pICntlr, p1)
/**
 mmi_CCSRV_RejectWaitingCallReq
@brief  The interface is provided to reject a waiting call.

@param[in]  pICCSRV              Pointer to the pICCSRV interface

@return MAE_RET_SUCCESS        If successful.
@return MAE_RET_FAILED           If an error happen.
@return MAE_RET_BUSY              Can't handle this request.

Corresponding feedback confirm is CCSRV_EVT_RejectWaitingCallCnf

 */
#define ICCSRV_RejectWaitingCallReq(pICntlr)    GET_FUNCTBL((pICntlr), ICCSRV)->RejectWaitingCallReq( pICntlr)
/**
 mmi_CCSRV_ReplaceActiveCallReq
@brief   The interface is to release active call and retrieve held call. However, it can't be used with waiting call existed.

@param[in]  pICCSRV              Pointer to the pICCSRV interface

@return MAE_RET_SUCCESS        If successful.
@return MAE_RET_FAILED           If an error happen.
@return MAE_RET_BUSY              Can't handle this request.

Corresponding feedback confirm is CCSRV_EVT_ReplaceActiveCallCnf

 */
#define ICCSRV_ReplaceActiveCallReq(pICntlr)    GET_FUNCTBL((pICntlr), ICCSRV)->ReplaceActiveCallReq( pICntlr)
/**
 mmi_CCSRV_ReplaceActiveInWaitingReq
@brief   The interface is used to replace active call by waiting call. All the active calls will be released first.

@param[in]  pICCSRV              Pointer to the pICCSRV interface

@return MAE_RET_SUCCESS        If successful.
@return MAE_RET_FAILED           If an error happen.
@return MAE_RET_BUSY              Can't handle this request.

Corresponding feedback confirm is CCSRV_EVT_ReplaceActiveInWaitingCnf

 */
#define ICCSRV_ReplaceActiveInWaitingReq(pICntlr)   GET_FUNCTBL((pICntlr), ICCSRV)->ReplaceActiveInWaitingReq( pICntlr)
/**
 mmi_CCSRV_ReplaceHoldInWaitingReq
@brief   The interface is to replace held call by waiting call. All the held calls will be released first.

@param[in]  pICCSRV              Pointer to the pICCSRV interface

@return MAE_RET_SUCCESS        If successful.
@return MAE_RET_FAILED           If an error happen.
@return MAE_RET_BUSY              Can't handle this request.

Corresponding feedback confirm is CCSRV_EVT_ReplaceHoldInWaitingCnf

 */
#define ICCSRV_ReplaceHoldInWaitingReq(pICntlr) GET_FUNCTBL((pICntlr), ICCSRV)->ReplaceHoldInWaitingReq( pICntlr)
/**
 mmi_CCSRV_HoldCallReq
@brief   The interface is provided to hold an active call.

@param[in]  pICCSRV              Pointer to the pICCSRV interface

@return MAE_RET_SUCCESS        If successful.
@return MAE_RET_FAILED           If an error happen.
@return MAE_RET_BUSY              Can't handle this request.

Corresponding feedback confirm is CCSRV_EVT_HoldCallCnf

 */
#define ICCSRV_HoldCallReq(pICntlr) GET_FUNCTBL((pICntlr), ICCSRV)->HoldCallReq( pICntlr)
/**
 mmi_CCSRV_RetrieveCallReq
@brief   The interface is provided to retrieve a held call .

@param[in]  pICCSRV              Pointer to the pICCSRV interface

@return MAE_RET_SUCCESS        If successful.
@return MAE_RET_FAILED           If an error happen.
@return MAE_RET_BUSY              Can't handle this request.

Corresponding feedback confirm is CCSRV_EVT_RetrieveCallCnf

 */
#define ICCSRV_RetrieveCallReq(pICntlr) GET_FUNCTBL((pICntlr), ICCSRV)->RetrieveCallReq( pICntlr)
/**
 mmi_CCSRV_JoinMPTYCallReq
@brief   The interface is provided to host a conference call.

@param[in]  pICCSRV              Pointer to the pICCSRV interface

@return MAE_RET_SUCCESS        If successful.
@return MAE_RET_FAILED           If an error happen.
@return MAE_RET_BUSY              Can't handle this request.

Corresponding feedback confirm is CCSRV_EVT_JoinMPTYCallCnf

 */
#define ICCSRV_JoinMPTYCalllReq(pICntlr)    GET_FUNCTBL((pICntlr), ICCSRV)->JoinMPTYCalllReq( pICntlr)
/**
 mmi_CCSRV_SplitCallReq
@brief   The interface is provided to split a member from the conference call.

@param[in]  pICCSRV              Pointer to the pICCSRV interface
@param[in]  u8CallID               Split Call ID

@return MAE_RET_SUCCESS        If successful.
@return MAE_RET_FAILED           If an error happen.
@return MAE_RET_BUSY              Can't handle this request.

Corresponding feedback confirm is CCSRV_EVT_SplitCallCnf

 */
#define ICCSRV_SplitCalllReq(pICntlr, p1)   GET_FUNCTBL((pICntlr), ICCSRV)->SplitCalllReq( pICntlr, p1)
/**
 mmi_CCSRV_SwapCallReq
@brief   The interface is provided to change the status between active and held call.

@param[in]  pICCSRV              Pointer to the pICCSRV interface

@return MAE_RET_SUCCESS        If successful.
@return MAE_RET_FAILED           If an error happen.
@return MAE_RET_BUSY              Can't handle this request.

Corresponding feedback confirm is CCSRV_EVT_SwapCallCnf

 */
#define ICCSRV_SwapCalllReq(pICntlr)    GET_FUNCTBL((pICntlr), ICCSRV)->SwapCalllReq( pICntlr)
/**
 mmi_CCSRV_TransferCallReq
@brief   The interface is used to transfer the calls and leave the in-call session.

@param[in]  pICCSRV              Pointer to the pICCSRV interface

@return MAE_RET_SUCCESS        If successful.
@return MAE_RET_FAILED           If an error happen.
@return MAE_RET_BUSY              Can't handle this request.

Corresponding feedback confirm is CCSRV_EVT_TransferCallCnf

 */
#define ICCSRV_TransferCalllReq(pICntlr)    GET_FUNCTBL((pICntlr), ICCSRV)->TransferCalllReq( pICntlr)
/**
 mmi_CCSRV_SendDTMFReq
@brief   The interface is used to send DTMF to protocol stack.

@param[in]  pICCSRV              Pointer to the pICCSRV interface
@param[in]  u8KeyCode           The key user pressd
@param[in]  DTMFOper            Start to send or Stop to send the DTMF
@param[in]  u8duration            1~254*100ms if DTMFOper is Start
                                                  255 is infinite DTMF playing
                                                  Don't care if DTMFOper is Stop

@return MAE_RET_SUCCESS        If successful.
@return MAE_RET_FAILED           If an error happen.
@return MAE_RET_BUSY              Can't handle this request.

Corresponding feedback confirm is CCSRV_EVT_DTMFCnf

 */
#define ICCSRV_SendDTMFReq(pICntlr, p1, p2, p3) GET_FUNCTBL((pICntlr), ICCSRV)->SendDTMFReq( pICntlr, p1, p2, p3)
/**
 mmi_CCSRV_GetActiveMode
@brief  The interface is provided to APP to query the mode status of CC Service.

@param[in]  pICCSRV              Pointer to the pICCSRV interface

@return CCSRV_IDLE                       No call
@return CCSRV_1A                           Active call(s)
@return CCSRV_1H                           Held call(s)
@return CCSRV_1A1H                      Active call + Held call(s) or Active call(s) + Held call
@return CCSRV_1AW                       Active call(s) with 1 Waiting call
@return CCSRV_1HW                       Held call(s) with 1 Waiting call
@return CCSRV_1AHW                    Active call + Held call(s)+ Waiting call or Active call(s) + Held call + Waiting call
@return CCSRV_MAKE2NDCALL   Held call(s) + 1 Outgoing call
@return CCSRV_OUTGOING           1 Outgoing call
@return CCSRV_INCOMING            1 Incoming call
@return CCSRV_Unknown                Unknow
 */
#define ICCSRV_GetActiveMode(pICntlr)   GET_FUNCTBL((pICntlr), ICCSRV)->GetActiveMode( pICntlr)
/**
 mmi_CCSRV_RegisterNotify
@brief   The interface is provided APPs to listen CCSRV events that he interested.

@param[in]  pICCSRV              Pointer to the pICCSRV interface
@param[in]  instance                 Object pointer to the APP
@param[in]  mask                     Event mask

@return MAE_RET_SUCCESS           If successful.
@return MAE_RET_FAILED              If an error happen.
@return MAE_RET_BAD_PARAM    If an error happen.

 */
#define ICCSRV_RegisterListener(pICntlr, p1, p2)    GET_FUNCTBL((pICntlr), ICCSRV)->RegisterListener( pICntlr, p1, p2)
/**
 mmi_CCSRV_DeregisterNotify
@brief   The interface is provided APPs to stop listen events that he interested.

@param[in]  pICCSRV              Pointer to the pICCSRV interface
@param[in]  instance                 Object pointer to the APP
@param[in]  mask                     Event mask

@return MAE_RET_SUCCESS           If successful.
@return MAE_RET_FAILED              If an error happen.
@return MAE_RET_BAD_PARAM    If an error happen.

 */
#define ICCSRV_DeregisterListener(pICntlr, p1, p2)  GET_FUNCTBL((pICntlr), ICCSRV)->DeregisterListener( pICntlr, p1, p2)
/**
 mmi_CCSRV_GetCallTableData
@brief   The interface is provided APPs to get the Call table data model.

@param[in]  pICCSRV             Pointer to the pICCSRV interface
@param[in]  pOwner              Instance of the caller

@return CallTable_t             If successful.
@return NULL                    If an error happen.
 */
#define ICCSRV_GetCallTableData(pICntlr, p1)   GET_FUNCTBL((pICntlr), ICCSRV)->GetCallTableData( pICntlr, p1)
/**
 mmi_CCSRV_IsEmgegencyCall
@brief   The interface is used to check Emergency number

@param[in]  pICCSRV             Pointer to the pICCSRV interface
@param[in] number                 Phone number to be checked

@return TRUE           Emergency call.
@return FALSE         Not a Emergency call.
 */
#define ICCSRV_IsEmergencyCall(pICntlr, p1) GET_FUNCTBL((pICntlr), ICCSRV)->IsEmergencyCall( pICntlr, p1)
/**
 mmi_CCSRV_GetDuoCallStatus
@brief   The interface is used to get the duo status of current call

@param[in]  pICCSRV             Pointer to the pICCSRV interface

@return CCSRV_MASTER_CALL_EXISTED      Current call session belong to Master mode
@return CCSRV_SLAVE_CALL_EXISTED         Current call session belong to Slave mode
@return CCSRV_NO_CALL                                 No call existed
 */
#define ICCSRV_GetDuoCallStatus(pICntlr)    GET_FUNCTBL((pICntlr), ICCSRV)->GetDuoCallStatus( pICntlr)
/**
 mmi_CCSRV_IsMissCallExisted
@brief   The interface is used to check Miss Call existed when CCSRV is active

@param[in]  pICCSRV             Pointer to the pICCSRV interface

@return TRUE           Miss call existed
@return FALSE         No miss call
 */
#define ICCSRV_IsMissCallExisted(pICntlr)   GET_FUNCTBL((pICntlr), ICCSRV)->IsMissCallExisted( pICntlr)
/**
 mmi_CCSRV_ResetMissCallStatus
@brief   The interface is used to reset Miss Call flag for CCSRV

@param[in]  pICCSRV             Pointer to the pICCSRV interface

@return MAE_RET_SUCCESS           If successful.
@return MAE_RET_FAILED              If an error happen.
 */
#define ICCSRV_ResetMissCallStatus(pICntlr) GET_FUNCTBL((pICntlr), ICCSRV)->ResetMissCallStatus( pICntlr)
/**
 mmi_CCSRV_GetInCallDuration
@brief   The interface is used to get the InCallDuration

@param[in]  pICCSRV             Pointer to the pICCSRV interface
@param[in]  eDurationType    Duration type
@return x seconds

 */
#define ICCSRV_GetInCallDuration(pICntlr, p1)   GET_FUNCTBL((pICntlr), ICCSRV)->GetInCallDuration( pICntlr, p1)
/**
 mmi_CCSRV_AbortDTMFReq
@brief   The interface is used to force abort DTMF during in-call session.

@param[in]  pICCSRV              Pointer to the pICCSRV interface

@return MAE_RET_SUCCESS        If successful.
@return MAE_RET_FAILED           If an error happen.
@return MAE_RET_BUSY              Can't handle this request.

Corresponding feedback confirm is CCSRV_EVT_AbortDTMFCnf

 */
#define ICCSRV_AbortDTMFReq(pICntlr)    GET_FUNCTBL((pICntlr), ICCSRV)->AbortDTMFReq( pICntlr)
/**
 mmi_CCSRV_SetAutoRedialStatus
@brief   The interface is used to set Auto Redial status
 */
#define ICCSRV_SetAutoRedialStatus(pICntlr, p1) GET_FUNCTBL((pICntlr), ICCSRV)->SetAutoRedialStatus( pICntlr, p1)
/**
 mmi_CCSRV_IsAtoRedialActive
@brief   The interface is used to check Auto Redial status

 */
#define ICCSRV_IsAtoRedialActive(pICntlr)   GET_FUNCTBL((pICntlr), ICCSRV)->IsAtoRedialActive( pICntlr)
/**
 mmi_CCSRV_SetPreMOCallStatus
@brief   The interface is used to set Pre-MO call status(For Check dual or IP call)
 */
#define ICCSRV_SetPreMOCallStatus(pICntlr, p1)  GET_FUNCTBL((pICntlr), ICCSRV)->SetPreMOCallStatus( pICntlr, p1)
/**
 mmi_CCSRV_IsPreMOCallActive
@brief   The interface is used to check Pre MO call status
 */
#define ICCSRV_IsPreMOCallActive(pICntlr)   GET_FUNCTBL((pICntlr), ICCSRV)->IsPreMOCallActive( pICntlr)
/**
 mmi_CCSRV_IsTryToReleaseAllCall
@brief   The interface is used to check release all call status
 */
#define ICCSRV_IsTryToReleaseAllCall(pICntlr)   GET_FUNCTBL((pICntlr), ICCSRV)->IsTryToReleaseAllCall( pICntlr)
/**
 mmi_CCSRV_NotifyAnsweringMachineFailed
@brief The interface is used to notify that launching Answering Machine failed with cause.
 */
#define ICCSRV_NotifyAnsweringMachineFailed(pICntlr, p1)	GET_FUNCTBL((pICntlr), ICCSRV)->NotifyAnsweringMachineFailed( pICntlr, p1)
/**
mmi_CCSRV_SetAnsweringMachineInProgress
@brief The interface is used to set if Answering Machine is in progress.
*/
#define ICCSRV_SetAnsweringMachineInProgress(pICntlr, p1)	GET_FUNCTBL((pICntlr), ICCSRV)->SetAnsweringMachineInProgress( pICntlr, p1)
/**
mmi_CCSRV_IsAnsweringMachineInProgress
@brief The interface is used to check if Answering Machine is in progress.
*/
#define ICCSRV_IsAnsweringMachineInProgress(pICntlr)	GET_FUNCTBL((pICntlr), ICCSRV)->IsAnsweringMachineInProgress(pICntlr)
/**
mmi_CCSRV_SetDistortedVoiceSettings
@brief   The interface is used to set disotrted voice settings
*/
#define ICCSRV_SetDistortedVoiceSettings(pICntlr, p1, p2)	  GET_FUNCTBL((pICntlr), ICCSRV)->SetDistortedVoiceSettings( pICntlr, p1, p2)
/**
mmi_CCSRV_GetDistortedVoiceSettings
@brief   The interface is used to get disotrted voice settings
*/
#define ICCSRV_GetDistortedVoiceSettings(pICntlr, p1, p2)	  GET_FUNCTBL((pICntlr), ICCSRV)->GetDistortedVoiceSettings( pICntlr, p1, p2)
/**
mmi_CCSRV_SetCallBackgroundSoundSettings
@brief   The interface is used to set call background sound settings
*/
#define ICCSRV_SetCallBackgroundSoundSettings(pICntlr, p1, p2)	  GET_FUNCTBL((pICntlr), ICCSRV)->SetCallBackgroundSoundSettings( pICntlr, p1, p2)
/**
mmi_CCSRV_GetCallBackgroundSoundSettings
@brief   The interface is used to get call background sound settings
*/
#define ICCSRV_GetCallBackgroundSoundSettings(pICntlr, p1, p2)	  GET_FUNCTBL((pICntlr), ICCSRV)->GetCallBackgroundSoundSettings( pICntlr, p1, p2)

/*=============================================================*/
// Local function prototype declaration and definition
/*=============================================================*/

/**
 mmi_CCSRV_SetAutoRejectMTCall
@brief   The interface is used to enable/disable auto reject MT
 */
MAE_Ret mmi_CCSRV_SetAutoRejectMTCall(ICCSRV *pICCSrv, boolean bRejectMTCall);

/**
 * Functions
 */

void CCSRV_Init(void);

__SLDPM_FREE__ MAE_Ret CCSRV_New(MAE_ClsId id, void **ppObj);

#endif /* __MMI_CCSRV_H__ */
