/**
* @file mmi_wlansrv.h
*
* State Machine Service - WLANSRV
* Generated by XFSM v1.0, CodeVer=v0.24 
*
* Class Id: CLSID_WLANSRV
* 
*
* @version $Id$
*/
#ifndef __MMI_WLANSRV_H__
#define __MMI_WLANSRV_H__


/* */
#include "mmi_mae_common_def.h"
#include "mmi_mae_sm_defs.h"
#include "mmi_mae_sm.h"
#include "mmi_mae_applet.h"
#include "mmi_mae_class.h"


/* Foreword */
/* User Code Begin */
/*=============================================================*/
/* Include Files                                                                                            */
/*=============================================================*/
#include "mmi_common_cfg.h"
#include "ABL_WiFi.h"
#include "mmi_coresrv.h"
#include "mmi_mmsrv.h"
#include "mmi_wlan_msgdef.h"
#include "mmi_srv_socket.h"


/*=============================================================*/
/* Type Declarations                                                                                     */
/*=============================================================*/
#define WLANSRV_SSID_LEN                            ABL_MAX_SSID_LEN                    /* Including '\0' */
#define WLANSRV_BSSID_LEN                           ABL_MAX_BSSID_LEN                   /* */
#define WLANSRV_KEY_LEN                             ABL_MAX_KEY_LEN                     /* Including '\0' */
#define WLANSRV_MAX_SCAN_RESULT_NUM                 ABL_MAX_SCAN_RESULT_NUM             /* */
#define WLANSRV_WEP40_KEY_LEN                       (5)                                 /* */
#define WLANSRV_WEP104_KEY_LEN                      (13)                                /* */
#define WLANSRV_WPA_MIN_KEY_LEN                     (8)                                 /* */
#define WLANSRV_WPA_MAX_KEY_LEN                     (63)                                /* */
#define WLANSRV_MAX_DEVICE_NUM                      (10)                                /* */
#define WLANSRV_MAX_FILTER_AP_NUM                   (20)                                /* */
#define WLANSRV_MAX_RAI_SLOT                        (WLANSRV_MAX_CERT_NUM*2)            /* */
#define WLANSRV_CONNECT_INFO_SIZE                   sizeof(WLANSRV_ConnectDeviceTbl_t)  /* */
#define WLANSRV_FILTER_INFO_SIZE                    sizeof(WLANSRV_FilterDeviceTbl_t)   /* */
#define WLANSRV_CERT_TABLE_SIZE                     sizeof(WLANSRV_CertTbl_t)           /* */
#define WLANSRV_DEVICE_NOT_FOUND                    (0xFF)                              /* */
#define WLANSRV_POWERSAVING_OFF                     (0)                                 /* */
#define WLANSRV_MAX_CONNECT_FAIL                    (2)                                 /* */
#define WLANSRV_MAX_CERT_PATH_LEN                   FILEMGR_MAX_FILEPATH_SIZE           /* */
#define WLANSRV_MAX_CERT_INFO_LEN                   (32)                                /* */
#define WLANSRV_MAX_CERT_SN_LEN                     (16)                                /* */
#define WLANSRV_CERT_TIME_Z_LEN                     CERT_TIME_Z_LEN                     /* GeneralizedTime: YYYYMMDDHHMMSSZ */
#define WLANSRV_CERT_STATUS_X509_TIME_EXPIRED       (1 << 0)                            /* */
#define WLANSRV_CERT_STATUS_X509_FORMAT_ERROR       (1 << 1)                            /* */
#define WLANSRV_CERT_STATUS_X509_AS_CERT_PEM        (1 << 2)                            /* */
#define WLANSRV_CERT_STATUS_X509_CLIENT_CERT_PEM    (1 << 3)                            /* */
#define WLANSRV_CERT_STATUS_X509_CLIENT_PRIKEY_PEM  (1 << 4)                            /* */
#define WLANSRV_CERT_STATUS_X509_FILEOP_ERROR       (1 << 5)                            /* */


/* */
#if 0
#define WLANSRV_CERT_FORMAT_PATHPAIR                (2)                                 /* We can support a pair of *.cer format */
#ifdef __NAND_MMI__
#define WLANSRV_MAX_CERT_NUM                        (20)                                /* We can install 20 CERTs in NAND case */
#else
#define WLANSRV_MAX_CERT_NUM                        (3)                                 /* We can install ONLY 3 CERTs in NOR case */
#endif
#endif


/* */
#define WLANSRV_CERT_INVALID_INDEX                  (0xFF)


/* */
#define WLANSRV_INDEX_OF_CONNECTED_AP               (0)                                 /* The index of connected AP in connected device table, now it's always at the index 0 */


/* */
typedef enum
{
    WLANSRV_OK=0,
    WLANSRV_FAIL,
    WLANSRV_PARAM_ERROR,
    WLANSRV_MEM_ALLOC_ERROR,
    WLANSRV_REJECT,
    WLANSRV_ABORT,
    WLANSRV_TIMEOUT,
    WLANSRV_FIFO_INIT_FAIL,
    WLANSRV_NOT_READY,
    WLANSRV_NULL_MAC
} WLANSRV_ErrCode_e;


/* */
typedef enum
{
    WLANSRV_EVENT_CONNECT_FAIL          = ABL_WIFI_EVENT__CONNECT_FAIL,                 /* 0x00044001 */
    WLANSRV_EVENT_CONNECTED             = ABL_WIFI_EVENT__CONNECTED,                    /* 0x00044002 */
    WLANSRV_EVENT_DISCONNECTED          = ABL_WIFI_EVENT__DISCONNECTED,                 /* 0x00044003 */
    WLANSRV_EVENT_ROAMING               = ABL_WIFI_EVENT__ROAMING,                      /* 0x00044004 */
    WLANSRV_EVENT_SCAN_DONE             = ABL_WIFI_EVENT__SCAN_DONE,                    /* 0x00044005 */
    WLANSRV_EVENT_PASSWORD_FAIL         = ABL_WIFI_EVENT__PASSWORD_FAIL,                /* 0x00044006 */
    WLANSRV_EVENT_FW_TEST_DONE          = ABL_WIFI_EVENT__FW_TEST_DONE,                 /* 0x00044007 */
    WLANSRV_EVENT_CERT_FAIL             = ABL_WIFI_EVENT__CERT_FAIL,                    /* 0x00044008 */
    WLANSRV_EVENT_CERT_UNKNOWN_ISSUER   = ABL_WIFI_EVENT__CERT_UNKNOWN_ISSUER,          /* 0x00044009 */
    WLANSRV_EVENT_CERT_UNTRUSTED_ROOT   = ABL_WIFI_EVENT__CERT_UNTRUSTED_ROOT,          /* 0x0004400A */
    WLANSRV_EVENT_CERT_INVALID_TIME     = ABL_WIFI_EVENT__CERT_INVALID_TIME,            /* 0x0004400B */
    WLANSRV_EVENT_CERT_INVALID_SIGNATURE= ABL_WIFI_EVENT__CERT_INVALID_SIGNATURE,       /* 0x0004400C */
    WLANSRV_EVENT_CERT_REVOKED          = ABL_WIFI_EVENT__CERT_REVOKED,                 /* 0x0004400D */
    WLANSRV_EVENT_CERT_INVALID_USAGE    = ABL_WIFI_EVENT__CERT_INVALID_USAGE,           /* 0x0004400E */
    WLANSRV_EVENT_CERT_FAIL_UNKNOW      = ABL_WIFI_EVENT__CERT_FAIL_UNKNOW,             /* 0x0004400F */
    WLANSRV_EVENT_ON                    = ABL_WIFI_EVENT__ON,
    WLANSRV_EVENT_OFF                   = ABL_WIFI_EVENT__OFF,
    WLANSRV_EVENT_GETIP_OK              = ABL_WIFI_EVENT__GETIP_OK,
    WLANSRV_EVENT_GETIP_FAIL            = ABL_WIFI_EVENT__GETIP_FAIL,
    WLANSRV_EVENT_AIRPLANE_ON           = ABL_WIFI_EVENT__AIRPLANE_ON,
    WLANSRV_EVENT_GET_BSS,
    WLANSRV_EVENT_GET_AQU_VER,
    WLANSRV_EVENT_UNKNOWN
} WLANSRV_Notify_Event_e;


/* */
typedef enum
{
    WLANSRV_ACTIVE_STATE_IDLE=0,
    WLANSRV_ACTIVE_STATE_SCANNING,
    WLANSRV_ACTIVE_STATE_CONNECTING,
    WLANSRV_ACTIVE_STATE_DLCREATING,
    WLANSRV_ACTIVE_STATE_UNKNOWN
} WLANSRV_ActiveState_e;


/* */
typedef enum
{
    WLANSRV_SECURITY_NONE               = ABL_WIFI_SECURITY__NONE,                      /* 0x0001 */
    WLANSRV_SECURITY_WEP40              = ABL_WIFI_SECURITY__WEP40,                     /* 0x0002 */
    WLANSRV_SECURITY_WEP104             = ABL_WIFI_SECURITY__WEP104,                    /* 0x0004 */
    WLANSRV_SECURITY_WEP                = ABL_WIFI_SECURITY__WEP,                       /* 0x0006 */
    WLANSRV_SECURITY_WPA_PSK            = ABL_WIFI_SECURITY__WPA_PSK,                   /* 0x0008 */
    WLANSRV_SECURITY_WPA2_PSK           = ABL_WIFI_SECURITY__WPA2_PSK,                  /* 0x0010 */
    WLANSRV_SECURITY_WAPI_PSK           = ABL_WIFI_SECURITY__WAPI_PSK,                  /* 0x0020 */
    WLANSRV_SECURITY_WPA_CERT           = ABL_WIFI_SECURITY__WPA_CERT,                  /* 0x0040 */
    WLANSRV_SECURITY_WPA2_CERT          = ABL_WIFI_SECURITY__WPA2_CERT,                 /* 0x0080 */
    WLANSRV_SECURITY_WAPI_CERT          = ABL_WIFI_SECURITY__WAPI_CERT                  /* 0x0100 */
} WLANSRV_Security_e;


/* */
typedef enum
{
    WLANSRV_SECURITY_TYPE_NONE=0,
    WLANSRV_SECURITY_TYPE_PSK,
    WLANSRV_SECURITY_TYPE_CERT,
    WLANSRV_SECURITY_TYPE_NUM
} WLANSRV_SecurityType_e;


/* */
typedef enum
{
    WLANSRV_AP_MODE_INFRA=0,
    WLANSRV_AP_MODE_IBSS
} WLANSRV_AP_Mode_e;


/* */
typedef enum
{
    WLANSRV_ACTION_POWER_OFF=0,
    WLANSRV_ACTION_POWER_ON,
    WLANSRV_ACTION_POWER_ON_ENGINEERING_MODE
} WLANSRV_PowerAction_e;


/* */
typedef enum
{
    WLANSRV_ACTION_START_SCAN=0,
    WLANSRV_ACTION_STOP_SCAN
} WLANSRV_ScanAction_e;


/* */
typedef enum
{
    WLANSRV_ACTION_CONNECT=0,
    WLANSRV_ACTION_DISCONNECT
} WLANSRV_ConnectAction_e;


/* */
typedef enum
{
    WLANSRV_Notify_Mask_StatusInd=1<<1,
    WLANSRV_Notify_Mask_All      =0xFFFF
} WLANSRV_Notify_Mask_e;


/* */
typedef enum
{
    WLANSRV_MODE_OFF=0,
    WLANSRV_MODE_INITIALIZING,
    WLANSRV_MODE_ACTIVE,
    WLANSRV_MODE_SEARCHING,
    WLANSRV_MODE_CONNECTING,
    WLANSRV_MODE_CONNECTED,
    WLANSRV_MODE_UNKNOWN
} WLANSRV_Mode_e;


/* */
typedef enum
{
    WLANSRV_AUTOREQ_NONE=0,
    WLANSRV_AUTOREQ_SCAN,
    WLANSRV_AUTOREQ_SCANCNF,
    WLANSRV_AUTOREQ_SCANDONE,
    WLANSRV_AUTOREQ_CONNECT
} WLANSRV_AutoReq_e;


/* */
typedef enum
{
    WLANSRV_DISCONNECT_UNKNOWN=0,
    WLANSRV_DISCONNECT_BY_ROAMING,             /* Change to the new AP, so it might be necessary to close datalink only */
    WLANSRV_DISCONNECT_BY_ROAMING_WITHPING,    /* After receiving ROAMING information, try to ping the new AP first */
    WLANSRV_DISCONNECT_BY_USER,                /* Triggered by API */
    WLANSRV_DISCONNECT_BY_CONNECT_OTHERS,      /* Triggered by API, but do not stop AUTO_CONNECT timer */
    WLANSRV_DISCONNECT_BY_SYSTEM               /* The AP is really disappeared */
} WLANSRV_Disconnect_Reason_e;


/* */
typedef enum
{
    WLANSRV_CERTTYPE_CA=0,
    WLANSRV_CERTTYPE_CLIENT,
    WLANSRV_CERTTYPE_NOTSUPPORT
} WLANSRV_CertType_e;


/* */
typedef enum
{
    WLANSRV_CERTPATH_DIR=0,
    WLANSRV_CERTPATH_PREFIX,
    WLANSRV_CERTPATH_ABSOLUTE
} WLANSRV_CertPathType_e;


/* */
typedef enum
{
    WLANSRV_CERT_INFO_TYPE_DATA_PAIR=0,
    WLANSRV_CERT_INFO_TYPE_NUM
} WLANSRV_CertInfoType_e;


/* */
typedef enum
{
    WLANSRV_CERT_FORMAT_CER=0,
    WLANSRV_CERT_FORMAT_PFX, /* Not support yet */
    WLANSRV_CERT_FORMAT_NUM
} WLANSRV_CertFormat_e;


/* */
typedef struct
{
    MAE_WChar                   wszPath[WLANSRV_MAX_CERT_PATH_LEN];
    u16                         nPathLen;
    WLANSRV_CertPathType_e      ePathType;
} WLANSRV_CertPath_t;


/* */
typedef struct
{
    MAE_WChar                   wszCommonName[WLANSRV_MAX_CERT_INFO_LEN];         /* commonName */
    MAE_WChar                   wszCountry[WLANSRV_MAX_CERT_INFO_LEN];            /* countryName */
    MAE_WChar                   wszLocality[WLANSRV_MAX_CERT_INFO_LEN];           /* localityName */
    MAE_WChar                   wszState[WLANSRV_MAX_CERT_INFO_LEN];              /* stateOrProvinceName */
    MAE_WChar                   wszOrganization[WLANSRV_MAX_CERT_INFO_LEN];       /* OrganizationName */
    MAE_WChar                   wszOrganizationalUnit[WLANSRV_MAX_CERT_INFO_LEN]; /* organizationalUnitName */
    MAE_WChar                   wszEmail[WLANSRV_MAX_CERT_INFO_LEN];              /* emailAddress */
} WLANSRV_CertPublisherInfo_t;


/* */
typedef struct
{
    u32                         nStatus;
    WLANSRV_CertPublisherInfo_t tIssuer;
    WLANSRV_CertPublisherInfo_t tSubject;
    MAE_WChar                   wszSerial[WLANSRV_MAX_CERT_SN_LEN];
    MAE_WChar                   wszNotbefore[WLANSRV_CERT_TIME_Z_LEN];
    MAE_WChar                   wszNotafter[WLANSRV_CERT_TIME_Z_LEN];
} WLANSRV_CertInfo_t;


/* */
typedef struct
{
    WLANSRV_CertInfo_t          tCertInfo;
    WLANSRV_CertType_e          eCertType;
} WLANSRV_CertData_t;


/* */
typedef struct
{
    WLANSRV_CertData_t          tCert_ca;
    WLANSRV_CertData_t          tCert_client;
} WLANSRV_CertDataPair_t;


/* */
typedef struct
{
    WLANSRV_CertInfoType_e      eCertInfoType;
    union
    {
        WLANSRV_CertDataPair_t  tCertDataPair;
    } certInfoProfile_u;
} WLANSRV_CertInfoProfile_t;


/* */
typedef struct
{
    WLANSRV_CertPath_t          tCertPath_ca;
    WLANSRV_CertPath_t          tCertPath_client;
} WLANSRV_cerProfile_t;


/* */
typedef struct
{
    WLANSRV_CertPath_t          tCertPath_PFX;
} WLANSRV_pfxProfile_t; /* Not support yet */


/* */
typedef struct
{
    WLANSRV_CertFormat_e        eCertFormat;
    union
    {
        WLANSRV_cerProfile_t    tCerProfile;
        WLANSRV_pfxProfile_t    tPfxProfile; /* Not support yet */
    } certProfile_u;
} WLANSRV_CertFormatProfile_t;


/* */
typedef PACK struct
{
    u8                          aSSID[WLANSRV_SSID_LEN];
    u32                         nSSIDLen;
    u32                         nSecurity;
    u32                         nChannel;
    s32                         iQual;
    s32                         nNoise;
    s32                         iLevel;
    u32                         nMode;
    u32                         nSpeed;
    u8                          aBSSID[WLANSRV_BSSID_LEN];
} WLANSRV_DeviceInfo_t;


/* */
#ifdef __GNUC__
typedef struct PACK WLANSRV_ScanResultData_t_
#else
typedef PACK struct WLANSRV_ScanResultData_t_
#endif
{
    u32                         num;
    WLANSRV_DeviceInfo_t        sScanResult[WLANSRV_MAX_SCAN_RESULT_NUM];
} WLANSRV_ScanResultData_t;


/* */
typedef struct
{
    WLANSRV_DeviceInfo_t        tConnectedAP;
    boolean                     bIsLimitedConnection;
} WLANSRV_ConnectedAPInfo_t;


/* */
typedef PACK struct
{
    u8                          aSSID[WLANSRV_SSID_LEN];
    u32                         nSSIDLen;
    u32                         nSecurity;
    u32                         nKeyIdx;
    u8                          aKey[WLANSRV_KEY_LEN];
    u32                         nCaRaiId;
    u32                         nClientRaiId;
    u16                         nCaRaiSize;
    u16                         nClientRaiSize;
    u8                          aBSSID[WLANSRV_BSSID_LEN];
} WLANSRV_ConnectParam_t;


/* */
typedef struct
{
    u32                         u32IP;
    u32                         u32Mask;
    u32                         u32Router;
    u32                         u32MasterDNS;
    u32                         u32SlaveDNS;
} WLANSRV_StaticIP_t;


/* */
typedef struct 
{
    WLANSRV_DeviceInfo_t        *pDeviceInfo;
    WLANSRV_StaticIP_t          *pIPInfo;
} WLANSRV_NoneSecurityProfile_t;


/* */
typedef struct

{
    WLANSRV_DeviceInfo_t        *pDeviceInfo;
    WLANSRV_StaticIP_t          *pIPInfo;
    u8 *pKey;
} WLANSRV_PskSecurityProfile_t;


/* */
typedef struct
{
    WLANSRV_DeviceInfo_t        *pDeviceInfo;
    WLANSRV_StaticIP_t          *pIPInfo;
    u8 nCertIndex;
} WLANSRV_CertSecurityProfile_t;


/* */
typedef struct
{
    WLANSRV_SecurityType_e              eSecurityType;
    union
    {
        WLANSRV_NoneSecurityProfile_t   tNoneSecurityProfile;
        WLANSRV_PskSecurityProfile_t    tPskSecurityProfile;
        WLANSRV_CertSecurityProfile_t   tCertSecurityProfile;
    } connectProfile_u;
} WLANSRV_ConnectProfile_t;


/* */
typedef struct
{
    WLANSRV_StaticIP_t          tStaticIP;
    u8                          aSSID[WLANSRV_SSID_LEN];
    u32                         nSSIDLen;
    u8                          aBSSID[WLANSRV_BSSID_LEN];
    u8                          aKey[WLANSRV_KEY_LEN];
    u32                         nSecurity;
    u32                         nCaRaiId;
    u32                         nClientRaiId;
} WLANSRV_ConnectDeviceInfo_t;


/* */
typedef struct
{
    u8                          aBSSID[WLANSRV_BSSID_LEN];
} WLANSRV_FilterDeviceInfo_t;


/* */
typedef struct
{
    u8                          nConnectDeviceNumber;
    WLANSRV_ConnectDeviceInfo_t atConnectDeviceInfo[WLANSRV_MAX_DEVICE_NUM];
} WLANSRV_ConnectDeviceTbl_t;


/* */
typedef struct
{
    u8                          nFilterDeviceNumber;
    WLANSRV_FilterDeviceInfo_t  atFilterDeviceInfo[WLANSRV_MAX_FILTER_AP_NUM];
} WLANSRV_FilterDeviceTbl_t;


/* */
typedef struct
{
    u8                          nConnectFail[WLANSRV_MAX_DEVICE_NUM];
} WLANSRV_ConnectDeviceCount;


/* */
typedef struct
{
    u32                         nCaRaiId;
    u32                         nClientRaiId;
    u32                         nCaSN;
    u32                         nClientSN;
    u16                         nCaRaiSize;
    u16                         nClientRaiSize;
}WLANSRV_CertPairInfo_t;


/* */
typedef struct
{
    boolean                     bInitialized;
    u8                          nCertNumber;
    WLANSRV_CertPairInfo_t      atCertPairInfo[WLANSRV_MAX_CERT_NUM];
    u8                          nRaiUsedNum;
    u8                          anRaiSlots[WLANSRV_MAX_RAI_SLOT];
}WLANSRV_CertTbl_t;


/* */
typedef struct
{
    u8                          nResult;
    ABL_WifiFwTestResult_t      tWifiFwTstResult;
} em_WifiAutoTestResult_t;
/* User Code End */


/* External Events */
#define     WLANSRV_EVT_PowerOnOffCnf               (CLSID_WLANSRV << 16 | 1)
#define     WLANSRV_EVT_SearchInd                   (CLSID_WLANSRV << 16 | 2)
#define     WLANSRV_EVT_SearchCnf                   (CLSID_WLANSRV << 16 | 3)
#define     WLANSRV_EVT_ConnectCnf                  (CLSID_WLANSRV << 16 | 4)
#define     WLANSRV_EVT_StartScanCnf                (CLSID_WLANSRV << 16 | 5)
#define     WLANSRV_EVT_StopScanCnf                 (CLSID_WLANSRV << 16 | 6)
#define     WLANSRV_EVT_ScanDoneInd                 (CLSID_WLANSRV << 16 | 7)
#define     WLANSRV_EVT_StatusUpdateInd	            (CLSID_WLANSRV << 16 | 8)
#define     WLANSRV_EVT_DisconnectCnf               (CLSID_WLANSRV << 16 | 9)


/* Wifi auto test for PC tool */
#define     WLANSRV_EVT_WifiAutoTestTurnOff         (CLSID_WLANSRV << 16 | 10)
#define     WLANSRV_EVT_WifiAutoTestTurnOn          (CLSID_WLANSRV << 16 | 11)
#define     WLANSRV_EVT_WifiAutoTestSendProduction  (CLSID_WLANSRV << 16 | 12)
#define     WLANSRV_EVT_WifiAutoTestStatusUpdate    (CLSID_WLANSRV << 16 | 13)
#define     WLANSRV_EVT_WifiAutoTestGetFwTestResult (CLSID_WLANSRV << 16 | 14)


/* IWLANSRV Interfaces */
#define INHERIT_IWLANSRV(IName) \
    INHERIT_IHandler(IName); \
	MAE_Ret		                (*PowerOnOffReq)                    ( IName * , WLANSRV_PowerAction_e eAction);  \
	WLANSRV_PowerStatus_e       (*GetPowerOnOffStatus)              ( IName * );  \
	MAE_Ret                     (*RegisterNotification)             ( IName * , void *pInstance, WLANSRV_Notify_Mask_e eMask);  \
	MAE_Ret                     (*DeRegisterNotification)           ( IName * , void *pInstance, WLANSRV_Notify_Mask_e eMask);  \
	WLANSRV_ShowWLAN_e          (*GetWLANAvailabilitySetting)       ( IName * );  \
	WLANSRV_ScanNetwork_e       (*GetScanNetworkSetting)            ( IName * );  \
	MAE_Ret                     (*SetWLANAvailability)              ( IName * , WLANSRV_ShowWLAN_e eSetting);  \
	MAE_Ret                     (*SetScanNetwork)                   ( IName * , WLANSRV_ScanNetwork_e eSetting, boolean bSmartTimer);  \
	MAE_Ret                     (*ScanReq)                          ( IName * , WLANSRV_ScanAction_e eAction);  \
	WLANSRV_ConnectedAPInfo_t * (*GetConnectAPInfo)                 ( IName * );  \
	boolean                     (*GetConnectStatus)                 ( IName * );  \
	WLANSRV_Mode_e              (*GetActiveMode)                    ( IName * );  \
	u8                          (*CheckIfEverConnected)             ( IName * , WLANSRV_DeviceInfo_t *pConnectDeviceInfo);  \
	u8 *                        (*GetAPKey)                         ( IName * , u8 nIdx);  \
	MAE_Ret                     (*ConnectReq)                       ( IName * , WLANSRV_ConnectAction_e eAction, WLANSRV_DeviceInfo_t *pDeviceInfo, WLANSRV_StaticIP_t *pIPInfo, u8 *pKey, u8 nCertIndex);  \
	void                        (*SetFilterAP)                      ( IName * , u8 *pFilterBSSID);  \
	void                        (*CleanFilterAP)                    ( IName * , u8 *pFilterBSSID);  \
	boolean                     (*CheckIfEverFiltered)              ( IName * , u8 *pFilterBSSID);  \
	u8*                         (*GetMACAddr)                       ( IName * );  \
	ABL_WiFiScanResultData_t *  (*GetScanAPList)                    ( IName * );  \
	WLANSRV_StaticIP_t *        (*GetAPIPInfo)                      ( IName * , u8 nIdx);  \
	MAE_Ret                     (*AutoConnectReq)                   ( IName * );  \
	MAE_Ret                     (*ForcedConnectReq)                 ( IName * , WLANSRV_DeviceInfo_t *pDeviceInfo, WLANSRV_StaticIP_t *pIPInfo, u8 *pKey, u8 nCertIndex);  \
	void                        (*NeglectAirplaneMode)              ( IName * , boolean bNeglect);  \
	boolean                     (*IsNeglectAirplaneMode)            ( IName * );  \
	MAE_Ret                     (*SetPowerSavingTimer)              ( IName * , u32 u32Second);  \
	u32                         (*GetPowerSavingTimer)              ( IName * );  \
    MAE_Ret                     (*SetConnectedDevice)               ( IName * , u8 nIndex,WLANSRV_ConnectDeviceInfo_t *pDeviceInfo);  \
    MAE_Ret                     (*GetConnectedDevice)               ( IName * , u8 nIndex,WLANSRV_ConnectDeviceInfo_t *pDeviceInfo);  \
    u8                          (*GetConnectedDeviceNumber)         ( IName * );  \
    MAE_Ret                     (*DeleteConnectedDevice)            ( IName * , u8 *pBSSID);  \
    MAE_Ret                     (*IsAutoConnectOnOff)               ( IName * , boolean *pIsAutoConnectOnOff);  \
    u8                          (*GetUsedCertNumber)                ( IName * );  \
    u8                          (*GetMaxCertNumber)                 ( IName * );  \
    MAE_Ret                     (*InsertCert)                       ( IName * , WLANSRV_CertFormatProfile_t *pCertFormatProfile);  \
    MAE_Ret                     (*DeleteCert)                       ( IName * , u8 nIndex);  \
    MAE_Ret                     (*ReplaceCert)                      ( IName * , WLANSRV_CertFormatProfile_t *pCertFormatProfile);  \
    MAE_Ret                     (*GetCert)                          ( IName * , u8 nIndex, WLANSRV_CertInfoProfile_t *pCertInfoProfile);  \
    MAE_Ret                     (*ParseCertInfo)                    ( IName * , WLANSRV_CertFormatProfile_t *pCertFormatProfile, WLANSRV_CertInfoProfile_t *pCertInfoProfile);  \
    MAE_Ret                     (*ParseCertType)                    ( IName * , u16 *pCertPath, WLANSRV_CertType_e *eCertType);  \
    MAE_Ret                     (*SetNetworkProfileAsDefault)       ( IName * , SrvSocketNetworkProfile_t *psNetworkProfile)
DEFINE_INTERFACE(IWLANSRV);


/* */
#define     IWLANSRV_QueryInterface(pICntlr, id, pp, po)            GET_FUNCTBL((pICntlr), IWLANSRV)->QueryInterface(pICntlr, id, pp, po)
#define     IWLANSRV_HandleEvent(pICntlr, e, p1, p2)                GET_FUNCTBL((pICntlr), IWLANSRV)->HandleEvent(pICntlr, e, p1, p2)
#define     IWLANSRV_PowerOnOffReq(pICntlr, p1)                     GET_FUNCTBL((pICntlr), IWLANSRV)->PowerOnOffReq( pICntlr, p1)
#define     IWLANSRV_GetPowerOnOffStatus(pICntlr)                   GET_FUNCTBL((pICntlr), IWLANSRV)->GetPowerOnOffStatus( pICntlr)
#define     IWLANSRV_RegisterNotification(pICntlr, p1, p2)          GET_FUNCTBL((pICntlr), IWLANSRV)->RegisterNotification( pICntlr, p1, p2)
#define     IWLANSRV_DeRegisterNotification(pICntlr, p1, p2)        GET_FUNCTBL((pICntlr), IWLANSRV)->DeRegisterNotification( pICntlr, p1, p2)
#define     IWLANSRV_GetWLANAvailabilitySetting(pICntlr)            GET_FUNCTBL((pICntlr), IWLANSRV)->GetWLANAvailabilitySetting( pICntlr)
#define     IWLANSRV_GetScanNetworkSetting(pICntlr)                 GET_FUNCTBL((pICntlr), IWLANSRV)->GetScanNetworkSetting( pICntlr)
#define     IWLANSRV_SetWLANAvailability(pICntlr, p1)               GET_FUNCTBL((pICntlr), IWLANSRV)->SetWLANAvailability( pICntlr, p1)
#define     IWLANSRV_SetScanNetwork(pICntlr, p1, p2)                GET_FUNCTBL((pICntlr), IWLANSRV)->SetScanNetwork( pICntlr, p1, p2)
#define     IWLANSRV_ScanReq(pICntlr, p1)                           GET_FUNCTBL((pICntlr), IWLANSRV)->ScanReq( pICntlr, p1)
#define     IWLANSRV_GetConnectAPInfo(pICntlr)                      GET_FUNCTBL((pICntlr), IWLANSRV)->GetConnectAPInfo( pICntlr)
#define     IWLANSRV_GetConnectStatus(pICntlr)                      GET_FUNCTBL((pICntlr), IWLANSRV)->GetConnectStatus( pICntlr)
#define     IWLANSRV_GetActiveMode(pICntlr)                         GET_FUNCTBL((pICntlr), IWLANSRV)->GetActiveMode( pICntlr)
#define     IWLANSRV_CheckIfEverConnected(pICntlr, p1)              GET_FUNCTBL((pICntlr), IWLANSRV)->CheckIfEverConnected( pICntlr, p1)
#define     IWLANSRV_GetAPKey(pICntlr, p1)                          GET_FUNCTBL((pICntlr), IWLANSRV)->GetAPKey( pICntlr, p1)
#define     IWLANSRV_ConnectReq(pICntlr, p1, p2, p3, p4, p5)        GET_FUNCTBL((pICntlr), IWLANSRV)->ConnectReq( pICntlr, p1, p2, p3, p4, p5)
#define     IWLANSRV_SetFilterAP(pICntlr, p1)                       GET_FUNCTBL((pICntlr), IWLANSRV)->SetFilterAP( pICntlr, p1)
#define     IWLANSRV_CleanFilterAP(pICntlr, p1)                     GET_FUNCTBL((pICntlr), IWLANSRV)->CleanFilterAP( pICntlr, p1)
#define     IWLANSRV_CheckIfEverFiltered(pICntlr, p1)               GET_FUNCTBL((pICntlr), IWLANSRV)->CheckIfEverFiltered( pICntlr, p1)
#define     IWLANSRV_GetMACAddr(pICntlr)                            GET_FUNCTBL((pICntlr), IWLANSRV)->GetMACAddr( pICntlr)
#define     IWLANSRV_GetScanAPList(pICntlr)                         GET_FUNCTBL((pICntlr), IWLANSRV)->GetScanAPList( pICntlr)
#define     IWLANSRV_GetAPIPInfo(pICntlr, p1)                       GET_FUNCTBL((pICntlr), IWLANSRV)->GetAPIPInfo( pICntlr, p1)
#define     IWLANSRV_AutoConnectReq(pICntlr)                        GET_FUNCTBL((pICntlr), IWLANSRV)->AutoConnectReq( pICntlr)
#define     IWLANSRV_ForcedConnectReq(pICntlr, p1, p2, p3, p4)      GET_FUNCTBL((pICntlr), IWLANSRV)->ForcedConnectReq( pICntlr, p1, p2, p3, p4)
#define     IWLANSRV_NeglectAirplaneMode(pICntlr, p1)               GET_FUNCTBL((pICntlr), IWLANSRV)->NeglectAirplaneMode( pICntlr, p1)
#define     IWLANSRV_IsNeglectAirplaneMode(pICntlr)                 GET_FUNCTBL((pICntlr), IWLANSRV)->IsNeglectAirplaneMode( pICntlr)
#define     IWLANSRV_SetPowerSavingTimer(pICntlr, p1)               GET_FUNCTBL((pICntlr), IWLANSRV)->SetPowerSavingTimer( pICntlr, p1)
#define     IWLANSRV_GetPowerSavingTimer(pICntlr)                   GET_FUNCTBL((pICntlr), IWLANSRV)->GetPowerSavingTimer( pICntlr)
#define     IWLANSRV_SetConnectedDevice(pICntlr, p1, p2)            GET_FUNCTBL((pICntlr), IWLANSRV)->SetConnectedDevice( pICntlr, p1, p2)
#define     IWLANSRV_GetConnectedDevice(pICntlr, p1, p2)            GET_FUNCTBL((pICntlr), IWLANSRV)->GetConnectedDevice( pICntlr, p1, p2)
#define     IWLANSRV_GetConnectedDeviceNumber(pICntlr)              GET_FUNCTBL((pICntlr), IWLANSRV)->GetConnectedDeviceNumber( pICntlr)
#define     IWLANSRV_DeleteConnectedDevice(pICntlr, p1)             GET_FUNCTBL((pICntlr), IWLANSRV)->DeleteConnectedDevice( pICntlr, p1)
#define     IWLANSRV_IsAutoConnectOnOff(pICntlr, p1)                GET_FUNCTBL((pICntlr), IWLANSRV)->IsAutoConnectOnOff( pICntlr, p1)
#define     IWLANSRV_GetUsedCertNumber(pICntlr)                     GET_FUNCTBL((pICntlr), IWLANSRV)->GetUsedCertNumber( pICntlr)
#define     IWLANSRV_GetMaxCertNumber(pICntlr)                      GET_FUNCTBL((pICntlr), IWLANSRV)->GetMaxCertNumber( pICntlr)
#define     IWLANSRV_InsertCert(pICntlr, p1)                        GET_FUNCTBL((pICntlr), IWLANSRV)->InsertCert( pICntlr, p1)
#define     IWLANSRV_DeleteCert(pICntlr, p1)                        GET_FUNCTBL((pICntlr), IWLANSRV)->DeleteCert( pICntlr, p1)
#define     IWLANSRV_ReplaceCert(pICntlr, p1)                       GET_FUNCTBL((pICntlr), IWLANSRV)->ReplaceCert( pICntlr, p1)
#define     IWLANSRV_GetCert(pICntlr, p1, p2)                       GET_FUNCTBL((pICntlr), IWLANSRV)->GetCert( pICntlr, p1, p2)
#define     IWLANSRV_ParseCertInfo(pICntlr, p1, p2)                 GET_FUNCTBL((pICntlr), IWLANSRV)->ParseCertInfo( pICntlr, p1, p2)
#define     IWLANSRV_ParseCertType(pICntlr, p1, p2)                 GET_FUNCTBL((pICntlr), IWLANSRV)->ParseCertType( pICntlr, p1, p2)
#define     IWLANSRV_SetNetworkProfileAsDefault(pICntlr, p1)        GET_FUNCTBL((pICntlr), IWLANSRV)->SetNetworkProfileAsDefault( pICntlr, p1)



/* Functions */
void        WLANSRV_Init(void);
MAE_Ret     WLANSRV_New(MAE_ClsId id, void **ppObj);



/* Epilogue */
/* User Code Begin */
/* Wifi auto test for PC tool */
boolean     mmi_em_request_wifi_off_cb(IWLANSRV *pThis,IMMSRV *pIMMSrv,u32 nEvt,u32 nParam1,u32 nParam2);
boolean     mmi_em_request_wifi_off(IWLANSRV *pThis,IMMSRV *pIMMSrv);
boolean     mmi_em_request_wifi_on_cb(IWLANSRV *pThis,IMMSRV *pIMMSrv,u32 nEvt,u32 nParam1,u32 nParam2);
boolean     mmi_em_request_wifi_on(IWLANSRV *pThis,IMMSRV *pIMMSrv);
boolean     mmi_em_request_wifi_tx_test_cb(IWLANSRV *pThis,IMMSRV *pIMMSrv,u32 nEvt,u32 nParam1,u32 nParam2,u32 nParam3);
boolean     mmi_em_request_wifi_tx_test(IWLANSRV *pThis, IMMSRV *pIMMSrv, ABL_WiFiSetFwTestConfig_t *pWifiFwTstConf);


/* */
void        mmi_em_turn_off_wifi(void *pUser);
void        mmi_em_turn_on_wifi(void *pUser);
void        mmi_em_wifi_send_production(u16 senderID, u32 userValue, ABL_WiFiErrCode_e errCode, ABL_WiFiRspInfo_t *pWifiInfo);
void        mmi_em_wifi_register_notify(u16 senderID, u32 userValue, ABL_EventInfo_t *pWifiNotifyInfo);
void        mmi_em_wifi_get_fw_test_result(u16 senderID, u32 userValue, ABL_WiFiErrCode_e errCode, ABL_WiFiRspInfo_t *pWifiInfo);

/* User Code End */

#endif /* __MMI_WLANSRV_H__ */

