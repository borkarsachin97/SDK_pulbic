/**
* @file mmi_countdowntimersrv.h
*
* State Machine Service - COUNTDOWNTIMERSRV
* Generated by XFSM v1.0, CodeVer=v0.24 
*
* Class Id: CLSID_COUNTDOWNTIMERSRV
* 
*
* @version $Id$
*/

#ifndef __MMI_COUNTDOWNTIMERSRV_H__
#define __MMI_COUNTDOWNTIMERSRV_H__

/*-------------------------------------------------------------------------*/

#include "mmi_mae_common_def.h"
#include "mmi_mae_applet.h"
#include "mmi_mae_class.h"

/*-------------------------------------------------------------------------*/
enum
{
    CountDownTimerSrv_State_Idle = 0,
    CountDownTimerSrv_State_Counting,
    CountDownTimerSrv_State_Pause,
    CountDownTimerSrv_State_Timeout,
    CountDownTimerSrv_State_SysTimeReset
};
typedef u8 CountDownTimerSrv_State_e;

enum
{
    CountDownTimerSrv_Notify_Mask_Timer        = 1 << 0,
    CountDownTimerSrv_Notify_Mask_TimeIsUp     = 1 << 1,
    CountDownTimerSrv_Notify_Mask_SysTimeReset = 1 << 2,
    CountDownTimerSrv_Notify_Mask_StateChange  = 1 << 3,
};
typedef u8 CountDownTimerSrv_Notify_Mask_e;
/*-------------------------------------------------------------------------*/

/**
 * External Events
 */
#define COUNTDOWNTIMERSRV_EVT_Timer                 (CLSID_COUNTDOWNTIMERSRV << 16 | 1)
#define COUNTDOWNTIMERSRV_EVT_TimeIsUp              (CLSID_COUNTDOWNTIMERSRV << 16 | 2)
#define COUNTDOWNTIMERSRV_EVT_SysTimeReset          (CLSID_COUNTDOWNTIMERSRV << 16 | 3)
#define COUNTDOWNTIMERSRV_EVT_StateChange           (CLSID_COUNTDOWNTIMERSRV << 16 | 4)

/**
 * ICOUNTDOWNTIMERSRV Interfaces
 */
#define INHERIT_ICOUNTDOWNTIMERSRV(IName) \
    INHERIT_IHandler(IName); \
	MAE_Ret		(*RegisterNotification)		( IName * , void *pInstance, CountDownTimerSrv_Notify_Mask_e eMask);  \
	MAE_Ret		(*DeregisterNotification)		( IName * , void *pInstance, CountDownTimerSrv_Notify_Mask_e eMask);  \
	MAE_Ret		(*GetState)		( IName * , CountDownTimerSrv_State_e *pState, u32 *pCountdownSeconds);  \
	MAE_Ret		(*Start)		( IName * , u32 nDuration);  \
	MAE_Ret		(*Pause)		( IName * );  \
	MAE_Ret		(*Stop)		( IName * );  \
	MAE_Ret		(*Resume)		( IName * );  \
	MAE_Ret		(*GetDuration)		( IName * , u32 *pDuration)

DEFINE_INTERFACE(ICOUNTDOWNTIMERSRV);


#define ICOUNTDOWNTIMERSRV_QueryInterface(pICntlr, id, pp, po)			GET_FUNCTBL((pICntlr), ICOUNTDOWNTIMERSRV)->QueryInterface(pICntlr, id, pp, po)
#define ICOUNTDOWNTIMERSRV_HandleEvent(pICntlr, e, p1, p2)				GET_FUNCTBL((pICntlr), ICOUNTDOWNTIMERSRV)->HandleEvent(pICntlr, e, p1, p2)
/**
 
 */
#define ICOUNTDOWNTIMERSRV_RegisterNotification(pICntlr, p1, p2)	GET_FUNCTBL((pICntlr), ICOUNTDOWNTIMERSRV)->RegisterNotification( pICntlr, p1, p2)
/**
 
 */
#define ICOUNTDOWNTIMERSRV_DeregisterNotification(pICntlr, p1, p2)	GET_FUNCTBL((pICntlr), ICOUNTDOWNTIMERSRV)->DeregisterNotification( pICntlr, p1, p2)
/**
 
 */
#define ICOUNTDOWNTIMERSRV_GetState(pICntlr, p1, p2)	GET_FUNCTBL((pICntlr), ICOUNTDOWNTIMERSRV)->GetState( pICntlr, p1, p2)
/**
 
 */
#define ICOUNTDOWNTIMERSRV_Start(pICntlr, p1)	GET_FUNCTBL((pICntlr), ICOUNTDOWNTIMERSRV)->Start( pICntlr, p1)
/**
 
 */
#define ICOUNTDOWNTIMERSRV_Pause(pICntlr)	GET_FUNCTBL((pICntlr), ICOUNTDOWNTIMERSRV)->Pause( pICntlr)
/**
 
 */
#define ICOUNTDOWNTIMERSRV_Stop(pICntlr)	GET_FUNCTBL((pICntlr), ICOUNTDOWNTIMERSRV)->Stop( pICntlr)
/**
 
 */
#define ICOUNTDOWNTIMERSRV_Resume(pICntlr)	GET_FUNCTBL((pICntlr), ICOUNTDOWNTIMERSRV)->Resume( pICntlr)
/**
 
 */
#define ICOUNTDOWNTIMERSRV_GetDuration(pICntlr, p1)	GET_FUNCTBL((pICntlr), ICOUNTDOWNTIMERSRV)->GetDuration( pICntlr, p1)
/**
 * Functions
 */
void COUNTDOWNTIMERSRV_Init(void);

MAE_Ret COUNTDOWNTIMERSRV_New(MAE_ClsId id, void **ppObj);

#endif /* __MMI_COUNTDOWNTIMERSRV_H__ */
