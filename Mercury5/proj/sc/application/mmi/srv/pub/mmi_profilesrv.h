/**
* @file mmi_profilesrv.h
*
* Service without using State Machine - PROFILESRV
* Generated by XFSM v1.0, CodeVer=v0.24
*
* Class Id: CLSID_PROFILESRV
* Interface Id: IID_PROFILESRV
*
* @version $Id: mmi_profilesrv.h 35340 2009-07-08 04:47:53Z otto.wu $
*/
#ifndef __MMI_PROFILESRV_H__
#define __MMI_PROFILESRV_H__

/*-------------------------------------------------------------------------*/

#include "mmi_mae_common_def.h"
#include "mmi_mae_applet.h"
#include "mmi_mae_class.h"
#include "mmi_mae_model.h"
#include "mmi_common_cfg.h"           //Define Profile data struct

//Model Listener Notify Event
#define PROFILESRV_EVT_PROFILE_CHANGE                   (CLSID_PROFILESRV << 16 | 1)
#define PROFILESRV_EVT_PROFILE_INIDICATOR               (CLSID_PROFILESRV << 16 | 2)
#define PROFILESRV_EVT_INACTIVE_PROFILE_SETTING_CHANGE  (CLSID_PROFILESRV << 16 | 3)
enum
{
    ////////////Map to ProfileID//////////////////////

    PROFILESRV_IND_NONE = PROFILESRV_ID_NONE
    
   ,PROFILESRV_IND_START = PROFILESRV_ID_GENERAL
   
   ,PROFILESRV_IND_GENERAL = PROFILESRV_ID_GENERAL
   ,PROFILESRV_IND_MEETING = PROFILESRV_ID_MEETING
   ,PROFILESRV_IND_OUTDOOR = PROFILESRV_ID_OUTDOOR
   ,PROFILESRV_IND_SILENT = PROFILESRV_ID_SILENT
   ,PROFILESRV_IND_PERSONAL = PROFILESRV_ID_PERSONAL
   ,PROFILESRV_IND_HEADSET = PROFILESRV_ID_HEADSET
   ,PROFILESRV_IND_BLUETOOTH = PROFILESRV_ID_BLUETOOTH
   ,PROFILESRV_IND_POWER_SAVING = PROFILESRV_ID_POWER_SAVING  
   
   ,PROFILESRV_IND_END
   
    //////////////////////////////////////////////////
   ,PROFILESRV_IND_SILENT_HEADSET
   
   ,PROFILESRV_IND_SILENT_BLUETOOTH   

   ,PROFILESRV_IND_SILENT__HEADSET_BLUETOOTH_BOTH   
   ,PROFILESRV_IND_HEADSET__HEADSET_BLUETOOTH_BOTH   
   ,PROFILESRV_IND_BLUETOOTH__HEADSET_BLUETOOTH_BOTH      
};
typedef u8 ProfileIndicator_e;

enum
{
    IPROFILESRV_RET_SUCCESS = 0
  , ///< operation completed successfully
    IPROFILESRV_RET_BAD_PARAM = 1
  , ///< invalid input parameters
    IPROFILESRV_RET_FAILED = 2
  , ///< WHAT? every code here is failed
    IPROFILESRV_RET_OUT_OF_MEMORY = 3
  , ///< memory is not enough to complete the operation
    IPROFILESRV_RET_NOT_SUPPORTED = 4
  , ///< the request is not supported
    IPROFILESRV_RET_NOT_READY = 7
   ,IPROFILESRV_RET_NOT_FOUND = 8
  , ///< the specified item is not found
    IPROFILESRV_RET_BUSY = 9
   ,IPROFILESRV_RET_FS_FULL = 10
   ,IPROFILESRV_RET_ILLEGAL_OPERATION = 18
  , ///< the operation is not allowed; eg: posting events to an unrelated object,

    IPROFILESRV_RET_DENY_CHANGE_HEADSET_PROFILE = 100
   ,IPROFILESRV_RET_HEADSET_IN_DENY_CHANGE_PROFILES = 101
   ,IPROFILESRV_RET_DENY_CHANGE_BLUETOOTH_PROFILE = 102
   ,IPROFILESRV_RET_BLUETOOTH_IN_DENY_CHANGE_PROFILES = 103
   ,IPROFILESRV_RET_UNKNOWN_ERROR = 0x1000
};
typedef u32 IPROFILESRV_Ret; ///< type for MAE return values
/*-------------------------------------------------------------------------*/

/**
 * External Events
 */


/**
 * IPROFILESRV Interfaces
 */
#define INHERIT_IPROFILESRV(IName) \
    INHERIT_IHandler(IName); \
    IPROFILESRV_Ret     (*ActivateProfile)      ( IName * , ProfileID_e eProfileID);  \
    MAE_Ret     (*RestoreProfile)       ( IName * , ProfileID_e eProfileID);  \
    MAE_Ret     (*GetCurrentProfileSettings)        ( IName * , ProfileSettings_t *pstProfileSettings);  \
    MAE_Ret     (*SetCurrentProfileSettings)        ( IName * , ProfileSettings_t *pstProfileSettings);  \
    MAE_Ret     (*GetProfileSettings)       ( IName * , ProfileID_e eProfileID, ProfileSettings_t *pstProfileSettings, boolean bGetDefaultVaule);  \
    MAE_Ret     (*SetProfileSettings)       ( IName * , ProfileID_e eProfileID, ProfileSettings_t *pstProfileSettings);  \
    MAE_Ret     (*GetCurrentProfileID)      ( IName * , ProfileID_e *peProfileID);  \
    MAE_Ret     (*AddListener)     ( IName * , ModelListener_t *pModelListener);  \
    MAE_Ret     (*CancellListener)      ( IName * , ModelListener_t *pModelListener);  \
    MAE_Ret     (*ReloadCurrentProfile)     ( IName * );  \
    MAE_Ret     (*GetCurPorfileVolumeInfo)      ( IName * , SetRingToneVolume_e *pMaxVol, SetRingToneVolume_e *pCurVol);  \
    MAE_Ret     (*GetCurrentProfileInd)     ( IName * , ProfileIndicator_e *pProfileIndicator);  \
    MAE_Ret     (*GetPreviousProfileID)     ( IName * , ProfileID_e *peProfileID); \
    MAE_Ret     (*NotifyInactivateSilentModeByHotKey)     ( IName * )

DEFINE_INTERFACE(IPROFILESRV);


#define IPROFILESRV_QueryInterface(pICntlr, id, pp, po)         GET_FUNCTBL((pICntlr), IPROFILESRV)->QueryInterface(pICntlr, id, pp, po)
#define IPROFILESRV_HandleEvent(pICntlr, e, p1, p2)             GET_FUNCTBL((pICntlr), IPROFILESRV)->HandleEvent(pICntlr, e, p1, p2)
/**
 IPROFILESRV_RestoreAcitvate
@brief  The interface is use to Activate profile.

@param[in]     pIPROFILESRV                Pointer to the IPROFILESRV interface.
@param[in]     eProfileID                         Figure out which profile want to activate.


@return MAE_RET_SUCCESS          If successful.
@return MAE_RET_FAILED             If an error happen.



 */
#define IPROFILESRV_ActivateProfile(pICntlr, p1)    GET_FUNCTBL((pICntlr), IPROFILESRV)->ActivateProfile( pICntlr, p1)
/**
 IPROFILESRV_RestoreProfile
@brief  The interface is use to restore profile setting to default value.

@param[in]     pIPROFILESRV                Pointer to the IPROFILESRV interface.
@param[in]     eProfileID                         Figure out which profile want to retore.


@return MAE_RET_SUCCESS          If successful.
@return MAE_RET_FAILED             If an error happen.



 */
#define IPROFILESRV_RestoreProfile(pICntlr, p1) GET_FUNCTBL((pICntlr), IPROFILESRV)->RestoreProfile( pICntlr, p1)
/**
 IPROFILESRV_GetCurrentProfileSettings
@brief  The interface is use to get current profile settings.

@param[in]     pIPROFILESRV                Pointer to the IPROFILESRV interface.
@param[out]     pstProfileSettings            Place holder to  current profile settings


@return MAE_RET_SUCCESS          If successful.
@return MAE_RET_BAD_PARAM   If parameter error.
@return MAE_RET_FAILED             If an error happen.



 */
#define IPROFILESRV_GetCurrentProfileSettings(pICntlr, p1)  GET_FUNCTBL((pICntlr), IPROFILESRV)->GetCurrentProfileSettings( pICntlr, p1)
/**
 IPROFILESRV_SetCurrentProfileSettings
@brief  The interface is use to set current profile settings.

@param[in]     pIPROFILESRV                Pointer to the IPROFILESRV interface.
@param[in]     eProfileID                         Figure out which profile want to set.
@param[in]     pstProfileSettings            Place holder to  current profile settings.


@return MAE_RET_SUCCESS          If successful.
@return MAE_RET_BAD_PARAM   If parameter error.
@return MAE_RET_FAILED             If an error happen.



 */
#define IPROFILESRV_SetCurrentProfileSettings(pICntlr, p1)  GET_FUNCTBL((pICntlr), IPROFILESRV)->SetCurrentProfileSettings( pICntlr, p1)
/**
 IPROFILESRV_GetProfileSettings
@brief  The interface is use to get profile settings.

@param[in]     pIPROFILESRV                Pointer to the IPROFILESRV interface.
@param[in]     eProfileID                         Figure out which profile want to get
@param[in]     bGetDefaultVaule             True to Get DefaultValue
@param[out]     pstProfileSettings            Place holder to  profile settings


@return MAE_RET_SUCCESS          If successful.
@return MAE_RET_BAD_PARAM   If parameter error.
@return MAE_RET_FAILED             If an error happen.



 */
#define IPROFILESRV_GetProfileSettings(pICntlr, p1, p2, p3) GET_FUNCTBL((pICntlr), IPROFILESRV)->GetProfileSettings( pICntlr, p1, p2, p3)
/**
 IPROFILESRV_SetProfileSettings
@brief  The interface is use to set profile settings.

@param[in]     pIPROFILESRV             Pointer to the IPROFILESRV interface.
@param[in]     pstProfileSettings            Place holder to  profile settings


@return MAE_RET_SUCCESS          If successful.
@return MAE_RET_BAD_PARAM   If parameter error.
@return MAE_RET_FAILED             If an error happen.



 */
#define IPROFILESRV_SetProfileSettings(pICntlr, p1, p2) GET_FUNCTBL((pICntlr), IPROFILESRV)->SetProfileSettings( pICntlr, p1, p2)
/**
 IPROFILESRV_GetCurrentProfileID
@brief  The interface is use to get current profile ID.

@param[in]     pIPROFILESRV             Pointer to the IPROFILESRV interface.
@param[out]   peProfileID                     Place holder to current profile ID


@return MAE_RET_SUCCESS          If successful.
@return MAE_RET_BAD_PARAM   If parameter error.
@return MAE_RET_FAILED             If an error happen.



 */
#define IPROFILESRV_GetCurrentProfileID(pICntlr, p1)    GET_FUNCTBL((pICntlr), IPROFILESRV)->GetCurrentProfileID( pICntlr, p1)
/**
 IPROFILESRV_AddListener
@brief  The interface is use to add a listener in profile service to listen profile event.

@param[in]   pIPROFILESRV             Pointer to the IPROFILESRV interface.
@param[in]   pModelListener                     Pointer to model listener


@return MAE_RET_SUCCESS          If successful.
@return MAE_RET_BAD_PARAM   If parameter error.
@return MAE_RET_FAILED             If an error happen.



 */
#define IPROFILESRV_AddListener(pICntlr, p1)   GET_FUNCTBL((pICntlr), IPROFILESRV)->AddListener( pICntlr, p1)
/**
 IPROFILESRV_CancellListener
@brief  The interface is use to cancel listener which is registered before.

@param[in]   pIPROFILESRV             Pointer to the IPROFILESRV interface.
@param[in]   pModelListener                     Pointer to model listener

@return MAE_RET_SUCCESS          If successful.
@return MAE_RET_FAILED             If an error happen.
 */
#define IPROFILESRV_CancellListener(pICntlr, p1)    GET_FUNCTBL((pICntlr), IPROFILESRV)->CancellListener( pICntlr, p1)
/**
 IPROFILESRV_ReloadCurrentProfile
@brief  The interface is use to reload profile after master reset.

@param[in]   pIPROFILESRV             Pointer to the IPROFILESRV interface.

@return MAE_RET_SUCCESS          If successful.
@return MAE_RET_FAILED             If an error happen.
 */
#define IPROFILESRV_ReloadCurrentProfile(pICntlr)   GET_FUNCTBL((pICntlr), IPROFILESRV)->ReloadCurrentProfile( pICntlr)
/**
 IPROFILESRV_ReloadCurrentProfile
@brief  The interface is use to reload profile after master reset.

@param[in]   pIPROFILESRV             Pointer to the IPROFILESRV interface.

@return MAE_RET_SUCCESS          If successful.
@return MAE_RET_FAILED             If an error happen.
 */
#define IPROFILESRV_GetCurPorfileVolumeInfo(pICntlr, p1, p2)    GET_FUNCTBL((pICntlr), IPROFILESRV)->GetCurPorfileVolumeInfo( pICntlr, p1, p2)
/**
 IPROFILESRV_GetCurrentProfileID
@brief  The interface is use to get current profile ID.

@param[in]     pIPROFILESRV             Pointer to the IPROFILESRV interface.
@param[out]   pProfileIndicator                     Place holder to current profile Indicator ID


@return MAE_RET_SUCCESS          If successful.
@return MAE_RET_BAD_PARAM   If parameter error.
@return MAE_RET_FAILED             If an error happen.



 */
#define IPROFILESRV_GetCurrentProfileInd(pICntlr, p1)   GET_FUNCTBL((pICntlr), IPROFILESRV)->GetCurrentProfileInd( pICntlr, p1)
/**
 IPROFILESRV_GetPreviousProfileID
@brief  The interface is use to get previous valid profile ID.

@param[in]     pIPROFILESRV             Pointer to the IPROFILESRV interface.
@param[out]   peProfileID                     Place holder to current profile ID


@return MAE_RET_SUCCESS          If successful.
@return MAE_RET_BAD_PARAM   If parameter error.
@return MAE_RET_FAILED             If an error happen.



 */
#define IPROFILESRV_GetPreviousProfileID(pICntlr, p1)   GET_FUNCTBL((pICntlr), IPROFILESRV)->GetPreviousProfileID( pICntlr, p1)


/**
 IPROFILESRV_NotifyInactivateSilentModeByHotKey
@brief  The interface is used to notify that the next SrvProfileActivateProfile is called to inactivate silent mode by hot key(#)

@param[in]     pIPROFILESRV             Pointer to the IPROFILESRV interface.

@return MAE_RET_SUCCESS          If successful.
@return MAE_RET_NOT_READY        If ProfileSrv is already terminated.

 */
#define IPROFILESRV_NotifyInactivateSilentModeByHotKey(pICntlr)   GET_FUNCTBL((pICntlr), IPROFILESRV)->NotifyInactivateSilentModeByHotKey( pICntlr)


/**
 * Functions
 */

void PROFILESRV_Init(void);

__SLDPM_FREE__ MAE_Ret PROFILESRV_New(MAE_ClsId id, void **ppObj);

/*-------------------------------------------------------------------------*/
#endif /* __MMI_PROFILESRV_H__ */
