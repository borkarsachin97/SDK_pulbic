/**
* @file mmi_coresrv.h
*
* Service without using State Machine - CORESRV
* Generated by XFSM v1.0, CodeVer=v0.24 
*
* Class Id: CLSID_CORESRV
* Interface Id: IID_CORESRV
*
* @version $Id$
*/
#ifndef __MMI_DIALOGSRV_H__
#define __MMI_DIALOGSRV_H__

/*-------------------------------------------------------------------------*/

#include "mmi_mae_common_def.h"
#include "mmi_mae_applet.h"
#include "mmi_mae_class.h"

/*-------------------------------------------------------------------------*/
#include "mmi_mae_model.h"

/**
 * Internal Events
 */
#define DIALOGSRV_EVT_CREATEDIALOG     (CLSID_DIALOGSRV <<16  | 1)
#define DIALOGSRV_EVT_CREATEDIALOGBYID (CLSID_DIALOGSRV <<16  | 2)

/**
 * External Events
 */


/**
 * IDIALOGSRV Interfaces
 */
#define INHERIT_IDIALOGSRV(IName) \
    INHERIT_IHandler(IName)
DEFINE_INTERFACE(IDIALOGSRV);


#define IDIALOGSRV_QueryInterface(pICntlr, id, pp, po)            GET_FUNCTBL((pICntlr), IDIALOGSRV)->QueryInterface(pICntlr, id, pp, po)
#define IDIALOGSRV_HandleEvent(pICntlr, e, p1, p2)                GET_FUNCTBL((pICntlr), IDIALOGSRV)->HandleEvent(pICntlr, e, p1, p2)

/* Callback function */
typedef void (*_DIALOGSRV_DialogResultCB)(void *pData, u32 *uEvent);

/**
 * Data Structures
 */
typedef struct DialogSrvMelody_tag
{
    boolean bPlayMelody;
    u32 nMelodyID;
}DialogSrvMelody_t;

typedef struct DialogSrvSoftkey_tag
{
    u32         nLSK;           //Will use default SK if this param is not set to another SK
    u32         nCSK;           //Will use default SK if this param is not set to another SK
    u32         nRSK;           //Will use default SK if this param is not set to another SK
}DialogSrvSoftkey_t;

typedef struct DialogSrvDialogSetting_tag
{
    u16         uDialogViewID;  //Dialog Type View ID: eg.COMMON_DIALOG_INFODIALOG
    DialogSrvSoftkey_t tSKInfo; //Softkey setting
    DialogSrvMelody_t tMelodyInfo;//Melody Info
    u32         uAutoCloseTimer;//Timer in mSec. If set to 0, auto close is turned off
    u32         MsgId;          //The MsgId Assigned by the caller to make sure the caller knows which Msg is being answered
}DialogSrvDialogSetting_t;

typedef struct DialogSrvDialogCallback_tag
{
    _DIALOGSRV_DialogResultCB   pfnDialogCB;
    void*                       pUsrData;
}DialogSrvDialogCallback_t;

/**
 * Functions
 */

void DIALOGSRV_Init(void);

MAE_Ret DIALOGSRV_New(MAE_ClsId id, void **ppObj);

/////////////////////////////////////////////////////////////////////////////////////////////////////////
//  Dialog Service interface
/////////////////////////////////////////////////////////////////////////////////////////////////////////

MAERet_t DialogSrvCreateDefaultDialog(MAE_WChar* pwDialogMsg);
MAERet_t DialogSrvCreateDialog(MAE_WChar* pwDialogMsg, DialogSrvDialogSetting_t* pDialogSetting);
MAERet_t DialogSrvCreateDialogWithResult(MAE_WChar* pwDialogMsg, DialogSrvDialogSetting_t* pDialogSetting, DialogSrvDialogCallback_t* pDialogCB);
MAERet_t DialogSrvCreateDefaultTopDialog(MAE_WChar* pwDialogMsg);
MAERet_t DialogSrvCreateTopDialog(MAE_WChar* pwDialogMsg, DialogSrvDialogSetting_t* pDialogSetting);
MAERet_t DialogSrvCreateTopDialogWithResult(MAE_WChar* pwDialogMsg, DialogSrvDialogSetting_t* pDialogSetting, DialogSrvDialogCallback_t* pDialogCB);



MAE_Ret mmi_DIALOGSRV_Register_Notification(IDIALOGSRV *pIDIALOGSRV, void *pInst, u32 mask);

MAE_Ret mmi_DIALOGSRV_DeRegister_Notification(IDIALOGSRV *pIDIALOGSRV, void *pInst, u32 mask);

/*-------------------------------------------------------------------------*/
#endif /* __MMI_DIALOGSRV_H__ */
