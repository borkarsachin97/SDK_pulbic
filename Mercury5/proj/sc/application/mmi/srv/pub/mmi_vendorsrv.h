/**
* @file mmi_vendorsrv.h
*
* Service without using State Machine - VENDORSRV
* Generated by XFSM v1.0, CodeVer=v0.24
*
* Class Id: CLSID_VENDORSRV
* Interface Id: IID_VENDORSRV
*
* @version $Id: mmi_vendorsrv.h 47127 2009-12-10 14:30:38Z steve.lee $
*/
#ifndef __MMI_VENDORSRV_H__
#define __MMI_VENDORSRV_H__

#include "mmi_mae_common_def.h"
#include "mmi_mae_applet.h"
#include "mmi_mae_class.h"
#include "mmi_mae_model.h"
#include "mmi_venappid.h"
#include "mmi_vendorsrv_req_st.h"
/**
  for the IVENDORSRV_AddListener API.
  The dwparam of the ModelEvent_t in the Listener function is a (mmi_ven_notify_data_t *)
 */
typedef struct
{
    u32 SessionID;
    u32 Handle;
    void *pData;
}mmi_ven_notify_data_t;

typedef struct
{
	MAE_ClsId clsId;            // Vendor's class id
	MAE_WChar *pDisplayName;    // Vendor's display name with NULL terminate
	void *pData;                // Pointer to vendor's user data to deliver to vendor task
	u32 nDataLen;               // Byte length of user data
	bool bSupportBackgroundMusic;	//background music open to 3rd
} mmi_ven_start_param_t;

typedef struct
{
	u16 nYear;
	u8 nMonth;
	u8 nDay;
	u8 nHour;
	u8 nMinute;
	u8 nSecond;
	bool bDate;
}mmi_ven_datetime_param_t;

//Notify event
#define VENSRV_EVT_VIDEO_PLAY                    (CLSID_VENDORSRV <<16  | 1)
#define VENSRV_EVT_PHB_BROWSE                    (CLSID_VENDORSRV <<16  | 2)
#define VENSRV_EVT_FILE_BROWSE                   (CLSID_VENDORSRV <<16  | 3)
#define VENSRV_EVT_CC_MAKECALL                   (CLSID_VENDORSRV <<16  | 4)
#define VENSRV_EVT_MSG_SEND                      (CLSID_VENDORSRV <<16  | 5)
#define VENSRV_EVT_EDITOR_EDIT                   (CLSID_VENDORSRV <<16  | 6)
#define VENSRV_EVT_SELECT_SIM                    (CLSID_VENDORSRV <<16  | 7)
#define VENSRV_EVT_TIME_SET_TIMEZONE             (CLSID_VENDORSRV <<16  | 8)
#define VENSRV_EVT_START_RSP                     (CLSID_VENDORSRV <<16  | 9)
#define VENSRV_EVT_EXIT_RSP                      (CLSID_VENDORSRV <<16  | 10)
#define VENSRV_EVT_SUSPEND_RSP                   (CLSID_VENDORSRV <<16  | 11)
#define VENSRV_EVT_RESUME_RSP                    (CLSID_VENDORSRV <<16  | 12)
#define VENSRV_EVT_BACKGROUND_RSP                (CLSID_VENDORSRV <<16  | 13)
#define VENSRV_EVT_STOP_IND                      (CLSID_VENDORSRV <<16  | 14)
#define VENSRV_EVT_SET_ITEM_VIS                  (CLSID_VENDORSRV <<16  | 15)
#define VENSRV_EVT_GET_ITEM_VIS                  (CLSID_VENDORSRV <<16  | 16)
#define VENSRV_EVT_SHOW_UI                       (CLSID_VENDORSRV <<16  | 17)
#define VENSRV_EVT_CLOSE_UI                      (CLSID_VENDORSRV <<16  | 18)
#define VENSRV_EVT_SET_UI_INT_LEVEL              (CLSID_VENDORSRV <<16  | 19)
#define VENSRV_EVT_START_IND                     (CLSID_VENDORSRV <<16  | 20)
#define VENSRV_EVT_MSG_EDITOR_EDIT               (CLSID_VENDORSRV <<16  | 21)
#define VENSRV_EVT_OPEN_BROWSER                  (CLSID_VENDORSRV <<16  | 22)
#define VENSRV_EVT_SET_UI_BLK                    (CLSID_VENDORSRV <<16  | 23)
#define VENSRV_EVT_FILE_ACCESS_IND               (CLSID_VENDORSRV <<16  | 24)
#define VENSRV_EVT_KILL_IND                      (CLSID_VENDORSRV <<16  | 25)
#define VENSRV_EVT_BACKGROUND_IND                (CLSID_VENDORSRV <<16  | 26)
#define VENSRV_EVT_FOREGROUND_IND                (CLSID_VENDORSRV <<16  | 27)
#define VENSRV_EVT_UI_STATUSBAR_DRAW_ICON        (CLSID_VENDORSRV <<16  | 28)
#define VENSRV_EVT_RESET_UI_BLK                  (CLSID_VENDORSRV <<16  | 29)
#define VENSRV_EVT_UPDATE_UI					 (CLSID_VENDORSRV <<16  | 30)
#define VENSRV_EVT_FOREGROUND_RSP                (CLSID_VENDORSRV <<16  | 31)
#define VENSRV_EVT_CC_MAKECALL_GET_CALL_ID		(CLSID_VENDORSRV <<16  | 32)
#define VENSRV_EVT_CC_RELEASECALL				(CLSID_VENDORSRV <<16  | 33)
#define VENSRV_EVT_EDITOR_DATE					(CLSID_VENDORSRV <<16  | 34)
#define VENSRV_EVT_EDITOR_TIME					(CLSID_VENDORSRV <<16  | 35)
#define VENSRV_EVT_VIDEOSTREAM_PLAY				(CLSID_VENDORSRV <<16  | 36)
#define VENSRV_EVT_VIDEOSTREAM_STOP				(CLSID_VENDORSRV <<16  | 37)
#define VENSRV_EVT_VIDEOSEEK_ONOFF				(CLSID_VENDORSRV <<16  | 38)
#define VENSRV_EVT_CAM_LAUNCH_APP				(CLSID_VENDORSRV <<16  | 39)
#define VENSRV_EVT_ENABLE_LAUNCH_KEYGUARD		(CLSID_VENDORSRV <<16  | 40)
#define VENSRV_EVT_EDITOR_CLOSE					(CLSID_VENDORSRV <<16  | 41)
#define VENSRV_EVT_FILE_SELECT_FOLDER			(CLSID_VENDORSRV <<16  | 42)
#define VENSRV_EVT_SMS_RETREV_FROM_SIM			(CLSID_VENDORSRV <<16  | 43)
#define VENSRV_EVT_SET_DISPLAY_MODE              (CLSID_VENDORSRV <<16  | 44)
#define VENSRV_EVT_FILE_BROWSE_EX               (CLSID_VENDORSRV <<16  | 45)
#define VENSRV_EVT_SEN_BTAPP_SEND_FILE			(CLSID_VENDORSRV <<16  | 46)


typedef void (*fnVenSrvKillCBPtr)(IBase *pObj, boolean bSuccess, u32 usrData);

typedef enum
{
	VENAP_STATE_SUSPEND,
	VENAP_STATE_ACTIVE,
	VENAP_STATE_REQ_EMBAP

} VenApState_t;

enum{

	VENAP_CC_CALL_START = 1,
	VENAP_CC_CALL_GO_THROUGH,
	
};

enum
{
	VENSRV_CC_FILTER_NORNAL = 0,	//mmi normal case, ccmtaapp must handle it
	VENSRV_CC_FILTER_REJECT,			//incoming call must be rejected, with callog
	VENSRV_CC_FILTER_REJECT_NO_CALLLOG,	//incoming call must be rejected, without callog
	VENSRV_CC_FILTER_VENDOR,			//3rd party will handle this call, with calllog
	VENSRV_CC_FILTER_VENDOR_NO_CALLLOG,	//3rd party will handle this call, without calllog
};
typedef u8 VenSrv_Cc_Filter_t;

/**
 * External Events
 */


/**
 * IVENDORSRV Interfaces
 */
#define INHERIT_IVENDORSRV(IName) \
    INHERIT_IHandler(IName); \
    MAE_Ret     (*AddListener)      ( IName * , ModelListener_t *pModelListener);  \
    MAE_Ret     (*CancelListener)       ( IName * , ModelListener_t *pModelListener);  \
	MAE_Ret		(*StartVen)		( IName * , Mmi_VenAppID_t appID, u32 *pHandle, mmi_ven_start_param_t *pStartParam);  \
    MAE_Ret     (*ExitVen)      ( IName * , u32 handle);  \
    MAE_Ret     (*SuspendVen)       ( IName * , u32 handle);  \
    MAE_Ret     (*ResumeVen)        ( IName * , u32 handle);  \
    MAE_Ret     (*TouchInd)     ( IName * , u32 handle, u32 evt, u32 param1, u32 param2);  \
    void        (*MakeCallEnd)      ( IName * , u32 handle, u32 session, MAE_Ret retCode);  \
    void        (*MakeCallGetCallIDEnd)      ( IName * , u32 handle, u32 session, MAE_Ret retCode, s32 state, s32 callID);  \
    void        (*ReleaseCallRsp)      ( IName * , u32 handle, u32 session, MAE_Ret nResult);  \
    void        (*VideoPlayRsp)     ( IName * , u32 handle, u32 session, MAE_Ret nResult);  \
    void        (*VideoUpdateStatus)( IName * , u32 handle, u32 session, mmi_ven_video_status_e eStatus, u32 nStatusData);  \
    void        (*EditorRsp)        ( IName * , u32 handle, u32 session, MAE_WChar *pContent, u16 nStrLen, editor_reult_t result);  \
	void        (*DateTimeEditorRsp)        ( IName * , u32 handle, u32 session, mmi_ven_datetime_param_t *pData, editor_reult_t nResult);  \
    void        (*PhbBrowseRsp)     ( IName * , u32 handle, u32 session, MAE_WChar *pData, u16 nStrLen, u8 nMarkedSize);  \
    void        (*FileBrowseRsp)        ( IName * , u32 handle, u32 session, MAE_WChar *pData, u16 nStrLen, u8 nMarkedSize);  \
    void        (*FileBrowseExRsp)        ( IName * , u32 handle, u32 session, MAE_WChar *pData, u16 nStrLen, u8 nMarkedSize);  \
    void        (*FileSelectFolderRsp)        ( IName * , u32 handle, u32 session, MAE_WChar *pData, u16 nStrLen);  \
    void        (*SenBtAppSendFileRsp)      ( IName * , u32 handle, u32 session, MAE_Ret retCode);  \
    void        (*CamLaunchAppRsp)        ( IName * , u32 handle, u32 session, void *pData); \
    void        (*SelectSIMRsp)     ( IName * , u32 handle, u32 session, mmi_ven_select_sim_t SelectSIM, MAE_Ret nSelectRet);  \
    void        (*OpenBrowserRsp)       ( IName * , u32 handle, u32 session, MAE_Ret nResult);  \
	MAE_Ret		(*BackgroundVen)		( IName * , u32 handle, void * pData, u32 dataLen);  \
	MAE_Ret		(*ForegroundVen)		( IName * , u32 handle, void * pData, u32 dataLen);  \
	MAE_Ret		(*GetVenFrameBuffer)		( IName * , u32 handle, BitmapBase_t **ppBitmapBase);  \
	MAE_Ret		(*KillVenByID)		( IName * , Mmi_VenAppID_t apID, IBase * pIssuer, fnVenSrvKillCBPtr pFnCB, u32 usrData);  \
	MAE_Ret		(*GetVenNameByID)		( IName * , Mmi_VenAppID_t apID, MAE_WChar **ppName);  \
    void        (*MsgEditorRsp)     ( IName * , u32 handle, u32 session, MAE_Ret nResult); \
    VenSrv_Cc_Filter_t     	(*IncomingCallFilter)    (IName * , u8 *pCallNumber, u32 callID, boolean bCcSrvIdle); \
    MAE_Ret		(*KillVenByPriority)		( IName * , IBase * pIssuer, fnVenSrvKillCBPtr pFnCB, u32 usrData);  \
    void        (*GetVdoStmDLItfData)       ( IName * , u32 *APID, s32 *pMediaHandle, void **ppDLItfCb)

DEFINE_INTERFACE(IVENDORSRV);


#define IVENDORSRV_QueryInterface(pICntlr, id, pp, po)          GET_FUNCTBL((pICntlr), IVENDORSRV)->QueryInterface(pICntlr, id, pp, po)
#define IVENDORSRV_HandleEvent(pICntlr, e, p1, p2)              GET_FUNCTBL((pICntlr), IVENDORSRV)->HandleEvent(pICntlr, e, p1, p2)
/**

 */
#define IVENDORSRV_AddListener(pICntlr, p1) GET_FUNCTBL((pICntlr), IVENDORSRV)->AddListener( pICntlr, p1)
/**

 */
#define IVENDORSRV_CancelListener(pICntlr, p1)  GET_FUNCTBL((pICntlr), IVENDORSRV)->CancelListener( pICntlr, p1)
/**

 */
#define IVENDORSRV_StartVen(pICntlr, p1, p2, p3)	GET_FUNCTBL((pICntlr), IVENDORSRV)->StartVen( pICntlr, p1, p2, p3)
/**

 */
#define IVENDORSRV_ExitVen(pICntlr, p1) GET_FUNCTBL((pICntlr), IVENDORSRV)->ExitVen( pICntlr, p1)
/**

 */
#define IVENDORSRV_SuspendVen(pICntlr, p1)  GET_FUNCTBL((pICntlr), IVENDORSRV)->SuspendVen( pICntlr, p1)
/**

 */
#define IVENDORSRV_ResumeVen(pICntlr, p1)   GET_FUNCTBL((pICntlr), IVENDORSRV)->ResumeVen( pICntlr, p1)
/**

 */
#define IVENDORSRV_TouchInd(pICntlr, p1, p2, p3, p4)    GET_FUNCTBL((pICntlr), IVENDORSRV)->TouchInd( pICntlr, p1, p2, p3, p4)
/**

 */
#define IVENDORSRV_MakeCallEnd(pICntlr, p1, p2, p3) GET_FUNCTBL((pICntlr), IVENDORSRV)->MakeCallEnd( pICntlr, p1, p2, p3)
/**

*/
#define IVENDORSRV_MakeCallGetCallIDEnd(pICntlr, p1, p2, p3, p4, p5) GET_FUNCTBL((pICntlr), IVENDORSRV)->MakeCallGetCallIDEnd( pICntlr, p1, p2, p3, p4, p5)
/**

*/
#define IVENDORSRV_ReleaseCallRsp(pICntlr, p1, p2, p3) GET_FUNCTBL((pICntlr), IVENDORSRV)->ReleaseCallRsp( pICntlr, p1, p2, p3)
/**

 */
#define IVENDORSRV_VideoPlayRsp(pICntlr, p1, p2, p3)    GET_FUNCTBL((pICntlr), IVENDORSRV)->VideoPlayRsp( pICntlr, p1, p2, p3)
/**

 */
#define IVENDORSRV_VideoUpdateStatus(pICntlr, p1, p2, p3, p4)    GET_FUNCTBL((pICntlr), IVENDORSRV)->VideoUpdateStatus(pICntlr, p1, p2, p3, p4)
/**

 */
#define IVENDORSRV_EditorRsp(pICntlr, p1, p2, p3, p4, p5)   GET_FUNCTBL((pICntlr), IVENDORSRV)->EditorRsp( pICntlr, p1, p2, p3, p4, p5)
/**

*/
#define IVENDORSRV_DateTimeEditorRsp(pICntlr, p1, p2, p3, p4)   GET_FUNCTBL((pICntlr), IVENDORSRV)->DateTimeEditorRsp( pICntlr, p1, p2, p3, p4)
/**

 */
#define IVENDORSRV_PhbBrowseRsp(pICntlr, p1, p2, p3, p4, p5)    GET_FUNCTBL((pICntlr), IVENDORSRV)->PhbBrowseRsp( pICntlr, p1, p2, p3, p4, p5)
/**

 */
#define IVENDORSRV_FileBrowseRsp(pICntlr, p1, p2, p3, p4, p5)   GET_FUNCTBL((pICntlr), IVENDORSRV)->FileBrowseRsp( pICntlr, p1, p2, p3, p4, p5)
/**

 */
#define IVENDORSRV_FileBrowseExRsp(pICntlr, p1, p2, p3, p4, p5)   GET_FUNCTBL((pICntlr), IVENDORSRV)->FileBrowseExRsp( pICntlr, p1, p2, p3, p4, p5)
/**

 */
#define IVENDORSRV_FileSelectFolderRsp(pICntlr, p1, p2, p3, p4)   GET_FUNCTBL((pICntlr), IVENDORSRV)->FileSelectFolderRsp( pICntlr, p1, p2, p3, p4)
/**

 */
#define IVENDORSRV_SenBtAppSendFileRsp(pICntlr, p1, p2, p3)   GET_FUNCTBL((pICntlr), IVENDORSRV)->SenBtAppSendFileRsp( pICntlr, p1, p2, p3)
/**

 */
#define IVENDORSRV_CamLaunchAppRsp(pICntlr, p1, p2, p3)   GET_FUNCTBL((pICntlr), IVENDORSRV)->CamLaunchAppRsp( pICntlr, p1, p2, p3)
/**

 */
#define IVENDORSRV_SelectSIMRsp(pICntlr, p1, p2, p3, p4)    GET_FUNCTBL((pICntlr), IVENDORSRV)->SelectSIMRsp( pICntlr, p1, p2, p3, p4)
/**

 */
#define IVENDORSRV_OpenBrowserRsp(pICntlr, p1, p2, p3)  GET_FUNCTBL((pICntlr), IVENDORSRV)->OpenBrowserRsp( pICntlr, p1, p2, p3)
/**
 Put vendor into background execution
 */
#define IVENDORSRV_BackgroundVen(pICntlr, p1, p2, p3)	GET_FUNCTBL((pICntlr), IVENDORSRV)->BackgroundVen( pICntlr, p1, p2, p3)
/**
 Bring vendor to foreground execution
 */
#define IVENDORSRV_ForegroundVen(pICntlr, p1, p2, p3)	GET_FUNCTBL((pICntlr), IVENDORSRV)->ForegroundVen( pICntlr, p1, p2, p3)
/**
 *  @brief    Get vendor's display frame buffer from SDK display mnager
*
*  @param  pIVENDORSRV     [in] VendorSrv instance
*  @param  handle          [in] Handle of vendor
*  @param  ppBitmapBase    [out] Pointer to vendor's display buffer
*
*  @retval MAE_RET_SUCCESS if success
*          MAE_RET_FAILED if failed
 */
#define IVENDORSRV_GetVenFrameBuffer(pICntlr, p1, p2)	GET_FUNCTBL((pICntlr), IVENDORSRV)->GetVenFrameBuffer( pICntlr, p1, p2)
/**
 *  @brief    Request VendorSrv to kill a given VendorApp
*
*  @param  pIVENDORSRV     [in] VendorSrv instance
*  @param  apID            [in] Vendor's ap id
*
*  @retval MAE_RET_SUCCESS if success
*         MAE_RET_FAILED if failed
 */
#define IVENDORSRV_KillVenByID(pICntlr, p1, p2, p3, p4)	GET_FUNCTBL((pICntlr), IVENDORSRV)->KillVenByID( pICntlr, p1, p2, p3, p4)
/**
 *  @brief    Get vendor's display name by id.
*
*  @param  pIVENDORSRV     [in] VendorSrv instance
*  @param  apID            [in] Vendor's ap id
*  @param  ppName          [out] Pointer to the display name
*
*  @retval MAE_RET_SUCCESS if success
*          MAE_RET_FAILED if failed
 */
#define IVENDORSRV_GetVenNameByID(pICntlr, p1, p2)	GET_FUNCTBL((pICntlr), IVENDORSRV)->GetVenNameByID( pICntlr, p1, p2)
/**

 */
#define IVENDORSRV_MsgEditorRsp(pICntlr, p1, p2, p3)    GET_FUNCTBL((pICntlr), IVENDORSRV)->MsgEditorRsp( pICntlr, p1, p2, p3)

#define IVENDORSRV_IncomingCallFilter(pICntlr, p1, p2, p3)       GET_FUNCTBL((pICntlr), IVENDORSRV)->IncomingCallFilter( pICntlr, p1, p2, p3)

#define IVENDORSRV_KillVenByPriority(pICntlr, p1, p2, p3)	GET_FUNCTBL((pICntlr), IVENDORSRV)->KillVenByPriority( pICntlr, p1, p2, p3)

#define IVENDORSRV_GetVdoStmDLItfData(pICntlr, p1, p2, p3)	GET_FUNCTBL((pICntlr), IVENDORSRV)->GetVdoStmDLItfData( pICntlr, p1, p2, p3)

/**
 * Functions
 */

void VENDORSRV_Init(void);

__SLDPM_FREE__ MAE_Ret VENDORSRV_New(MAE_ClsId id, void **ppObj);

#endif /* __MMI_VENDORSRV_H__ */
