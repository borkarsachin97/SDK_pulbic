/**
* @file mmi_hashmapsrv.h
*
* Service without using State Machine - HASHMAPSRV
* Generated by XFSM v1.0, CodeVer=v0.24
*
* Class Id: CLSID_HASHMAPSRV
* Interface Id: IID_HASHMAPSRV
*
* @version $Id$
*/
#ifndef __MMI_HASHMAPSRV_H__
#define __MMI_HASHMAPSRV_H__

#include "mmi_mae_common_def.h"
#include "mmi_mae_applet.h"
#include "mmi_mae_class.h"
#include "mmi_common_custom.h"

typedef u32 HashID_n;
typedef u16 HashIdxTabItem;

enum
{
    HASHMAP_RESERVE_BEGIN = 1
   ,/* developer can insert new function id here to reserve space in hashmap */
    HASHMAP_RESERVE_END
   ,HASHMAP_RESERVE_NUM = HASHMAP_RESERVE_END
   ,HASHMAP_USERDEFINED_BEGIN = HASHMAP_RESERVE_END
   ,HASHMAP_USERDEFINED
   ,HASHMAP_USERDEFINED_MAX = COMMON_STORE_MAX
};
typedef u16 HashMapFunc_e;

/**
 * External Events
 */


/**
 * IHASHMAPSRV Interfaces
 */
#define INHERIT_IHASHMAPSRV(IName) \
    INHERIT_IHandler(IName); \
    MAE_Ret     (*RegHashID)        ( IName * , HashMapFunc_e funcID, MAE_WChar * pszUrl, HashID_n * pnHashID);  \
    MAE_Ret     (*DeregHashID)      ( IName * , HashMapFunc_e funcID, HashID_n nHashID);  \
    MAE_Ret     (*UpdateData)       ( IName * , HashMapFunc_e funcID, HashID_n nHashID, MAE_WChar * pszUrl);  \
    MAERet_t        (*LoopUrl)      ( IName * , HashID_n nHashID, MAE_WChar * pszUrl)

DEFINE_INTERFACE(IHASHMAPSRV);


#define IHASHMAPSRV_QueryInterface(pICntlr, id, pp, po)         GET_FUNCTBL((pICntlr), IHASHMAPSRV)->QueryInterface(pICntlr, id, pp, po)
#define IHASHMAPSRV_HandleEvent(pICntlr, e, p1, p2)             GET_FUNCTBL((pICntlr), IHASHMAPSRV)->HandleEvent(pICntlr, e, p1, p2)
/**
 * IHASHMAPSRV_RegHashID
 * @brief   Get a register ID.
 *
 * @param[in]   (IHASHMAPSRV*)pIHASHMAPSRV        A pointer of IHASHMAPSRV interface object.
 * @param[in]   funcID                           Specify the function type.
 * @param[in]   pszUrl                           The url that will be put in mapping table.
 * @param[out]  pnHashID                             After url is stored, the register ID is generated and stored in this variable.
 *
 * @retval  MAE_RET_SUCCESS         Successfully.
 * @retval  MAE_RET_FAILED          Failed.
 */
#define IHASHMAPSRV_RegHashID(pICntlr, p1, p2, p3)  GET_FUNCTBL((pICntlr), IHASHMAPSRV)->RegHashID( pICntlr, p1, p2, p3)
/**
 * IHASHMAPSRV_DeregHashID
 * @brief   De-registration the register ID.
 *
 * @param[in]   (IHASHMAPSRV*)pIHASHMAPSRV        A pointer of IHASHMAPSRV interface object.
 * @param[in]   funcID                           Specify the function type.
 * @param[in]   nHashID                          Register ID, the corresponing data will be removed form mapping table.
 *
 * @retval  MAE_RET_SUCCESS         Successfully.
 * @retval  MAE_RET_FAILED          Failed.
 */
#define IHASHMAPSRV_DeregHashID(pICntlr, p1, p2)    GET_FUNCTBL((pICntlr), IHASHMAPSRV)->DeregHashID( pICntlr, p1, p2)
/**
 * IHASHMAPSRV_UpdateData
 * @brief   This interface is used to update the data that has already stored in mapping table.
 *
 * @param[in]   (IHASHMAPSRV*)pIHASHMAPSRV        A pointer of IHASHMAPSRV interface object.
 * @param[in]   funcID                           Specify the function type.
 * @param[in]   nHashID                          Register ID, the corresponing data will be updated in mapping table.
 * @param[in]   pszUrl                           The url that will be put in mapping table.
 *
 * @retval  MAE_RET_SUCCESS         Successfully.
 * @retval  MAE_RET_FAILED          Failed.
 */
#define IHASHMAPSRV_UpdateData(pICntlr, p1, p2, p3) GET_FUNCTBL((pICntlr), IHASHMAPSRV)->UpdateData( pICntlr, p1, p2, p3)
/**
 * IHASHMAPSRV_LoopUrl
 * @brief   This interface is used to find the url that has stored in mapping table.
 *
 * @param[in]   (IHASHMAPSRV*)pIHASHMAPSRV        A pointer of IHASHMAPSRV interface object.
 * @param[in]   nHashID                          Register ID.
 * @param[out]  pszUrl                           url that is corresponeding to the register ID.
 *
 * @retval  MAE_RET_SUCCESS         Successfully.
 * @retval  MAE_RET_FAILED          Failed.
 */
#define IHASHMAPSRV_LoopUrl(pICntlr, p1, p2)    GET_FUNCTBL((pICntlr), IHASHMAPSRV)->LoopUrl( pICntlr, p1, p2)



/**
 * Functions
 */

void HASHMAPSRV_Init(void);

MAE_Ret HASHMAPSRV_New(MAE_ClsId id, void **ppObj);

#endif /* __MMI_HASHMAPSRV_H__ */
