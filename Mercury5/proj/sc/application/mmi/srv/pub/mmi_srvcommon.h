/**
* @file mmi_touchshortcutsrv.h
*
* Service without using State Machine - TOUCHSHORTCUTSRV
* Generated by XFSM v1.0, CodeVer=v0.24
*
* Class Id: CLSID_TOUCHSHORTCUTSRV
* Interface Id: IID_TOUCHSHORTCUTSRV
*
* @version $Id$
*/
#ifndef __MMI_SRVCOMMON_H__
#define __MMI_SRVCOMMON_H__

/*-------------------------------------------------------------------------*/

#include "mmi_mae_common_def.h"
#include "mmi_mae_class.h"

typedef enum
{
    SRVCOMMON_RES__BLUETOOTH_POWERON = 0,           /* Bluetooth Power On */
    SRVCOMMON_RES__BLUETOOTH_OBJECTPUSHPROFILE,     /* Bluetooth Object Push Profile (OPP) */
    SRVCOMMON_RES__VIDEO_PLAYBACK,                  /* Video Playback */
    SRVCOMMON_RES__VIDEO_RECORDING,                 /* Video Recording */
    SRVCOMMON_RES__IMAGE_CAPTURE,                   /* Image Capture */
    SRVCOMMON_RES__GAME_EMU,                        /* Game */
    SRVCOMMON_RES__CAMERA_PREVIEW,                  /* Camera Preview */
    SRVCOMMON_RES__AUDIO_PLAYBACK,                  /* Audio Playback */
    SRVCOMMON_RES__USB_PCCAM,                       /* PC-Cam */
    SRVCOMMON_RES__FM_RECORDING,                    /* FM Recording */
    /* */
    SRVCOMMON_RES__NUM
} SrvCommonRes_e;   //need to sync to MmlConcurrentSection_e

typedef enum
{
    SRVCOMMON_MEMORY_SPEED__SLOW = 0,
    SRVCOMMON_MEMORY_SPEED__NORMAL,
    SRVCOMMON_MEMORY_SPEED__FAST,
    /* */
    SRVCOMMON_MEMORY_SPEED__NUM
} SrvCommonMemorySpeed_e;

enum
{
    SRVCOMMON_MEMORYTYPE_TYPE1 = 0,     ///< Type1: Nor(Page)+Psram(Page)/Nor(Burst)+Psram(Page)
    SRVCOMMON_MEMORYTYPE_TYPE2,         ///< Type2: Nor(Page)+Psram(Burst)/Nor(Burst)+Psram(Burst)
    SRVCOMMON_MEMORYTYPE_TYPE3,         ///< Type3: Nand+Sdram
    SRVCOMMON_MEMORYTYPE_TYPE4,         ///< Type4: SPI+Psram(Burst)

    SRVCOMMON_MEMORYTYPE_TYPE_NUM,
};
typedef u32 SrvCommonMemoryType_e;

typedef enum
{
    SRVCOMMON_CPU_PERFORMANCE__START = 0,
    SRVCOMMON_CPU_PERFORMANCE__POOR = SRVCOMMON_CPU_PERFORMANCE__START,
    SRVCOMMON_CPU_PERFORMANCE__NORMAL,
    SRVCOMMON_CPU_PERFORMANCE__GOOD,
    SRVCOMMON_CPU_PERFORMANCE__INVALID
} SrvCommonCpuPerformance_e;

MAE_Ret mmiSrvCommonGetURLByCFGItemID(CFGItemID_e eCFGItemID, MAE_WChar **ppURLOut, IBase *pOwner);

MAE_Ret mmiSrvCommonGetResConflict(SrvCommonRes_e eRes1, SrvCommonRes_e eRes2, bool *pIsConflict);
MAE_Ret mmiSrvCommonGetMemorySpeed(SrvCommonMemorySpeed_e *pMemSpeed);
MAE_Ret mmiSrvCommonGetMemoryType(SrvCommonMemoryType_e *pMemType);
MAE_Ret mmiSrvCommonGetCpuPerformance(SrvCommonCpuPerformance_e *pCpuPerformance);
/*-------------------------------------------------------------------------*/
#endif /* __MMI_SRVCOMMON_H__*/
