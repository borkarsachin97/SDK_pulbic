/**
* @file mmi_wlansrv_priv.h
*
* State Machine Service - WLANSRV
* Generated by XFSM v1.0, CodeVer=v0.24
*
* Class Id: CLSID_WLANSRV
*
*
* @version $Id$
*/
#ifndef __MMI_WLANSRV_PRIV_H__
#define __MMI_WLANSRV_PRIV_H__


/* */
#include "mmi_mae_common_def.h"
#include "mmi_mae_sm_defs.h"
#include "mmi_wlansrv.h"
#include "mmi_wlansrv_sm.h"


/* Foreword */
/* User Code Begin */


/*=============================================================*/
/* Include Files                                               */
/*=============================================================*/
#include "mmi_mae_notifier.h"
#include "mmi_mae_arraymodel.h"
#include "mmi_cfgsrv.h"
#include "mmi_mae_battery.h"
#include "mmi_common_notallow_cfg.h"
#include "mmi_common_cfg.h"
#include "mmi_coresrv.h"
#include "mmi_req_wlan.h"
#include "mmi_if_wlan.h"
#include "mmi_util_fs.h"
#include "mmi_common_rai_id.h"
#include "ABL_WiFi.h"
#include "mmi_btsrv.h"
#include "mmi_btobexsrv.h"
#include "mmi_socketsrv.h"
#include "mmi_mmsrv.h"
#include "mmi_if_ati.h"


/* If this option is turned on, wlan service will update the BT status to M3 for antenna adjustment */
#ifdef __BLUETOOTH_MMI__
#define WLANSRV_SUPPORT_BTSTATUS
#endif


/* If this option is turned on, wlan service will execute power saving after backlight being off. */
#define WLANSRV_SUPPORT_POWERSAVING


/* */
#ifdef WLANSRV_SUPPORT_BTSTATUS
#define WLANSRV_BTEVT_DISABLED                  0x00000000
#define WLANSRV_BTEVT_ENABLED                   0x00000001
#define WLANSRV_BTEVT_INQUIRY                   0x00000002
#define WLANSRV_BTEVT_INQUIRY_DONE              0x00000003
#define WLANSRV_BTEVT_PAIR                      0x00000004
#define WLANSRV_BTEVT_PAIR_DONE                 0x00000005
#define WLANSRV_BTEVT_SNIFF                     0x00000006
#define WLANSRV_BTEVT_UNSNIFF                   0x00000007
#define WLANSRV_BTEVT_AUDIO_A2DP_CONNECT        0x00001000
#define WLANSRV_BTEVT_SCO_HV1_CONNECT           0x00001100
#define WLANSRV_BTEVT_SCO_HV2_CONNECT           0x00001200
#define WLANSRV_BTEVT_SCO_HV3_CONNECT           0x00001300
#define WLANSRV_BTEVT_ESCO_EV3_CONNECT          0x00001400
#define WLANSRV_BTEVT_ESCO_EV4_CONNECT          0x00001500
#define WLANSRV_BTEVT_ESCO_EV5_CONNECT          0x00001600
#define WLANSRV_BTEVT_ESCO_2EV3_CONNECT         0x00001700
#define WLANSRV_BTEVT_ESCO_2EV5_CONNECT         0x00001800
#define WLANSRV_BTEVT_ESCO_3EV3_CONNECT         0x00001900
#define WLANSRV_BTEVT_ESCO_3EV5_CONNECT         0x00001A00
#define WLANSRV_BTEVT_A2DP_CONNECT              0x00001B00
#define WLANSRV_BTEVT_A2DP_CONNECT_PLAY         0x00001C00
#define WLANSRV_BTEVT_A2DP_CONNECT_STOP         0x00001D00
#define WLANSRV_BTEVT_AUDIO_A2DP_DISCONNECT     0x00002000
#define WLANSRV_BTEVT_SCO_HV1_DISCONNECT        0x00002100
#define WLANSRV_BTEVT_SCO_HV2_DISCONNECT        0x00002200
#define WLANSRV_BTEVT_SCO_HV3_DISCONNECT        0x00002300
#define WLANSRV_BTEVT_ESCO_EV3_DISCONNECT       0x00002400
#define WLANSRV_BTEVT_ESCO_EV4_DISCONNECT       0x00002500
#define WLANSRV_BTEVT_ESCO_EV5_DISCONNECT       0x00002600
#define WLANSRV_BTEVT_ESCO_2EV3_DISCONNECT      0x00002700
#define WLANSRV_BTEVT_ESCO_2EV5_DISCONNECT      0x00002800
#define WLANSRV_BTEVT_ESCO_3EV3_DISCONNECT      0x00002900
#define WLANSRV_BTEVT_ESCO_3EV5_DISCONNECT      0x00002A00
#define WLANSRV_BTEVT_A2DP_DISCONNECT           0x00002b00
#define WLANSRV_BTEVT_OPP_TX_START              0x00003100
#define WLANSRV_BTEVT_OPP_TX_STOP               0x00004100
#define WLANSRV_BTEVT_OPP_RX_START              0x00003200
#define WLANSRV_BTEVT_OPP_RX_STOP               0x00004200
#define WLANSRV_BTEVT_UNKNOWN                   0xFFFFFFFF
#endif


/* 10 seconds to 45 seconds are defined for smart timer */
#define WLANSRV_SCAN_NETWORK_TIMER_10SEC        (10*1000)
#define WLANSRV_SCAN_NETWORK_TIMER_20SEC        (20*1000)
#define WLANSRV_SCAN_NETWORK_TIMER_30SEC        (30*1000)
#define WLANSRV_SCAN_NETWORK_TIMER_45SEC        (45*1000)
#define WLANSRV_SCAN_NETWORK_TIMER_1MIN         (60*1000)
#define WLANSRV_SCAN_NETWORK_TIMER_2MIN         (60*2*1000)
#define WLANSRV_SCAN_NETWORK_TIMER_5MIN         (60*5*1000)
#define WLANSRV_SCAN_NETWORK_TIMER_10MIN        (60*10*1000)
#define WLANSRV_SCAN_NETWORK_SMARTTIMER_COUNT   (7)
#define WLANSRV_MACADDR_SIZE                    (6)


/* */
#define WLANSRV_POWERSAVING_SCKFREE_TIME_MAX    (120)



/* */
typedef enum
{
    EM_WIFI_NONE,
    EM_WIFI_TEST_MODE_OFF,
    EM_WIFI_TEST_MODE_ON,
    EM_WIFI_TX_TEST,
    EM_WIFI_RX_MONITER
} em_WifiAutoTestMode_e;


/* User Code End */


/* Application structure */
typedef struct MMI_WLANSRV_TAG {
    DECLARE_FUNCTBL(IWLANSRV);	                                // function table pointer
    u32                         refCnt;		                            // reference count
    SM_Mao_t                    app;		                            // StateMachine Application data
    SM_ModeId_t                 _lastActiveMode[cWLANSRV_ModeNumbers];	// Last child, current active child
    SM_ModeId_t                 _currentMode[1];

    /* Add custom fields below */
    /* ###XFSM_CUSTAG_USER_CPRIVHEADER_APPSTRUCTURE### */
    /* User Code Begin */
    boolean                     bTerminate;
    boolean                     bIsConnectAP;
    boolean                     bHasPendingConnectReq;
    boolean                     bHasPendingDisconnectReq;
    boolean                     bHasPendingRoamReq;
    boolean                     bHasPendingScanReq;
    boolean                     bIsAutoScan;
    boolean                     bIsAutoConnect;
    boolean                     bReqByRoaming;
    boolean                     bIsAutoTimerOn;
    boolean                     bPowerOffTriggeredByErr;
    boolean                     bIsDisconnect;
    boolean                     bSmartTimer;
    boolean                     bIsNeglectAirplane;
    boolean                     bIsAPConnectedWhenOff;
    
#ifdef __WLAN_AUTOCONNECT__
    boolean                     bAutoConnectOnOff;
#endif

#ifdef WLANSRV_SUPPORT_POWERSAVING
    boolean                     bIsBLTimerOn;
    boolean                     bIsPowerOffByBL;
    boolean                     bHasPendingPowerOnReq;
    boolean                     bHasPendingPowerOffReq;
    boolean                     bIsAtPowerOffSeq;
    boolean                     bIsAtPowerOffDisconnectSeq;
    boolean                     bSocketFree;
    u32                         u32BLTimer;
    u32                         u32SckFreeTimestamp;
#endif

    s32                         s32AutoTimerIdx;
    ISOCKETSRV                  *pISocketSrv;
    ICFGSrv                     *pICFGSrv;
    
#ifdef WLANSRV_SUPPORT_POWERSAVING
    ICORESRV                    *pICoreSrv;
    IBattery                    *pIBattery;
#endif

#ifdef WLANSRV_SUPPORT_BTSTATUS
    IBTSRV                      *pIBTSrv;
    IBTOBEXSRV                  *pIBTOBEXSrv;
#endif

    IMMSRV                      *pIMMSrv;
    MAE_Notifier_t              *pINotifier;
    WLANSRV_ConnectDeviceTbl_t  *ptConnectDeviceTbl;
    WLANSRV_FilterDeviceTbl_t   *ptFilterDeviceTbl;
    WLANSRV_CertTbl_t           *ptCertTbl;
    WLANSRV_CertTbl_t           *ptCertBackupTbl;
    WLANSRV_ConnectedAPInfo_t   *ptCurrentConnectAP;
    WLANSRV_ConnectParam_t      *ptCurrentConnectParam;
    WLANSRV_ConnectDeviceCount  *ptConnectDeviceCount;
    WLANSRV_PowerStatus_e       eWLANPowerStatus;
    WLANSRV_ShowWLAN_e          eShowWLANSetting;
    WLANSRV_ScanNetwork_e       eScanNetworkSetting;
    WLANSRV_AutoReq_e           eAutoRequest;
    WLANSRV_Notify_Event_e      eActiveState;
    WLANSRV_Disconnect_Reason_e eDisconnectReason;
    ABL_WiFi_Event_e            eCreateDLResult;
    ModelListener_t             tAirPlaneMdlListener;
    WLANSRV_StaticIP_t          tCurrentStaticIP;
    ABL_WiFiScanResultData_t    tScanResultData;
    em_WifiAutoTestMode_e       eWifiAutoTestMode;
    esl_WifiFwTstConf_t         tWifiFwTstConf;
    em_WifiAutoTestResult_t     tWifiAutoTestResult;
    u8                          aCurrentKey[WLANSRV_KEY_LEN];
    u8                          au8MacAddr[WLANSRV_MACADDR_SIZE];
    /* User Code End */
} MMI_WLANSRV;

/* Epilogue */
/* User Code Begin */

/* User Code End */

#endif /* __MMI_WLANSRV_PRIV_H__ */

