/**
* @file mmi_coresrv_priv.h
*
* Service without using State Machine - CORESRV
* Generated by XFSM v1.0, CodeVer=v0.24
*
* Class Id: CLSID_CORESRV
* Interface Id: IID_CORESRV
*
* @version $Id$
*/
#ifndef __MMI_CORESRV_PRIV_H__
#define __MMI_CORESRV_PRIV_H__

#include "mmi_mae_common_def.h"
#include "mmi_coresrv.h"
#include "mmi_mae_motiondetector.h"
#include "mmi_profilesrv.h"
#include "mmi_mae_battery.h"
#include "mmi_mae_notifier.h"
#include "mmi_mae_config.h"
#include "mmi_mae_config_types.h"
#include "mmi_mae_touchsrv.h"
#include "mmi_cfgsrv.h"
#include "mmi_usbsrv.h"
#include "mmi_audiosrv.h"
#include "mmi_audioenvsrv.h"
#include "mmi_audioplayersrv.h"
#include "mmi_mmsrv.h"

#define MIN_BACKLIGHT_DURATION_MS_UNIT          5       //5 ms.
#define REQUEST_TURN_OFF_AGAIN_TIMER            500

#define BACKLIGHT_SEC_UNIT_BASE                 1000
#define DEFAULT_BACKLIGHT_DURATION_SEC_UNIT     BACKLIGHT_DURATION_15SECS       //15 sec.
#define POWER_SAVING_SEC_UNIT_BASE              1000
#define DEFAULT_POWER_SAVING_TIME_SEC_UNIT      POWER_SAVING_15SECS             //15 sec.
#define KEYGUARD_SEC_UNIT_BASE                  1000
#define KEYGUARD_MIN_UNIT_BASE                  60
#ifdef __APP_MMI_SCREENSAVER__
#define SCREEN_SAVER_SEC_UNIT_BASE              1000
#define DEFAULT_SCREEN_SAVER_TIME_SEC_UNIT      SCREEN_SAVER_DURATION_5SECS     //5 sec.
#endif
#ifdef __FEATURE_POWER_CONSUMPTION_LOG__
#define POWER_CONSUMPTION_PERIOD_POLLING_TIMER  (1800000)                       //30 Minutes.
#endif//#__FEATURE_POWER_CONSUMPTION_LOG__

#define MASTER_RESTORE_WAITING_TIMER            1500

typedef struct MAE_CONFIG_MAP_TO_MMI_CFG_TAG
{
    CFGItemID_e CFGItemID;
    u32 CFGItemSize;
    MAECfgItemId_t MAECfgItemId;
    MAECfgCategory_t MAECfgCategory;
    u32 MAECfgItemSize;
} MAE_CONFIG_MAP_TO_MMI_CFG;

typedef struct
{
    LCDSrv_BacklightLevel_e nBacklightLevel;
    LCDSrv_BacklightDuration_e nBackLightDuration;
    boolean bIsKeypadLightAutoOff;
    BackLightCB	pfnCB;
    void *pUserData;
}BKMLSettings_t;

typedef struct BKLCmd_TAG
{
    u16 nBacklightLevel;            //Backlight level
    u16 nBacklightDuration;      //Backlight duration
    boolean bIsKeypadLightAutoOff;
    BackLightCB	pfnCB;
    void *pUserData;
    struct BKLCmd_TAG *pNextCmd;
}BKLCmd;

/**
* Flag Mask
*/
#define LAUNCH_FUNC_MASK_POWERMODE      (1<<CORESRV_LAUNCH_FUNC_POWERMODE)
#define LAUNCH_FUNC_MASK_CAMERA         (1<<CORESRV_LAUNCH_FUNC_CAMERA)
#define LAUNCH_FUNC_MASK_MP3            (1<<CORESRV_LAUNCH_FUNC_MP3)
#define LAUNCH_FUNC_MASK_FM            (1<<CORESRV_LAUNCH_FUNC_FM)
#define LAUNCH_FUNC_MASK_MSG            (1<<CORESRV_LAUNCH_FUNC_MSG)
#define LAUNCH_FUNC_MASK_MAIL            (1<<CORESRV_LAUNCH_FUNC_MAIL)
#define LAUNCH_FUNC_MASK_AUTO_KEYGUARD  (1<<CORESRV_LAUNCH_FUNC_AUTO_KEYGUARD)
#define LAUNCH_FUNC_MASK_SCREENSAVER    (1<<CORESRV_LAUNCH_FUNC_SCREENSAVER)
#define LAUNCH_FUNC_MASK_ATV            (1<<CORESRV_LAUNCH_FUNC_ATV)
/**
* Macro to get flag value
*/
#define IS_LAUNCH_FUNC_POWERMODE(__p) \
    (boolean)(((__p)->eLaunchFunc&LAUNCH_FUNC_MASK_POWERMODE)>>CORESRV_LAUNCH_FUNC_POWERMODE)
#define IS_LAUNCH_FUNC_CAMERA(__p) \
    (boolean)(((__p)->eLaunchFunc&LAUNCH_FUNC_MASK_CAMERA)>>CORESRV_LAUNCH_FUNC_CAMERA)
#define IS_LAUNCH_FUNC_MP3(__p) \
    (boolean)(((__p)->eLaunchFunc&LAUNCH_FUNC_MASK_MP3)>>CORESRV_LAUNCH_FUNC_MP3)
#define IS_LAUNCH_FUNC_FM(__p) \
	(boolean)(((__p)->eLaunchFunc&LAUNCH_FUNC_MASK_FM)>>CORESRV_LAUNCH_FUNC_FM)
#define IS_LAUNCH_FUNC_MSG(__p) \
		(boolean)(((__p)->eLaunchFunc&LAUNCH_FUNC_MASK_MSG)>>CORESRV_LAUNCH_FUNC_MSG)
#define IS_LAUNCH_FUNC_MAIL(__p) \
	(boolean)(((__p)->eLaunchFunc&LAUNCH_FUNC_MASK_MAIL)>>CORESRV_LAUNCH_FUNC_MAIL)
#define IS_LAUNCH_FUNC_AUTO_KEYGUARD(__p) \
    (boolean)(((__p)->eLaunchFunc&LAUNCH_FUNC_MASK_AUTO_KEYGUARD)>>CORESRV_LAUNCH_FUNC_AUTO_KEYGUARD)
#define IS_LAUNCH_FUNC_SCREENSAVER(__p) \
    (boolean)(((__p)->eLaunchFunc&LAUNCH_FUNC_MASK_SCREENSAVER)>>CORESRV_LAUNCH_FUNC_SCREENSAVER)
#define IS_LAUNCH_FUNC_ATV(__p) \
    (boolean)(((__p)->eLaunchFunc&LAUNCH_FUNC_MASK_ATV)>>CORESRV_LAUNCH_FUNC_ATV)
/**
* Macro to Set flag value
*/
#define SET_LAUNCH_FUNC_POWERMODE(__p,__b) \
    (__p)->eLaunchFunc = ((__p)->eLaunchFunc&(~LAUNCH_FUNC_MASK_POWERMODE))|(((u32)__b)<<CORESRV_LAUNCH_FUNC_POWERMODE)
#define SET_LAUNCH_FUNC_CAMERA(__p,__b) \
    (__p)->eLaunchFunc = ((__p)->eLaunchFunc&(~LAUNCH_FUNC_MASK_CAMERA))|(((u32)__b)<<CORESRV_LAUNCH_FUNC_CAMERA)
#define SET_LAUNCH_FUNC_MP3(__p,__b) \
    (__p)->eLaunchFunc = ((__p)->eLaunchFunc&(~LAUNCH_FUNC_MASK_MP3))|(((u32)__b)<<CORESRV_LAUNCH_FUNC_MP3)
#define SET_LAUNCH_FUNC_FM(__p,__b) \
	(__p)->eLaunchFunc = ((__p)->eLaunchFunc&(~LAUNCH_FUNC_MASK_FM))|(((u32)__b)<<CORESRV_LAUNCH_FUNC_FM)
#define SET_LAUNCH_FUNC_MSG(__p,__b) \
	(__p)->eLaunchFunc = ((__p)->eLaunchFunc&(~LAUNCH_FUNC_MASK_MSG))|(((u32)__b)<<CORESRV_LAUNCH_FUNC_MSG)
#define SET_LAUNCH_FUNC_MAIL(__p,__b) \
	(__p)->eLaunchFunc = ((__p)->eLaunchFunc&(~LAUNCH_FUNC_MASK_MAIL))|(((u32)__b)<<CORESRV_LAUNCH_FUNC_MAIL)
#define SET_LAUNCH_FUNC_AUTO_KEYGUARD(__p,__b) \
    (__p)->eLaunchFunc = ((__p)->eLaunchFunc&(~LAUNCH_FUNC_MASK_AUTO_KEYGUARD))|(((u32)__b)<<CORESRV_LAUNCH_FUNC_AUTO_KEYGUARD)
#define SET_LAUNCH_FUNC_SCREENSAVER(__p,__b) \
    (__p)->eLaunchFunc = ((__p)->eLaunchFunc&(~LAUNCH_FUNC_MASK_SCREENSAVER))|(((u32)__b)<<CORESRV_LAUNCH_FUNC_SCREENSAVER)
#define SET_LAUNCH_FUNC_ATV(__p,__b) \
    (__p)->eLaunchFunc = ((__p)->eLaunchFunc&(~LAUNCH_FUNC_MASK_ATV))|(((u32)__b)<<CORESRV_LAUNCH_FUNC_ATV)
/**
 * Application structure
 */
typedef struct MMI_CORESRV_TAG
{
    DECLARE_FUNCTBL(ICORESRV);    // function table pointer
    u32 refCnt;     // reference count
    /* Add custom fields below */
    IConfig *pIConfig;
    ICFGSrv *pICFGSrv;
    IAUDIOSRV *pIAudioSrv;
    IAUDIOENVSRV *pIAudioEnvSrv;
    IPROFILESRV *pIProfileSrv;
    IBattery *pIBattery;
    IUSBSRV *pIUSBSrv;
#ifdef __G_SENSOR_MMI__
    IMotionDetector *pIMotionDetector;
#endif

    MAE_Notifier_t *pNotifier;
#ifdef __BREATHLIGHT_MMI__
    boolean bChargingBreath;
    boolean bDarkBreath;
    boolean bUsbChargIn;
    u16 RssiLevelMaster;
    u16 RssiLevelSub;
#endif /* __BREATHLIGHT_MMI__ */

    //IModel  *pBacklightModel;
    ModelListener_t ProfileModelListener;
    ModelListener_t BacklightModelListener;
    ModelListener_t BatteryModelListener;
    ModelListener_t tUSBListener;

#ifdef  __G_SENSOR_MMI__
    ConfigListener_t CfgListener;
#endif

    boolean bTerminated;

    boolean bRequestBKLONForever;
    boolean bSetTurnOffBKLTimer;
    boolean bSetTurnOffFlashTimer;
    boolean bSetTurnPSTimer;
    boolean bSetKeyGuardTimer;
#ifdef __APP_MMI_SCREENSAVER__
    boolean bSetScreenSaverTimer;
#endif
#ifdef __PROXIMITY_SENSOR_MMI__
    boolean bIsProximitySensorOn;
#endif
    BKLCmd *pFirstBKLCmd;       //pointer to first command
    BKLCmd *pLastBKLCmd;        //pointer to last command
    BKLCmd *pCurrentBKLCmd;     //pointer to current command
    u8 nBKLCmdIdx;              //current command index in command list
    u8 nBKLCmdListSize;         //size of command list

    boolean bEnableKeyPadTone;
    boolean bEnableKeyEvent;
    boolean bEnableTouchEvent;
    boolean bResetBLTimerByTouch;

    boolean bIsFlashOn;
    boolean bIsBacklightOn;
    boolean bSDDisabled;
    boolean bIgnoreBacklightReq;
    boolean bUpdateDisplayWithBackLight;
    boolean bIsKeypadLightAutoOff;
    boolean bIsLeavingSleepMode;

    SetRingToneKeypadTone_e eDefaultKeyPadTone;
    LaunchFuncType_e eLaunchFunc;

    MAE_EventId nLaunchKey;

    u32 nDefaultPSTime;             //Power saving time
    u32 nDefaultBKLDuration;        //Backlight duration
    u32 nDefaultKGTime;             //Keyguard time
#ifdef __APP_MMI_SCREENSAVER__
    u32 nDefaultSSDuration;         //ScreenSaver duration
#endif
#ifdef __CHECK_CPU_STATUS_BEFORE_SLEEP__
    boolean bIsHighSpeedFirstInd;
    HighSpeedTaskStatus_e eHighSpeedTaskStatus;
#endif
    u16 nDefaultBKLLevel;           //Default Backlight level
    u16 nActiveBKLLevel;            //Active Backlight level
    u16 nActiveBKLDuration;         //Active Backlight duration
    TouchBehavior_e eTouchBehavior; //Touch behavior
    LCMControlType_e eLCMControl;   //LCM control
#ifdef __HALL_SWITCH_MMI__
	IAUDIOPLAYERSRV *pIAudioPlayerSrv;
	u32         nMelodyID;
	boolean     bEnableHallSwitchEffect;
	boolean		bISHallClose;
#endif

#if defined(__BREATHLIGHT_MMI__) || defined(__WLAN_MMI__)
    IMMSRV *pIMMSrv;
#endif

	u32 nPressedKey;
    u32 nLongPressedHotkey;
    boolean bUseCoreBacklightSetting;
    boolean bUseDefaultBacklightSetting;
#ifdef __POWER_SAVING_PROFILE_MMI__
    boolean bPowerSavingProfile;    // TURE if power saving profile is activated
#endif
} MMI_CORESRV;

static void _CORESRV_CFGSrvListener(void *pUserData, ModelEvent_t *pMdlEvt);
static void _CORESRV_ProfileModelListener(void *pUserData, ModelEvent_t *pMdlEvt);
//static boolean _CORESRV_KeyPressEventHandler(MMI_CORESRV *pIBACKLIGHTSRV, MAEEvent_t eventID, u32 param1, u32 param2);
static MAE_Ret _CORESRV_SendNotify(MMI_CORESRV *pIBACKLIGHTSRV, u32 nEventCode);
static void _CORESRV_TurnOffBacklightCallBack(void *pData);
static void _CORESRV_TurnOffFlashCallBack(void *pData);

static void _CORESRV_EnterSleepModeCallBack(void *pData);
static void _CORESRV_EnterKeyGuardCallBack(void *pData);
#ifdef __APP_MMI_SCREENSAVER__
static void _CORESRV_EnterScreenSaverCallBack(void * pData);
#endif
#ifdef __3G_RIL_MMI__
static void _CORESRV_HANDLE_UNSOLICITED_EVENT_CALLBACK(void *pData);
#endif
static void _CORESRV_SetCfgDatatoMAEClock(MMI_CORESRV *pThis, CFGItemID_e CFGItemID);
static void _CORESRV_USBMdlListener(void *pData, ModelEvent_t *pMdlEvent);
#ifdef __CHECK_CPU_STATUS_BEFORE_SLEEP__
void _CORESRV_SaveHighSpeedTaskID(IBase *pOwner, u32 *pData, u8 nCount);
void _CORESRV_ReadHighSpeedTaskFromRAI(IBase *pOwner, High_CPU_Task_List_t* stRecordList);
void _CORESRV_CleanHighSpeedTaskID(IBase *pOwner);
#endif

#endif /* __MMI_CORESRV_PRIV_H__ */
