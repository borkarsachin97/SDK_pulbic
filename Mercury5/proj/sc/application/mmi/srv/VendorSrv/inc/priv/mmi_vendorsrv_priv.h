/**
* @file mmi_vendorsrv_priv.h
*
* Service without using State Machine - VENDORSRV
* Generated by XFSM v1.0, CodeVer=v0.24
*
* Class Id: CLSID_VENDORSRV
* Interface Id: IID_VENDORSRV
*
* @version $Id: mmi_vendorsrv_priv.h 30527 2009-05-12 03:40:04Z mark.yang $
*/
#ifndef __MMI_VENDORSRV_PRIV_H__
#define __MMI_VENDORSRV_PRIV_H__

#include "mmi_mae_common_def.h"
#include "mmi_vendorsrv.h"
#include "mmi_audiosrv.h"
#include "mmi_audioenvsrv.h"
#include "mmi_mae_image.h"
#include "mmi_mae_datamodel.h"
#include "mmi_vendorsrv_req_st.h"
#include "mmi_coresrv.h"
#include "mmi_cbsrv.h"
#include "mmi_mmssrv.h"
#include "mmi_smssrv.h"
#include "mmi_usbsrv.h"
#include "mmi_mmsrv.h"
#include "mmi_ccsrv.h"
#include "mmi_phbsrv.h"
#include "DListItf.h"

#include "mmi_calllogsrv.h"
#include "mmi_VideoPlayerSrv.h"
#if defined (__G_SENSOR__)
#include "mmi_mae_sensormgr.h"
#include "mmi_mae_sensormgr_types.h"
#endif //#if defined (__G_SENSOR__)
////////////////////////////////////////////////////////////////////////////////
//DEFINITION
////////////////////////////////////////////////////////////////////////////////

// Compile Option __TENCENT_MCARE_PHB__ is used by TQQ only!
// If turn on this compile option, load phonebook sorting table when vendor service starts!
// Default = FALSE

#if defined(__TENCENT_MCARE__) && defined(__TENCENT_MCARE_QXIN__)
#define __TENCENT_MCARE_PHB__
#endif

typedef u8 MediaAction_t;
typedef struct MediaInfo_Tag MediaInfo_t;


enum    //only used for asynchronous

{
    MEDIA_ACTION_NONE
   ,MEDIA_ACTION_PLAY
   ,MEDIA_ACTION_PLAY_RAW
   ,MEDIA_ACTION_PLAY_MIDI_INIT
   ,MEDIA_ACTION_PLAY_MIDI
   ,MEDIA_ACTION_PAUSE
   ,MEDIA_ACTION_RESUME
   ,MEDIA_ACTION_STOP
   ,MEDIA_ACTION_SET_POS
};

enum
{
	MSG_OPERATION_MODIFY = 0,	//MAE_EVT_VENDOR_MSG_SMS_MODIFY_HEADER_REQ
	MSG_OPERATION_DELETE,		//MAE_EVT_VENDOR_MSG_DELETE_REQ
};
typedef u8 MsgOperation_t;

enum
{
	MSG_GET_SIM_FILTER = 0,	//MAE_EVT_VENDOR_MSG_REGISTER_ALL_SMS_MSG_REQ
	MSG_GET_SIM_BACKUP,		//MAE_EVT_VENDOR_MSG_SMS_BACKUP_REQ
	MSG_GET_SIM_GETSMS,		//MAE_EVT_VENDOR_MSG_GET_RECEIVED_SMS_REQ
};
typedef u8 MsgGetSimOperation_t;

struct MediaInfo_Tag
{
    u32 mediaHandle;

    //userAction and userData are used when request is received from vendor(mmi_if_vendor)
    //these variables will be reset to 0 and MEDIA_ACTION_NONE respectively after the request is processed.
    u32 userData;
    MediaAction_t userAction;   //all actions
    MediaAction_t pausedState;  //MEDIA_ACTION_PAUSE or MEDIA_ACTION_NONE

    //playSession and playType are used when "play" operation is successfully done
    //otherwiese, these two variables should be in default values: 0 and MEDIA_ACTION_NONE respectively.
    u32 playSession;
    MediaAction_t playType;  //MEDIA_ACTION_PLAY      -->URL,
    //MEDIA_ACTION_PLAY_RAW  -->RAW
    //MEDIA_ACTION_PLAY_MIDI -->MIDI

    AudioSrvPlayMode_e playMode;

    //playingTime is used when playType is in MEDIA_ACTION_PLAY.
    //the playingTime is updated for each tick from IMedia, which is 1000 ms per tick
    //after finished playing or stop, the playingTime will be reset to 0
    u32 playingTime;   //in milliseconds
};

typedef struct ListItemBase_Tag ListItemBase_t;

typedef struct VendorInfo_Tag VendorInfo_t;
typedef struct VendorEmbedAp_Tag VendorEmbedAp_t;
typedef struct VendorSrvCB_Tag VendorSrvCb_t;
typedef struct VendorMediaData_Tag VendorMediaData_t;
typedef struct VendorMediaStreamData_Tag VendorMediaStreamData_t;
typedef struct VendorImgCodecData_Tag VendorImgCodecData_t;
typedef struct VendorSmsData_Tag VendorSmsData_t;
typedef struct VendorSimData_Tag VendorSimData_t;
typedef struct VendorPhbData_Tag VendorPhbData_t;
typedef struct VendorPhbReadyData_Tag VendorPhbReadyData_t;
typedef struct VendorCCData_Tag VendorCCData_t;
typedef struct VendorMsgPortData_Tag VendorMsgPortData_t;
typedef struct VendorMsgTelNoData_Tag VendorMsgTelNoData_t;
typedef struct VendorMsgSrvReadyData_Tag VendorSrvReadyData_t;

#ifdef __3G_RIL_MMI__
typedef struct VendorCellInfoData_Tag VendorCellInfoData_t;
#endif //__3G_RIL_MMI__
typedef struct VendorMMData_Tag VendorMMData_t;

typedef struct VendorSMIData_Tag VendorSMIData_t;

typedef struct VendorSMIGetSimData_Tag VendorSMIGetSimData_t;

typedef struct VendorMsgMOIData_Tag VendorMsgMOIData_t;
typedef struct VendorMsgMMData_Tag VendorMsgMMData_t;
typedef struct VendorCcIncomingData_Tag VendorCcIncomingData_t;
typedef struct VendorCcCallLogData_Tag VendorCcCallLogData_t;
typedef struct VendorVdoStmDLItfData_Tag VendorVdoStm_DLItf_t;
#if defined (__G_SENSOR__)
typedef struct VendorSenGsensorNotifyData_Tag VendorSenGsensorNotifyData_t;
typedef struct VendorSenMotionListenerData_Tag VendorSenMotionListenerData_t;
#endif //#if defined (__G_SENSOR__)
typedef struct VendorUser_Tag VendorUser_t;

struct ListItemBase_Tag
{
    ListItemBase_t *pPrev;
    ListItemBase_t *pNext;
    u32 id;
};

//vendor information
struct VendorInfo_Tag
{
    u32 AppID;
    u32 taskID;
    u32 SdkVenID;
	VenApState_t state;
    MAE_WChar *pDisplayName; ///< Vendor display name
    MAE_ClsId clsId;
};

//vendor embedded app data
struct VendorEmbedAp_Tag
{
    ListItemBase_t base;
    VendorUser_t *pUser;
    u32 userdata;   ///< Request Data Model
};

/// vendor embedded app data
struct VendorSrvCB_Tag
{
    ListItemBase_t base;
    VendorUser_t *pUser;
    u32 userdata;   ///< Request Data Model
    void *pVendorSrvThis;
};


//vendor media data
struct VendorMediaData_Tag
{
    ListItemBase_t base;

    VendorUser_t *pUser;
    MediaAction_t action;
    IDataModel *pDataModel;
    u32 userdata;

    union
    {
        mmi_ven_Callback_Info_t CbInfo;
        u32 SemID;
    } Resp;
};

struct VendorMediaStreamData_Tag
{
    ListItemBase_t base;
    VendorUser_t *pUser;
    u8 *pStreamData;  // 12 bytes of midi data, 3 blocks of 4 bytes
};

//vendor image codec data
struct VendorImgCodecData_Tag
{
    ListItemBase_t base;

    VendorUser_t *pUser;
    IImage *pImage;
    IBitmap *pBitmap;
    IDisplay *pDisplay;
    u32 state;

    union
    {
        mmi_ven_Callback_Info_t CbInfo;
        u32 SemID;
    }Resp;
    u8 bSync;
    u32 operation; // decode / get next frame
    void *pReq; ///< for sync decode/get next frame
};

//sms data
struct VendorSmsData_Tag
{
    ListItemBase_t base;
    VendorUser_t *pUser;
    u32 userdata;   ///< (mmi_ven_notify_data_t *)
    u32 nInstId;  ///< To protect datamodel userdata
};

//sim data
#define ICCID_LEN   20
typedef struct
{
    u8 IccID[(ICCID_LEN + 1)];  /* ICC ID (in ASCII) */
} ven_setting_SIMIccID_t;

struct VendorSimData_Tag
{
    ListItemBase_t base;
    VendorUser_t *pUser;

    union
    {
        mmi_ven_Callback_Info_t CbInfo;
        u32 SemID;
    }Resp;
    u8 bSync;
    ven_setting_SIMIccID_t *pIccID;
    void *pRet;
};


//phb data
struct VendorPhbData_Tag
{
    ListItemBase_t base;
    VendorUser_t *pUser;
    ModelListener_t tListener;
    IDataModel *pRspMdl;

    union
    {
        mmi_ven_Callback_Info_t CbInfo;
        u32 SemID;
    }Resp;
    u8 bSync;
    void *pRet;
};

//registered msg port
struct VendorMsgPortData_Tag
{
    ListItemBase_t base;
    VendorUser_t *pUser;
    u32 userdata;
    void *pVenSrv;
};

//cc data
struct VendorCCData_Tag
{
    ListItemBase_t base;
    VendorUser_t *pUser;
    u32 userdata;
};

//registered msg telno
struct VendorMsgTelNoData_Tag
{
    ListItemBase_t base;
    VendorUser_t *pUser;
    u32 userdata;
    void *pVenSrv;
};

//registered msg service status
struct VendorMsgSrvReadyData_Tag {
	ListItemBase_t base;
	VendorUser_t *pUser;
	u32 userdata;
	void *pVenSrv;
};

#ifdef __3G_RIL_MMI__
//sms data
struct VendorCellInfoData_Tag
{
    ListItemBase_t base;
    VendorUser_t *pUser;
    u32 userdata;   ///< (mmi_ven_notify_data_t *)
};
#endif //#ifdef __3G_RIL_MMI__

// mm data
struct VendorMMData_Tag {
	ListItemBase_t base;
	VendorUser_t *pUser;
	u32 userdata;
};

//vendor SMI data
struct VendorSMIData_Tag
{
    ListItemBase_t base;
    VendorUser_t *pUser;
    u32 userdata;   ///< Request Data Model
    ISMI * pISMI;
	MsgOperation_t operationType;
};

struct VendorSMIGetSimData_Tag
{
    ListItemBase_t base;
    u32 userdata;   ///< Request Data Model
    ISMI * pISMI;
	MsgGetSimOperation_t operationType;
};

struct VendorPhbReadyData_Tag
{
    ListItemBase_t base;
    VendorUser_t *pUser;
    u32 userdata;   ///< Request Data Model
    IPHBSRV *pPhbSrv;
};

struct VendorMsgMOIData_Tag{
	ListItemBase_t base;
    u32 nApID;
    u32 UserData;
    void *pMsgFilterFunc;
    void *pMOICBFunc;
};

struct VendorMsgMMData_Tag{
	ListItemBase_t base;
    u32 nApID;
    u32 nEventMask;
    u32 UserData;
    void *pMMCBFunc;
};

struct VendorCcIncomingData_Tag{
    void *pCallFilter;
    void *pCallHandler;
	u32 usrData;
	u32 apID;
};

struct VendorCcCallLogData_Tag{
    void *pCallLogListener;
	u32 usrData;
	u32 apID;
};
#if defined (__G_SENSOR__)
struct VendorSenGsensorNotifyData_Tag{
    void *pGsensorNotify;
	u32 usrData;
	u32 apID;
	u32 nDelay;
	bool bListenOnPowerSavingMode;
};

struct VendorSenMotionListenerData_Tag{
    void *pMotionListener;
	u32 usrData;
	u32 apID;
	u32 type;
	bool bListenOnPowerSavingMode;
};
#endif //#if defined (__G_SENSOR__)
struct VendorVdoStmDLItfData_Tag{
    mmi_ven_req_base_t venderData;
    s32 mediaHandle;
    void *pVendorDownloadItf;
};
//vendor user data
struct VendorUser_Tag
{
    ListItemBase_t base;        ///< use AppID as id
	IBase*                pKillIssuer;       ///< The object which issues the kill request
	fnVenSrvKillCBPtr     pFnKillCB;         ///< Callback function for notifing kill result
	u32 killUserData;	///< user data of Callback function for notifing kill result

    void *pVenSrv;

	VendorInfo_t          VendorInfo;         ///< clsID, taskID, appID, state

    VendorEmbedAp_t *pEmbedApReq;        ///< only one embedded ap request at a time
    VendorMediaData_t *pMediaDataList;     ///< allows multiple requests for "GetFileInfo", "GetLyricsInfo", "GetID3Info"
    MediaInfo_t mediaInfo;

    VendorMediaStreamData_t *pMediaStreamDataList;  //stream data, release at IMEDIA_CALLBACK_AUD_ADD_BUFFER_SUCCESS

    VendorImgCodecData_t *pImgCodecDataList;  ///< allows multiple image decoding requests
    VendorSmsData_t *pSmsDataList;       ///< aloows multiple sms requests
    VendorSimData_t *pSimDataList;       ///< aloows multiple sms requests
    VendorPhbData_t *pPhbDataList;       ///< aloows multiple sms requests
    VendorPhbReadyData_t* pPhbReadyDataList;
    VendorCCData_t *pCCDataList;        ///< aloows multiple make call requests
    VendorMsgPortData_t *pSMSPortDataList;  /// registered sms port list
    VendorMsgPortData_t *pCBPortDataList;   /// registered cb port list
    VendorMsgTelNoData_t *pSMSTelNoDataList; /// registered sms telno list
    VendorSrvReadyData_t* pSrvReadyDataList; /// registered service ready ind list
#ifdef __3G_RIL_MMI__
    VendorCellInfoData_t  *pCellInfoDataList;
#endif //#ifdef __3G_RIL_MMI__
    VendorMMData_t* pMMDataList;           ///< aloows multiple mm srv requests 
#ifdef __SDK_API_01_SMS_MMS_CC__    
	VendorSMIData_t* pSMIDataList;
#endif
    VendorMsgMOIData_t *pMsgMOIDataList;  /// registered MOI message listener list
    VendorMsgMMData_t *pMsgMMDataList;  /// registered Mobilelity mgr listener list
    VendorCcCallLogData_t ccCallLogInfo;
    VendorSrvCb_t* pVendorCbList;
#if defined (__G_SENSOR__)
	VendorSenGsensorNotifyData_t senGsensorNotifyInfo;
	VendorSenMotionListenerData_t senMotionListenerInfo;
#endif //#if defined (__G_SENSOR__)
};

//

/**
 * Application structure
 */
typedef struct MMI_VENDORSRV_TAG
{
    DECLARE_FUNCTBL(IVENDORSRV);  // function table pointer
    u32 refCnt;     // reference count
    /* Add custom fields below */
    IModel *pVendorModel;

    VendorUser_t *pVendorUserList;

    //Media related data
    //IMedia *pIMedia;
    IAUDIOSRV *pIAudioSrv;

    ICORESRV *pICoreSrv; // CoreSrv
    IUSBSRV  *pIUSBSrv;  // USBSrv

    ModelListener_t usbMdlListener; // Model listener of USB event

    ISMS *pISMSSrv;
    boolean bSMSReady;
    ICBS *pICBSSrv;
    boolean bCBReady;
#ifdef __MMS_MMI_CDMMS__	
	IMMS *pIMMSSrv;
    boolean bMMSReady;
#endif
    IMMSRV *pIMMSrv;
    IMOI *pIMOI;
    ISMI   *pISMI;
	ICCSRV *pICCSrv;
#ifdef __TENCENT_MCARE_PHB__
    IPHBSRV *pIPHBSrv;
#endif // __TENCENT_MCARE_PHB__
	VendorCcIncomingData_t ccIncomingRegData;
    VendorVdoStm_DLItf_t  VdoStmDLItfCbData;  
	ICALLLOGSRV *pICallLogSrv;
	u8 callLogListenerCnt;
#if defined (__G_SENSOR__)
	ISensorMgr* pISensorMgr;
	u8 gsensorNotifyCnt;
	IMotionDetector* pIMotionDetector;
	u8 motionListenerCnt;
#endif //#if defined (__G_SENSOR__)
    boolean bIsTerminate;
    u8 nSMSEvtRefCnt; // for register all sms msg
    //@@~~ u32 nUnSendSMSCnt;
    mmi_ven_req_base_t venderData;
    void *pRet;
    mmi_ven_req_base_t vdoStreamVenderData;
    s32 nMediaHandle;
    DLItf_OnStatusChangedCb pfnStatusCb;
    u32 nCusData;

    VideoSrvHandle_t VideoSrvHandle;
    boolean bWaitVdoSrvMoveTmpFile;

    DList_t *pDTMFReqQueue;     //for storing the DTMF requests from SDK.
    u16 *pPhbUserData; // for PHB physical index
    u16 *pPhbNewUserData; // for PHB new physical index
    bool bNeedReturnPhbUserData; // for PHB physical index
    bool bNeedReturnPhbNewUserData; // for PHB new physical index
    u32 SimLoc;
    u32 SimMsgId;
	VendorSMIGetSimData_t* pSMIGetSimDataList; //for ISMI_RetrvMsgDataFromSimAsync
	VendorSMIData_t* pSMIDataStoreMsgList; //for ISMI_StoreMessageAsync
} MMI_VENDORSRV;

#ifdef __SDK_API_01_SMS_MMS_CC__
#ifdef __MMS_MMI_CDMMS__
typedef struct
{
    MMI_VENDORSRV *pVendorSrv;
    IDataModel *pDataModel;
    MMI_MMS_SendReq_t *pMms;
} VendorMsgMmsSendInfo_t;
#endif //#ifdef __MMS_MMI_CDMMS__
#endif //#ifdef __SDK_API_01_SMS_MMS_CC__

#endif /* __MMI_VENDORSRV_PRIV_H__ */
