/**
* @file mmi_btobexsrv_priv.h
*
* State Machine Service - BTOBEXSRV
* Generated by XFSM v1.0, CodeVer=v0.24
*
* Class Id: CLSID_BTOBEXSRV
*
*
* @version $Id: mmi_btobexsrv_priv.h 38890 2009-08-29 16:22:38Z zinc.chen $
*/
#ifndef __MMI_BTOBEXSRV_PRIV_H__
#define __MMI_BTOBEXSRV_PRIV_H__

#include "mmi_mae_common_def.h"
#include "mmi_mae_sm_defs.h"
#include "mmi_btobexsrv.h"
#include "mmi_btobexsrv_sm.h"

//#include "vfs_file.ho"

#ifdef __BLUETOOTH_OBEX_MMI__

#include "mmi_log.h"
#include "mmi_mae_helper.h"
#include "mmi_mae_notifier.h"

#include "mmi_req_bt.h"
#include "mmi_if_bt.h"
#include "mmi_cb_bt.h"
#include "mmi_btsrv.h"
#include "mmi_btsrv_def.h"
#include "mmi_btsrv_util.h"
#include "mmi_common_content.h"
#include "mmi_util_rtc.h"
#include "mmi_phbsrv.h"
#include "mmi_calendarapp_util.h"
#include "mmi_usbsrv.h"
#include "mmi_cfgsrv.h"
#include "mmi_accessorysrv.h"
#include "mmi_ccsrv.h"
#include "mmi_vcalstoresrv.h"
#include "DlistItf.h"


#define __BTOBEXSRV_USE_BUF__

///XMMI Patch
#define __BTOBEXSRV_USE_FORCE_DIS_OBEX__

//#define BTOBEXSRV_FILE_BUF_SIZE 12288
//#define BTOBEXSRV_FILE_BUF_RW_UNIT 8192
#define BTOBEXSRV_FILE_BUF_SIZE 20000
#define BTOBEXSRV_FILE_BUF_RW_UNIT 16384
#define BTOBEXSRV_MAX_MSG_CNT 30
#ifdef __BTOBEXSRV_USE_FORCE_DIS_OBEX__
#define BTOBEXSRV_FORCE_ABORT_TIMER 5000 // for obex link not establish to force disconnect obex link
#endif
#define BTOBEXSRV_RECV_TIMER 50000
#define BTOBEXSRV_ABORT_SENDREQ_TIMER 30000
#define BTOBEXSRV_CONNECTOBEX_TIMER 30000

#define BTOBEXSRV_BLOCK_BT_COUNTER_FAST 10 //Block BT every 10 callback
#define BTOBEXSRV_BLOCK_BT_COUNTER_SLOW 2 //Block BT every 2 callback

/* Delay producing BT_SEM for BT Task */
enum
{
    BTOBEXSRV_DELAY_UNLOCK_BT_SEM_TIMER_NONE = 0
    ,BTOBEXSRV_DELAY_UNLOCK_BT_SEM_TIMER_FAST = 20
    ,BTOBEXSRV_DELAY_UNLOCK_BT_SEM_TIMER_NORMAL = 40
    ,BTOBEXSRV_DELAY_UNLOCK_BT_SEM_TIMER_SLOW = 60
    ,BTOBEXSRV_DELAY_UNLOCK_BT_SEM_TIMER_SUPER_SLOW = 500
};
typedef u32 BTOBEXSRV_UnlockBtSemDelayTime_e;

enum
{
    BTOBEXSRV_FILETYPE_VCAL // __CALENDAR_IMPORT_VCS_MMI__
   ,BTOBEXSRV_FILETYPE_VCARD
   ,BTOBEXSRV_FILETYPE_VTODO
   ,BTOBEXSRV_FILETYPE_GENERAL
  , //  Image, Music, Video, Voice memo, etc.
    BTOBEXSRV_FILETYPE_OTHER
};
typedef u8 BTOBEXSRV_FILETYPE_e;

enum
{
	BTOBEXSRV_TRANS_ERROR_NONE,
	BTOBEXSRV_TRANS_ERROR_FAIL,
	BTOBEXSRV_TRANS_ERROR_DB_INSTALLING,
	BTOBEXSRV_TRANS_ERROR_NO_SPACE,
    BTOBEXSRV_TRANS_ERROR_FILE_NAME_TOO_LONG,
};
typedef u8 BTOBEXSRV_TRANS_ERROR_e;

typedef struct
{
    BTOBEXSRV_UnlockBtSemDelayTime_e u32DelayUnlockBtSemTime;
    u8 u8BlockBtTaskCounter;
} BTOBEXSRV_OPPSpeed_t;

/**
 * Application structure
 */
typedef struct MMI_BTOBEXSRV_TAG
{
    DECLARE_FUNCTBL(IBTOBEXSRV);  // function table pointer
    u32 refCnt;     // reference count
    SM_Mao_t app;       // StateMachine Application data
    SM_ModeId_t _lastActiveMode[cBTOBEXSRV_ModeNumbers];    // Last child, current active child
    SM_ModeId_t _currentMode[1];
    /* Add custom fields below */
    /* Other services */
    MAE_Notifier_t *pNotifier;
    IPHBSRV *pPhbSrv;
    IBTSRV *pBTSrv;
    ICFGSrv             *pCFGSrv;
    IACCESSORYSRV		*pIAccessorySrv;
    ICCSRV *pCCSrv;
    ModelListener_t 	tAccessoryMdlListener;

    /* Other flags & fields */
    boolean bIsNeedDeleteFile;
    boolean bIsRecvSuccess;
    boolean bIsReceiving;
    boolean bIsSetRecvCB;
    boolean bIsTerminate;
    boolean bIsNeedSendReset;
    boolean bIsInteractiveMode;
    DList_t *pWriteReqList;
    MMI_Common_SupportedMediaType_e u8RecvFileMediaType;
    BTOBEXSRV_FILETYPE_e u8FileType;
    BTOBEXSRV_TRANS_ERROR_e	eTransError;

	u32 u32ImportExportCheckValue;     //for import phbook
	u32 u32USBStatus; //Current Usb status
#if defined(__APP_MMI_CHECKDISK__)
	u32 u32CheckDiskStatus; //Current CheckDisk status
#endif
	BTOBEX_FileInfo_t tFileInfo;

    u8 au8SendDestDevAddr[BTSRV_DEVICE_ADDR_SIZE];//The BT address of the device to which the handset sends file
    BTSRV_DevInfo_t tRecvSrcDevInfo; //The info(address & name) of the device from which the handset receive file
    BTOBEX_WriteReq_s *pProcessingWriteReq;

/* we turn on this flag to inform BTSRV to push a EVT(MAE_EVT_BT_OBEX_TRANS_STATUS_IND) to SM when setting default received DIR
   should turn off the flag to avoid user set BT default received DIR via BTAPP, 
   avoid to trigger another noisy EVT into SM. */
    boolean bWaitingStorageSelection;      

    BTOBEXSRV_ReceivingStatus_e eReceivingStatus;  // distinguish the receiving file status, INIT for setting folder path and START when transmitting

} MMI_BTOBEXSRV;

#endif /* #ifdef __BLUETOOTH_OBEX_MMI__ */

#endif /* __MMI_BTOBEXSRV_PRIV_H__ */
