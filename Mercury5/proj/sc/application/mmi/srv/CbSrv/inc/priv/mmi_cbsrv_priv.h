/**
* @file mmi_cbs_priv.h
*
* State Machine Service - CBS
* Generated by XFSM v1.0, CodeVer=v0.24
*
* Class Id: CLSID_CBS
*
*
* @version $Id: mmi_cbs_priv.h 38890 2009-08-29 16:22:38Z zinc.chen $
*/
#ifndef __MMI_CBS_PRIV_H__
#define __MMI_CBS_PRIV_H__

#include "mmi_mae_common_def.h"
#include "mmi_mae_sm_defs.h"
#include "mmi_cbsrv.h"
#include "mmi_cbsrv_sm.h"
#include "mmi_common_sms.h"
#include "mmi_cbsrv_custom.h"
#include "mmi_cfgsrv.h"
#include "mmi_common_cfg.h"
#include "mmi_smstransactionsrv.h"
#include "mmi_smssrv.h"
#define CBS_PDU_SIZE_MAX 175
#define CBS_MAX_ID 255
#define showJob(p) (!p->bCBisShowing) &&  p->nQueueSize >0

typedef struct CBS_Message_Item
{
    MAE_WChar *pduData[CBS_PDU_SIZE_MAX];
    u8 dataLength;
}CBS_Message_Item_t;
typedef struct
{
    u8 nSIMModule;
    u32 nPort;
    u32 userData;
    u32 CallerID;
    pfn_cbs_receive_CB fnReceiveCB; // used to notify 3rd party there is one new CB message
} CBS_RegisterInfo_t; // for 3rd party register certain port

/**
 * Application structure
 */
typedef struct MMI_CBS_TAG
{
    DECLARE_FUNCTBL(ICBS);    // function table pointer
    u32 refCnt;     // reference count
    SM_Mao_t app;       // StateMachine Application data
    SM_ModeId_t _lastActiveMode[cCBS_ModeNumbers];  // Last child, current active child
    SM_ModeId_t _currentMode[1];
    /* Add custom fields below */
    IVectorModel *pIReceiveQueue; /* the newest cb raw data*/
    boolean bReady;
    MAE_Notifier_t *pNotifier;
    int nQueueSize;
    u8 nLastID;
    IModel *pINewCB;                      /*notify new CB*/
    IHandler *pIApp;                          /*keep the instance of ap which save CB Message*/
    IMOI *pMOI;                         /*keep the instance to receive moi_evt_cb_ind*/
    ICFGSrv *pCFGSrv;                   /*keep the instance to listen cbenable config*/
    ITXI *pTXI;
    ISMS *pSMS;
    ISMI *pSMI; // to register delete notify
    ModelListener_t CBEnableListener;
    IVectorModel *pRegisterList; // for 3rd party to listen certain channel CB message "CBS_RegisterInfo_t"
    u16 *pCBAreaCode;   // CBMs with channel(50) are treated as "area code"
    u16 *pCBAreaCode2;  // CBMs with channel(50) are treated as "area code", for SIM2

} MMI_CBS;

static void CBS_FreeModelItem(void *pData, IBase *pOwner);
static void CBS_FreeRegisterListItem(void *pData, IBase *pOwner);
static MAE_Ret CBS_ReceiveQueue_delete(MMI_CBS *pThis, u32 nIdx);
static MAE_Ret CBS_Get_CB_Message(MMI_CBS *pThis, void *pSM);
__SLDPM_FREE__ static void CBS_CFGSrvListener(void *pUserData, ModelEvent_t *pMdlEvt);
static boolean CBS_CheckCBEnable(MMI_CBS *pThis, u32 configID);
static void CBS_SetCB_RIL(MMI_CBS *pThis, Msg_CB_Setting_Topic_List_t CBSetting, u8 SimModule, boolean bActive);
static void CBS_SettingInit(MMI_CBS *pThis, COMMON_SIM_CARD_STATUS_e simStatus);
void _CBS_ResumePostCBUpdate(IBase *pUser, u32 Param);
static void CBS_ListMsgTransfer(SMI_MsgHdr_t MsgData, void **ppOutData, void *pUserData);
boolean _CBS_isFULL(MMI_CBS *pThis, SMI_MsgID_t *nOldMsgID);

#endif /* __MMI_CBS_PRIV_H__ */
