/**
 * @file mmi_vcalparser_priv.h
 *
 * Service without using State Machine  - VCALPARSER
 * Generated by AP Designer v0.16, 2007-30-10 15:33
 *
 * @version $Id$
 */
#ifndef __MMI_VCALPARSERSRV_PRIV_H__
#define __MMI_VCALPARSERSRV_PRIV_H__

#ifdef __CALENDAR_SUPPORT_VCS_MMI__
/*=============================================================*/
// Include files
/*=============================================================*/

#include "mmi_mae_common_def.h"
#include "mmi_vcalparsersrv.h"
#include "mmi_mae_vectormodel.h"

/*=============================================================*/
// Macro definition
/*=============================================================*/

/**
 * Constant value definition
 */

#define VCAL_VCALENDAR_BEGIN                "BEGIN:VCALENDAR"
#define VCAL_VCALENDAR_END                  "END:VCALENDAR"
#define VCAL_VEVENT_BEGIN                   "BEGIN:VEVENT"
#define VCAL_VEVENT_END                     "END:VEVENT"

/* Start of __APP_MMI_TODOLIST_VTODO__ */
#define VCAL_VTODO_BEGIN                    "BEGIN:VTODO"
#define VCAL_VTODO_END                      "END:VTODO"
#define STRLEN_VCAL_VTODO_BEGIN             strlen(VCAL_VTODO_BEGIN)
#define STRLEN_VCAL_VTODO_END               strlen(VCAL_VTODO_END)
/* End of __APP_MMI_TODOLIST_VTODO__ */

#define VCAL_VCALENDAR_VERSION              "1.0"
#define VCAL_VCALENDAR_CURRENT_VERSION      "VERSION:1.0"
#define VCAL_APPEND_CURRENT_VERSION         "\r\nVERSION:1.0"
#define VCAL_CRLF                           "\r\n"
#define VCAL_CR                             '\r'
#define VCAL_LF                             '\n'
#define VCAL_BEGIN_STRING                   "BEGIN"
#define VCAL_END_STRING                     "END"
#define VCAL_SEMICOLON                      ';'
#define VCAL_VPROPERTY_NAME_DELIM           ';'
#define VCAL_VPROPERTY_VALUE_DELIM          ':'
#define VCAL_VPARAM_VALUE_DELIM             '='
#define VCAL_QUOTED_PRINTABLE_DELIM         '='
#define VCAL_WHITE_SPACE                    ' '
#define VCAL_HT_TAB                         '\t'
#define VCAL_COMMA                          ','
#define VCAL_COLON                          ':'
#define VCAL_WHITE_SPACE                    ' '

#define VCAL_MINUS_SYMBOL                   '-'
#define VCAL_PLUS_SYMBOL                    '+'
#define VCAL_UTC_COORDINATE                 'Z'
#define VCAL_ISO_8601_TIME_DESG             'T'
#define PERIOD '.'

#define VCAL_TRUE_STR                       "TRUE"
#define VCAL_FALSE_STR                      "FALSE"
#define VCAL_EXTENDED_STR                   "X-"
#define VCAL_TERMINATOR_STR                 '\0'
#define VCAL_WIN_SHARP                      '#'
#define VCAL_MULTI_LINE_TEXT_WSP            "\r\n "
#define VCAL_MULTI_LINE_TEXT_HTAB           "\r\n "

#define STRLEN_VCAL_VCALENDAR_BEGIN         strlen(VCAL_VCALENDAR_BEGIN)
#define STRLEN_VCAL_VCALENDAR_END           strlen(VCAL_VCALENDAR_END)
#define STRLEN_VCAL_VEVENT_BEGIN            strlen(VCAL_VEVENT_BEGIN)
#define STRLEN_VCAL_VEVENT_END              strlen(VCAL_VEVENT_END)
#define STRLEN_VCAL_CRLF                    strlen(VCAL_CRLF)

/* 30 should be enough for all the weeks selected together. */
#define STRLEN_VCAL_WEEKDAYS                30

/* Maximum number of days in a year. */
#define VCAL_MAX_DAYS_IN_YEAR               366

/* The max bits that can be set in a week. */
#define VCAL_MAX_WEEKDAY_BIT_VAL            7

/* Check for the last 5 -ve weeks. I would be same as above except for -ve sign in the sprintf statement. */
#define VCAL_NEGATIVE_WEEK_OFFSET           5

/* 1 for sign, 2 for hours, 1 for : and 2 for minutes */
#define VCAL_MALLOC_SIZE_TZ                 7

/* 6+6 for long/lat if -ve sign is there and 1 for , & 1 for NULL */
#define VCAL_LEN_GEO_STR                    16

/* Allocate 16 in case of Z to b accommodated+\0 */
#define VCAL_LEN_DATE_STR                   17

#define VCAL_LEN_DURATION_STR               30

#define VCAL_INIT_RRULE_LEN                 20

/* This much should be enough for printing count. */
#define STRLEN_VCAL_RRULE_COUNT             7

/* There would be usually only one vect param for vCal */
#define VCAL_NR_VECT_VALS_PARAM             0

#define VCAL_NEWLINE_CHAR                   1

#define MAX_BYTES_PER_QP_BYTE               4

#define MAX_VCAL_BUFFER_SIZE              4096

#define VCAL_INVALID_NUM                    0x7FFFFFFF

#define EXTENDED_PROPERTY_OFFSET 0

/*=============================================================*/
// Data type definition
/*=============================================================*/

/**
 * Object structure definition
 */

typedef struct
{
    /* VCALParameter_e Id, as an enum of VCALParameter_e. */
    VCALParameter_e nParamId;

    /* Parameter value which is an enum type. */
    u32 nParamValue;

    /* Name of parameter. */
    u8 *pParamName;
} vCalParam_Val_Tag;

typedef struct
{
    u32 nStatus;
    u8 *pStatusStr;
} vCalStatus_Tag;

typedef struct
{
    u32 nClass;
    u8 *pClassStr;
} vCalClass_Tag;

typedef struct
{
    u32 nCategory;
    u8 *pCategoryStr;
} vCalCategories_Tag;

typedef struct
{
    const u8 *pUnParsedParams;
    VCALParameter_e nParamId;
} vCalUnParsedParams_Tag;

/* To get the week day string associated with a week day. */
typedef struct
{
    u32 nDayInWeek;
    u8 *pWeekDay;
} vCalWeekDay_Val_Tag;

/**
 * Application structure
 */
typedef struct MMI_VCALPARSER_TAG
{
    DECLARE_FUNCTBL(IVCALPARSER); // function table pointer
    u32 refCnt;     // reference count
    /* Add custom fields below */
    u8 *pBuffer; /* A unparsed buffer for a IVCALPARSER object. */
    /* After it is parsed, all the IVCALENDAR objects will be put in pVectCals. */

    IVectorModel *pVectCals; /* IVectorModel of IVCALENDAR objects. */
} MMI_VCALPARSER;

typedef struct MMI_VCALENDAR_TAG
{
    DECLARE_FUNCTBL(IVCALENDAR);  // function table pointer
    u32 refCnt;     // reference count
    /* Add custom fields below */
    u8 *pBuffer; /* A unparsed buffer for a IVCALENDAR object. */
    /* After it is parsed, all the IVEVENT and IVPROPERTY objects will be put in pVectEvents and pVectProps. */

    IVectorModel *pVectEvents; /* IVectorModel of IVEVENT objects. */
#ifdef __APP_MMI_TODOLIST_VTODO__
	IVectorModel *pVectTodo; /* IVectorModel of IVTODO objects. */
#endif
    IVectorModel *pVectProps; /* IVectorModel of IVPROPERTY objects which like DayLight, Ver etc. */
} MMI_VCALENDAR;

typedef struct MMI_VEVENT_TAG
{
    DECLARE_FUNCTBL(IVEVENT); // function table pointer
    u32 refCnt;     // reference count
    /* Add custom fields below */
    u8 *pBuffer; /* A unparsed buffer for a IVEVENT object. */
    /* After it is parsed, all the IVPROPERTY objects will be put in pVectProps. */

    IVectorModel *pVectProps; /* IVectorModel of IVPROPERTY objects. */
} MMI_VEVENT;

#ifdef __APP_MMI_TODOLIST_VTODO__
typedef struct MMI_VTODO_TAG
{
	DECLARE_FUNCTBL(IVTODO); // function table pointer
	u32 refCnt;     // reference count
	/* Add custom fields below */
	u8 *pBuffer; /* A unparsed buffer for a IVTODO object. */
	/* After it is parsed, all the IVPROPERTY objects will be put in pVectProps. */
	IVectorModel *pVectProps; /* IVectorModel of IVPROPERTY objects. */
} MMI_VTODO;
#endif

typedef struct MMI_VPROPERTY_TAG
{
    DECLARE_FUNCTBL(IVPROPERTY);  // function table pointer
    u32 refCnt;     // reference count
    /* Add custom fields below */
    u8 *pPropValue; /* Value of the property. */

    u8 *pPropName; /* Name of the property. */

    u8 *pBuffer; /* A unparsed buffer for a IVPROPERTY object. */
    /* After it is parsed, all the IVPARAM objects will be put in pVectParams. */

    u8 *pGroupName; /* This will hold the group name. */

    VCALProperty_e nPropId; /* Id of the property. */

    IVectorModel *pVectParams; /* IVectorModel of IVPARAM objects. */
    boolean bCharSetIsUTF8;
    s32 nLastMatchIndex;
    VCALParameter_e nLastMatchId;
} MMI_VPROPERTY;

typedef struct MMI_VPARAM_TAG
{
    DECLARE_FUNCTBL(IVPARAM); // function table pointer
    u32 refCnt;     // reference count
    /* Add custom fields below */
    u8 *pParamValue; /* Value of the parameter. */

    u8 *pParamName; /* Name of the parameter. */

    u8 *pBuffer; /* A unparsed buffer for a IVPARAM object. */
    /* After it is parsed, all the multiple values will be put in pVectValues. */

    VCALParameter_e nParamId; /* Id of the parameter. */

    VCALProperty_e nPropId; /* Id of the property. */

    IVectorModel *pVectValue;   /* IVectorModel for values of this IVPARAM object. */
} MMI_VPARAM;

#define VCAL_SKIP_WHITE_SPACE(x)                   while(VCAL_WHITE_SPACE == *(x)) {x++;}
#define VCAL_GOTO_WHITE_SPACE(x)                   while(VCAL_WHITE_SPACE != *(x)) {x++;}

#ifndef ARRAY_SIZE
#define ARRAY_SIZE(a) (sizeof((a))/sizeof((a)[0]))
#endif

/*=============================================================*/
// Local function prototype declaration and definition
/*=============================================================*/

#endif /* __CALENDAR_SUPPORT_VCS_MMI__ */
#endif /* __MMI_VCALPARSER_PRIV_H__ */
