/**
* @file mmi_fmradiosrv_priv.h
*
* State Machine Service - FMRADIOSRV
* Generated by XFSM v1.0, CodeVer=v0.24
*
* Class Id: CLSID_FMRADIOSRV
*
*
* @version $Id: mmi_fmradiosrv_priv.h 41616 2009-09-28 11:40:02Z lih.wang $
*/
#ifndef __MMI_FMRADIOSRV_PRIV_H__
/*=============================================================*/
// Include Files
/*=============================================================*/
#define __MMI_FMRADIOSRV_PRIV_H__
#include "mmi_fmradiosrv.h"
#include "mmi_BaseSrv.h"
#include "mmi_log.h"
#include "mmi_clstbl.h"
#include "mmi_common_util.h"
#include "mmi_mediasrvutil_common.h"
#include "mmi_accessorysrv.h"
#include "mmi_usbsrv.h"
#include "mmi_audioenvsrv.h"
#include "mmi_subject.h"
#include "srv_ResMgr_Dev.h"
#include "srv_ResMgr_Fmr.h"
#include "srv_ResMgr_Aud.h"

#include "vm_e2p.ho"
#include "vm_e2p_app.ho"

/*=============================================================*/
// Macro Declarations
/*=============================================================*/
#define MMI_LEVEL_FMRADIOSRV MMI_LEVEL_FMR
#define FMRADIOSRV_EVT_GROUP_MASK 0xFF00
#define FMRADIOSRV_GET_EVT_GROUP(_EVTID_) ((_EVTID_) & FMRADIOSRV_EVT_GROUP_MASK)
/*=============================================================*/
// Type Declarations
/*=============================================================*/

typedef enum
{
    FMRADIOSRV_STM__IDLE,
    FMRADIOSRV_STM__PLAY,
    FMRADIOSRV_STM__RECORD,
    FMRADIOSRV_STM__PAUSE_REC,
    FMRADIOSRV_STM__SUSPEND,
    FMRADIOSRV_STM__SAVE_FILE,
    FMRADIOSRV_STM__INVALID
} FmradioSrvStm_e;


typedef enum
{
    FMRSRV_EVT_GROUP_REQ = 0x000,
    FMRSRV_EVT_POWER_ON_REQ = FMRSRV_EVT_GROUP_REQ,
    FMRSRV_EVT_POWER_OFF_REQ,
    FMRSRV_EVT_START_SEARCH_REQ,
    FMRSRV_EVT_STOP_SEARCH_REQ,
    FMRSRV_EVT_GET_CHANNEL_INFO_REQ,
    FMRSRV_EVT_START_REC_REQ,
    FMRSRV_EVT_STOP_REC_REQ,
    FMRSRV_EVT_PAUSE_REC_REQ,
    FMRSRV_EVT_RESUME_REC_REQ,
    FMRSRV_EVT_SAVE_REC_FILE_REQ,

    FMRSRV_EVT_GROUP_RSP = 0x100,
    FMRSRV_EVT_POWER_ON_RSP = FMRSRV_EVT_GROUP_RSP,
    FMRSRV_EVT_POWER_OFF_RSP,
    FMRSRV_EVT_START_SEARCH_RSP,
    FMRSRV_EVT_STOP_SEARCH_RSP,
    FMRSRV_EVT_GET_CHANNEL_INFO_RSP,
    FMRSRV_EVT_START_REC_RSP,
    FMRSRV_EVT_STOP_REC_RSP,
    FMRSRV_EVT_PAUSE_REC_RSP,
    FMRSRV_EVT_RESUME_REC_RSP,
    FMRSRV_EVT_SAVE_REC_FILE_RSP,

    FMRSRV_EVT_GROUP_NOTIFY = 0x200,
    FMRSRV_EVT_RM_SUSPEND = FMRSRV_EVT_GROUP_NOTIFY,
    FMRSRV_EVT_RM_RESUME,
    FMRSRV_EVT_SEARCH_COMPLETE,
    FMRSRV_EVT_SEARCH_FAIL,
    FMRSRV_EVT_REC_POSITION_UPDATE,
    FMRSRV_EVT_REC_ERROR,

    FMRSRV_EVT__GROUP_INFORM = 0x0300,
    FMRSRV_EVT__INFORM_PLAY = FMRSRV_EVT__GROUP_INFORM,
    FMRSRV_EVT__INFORM_REC,
    FMRSRV_EVT__INFORM_CHANNEL,
    FMRSRV_EVT__INFORM_ERROR,

    FMRSRV_EVT_INVALID = 0xFFFF,
} FmradioSrvEvt_e;

typedef enum
{
    FMRADIOSRV_LISTENER__PLAY,
    FMRADIOSRV_LISTENER__REC,
    FMRADIOSRV_LISTENER__CHANNEL,
    FMRADIOSRV_LISTENER__ERROR,
    FMRADIOSRV_LISTENER__NUM
} FmradioSrvListenerType;

typedef struct
{
    FmrSrvHdl_t pUserHdl;
    FmradioSrvHookFunc pfn;
    u32 nCusdata;
/*
    FmrSrvHdl_t pUserHdl;
    FmradioSrvHookFunc pfnPlugOutHeadset;
    FmradioSrvHookFunc pfnPlugInHeadset;
    u32 nPlugOutCusdata;
    u32 nPlugInCusdata;
*/
} FmradioSrvHookData_t;

typedef struct
{
    u32 nSrvInstId;
    u32 nAppInstId;
    u32 pfnCallback;
} FmradioSrvCusInfo_t;

typedef struct
{
    MediaSrvAudCodec_e eRecType;
    MediaSrvRecPath_e ePathType;
    MAE_WChar *pRecPath;
    u32 nFrequency;
    FmradioSrvSearchChannelDirection_e eSearchDirection;
    FmradioSrvErrorType_e eErrType;
    MediaSrvErrCode_e eRspErr;
    //    FmradioSrvStatus_e eSuspendStatus;
} FmradioSrvReqEvt_t;

typedef struct
{
    SERVICE_BASE_ELEMENTS;
    void *pUser;
    BaseSrvHdl_t pBaseSrvHdl;

    IACCESSORYSRV *pIAccessorySrv;
    ModelListener_t tAccessoryListener;
    ICFGSrv *pICfgSrv;
    ModelListener_t tAirPlaneModeListener;
    IUSBSRV *pIUsbSrv;
    ModelListener_t tUSBListener;
    FmradioSrvStm_e eFmrStatus;
    FmradioSrvStm_e eResumeStatus;
    AudioEnvSrvVolLevel_e eVolume;
    MediaSrvAudCodec_e eRecType;
    MediaSrvRecPath_e ePathType;
    MAE_WChar *pRecPath;
    MAE_WChar *pRecFile;
    FmradioSrvReqEvt_t *pRecEvt;
    FMRArea_e eFmrArea;
    u32 nFmrFrequency;
    u32 nReqFrequency;
    boolean bIsHeadsetInserted;
    boolean bAntennaSupported;
    FmradioSrvAreaConfig_t *pAreaConfig;
    FmradioSrvHookData_t *pHookHeadsetIn;
    FmradioSrvHookData_t *pHookHeadsetOut;
    FmradioSrvCusInfo_t *pNotifyData;
    IModel *pCbModel;
} FmradioSrv_t;

typedef struct
{
    FmradioSrv_t *pFmradiosrv;
    void * pUserInstance;
    ModelListener_t tFmrModeListener;
    FmradioSrvChannelInfoCb pfnChannelInfoCb;
    FmradioSrvPlayStatusCb pfnPlayStatusCb;
    FmradioSrvRecStatusCb pfnRecStatusCb;
    FmradioSrvErrorCb pfnErrorCb;
    u32 nChannelInfoCusData;
    u32 nPlayStatusCusData;
    u32 nRecStatusCusData;
    u32 nErrorCusData;
}FmradioSrvHdlData_t;

/*=============================================================*/
// Private Function Declaration
/*=============================================================*/
static MAE_Ret _FmradioSrvConstructor(IBaseSrv *pBaseSrv);
static MAE_Ret _FmradioSrvDestructor(IBaseSrv *pBaseSrv);
static MAE_Ret _FmradioSrvHandleEvt( IBaseSrv *pBaseSrv, MAE_EventId nEventId, u32 nParam1, u32 nParam2);
bool _FmradioSrvQueueCheckAbort (BaseSrvHdl_t pBaseSrvHdl, SrvEvtHdl_t pCurEvtHdl, SrvEvtHdl_t pWaitEvtHdl);
static BaseSrvRet_e _FmradioSrvIdleHandler(BaseSrvHdl_t pBaseSrvHdl, SrvSMHandle_e eSMHandleType, SrvEvtHdl_t pSrvEvtHdl, u32 nCusData);
static BaseSrvRet_e _FmradioSrvPlayHandler(BaseSrvHdl_t pBaseSrvHdl, SrvSMHandle_e eSMHandleType, SrvEvtHdl_t pSrvEvtHdl, u32 nCusData);
#ifdef __APP_MMI_FM_RADIO_REC__
static BaseSrvRet_e _FmradioSrvRecordHandler(BaseSrvHdl_t pBaseSrvHdl, SrvSMHandle_e eSMHandleType, SrvEvtHdl_t pSrvEvtHdl, u32 nCusData);
static BaseSrvRet_e _FmradioSrvPauseRecHandler(BaseSrvHdl_t pBaseSrvHdl, SrvSMHandle_e eSMHandleType, SrvEvtHdl_t pSrvEvtHdl, u32 nCusData);
static BaseSrvRet_e _FmradioSrvSaveFileHandler(BaseSrvHdl_t pBaseSrvHdl, SrvSMHandle_e eSMHandleType, SrvEvtHdl_t pSrvEvtHdl, u32 nCusData);
#endif
static BaseSrvRet_e _FmradioSrvSuspendHandler(BaseSrvHdl_t pBaseSrvHdl, SrvSMHandle_e eSMHandleType, SrvEvtHdl_t pSrvEvtHdl, u32 nCusData);
/*=============================================================*/
// Public Function Declaration
/*=============================================================*/
#endif /* __MMI_FMRADIOSRV_PRIV_H__ */
