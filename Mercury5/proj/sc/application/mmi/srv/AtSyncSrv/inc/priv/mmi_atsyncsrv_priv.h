/**
* @file mmi_atsyncsrv_priv.h
*
* State Machine Service - ATSYNCSRV
* Generated by XFSM v1.0, CodeVer=v0.24
*
* Class Id: CLSID_ATSYNCSRV
*
*
* @version $Id: mmi_atsyncsrv_priv.h 38312 2009-08-21 05:49:22Z johnson.yeh $
*/
#ifndef __MMI_ATSYNCSRV_PRIV_H__
#define __MMI_ATSYNCSRV_PRIV_H__

#include "mmi_mae_common_def.h"
#include "mmi_mae_sm_defs.h"
#include "mmi_mae_sm.h"
#include "mmi_atsyncsrv.h"

/*--------------- PART 0. Include file -----------------*/
#include "mmi_mae_arraymodel.h"
#include "mmi_phbsrv.h"
#include "mmi_phbsrv_def.h"
#include "mmi_messagemanagersrv.h"
#include "mmi_smstransactionsrv.h"
#include "mmi_messagecontentsrv.h"
#include "mmi_vcalstoresrv.h"
#include "mmi_calendarapp_util.h"
#include "mmi_common_calendar.h"
#include "mmi_mae_taskdbmgr.h"
#include "mmi_vcalstoresrv.h"
#include "mmi_common_custom.h"

/*--------------- PART 1. Type define  -----------------*/
//-------------------------------
// A. enum
//-------------------------------
enum
{
    ATSYNCSRV_OP_AP_NONE,
    ATSYNCSRV_OP_AP_PHB,
    ATSYNCSRV_OP_AP_MSG,
    ATSYNCSRV_OP_AP_CALENDAR,
    ATSYNCSRV_OP_AP_TODOLIST,
    ATSYNCSRV_OP_AP_NOTEPAD,
    ATSYNCSRV_OP_AP_CALLLOG,
    ATSYNCSRV_OP_AP_MAX
};
typedef u8 ATSYNCSRV_OP_AP_e;

enum
{
    MMI_ATSYNCSRV_STATUS_INIT = 0,
    MMI_ATSYNCSRV_STATUS_IDLE,
    MMI_ATSYNCSRV_STATUS_BUSY,
    MMI_ATSYNCSRV_STATUS_CANCEL,
    MMI_ATSYNCSRV_STATUS_STOPPED
};
typedef u8 mmiATSyncSrv_Status_e;

enum
{
    ATSYNCSRV_MSG_CMD_NONE,
    ATSYNCSRV_MSG_CMD_STORAGE_SET,
    ATSYNCSRV_MSG_CMD_STORAGE_GET,
    ATSYNCSRV_MSG_CMD_QUERY_CAPACITY,
    ATSYNCSRV_MSG_CMD_QUERY_COUNT,
    ATSYNCSRV_MSG_CMD_QUERY_FIELDS,
    ATSYNCSRV_MSG_CMD_NEXT_ID,
    ATSYNCSRV_MSG_CMD_WRITE_ENTRY,
    ATSYNCSRV_MSG_CMD_READ_ENTRY,
    ATSYNCSRV_MSG_CMD_DEL_ENTRY,
    ATSYNCSRV_MSG_CMD_SEND_ENTRY,
    ATSYNCSRV_MSG_CMD_MAX
};
typedef u8 ATSYNCSRV_MSG_CMD_e;
//-------------------------------
// B. value definition
//-------------------------------

//-------------------------------
// C. value definition
//-------------------------------

/*--------------- PART II. Struct define ---------------*/
//-------------------------------
// General
//-------------------------------
#define ATSYNCSRV_MAX_FIELD_SIZE    20
typedef struct
{
    u32 nPortID;
    u8 nModuleID;
    u8 nGroupID;
    u8 nCmdID;
    u8 nFunID;
    u8 nTotalCnt;
    u8 nCntIdx;
    u8 *SegmentValueField[ATSYNCSRV_MAX_FIELD_SIZE];
}ATCmdSegmention_t;

typedef MAE_Ret (*pfnConvertATSegCmdtoStruct_t)(ATCmdSegmention_t *pATSegCmdObj, void **pObj);

typedef struct
{
    u8 nGroupID;
    u8 nCmdID;
    u8 nFunID;
    pfnConvertATSegCmdtoStruct_t pfn;
    MAE_EventId nEventID;
}SegCmdEvtTable_t;

//-------------------------------
// C. SMS
//-------------------------------
typedef struct
{
    ATSYNCSRV_ATI_Src_t tSyncSrc;

    // write
    ATSYNCSRV_MultiSegInfo_t tMultiSeg;

    // read
    ATSYNCSRV_SMS_Entry_t *pSmsEntry;

    // list
    IArrayModel *pMsgList;  /* ATSYNCSRV_SMS_List_Item_t */
    u32 nCurQueryIdx;   // array idx, not msg id
    //boolean                 bSIMBufferOpened;

    // delete
    u32 nCurDelIdx;

    // query next id
    u16 nQueryIdBase;

    // common
    ATSYNCSRV_StorageType_e nOPOn;
    ATSYNCSRV_MSG_CMD_e nCurCmd;
}ATSYNCSRV_SMS_OP_t;

typedef struct
{
    SMI_MsgID_t nMsgId;
    SMI_MsgLocation_e nMsgLoc;
}ATSYNCSRV_SMS_List_Item_t;

//---------------------------------------------------------
//                  D. Calendar
//---------------------------------------------------------

typedef struct
{
    u32 nPortID;
    u8 nModuleID;
    u8 nTotalCount;
    u8 nCountIndex;
    CalendarEvent_t *pCalendarEvent;
} ATSYNCSRV_CALENDAR_Entry_t;

/**
 * Mode Tree Properties
 */
#define cATSYNCSRV_ModeNumbers              13
#define cATSYNCSRV_DependencyNumbers                51


/**
 * Modes (index should begin from 0 and increase continuously)
 */
#define cATSYNCSRV_MODE_ATSyncSrv               0
#define cATSYNCSRV_MODE_Init                1
#define cATSYNCSRV_MODE_LoadData                2
#define cATSYNCSRV_MODE_Idle                3
#define cATSYNCSRV_MODE_Active              4
#define cATSYNCSRV_MODE_Active_Phonebook                5
#define cATSYNCSRV_MODE_Active_Calendar             6
#define cATSYNCSRV_MODE_Active_Message              7
#define cATSYNCSRV_MODE_Active_Message_DataProcess              8
#define cATSYNCSRV_MODE_Active_Message_SendResultRsp                9
#define cATSYNCSRV_MODE_Active_ToDoList             10
#define cATSYNCSRV_MODE_Active_Notepad              11
#define cATSYNCSRV_MODE_Active_Calllog              12

/*-------------------------------------------------------------------------*/

/*-------------------------------------------------------------------------*/
/**
 * Internal Events
 */
#define ATSYNCSRV_IEVT_INIT_OK                          (CLSID_ATSYNCSRV << 16 | 4)
#define ATSYNCSRV_IEVT_BACK_TO_IDLE                     (CLSID_ATSYNCSRV << 16 | 5)
#define ATSYNCSRV_IEVT_PHB_READ_ENTIRE_ENTRY_CNF        (CLSID_ATSYNCSRV << 16 | 6)
#define ATSYNCSRV_IEVT_PHB_READ_ENTRY_VCARD_CNF         (CLSID_ATSYNCSRV << 16 | 7)
#define ATSYNCSRV_IEVT_PHB_WRITE_ENTIRE_ENTRY_CNF       (CLSID_ATSYNCSRV << 16 | 8)
#define ATSYNCSRV_IEVT_PHB_WRITE_ENTRY_VCARD_CNF        (CLSID_ATSYNCSRV << 16 | 9)
#define ATSYNCSRV_IEVT_PHB_DELETE_ENTRY_CNF             (CLSID_ATSYNCSRV << 16 | 10)
#define ATSYNCSRV_IEVT_PHB_QUERY_STATUS_CNF             (CLSID_ATSYNCSRV << 16 | 11)
#define ATSYNCSRV_IEVT_MSGSRV_LIST_ALL_MSG_DONE         (CLSID_ATSYNCSRV << 16 | 12)
#define ATSYNCSRV_IEVT_MSG_SEND_RSP                     (CLSID_ATSYNCSRV << 16 | 13)
#define ATSYNCSRV_IEVT_MSGSRV_LIST_ALL_MSG_FAILED       (CLSID_ATSYNCSRV << 16 | 14)
#define ATSYNCSRV_IEVT_PHB_DELETE_ALL_ENTRY_CNF			(CLSID_ATSYNCSRV << 16 | 15)

/*-------------------------------------------------------------------------*/
/**
 * Macros for triggering internal events
 */
#define TRIGGER_EVT_ATSYNCSRV_IEVT_INIT_OK(pSM, p1, p2) MAE_TriggerEvent(pSM, ATSYNCSRV_IEVT_INIT_OK, p1, p2)
#define TRIGGER_EVT_ATSYNCSRV_IEVT_BACK_TO_IDLE(pSM, p1, p2)    MAE_TriggerEvent(pSM, ATSYNCSRV_IEVT_BACK_TO_IDLE, p1, p2)
#define TRIGGER_EVT_ATSYNCSRV_IEVT_PHB_READ_ENTIRE_ENTRY_CNF(pSM, p1, p2)   MAE_TriggerEvent(pSM, ATSYNCSRV_IEVT_PHB_READ_ENTIRE_ENTRY_CNF, p1, p2)
#define TRIGGER_EVT_ATSYNCSRV_IEVT_PHB_READ_ENTRY_VCARD_CNF(pSM, p1, p2)    MAE_TriggerEvent(pSM, ATSYNCSRV_IEVT_PHB_READ_ENTRY_VCARD_CNF, p1, p2)
#define TRIGGER_EVT_ATSYNCSRV_IEVT_PHB_WRITE_ENTIRE_ENTRY_CNF(pSM, p1, p2)  MAE_TriggerEvent(pSM, ATSYNCSRV_IEVT_PHB_WRITE_ENTIRE_ENTRY_CNF, p1, p2)
#define TRIGGER_EVT_ATSYNCSRV_IEVT_PHB_WRITE_ENTRY_VCARD_CNF(pSM, p1, p2)   MAE_TriggerEvent(pSM, ATSYNCSRV_IEVT_PHB_WRITE_ENTRY_VCARD_CNF, p1, p2)
#define TRIGGER_EVT_ATSYNCSRV_IEVT_PHB_DELETE_ENTRY_CNF(pSM, p1, p2)    MAE_TriggerEvent(pSM, ATSYNCSRV_IEVT_PHB_DELETE_ENTRY_CNF, p1, p2)
#define TRIGGER_EVT_ATSYNCSRV_IEVT_PHB_QUERY_STATUS_CNF(pSM, p1, p2)    MAE_TriggerEvent(pSM, ATSYNCSRV_IEVT_PHB_QUERY_STATUS_CNF, p1, p2)
#define TRIGGER_EVT_ATSYNCSRV_IEVT_MSGSRV_LIST_ALL_MSG_DONE(pSM, p1, p2)    MAE_TriggerEvent(pSM, ATSYNCSRV_IEVT_MSGSRV_LIST_ALL_MSG_DONE, p1, p2)
#define TRIGGER_EVT_ATSYNCSRV_IEVT_MSG_SEND_RSP(pSM, p1, p2)    MAE_TriggerEvent(pSM, ATSYNCSRV_IEVT_MSG_SEND_RSP, p1, p2)
#define TRIGGER_EVT_ATSYNCSRV_IEVT_MSGSRV_LIST_ALL_MSG_FAILED(pSM, p1, p2)  MAE_TriggerEvent(pSM, ATSYNCSRV_IEVT_MSGSRV_LIST_ALL_MSG_FAILED, p1, p2)



/**
 * Application structure
 */
typedef struct MMI_ATSYNCSRV_TAG
{
    DECLARE_FUNCTBL(IATSYNCSRV);  // function table pointer
    u32 refCnt;     // reference count
    SM_Mao_t app;       // StateMachine Application data
    SM_ModeId_t _lastActiveMode[cATSYNCSRV_ModeNumbers];    // Last child, current active child
    SM_ModeId_t _currentMode[1];
    /* Add custom fields below */
    IHandler *pClient;   // the instance of UsbAP, do not release.
    ISMI *pSMI;
    IMCI *pMCI;
    //ITXI                *pTXI;
    ATSYNCSRV_SMS_OP_t *pMsgData;
    IVCALSTORESRV *pIVCalStoreSrv;
    IClock *pIClock;
    //Phonebook Data
    IPHBSRV *pPhbSrv;
    IDataModel *pPhbCnfDM;
    void *pPhbCnfData;
    ModelListener_t tPhbSrvDMListener;
    mmiATSyncSrv_Status_e eATSyncSrvStatus;
    MmiPhbSrvFunId_e s32PhbSrvFid;
    ATSYNCSRV_StorageType_e eCurrentPhbStorageType;
    u32 u32PhbSrvCheckValue;
    u8 nPhbPortId;
    u8 ModuleID;
    MAE_EventId nPhbIndEventID;
    u16 nEntryIndex;
    u8 WriteMultiple;    //Only used in Write Entry command
    u8 MutipleTotal;     //Only used in Write Entry command
    //End of Phonebook Data
    /*General*/
    ATCmdSegmention_t sATCmdSegProcess;

    /* TodoList */
    //ToDoList_TaskListData_t* pTaskListData;
    IArrayModel *pTaskListItemModel;     // the data items of every element is in MMI_FileMgrApp_ItemData_t
    ITaskDBMgr *pTaskDBMgr;
    boolean bIsNeedWaitCNF;
    ATSYNCSRV_MultiSegmentCmd_t *pMultiSegmentCmd;
    boolean bSegCmdNeedFree;
} MMI_ATSYNCSRV;

MAE_Ret _ATSYNCSRV_CreateMultiSegmentCmd(u8 nModuleID, u32 nPortID, u8 nGroupID, u8 nCmdID, u8 nFunID, ATSYNCSRV_MultiSegmentCmd_t **ppMultiSegmentCmd);
MAE_Ret _ATSYNCSRV_CreateMultiSegmentCmdItem(ATSYNCSRV_ItemType_e eItemType, ATSYNCSRV_ItemValueType_e eItemValueType, u32 nIndex, u32 nItemValue, u32 nItemLen, ATSYNCSRV_MultiSegmentCmd_Item_t **ppMultiSegmentCmdItem);
void _ATSYNCSRV_FreeMultiSegmentCmd(ATSYNCSRV_MultiSegmentCmd_t *pMultiSegmentCmd);
MAE_Ret _ATSYNCSRV_CalendarQueryCapacity_ind(MMI_ATSYNCSRV *pThis, void *pSM, ATSYNCSRV_MultiSegmentCmd_t *pMultiSegmentCmd);
MAE_Ret _ATSYNCSRV_CalendarQueryUsedCount_ind(MMI_ATSYNCSRV *pThis, void *pSM, ATSYNCSRV_MultiSegmentCmd_t *pMultiSegmentCmd);
MAE_Ret _ATSYNCSRV_CalendarQueryNextID_ind(MMI_ATSYNCSRV *pThis, void *pSM, ATSYNCSRV_MultiSegmentCmd_t *pMultiSegmentCmd);
MAE_Ret _ATSYNCSRV_CalendarQuerySupportedField_ind(MMI_ATSYNCSRV *pThis, void *pSM, ATSYNCSRV_MultiSegmentCmd_t *pMultiSegmentCmd);
MAE_Ret _ATSYNCSRV_CalendarReadEntireEntry_ind(MMI_ATSYNCSRV *pThis, void *pSM, ATSYNCSRV_MultiSegmentCmd_t *pMultiSegmentCmd);
MAE_Ret _ATSYNCSRV_CalendarWriteEntireEntry_ind(MMI_ATSYNCSRV *pThis, void *pSM, ATSYNCSRV_MultiSegmentCmd_t *pMultiSegmentCmd);
MAE_Ret _ATSYNCSRV_CalendarWriteEntryV2_ind(MMI_ATSYNCSRV *pThis, void *pSM, ATSYNCSRV_CALENDAR_Entry_t *pATSYNCSRV_CALENDAR_Entry);
MAE_Ret _ATSYNCSRV_CalendarDeleteEntry_ind(MMI_ATSYNCSRV *pThis, void *pSM, ATSYNCSRV_MultiSegmentCmd_t *pMultiSegmentCmd);

#endif /* __MMI_ATSYNCSRV_PRIV_H__ */
