/**
* @file mmi_playlistsrv_priv.h
*
* Service without using State Machine - PLAYLISTSRV
* Generated by XFSM v1.0, CodeVer=v0.24
*
* Class Id: CLSID_PLAYLISTSRV
* Interface Id: IID_PLAYLISTSRV
*
* @version $Id$
*/
#ifndef __MMI_PLAYLISTSRV_PRIV_H__
#define __MMI_PLAYLISTSRV_PRIV_H__

#include "mmi_mae_common_def.h"
#include "mmi_playlistsrv.h"
#include "mmi_mae_helper.h"
#include "mmi_mae_filemgr.h"
#include "mmi_common_util.h"
#include "mmi_common_custom.h"
#include "mmi_mae_md5.h"

#define PLAYLISTSRV_IEVT_LOAD_PLAYLIST_CONTENT          (CLSID_PLAYLISTSRV << 16 | 1)
#define PLAYLISTSRV_IEVT_DELETE_PLAYLIST_CONTENT        (CLSID_PLAYLISTSRV << 16 | 2)
#define PLAYLISTSRV_IEVT_MOVE_PLAYLIST_CONTENT          (CLSID_PLAYLISTSRV << 16 | 3)
#define PLAYLISTSRV_IEVT_APPEND_CONTENT                 (CLSID_PLAYLISTSRV << 16 | 4)
#define PLAYLISTSRV_IEVT_WRITE_PLAYLIST_CONTENT         (CLSID_PLAYLISTSRV << 16 | 5)
#define PLAYLISTSRV_IEVT_FINSH_OPERATE                  (CLSID_PLAYLISTSRV << 16 | 6)

#define PLAYLISTSRV_PALYLIST_ITEMS_GROW_NUM (0)

#define PLAYLISTSRV_ONE_LINE_MAX_WORDS (270)

//8+5+1+255
#define PLAYLISTSRV_M3U_ELEMENT_INFO_LINE_MAX_WORDS (PLAYLISTSRV_ONE_LINE_MAX_WORDS)
#define PLAYLISTSRV_M3U_ELEMENT_DURATION_MAX_WORDS (5)

#define PLAYLISTSRV_TIMER   (5)
#define LOADPLAYLIST_GETLINE_SIZE_ONCE   (32768)
#define GETM3U_GETLINE_SIZE_ONCE    (1024)

#define PLAYLISTGETFILE_NUM    (50)

typedef enum
{
    ENCODING_FIRST
   ,ENCODING_GB = ENCODING_FIRST
   ,ENCODING_BIG5
   ,ENCODING_UTF8
   ,ENCODING_UCS2
   ,ENCODING_LAST = ENCODING_UTF8
} PLAYLISTSRV_Encoding_e;

//M3U Info
#define M3U_ELEMENT_INFO_POSITOPN_BITS (20)
#define M3U_ELEMENT_FILE_PATH_OFFSET_BITS (12)
#define M3U_ELEMENT_FILE_PATH_OFFSET_MASK (0XFFF)
//Get
#define GET_M3U_ELEMENT_INFO_LINE_POSITION(_Location) \
    (u32)((_Location)>>M3U_ELEMENT_FILE_PATH_OFFSET_BITS)
#define GET_M3U_ELEMENT_PATH_LINE_POSITION(_Location) \
    (u32)(((_Location)>>M3U_ELEMENT_FILE_PATH_OFFSET_BITS)+(M3U_ELEMENT_FILE_PATH_OFFSET_MASK&(_Location)))
//Set
#define SET_M3U_ELEMENT_LOCATION(_InfoPos,_PathOffset) \
    (u32)(((_InfoPos)<<M3U_ELEMENT_FILE_PATH_OFFSET_BITS)+(_PathOffset))

#define MMI_MD5HASH_SIZE 16 // MD5 hash length 16 Byte

typedef struct
{
    const u8 *pM3uHeader;
    const u8 *pM3uEntryPrefix;
    u16 pM3uComma;
    const u8 *pM3uCommas;
    const u8 *pM3uNewline;
    u8 M3uHeaderSize;
    u8 M3uEntryPrefixSize;
    u8 M3uCommasSize;
    u8 M3uNewlineSize;
    u8 WordLength;
} PLAYLISTSRV_M3U_INFO;


typedef struct
{
    u8 *pCacheBuffer;           ///<Cache Buffer
    u8 *pDelimiter;             ///<No Need To Free.
    u32 nCacheBufferPos;        ///<Current position in cache buffer.
    u32 nCacheBufferSize;       ///<Cache buffer size.
    u32 nCacheBufferDataSize;   ///<Load data to cache buffer size.
    u32 nCacheBufferCusFilePos; ///<Cache buffer current in file posiotion.
    u16 nSizeOfDeleimiter;      ///<
} PLAYLISTSRV_CacheBufferInfo;
//=====================================
//Request related structure.

typedef enum
{
    REQUEST_LOAD_PLAYLIST_CONTENT = PLAYLISTSRV_IEVT_LOAD_PLAYLIST_CONTENT
   ,REQUEST_DELETE_PLAYLIST_CONTENT = PLAYLISTSRV_IEVT_DELETE_PLAYLIST_CONTENT
   ,REQUEST_MOVE_PLAYLIST_CONTENT = PLAYLISTSRV_IEVT_MOVE_PLAYLIST_CONTENT
   ,REQUEST_APPEND_CONTENT = PLAYLISTSRV_IEVT_APPEND_CONTENT
} PLAYLISTSRV_Request_Type_e;

typedef struct
{
    PLAYLISTSRV_Request_Type_e RequestType;
    IDataModel *pIPlayListDataMdl;
    u32 nSrvClientInsId;
    u32 pfnCb;
    bool bAppendFullM3u;
} PLAYLISTSRV_Request_Info;

//=====================================
//Write related structure.
#define MAX_READ_BLOCK 4
#define WRITE_BUFFER_SIZE (16384) //16k
#define READ_BUFFER_SIZE   (16384) // 16KB

typedef struct
{
    u32 nStarPos;
    u32 nEndPos;
} PLAYLISTSRV_READ_BOLCK;


typedef struct
{
    PLAYLISTSRV_Request_Type_e RequestType;
    u8 *pWriteBuffer;           ///<Write Buffer    //WRITE_BUFFER_SIZE
    u32 nWriteBufferSize;       ///<Write buffer size.  //WRITE_BUFFER_SIZE
    PLAYLISTSRV_READ_BOLCK ReadBlock[MAX_READ_BLOCK];
    IDataModel *pReadPlayListDataModel;
} PLAYLISTSRV_WriteFileInfo;
//=====================================
//Append related structure.
typedef struct
{
    u8 *pWriteBuffer;           ///<Write Buffer        //WRITE_BUFFER_SIZE
    u32 nWriteBufferSize;       ///<Write buffer size.  //WRITE_BUFFER_SIZE
    u32 nRemainBufferSize;
    u32 nCurCntIdx;
    u32 nCntArraySize;
    IDataModel *pPlayListDataModel;
    u32 nFileMgrHandleId;
    PLAYLISTSRV_ListType_e nListType;
    const PLAYLISTSRV_M3U_INFO *pM3UInfo;
    u32 nFileLastPos;
} PLAYLISTSRV_AppendFileInfo;
//=====================================

typedef enum
{
    PARSING_NONE
   ,PARSING_TITLE
   ,PARSING_DONE
   ,PARSING_INFO_LINE
   ,PARSING_PATH_LINE,
} PLAYLISTSRV_ParsingState_e;

typedef enum
{
    OPERATE_SUCCESS
   ,OPERATE_FAILED
   ,OPERATE_SPACE_FULL
   ,OPERATE_OUT_OF_MAX_ITEMS
} PLAYLISTSRV_Operate_Result_e;

typedef struct
{
    MAE_WChar strLastPlaylist[FILEMGR_MAX_FILEPATH_SIZE];
    union
    {
        u32 nLastSongIdx;
    }_lastContentData;
    u8 pDigest[MMI_MD5HASH_SIZE];
} PLAYLISTSRV_StoredPlaybackInfo_t;

/**
 * Application structure
 */
typedef struct MMI_PLAYLISTSRV_TAG
{
    DECLARE_FUNCTBL(IPLAYLISTSRV);    // function table pointer
    u32 refCnt;     // reference count
    /* Add custom fields below */
    MAE_WChar *pFileBuffer; // the pointer used by readline function to keep the output read from file
    u8 *pFileBuffer_;       // the pointer used by readline function to keep the output read from file
    u32 nSizeOfFileBuffer;  // the size (in bytes) of the pFileBuffer
    PLAYLISTSRV_WriteFileInfo *pWriteFileInfo;
    PLAYLISTSRV_Request_Info *pRequestInfo;
    PLAYLISTSRV_AppendFileInfo *pAppendFileInfo;
    boolean bInIdleMode;
    boolean bCancelOperationl;
    u32 nFPOffset;
    PLAYLISTSRV_FileOpData_t *pFileOpData;
} MMI_PLAYLISTSRV;

#endif /* __MMI_PLAYLISTSRV_PRIV_H__ */
