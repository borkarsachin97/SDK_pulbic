/**
* @file mmi_pedometersrv_priv.h
*
* Service without using State Machine - PEDOMETERSRV
* Generated by XFSM v1.0, CodeVer=v0.24
*
* Class Id: CLSID_PEDOMETERSRV
* Interface Id: IID_PEDOMETERSRV
*
* @version $Id$
*/
#ifndef __MMI_PEDOMETERSRV_PRIV_H__
#define __MMI_PEDOMETERSRV_PRIV_H__

#include "mmi_mae_common_def.h"
#include "mmi_pedometersrv.h"
#include "mmi_mae_clock_types.h"
#include "mmi_mae_sensormgr_types.h"
#include "mmi_mae_forward.h"

#define PEDOMETERSRV_STAT_DATA_PERWEEK (7)
#define PEDOMETERSRV_STAT_DATA_PERMONTH (31)


typedef enum PEDOMETER_ACTINO_e
{
    PEDOMETER_ACTION_STEP = 0
   ,PEDOMETER_ACTION_UNKNOWN
}PEDOMETER_ACTINO_et;

typedef enum PEDOMETER_STATUS_e
{
    PEDOMETER_STATUS_PROCESSING = 0
   ,/**< indicate that the detector need more g-sensor to detector the motion */
    PEDOMETER_STATUS_DETECTED        /**< indicate that the detector found a specific motion behavior,
                                     the motion is set the the 3rd parameter */
}PEDOMETER_STATUS_et;

enum
{
    STEP_WAIT = 0
   ,/**< Wait for reach STEP_ONE */
    STEP_ONE
   ,/**< Record first G-Value */
    STEP_DONE
   ,/**< Step is detected */
    STEP_DELAY  /**< After Step is detected, stay in this state for a while */
};

typedef struct _PedometerActionDetector_s
{
    boolean xPosDir;
    u32 xFirstStepSecCount;
    u16 xFirstStepTickCount;
    u8 xStep;
    boolean yPosDir;
    u32 yFirstStepSecCount;
    u16 yFirstStepTickCount;
    u8 yStep;
    s32 result;
    GSensorInfo_t lastInfo;
}_PedometerActionDetector_st;

/**
 * Application structure
 */
typedef struct MMI_PEDOMETERSRV_TAG
{
    DECLARE_FUNCTBL(IPEDOMETERSRV);   // function table pointer
    u32 refCnt;     // reference count
    /* Add custom fields below */
    IShell *pIShell;
    ICFGSrv *pICFGSrv;
    ISENSORMGR *pISensorMgr;
    IBattery *pIBattery;
    MAE_Notifier_t *pNotifier;
    IClock *pIClock;

    boolean bCountingEnable;
    boolean bReminderEnable;
    u32 u32TotalSteps;
    u16 u16Age;
    double dbHeight;
    double dbWeight;
    u16 u16GoalSteps;
    s32 s32PreviousXValue;
    s32 s32PreviousYValue;

    MAE_WChar pwUserName[MAX_PEDOMETER_USERNAME_LEN];
    PedometerDay_t tStartDay;
    PedometerDay_t tCurDay;

    PedometerSexType_e eSexType;
    PedometerUnitType_e eUnitsType;
    PedometerResetType_e eResetType;
    PedometerStatItem_t tCurStatRecord;
    PedometerStatItem_t tYearStatRecord[MAX_DAYS_PER_YEAR];

    ModelListener_t BattModelListener;
    ModelListener_t SensorModelListener;

    ClockListener_t IClockListener;

    _PedometerActionDetector_st tActionDetector;
} MMI_PEDOMETERSRV;

__inline static MAE_Ret _PEDOMETERSRV_InitSrv(MMI_PEDOMETERSRV *pThis);
void _PEDOMETERSRV_Dstor(MMI_PEDOMETERSRV *pThis);

#endif /* __MMI_PEDOMETERSRV_PRIV_H__ */
