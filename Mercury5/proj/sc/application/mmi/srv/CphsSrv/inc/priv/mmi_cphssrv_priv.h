/**
* @file mmi_cphssrv_priv.h
*
* State Machine Service - CPHSSRV
* Generated by XFSM v1.0, CodeVer=v0.24
*
* Class Id: CLSID_CPHSSRV
*
*
* @version $Id: mmi_cphssrv_priv.h 38890 2009-08-29 16:22:38Z zinc.chen $
*/
#ifndef __MMI_CPHSSRV_PRIV_H__
#define __MMI_CPHSSRV_PRIV_H__

#include "mmi_mae_common_def.h"
#include "mmi_mae_sm_defs.h"
#include "mmi_cphssrv.h"
#include "mmi_cphssrv_sm.h"
#include "mmi_mae_notifier.h"
#include "mmi_mae_vectormodel.h"
#include "mmi_mae_msgdispatcher.h"
#include "mmi_mae_datamodel.h"

#include "mmi_if_cphs.h"
#include "api_mrl_cphs.h"
#include "mmi_simsrv.h"
#include "mmi_common_notallow_cfg.h"

#define CHPSSRV_SIM_NUM 2
#define CHPSSRV_VOICE_MAIL_LINE_NUM 2
#define CHPSSRV_INTERNATION_NUMBER 0x2B  //+

typedef enum
{
    CPHSSRV_REQUEST_TYPE_NONE = 0
,                  //  none
    CPHSSRV_REQUEST_TYPE_QUERY_VM_STATUS
,           //  voice mail status
    CPHSSRV_REQUEST_TYPE_QUERY_LINE
,                //  query line
    CPHSSRV_REQUEST_TYPE_QUERY_MAIL_BOX
,            //  query mail box
    CPHSSRV_REQUEST_TYPE_SET_MAIL_BOX_NUMBER
,       //  set mail box number
    CPHSSRV_REQUEST_TYPE_QUERY_VM_IND_ON_OFF
,       //  query voice mail functionality active/deactive
    CPHSSRV_REQUEST_TYPE_SET_VM_IND_ON_OFF          //  active/deactive voice mail indicator
} CPHSSRV_REQUEST_TYPE_e;

typedef struct
{
    void *pCaller;
    CPHSSRV_REQUEST_TYPE_e eRequestType;
    u8 u8DualMode;
    void *pSettings;
} CPHSSRV_REQUEST_t;

typedef struct
{
    MMI_CPHSSRV_Line_Service_e Line;
    MMI_CPHS_Type_e Type;
    u8 pStrNumber[MailNumberSize];
} CPHSSRV_MAIL_BOX_NUMBER_SET_t;

typedef struct
{
    MMI_CPHS_Mode_e Mode;
    MMI_CPHS_FCTLD_e Fctld;
} CPHSSRV_SET_REQUEST_t;

enum
{
    CPHSSRV_SIMSRV_READY = 1
   ,CPHSSRV_MASTER_READY = 2
   ,CPHSSRV_SLAVE_READY = 4
   ,CPHSSRV_READY_ALL = 7
   ,CPHSSRV_SIM_CHANGE = 8
};
typedef u8 CPHSSRV_READY_MASK_e;

/**
 * Application structure
 */
typedef struct MMI_CPHSSRV_TAG
{
    DECLARE_FUNCTBL(ICPHSSRV);    // function table pointer
    u32 refCnt;     // reference count
    SM_Mao_t app;       // StateMachine Application data
    SM_ModeId_t _lastActiveMode[cCPHSSRV_ModeNumbers];  // Last child, current active child
    SM_ModeId_t _currentMode[1];
    /* Add custom fields below */
    ISIMSRV *pSimSrv;
    MAE_Notifier_t *pNotifier;
    IVectorModel *pWaitingQueue;
    boolean bIsBusy;
    boolean bIsTerminate;
    void *pCaller;
    MMI_CPHSSRV_Line_Service_e ActiveLine[CHPSSRV_SIM_NUM];
    MMI_CPHSSRV_VM_Status_e VMStatus[CHPSSRV_SIM_NUM];
    COMMON_SIM_CARD_STATUS_e iSimStatus;

    boolean bSIMMailBoxNumber[CHPSSRV_SIM_NUM][CHPSSRV_VOICE_MAIL_LINE_NUM];
    boolean bSIMResetNumber[CHPSSRV_SIM_NUM];
    boolean bUpdatePhoneMailBoxNumber[CHPSSRV_SIM_NUM][CHPSSRV_VOICE_MAIL_LINE_NUM];
    MMI_CPHS_Mode_e VMInd[CHPSSRV_SIM_NUM]; //The voice mail notification is active/deactive/interrogate
    MMI_CPHS_MailBoxNumber_t MailBoxNumber[CHPSSRV_SIM_NUM][CHPSSRV_VOICE_MAIL_LINE_NUM];
    CPHSSRV_READY_MASK_e ReadyMask;
} MMI_CPHSSRV;

static void MMI_CPHSSRV_ResetPhoneVoicemailNumber(MMI_CPHSSRV *pThis, u8 SIM_ID);
static void MMI_CPHSSRV_GetPhoneVoicemailNumber(MMI_CPHSSRV *pThis, u8 SIM_ID, MMI_CPHSSRV_Line_Service_e Line);
static MAE_Ret MMI_CPHSSRV_SetPhoneVoicemailNumber(MMI_CPHSSRV *pThis, u8 SIM_ID, MMI_CPHSSRV_Line_Service_e Line, MMI_CFGSRV_VoiceMail_t *pNum);

static void MMI_CPHSSRV_GetTheInitData(MMI_CPHSSRV *pThis);
static boolean MMI_CPHSSRV_CheckSIMReady(MMI_CPHSSRV *pThis);
static boolean MMI_CPHSSRV_CheckActiveSIMID(MMI_CPHSSRV *pThis, u32 SIMID);

#endif /* __MMI_CPHSSRV_PRIV_H__ */
