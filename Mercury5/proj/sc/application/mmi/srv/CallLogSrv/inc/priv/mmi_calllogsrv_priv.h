/**
* @file mmi_calllogsrv_priv.h
*
* State Machine Service - CALLLOGSRV
* Generated by XFSM v1.0, CodeVer=v0.24
*
* Class Id: CLSID_CALLLOGSRV
*
*
* @version $Id: mmi_calllogsrv_priv.h 37568 2009-08-11 10:16:33Z otto.wu $
*/
#ifndef __MMI_CALLLOGSRV_PRIV_H__
#define __MMI_CALLLOGSRV_PRIV_H__

/*=============================================================*/
// Include files
/*=============================================================*/

#include "mmi_mae_common_def.h"
#include "mmi_mae_sm_defs.h"
#include "mmi_calllogsrv.h"
#include "mmi_calllogsrv_sm.h"
#include "mmi_log.h"
#include "mmi_cfgsrv.h"
#include "mmi_simsrv.h"
#include "mmi_phbsrv_data_handle.h"
#include "mmi_phbsrv_utility.h"
#include "mmi_phbsrv.h"
#ifdef __APP_MMI_PRIVATEPROTECT__
#include "mmi_privateprotectsrv.h"
#endif

/*=============================================================*/
// Macro definition
/*=============================================================*/
#define MMI_CALLLOGSRV_CHECK_MISSCALL_TIMER 1000

#define MAE_ERRORIF(n,s)                                                    \
                            {                                               \
                                if(n != MAE_RET_SUCCESS)                    \
                                {                                           \
                                    LOG_ERROR(MMI_LEVEL_CALLLOG, s);        \
                                }                                           \
                            }

#define MAE_BREAKIF(n,s)                                                    \
                            {                                               \
                                if(n != MAE_RET_SUCCESS)                    \
                                {                                           \
                                    LOG_ERROR(MMI_LEVEL_CALLLOG, s);        \
                                    break;                                  \
                                }                                           \
                            }

#define CL_ERRORIF(n,s)                                                     \
                            {                                               \
                                if(n != MMI_CALLLOG_SRV_RESULT_OK)          \
                                {                                           \
                                    LOG_ERROR(MMI_LEVEL_CALLLOG, s);        \
                                }                                           \
                            }

#define CL_BREAKIF(n,s)                                                     \
                            {                                               \
                                if(n != MMI_CALLLOG_SRV_RESULT_OK)          \
                                {                                           \
                                    LOG_ERROR(MMI_LEVEL_CALLLOG, s);        \
                                    break;                                  \
                                }                                           \
                            }

#define CHECK_INIT_REQCNF(req, req_t, cnf, cnf_t, cnf_str)                                              \
                {                                                                                       \
                    if(pThis->pIModelCnf)                                                               \
                    {                                                                                   \
                        cnf = (cnf_t *)MALLOC(sizeof(cnf_t));                                           \
                        if (cnf == NULL)                                                                \
                        {                                                                               \
                            /*LOG_ERROR(MMI_LEVEL_CALLLOG,"[CALLLOGSRV] : malloc %s error", cnf_str);*/ \
                            LOG_ERROR(MMI_LEVEL_CALLLOG,"[CALLLOGSRV] : malloc cnf string error");      \
                            break;                                                                      \
                        }                                                                               \
                        cnf->iSrvResult = MAE_RET_SUCCESS;                                              \
                    }                                                                                   \
                    req = (req_t *) IDATAMODEL_GetData(pThis->pIModelReq, &u32ReqDataLen);              \
                    if (req == NULL || u32ReqDataLen != sizeof(req_t))                                  \
                    {                                                                                   \
                        LOG_ERROR(MMI_LEVEL_CALLLOG,"[CALLLOGSRV] : get model data error");             \
                        if(cnf)                                                                         \
                        {                                                                               \
                            cnf->iSrvResult = MAE_RET_FAILED;                                           \
                        }                                                                               \
                        break;                                                                          \
                    }                                                                                   \
                }

#define INIT_CNF(cnf, cnf_t, cnf_str)                                                                   \
                {                                                                                       \
                        cnf = (cnf_t *)MALLOC(sizeof(cnf_t));                                           \
                        if (cnf == NULL)                                                                \
                        {                                                                               \
                            /*LOG_ERROR(MMI_LEVEL_CALLLOG,"[CALLLOGSRV] : malloc %s error", cnf_str);*/ \
                            LOG_ERROR(MMI_LEVEL_CALLLOG,"[CALLLOGSRV] : malloc cnf string error");      \
                            break;                                                                      \
                        }                                                                               \
                        cnf->iSrvResult = MAE_RET_SUCCESS;                                              \
                }

#define MALLOC_INIT_FULLRECORD(ptFullRecord, cnf)                                                                             \
                {                                                                                               \
                    ptFullRecord = (Mmi_CallLogFullRecord_t *)MALLOC(sizeof(Mmi_CallLogFullRecord_t));          \
                    if (ptFullRecord == NULL)                                                                   \
                    {                                                                                           \
                        LOG_ERROR(MMI_LEVEL_CALLLOG,"[CALLLOGSRV] : MALLOC Mmi_CallLogFullRecord_t error");     \
                        if(cnf)                                                                                 \
                        {                                                                                       \
                            cnf->iSrvResult = MAE_RET_OUT_OF_MEMORY;                                            \
                        }                                                                                       \
                        break;                                                                                  \
                    }                                                                                           \
                    MEMSET(ptFullRecord, 0, sizeof(Mmi_CallLogFullRecord_t));                                   \
                }

/*=============================================================*/
// Data type definition
/*=============================================================*/

/**
 * Application structure
 */
typedef struct MMI_CALLLOGSRV_TAG
{
    DECLARE_FUNCTBL(ICALLLOGSRV); // function table pointer
    u32 refCnt;     // reference count
    SM_Mao_t app;       // StateMachine Application data
    SM_ModeId_t _lastActiveMode[cCALLLOGSRV_ModeNumbers];   // Last child, current active child
    SM_ModeId_t _currentMode[1];

    /* Add custom fields below */
    Mmi_CallLogControlBuffer_t *ptMmi_CallLogCB;
    IDataModel *pIModelMissedCount;

    u32 u32LastCallTimeBuf;
    u32 u32MOCallTimeBuf;
    u32 u32MTCallTimeBuf;
    u32 u32LastCallTimeBufSlave;
    u32 u32MOCallTimeBufSlave;
    u32 u32MTCallTimeBufSlave;
//#ifdef __VT_3G324M__
    u32 u32VideoLastCallTimeBuf;
    u32 u32VideoMOCallTimeBuf;
    u32 u32VideoMTCallTimeBuf;
    u32 u32VideoLastCallTimeBufSlave;
    u32 u32VideoMOCallTimeBufSlave;
    u32 u32VideoMTCallTimeBufSlave;
//#endif
	u8 u8CalllogReady;
    boolean bIsNeedInit;
    boolean bIsCheckMissedCallDone;
    u16 *pu16MissedCount;
#if !defined(__MMI_PHB_DISABLE_BLACKLIST__) && defined(__MMI_CALLLOG_SUPPORT_BKLOG__)
    u16 *pu16BlockCallCount;
    IDataModel	 *pIModelBlockCallCount;
    boolean bTerminated;
#endif
    /*Requests Data Structure*/
    Mmi_CallLogSrvAddLogReq_t tAddLogReq;
    Mmi_CallLogSrvReadFullLogReq_t tReadFullLogReq;
    Mmi_CallLogSrvDeleteOneLogReq_t tDeleteOneLogReq;
    Mmi_CallLogSrvDeleteAllLogsReq_t tDeleteAllLogsReq;
    Mmi_CallLogSrvResetCallTimeACReq_t tResetCallTimeACReq;
    Mmi_CallLogSrvAddCallDurationReq_t tAddCallDurationReq;

    /* Model to callback to the caller AP */
    IDataModel *pIModelCnf;
    /* Data Structure to callback to the caller AP */
    CallogSrvCallbackData_t *pCallbackData;

    boolean bIsTerminate;
    // master reset
    ModelListener_t tCFGSrvMdl;
    ICFGSrv *pICFGSrv;
    // IMSI
    ISIMSRV *pISIMSrv;

    MAE_Notifier_t *pNotifier; //Notify the APP/Service who are interested to CallLog event
    IPHBSRV *pIPhbSrv;
#ifdef __APP_MMI_PRIVATEPROTECT__
    IPRIVATEPROTECTSRV *pIPrivateprotectSrv;
#endif
	
} MMI_CALLLOGSRV;

/*=============================================================*/
// Local function prototype declaration and definition
/*=============================================================*/

#endif /* __MMI_CALLLOGSRV_PRIV_H__ */
