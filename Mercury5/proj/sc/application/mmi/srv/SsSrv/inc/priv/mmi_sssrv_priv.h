/**
* @file mmi_sssrv_priv.h
*
* State Machine Service - SSSRV
* Generated by XFSM v1.0, CodeVer=v0.24
*
* Class Id: CLSID_SSSRV
*
*
* @version $Id: mmi_sssrv_priv.h 38890 2009-08-29 16:22:38Z zinc.chen $
*/
#ifndef __MMI_SSSRV_PRIV_H__
#define __MMI_SSSRV_PRIV_H__

#include "mmi_mae_common_def.h"
#include "mmi_mae_sm_defs.h"
#include "mmi_sssrv.h"
#include "mmi_sssrv_sm.h"
#include "mmi_mae_notifier.h"
#include "mmi_mae_vectormodel.h"
#include "mmi_simsrv.h"

typedef union
{
    SSSRV_CallDivertReq_t CallDivertReq;
    SSSRV_CallBarringReq_t CallBarringReq;
    SSSRV_CallWaitingReq_t CallWaitingReq;
    SSSRV_ChangeBarringPwdReq_t BarringPwdReq;
    SSSRV_USSDReq_t USSDReq;
    SSSRV_UserGroupReq_t CugReq;
    SSSRV_AOCReq_t AOCReq;
    SSSRV_ACMReq_t ACMReq;
    SSSRV_ACMMaxReq_t AMMReq;
    SSSRV_PUCReq_t PUCReq;
    SSSRV_ClxInt_t ClxReq;
} SSSRV_UNION_REQUEST_INFO_t;

typedef struct
{
    void *pOwner;                               /*Record SSSRV point for free waiting queue function*/
    void *pCaller;                          /*Record request caller*/
    SSSRV_REQUEST_TYPE_e eRequestType;  /*Record request type */
    SSSRV_UNION_REQUEST_INFO_t RequestInfo; /*Record request information */
    u8 DualMode;        /*Record request Dual ID*/
}SSSRV_REQUEST_t;

/**
 * Application structure
 */
typedef struct MMI_SSSRV_TAG
{
    DECLARE_FUNCTBL(ISSSRV);  // function table pointer
    u32 refCnt;     // reference count
    SM_Mao_t app;       // StateMachine Application data
    SM_ModeId_t _lastActiveMode[cSSSRV_ModeNumbers];    // Last child, current active child
    SM_ModeId_t _currentMode[1];
    /* Add custom fields below */
    // MAE_Notifier_t       *pNotifier;             //Notify the APP/Service who are interested to MM event
    IVectorModel *pWaitingQueue;          //to keep requests if SSSRV is busy to process it immediately
    SSSRV_REQUEST_t *pCallDivertReqData;     //to keep call divert request data
    SSSRV_REQUEST_t *pCallBarringReqData;    //to keep call barring request data
    SSSRV_REQUEST_t *pBarringPwdReqData;    //to keep change barring password request data
    SSSRV_REQUEST_t *pCallWaitingReqData;   //to keep call waiting request data
    SSSRV_REQUEST_t *pUSSDReqData;          //to keep USSD request data
    SSSRV_REQUEST_t *pCugSetReqData;        //to keep set CUG request data
    SSSRV_REQUEST_t *pCugQueReqData;        //to keep query CUG request data
    SSSRV_REQUEST_t *pAoCSetReqData;        //to keep set AoC request data
    SSSRV_REQUEST_t *pAoCQueReqData;        //to keep query AoC request data
    SSSRV_REQUEST_t *pACMReqData;           //to keep ACM request data
    SSSRV_REQUEST_t *pAMMReqData;           //to keep AMM request data
    SSSRV_REQUEST_t *pPUCReqData;           //to keep PUC request data
    SSSRV_REQUEST_t *pCLXReqData;           //to keep Line Identity request data

    MMI_SSSRV_Status_e ServiceStatus;           //to keep SS Service Status
    //void* pCaller;

    ISIMSRV *pSimSrv; //Keep SimSrv instance
} MMI_SSSRV;

/**
* mmi_AddItemIntoWaitingQueue
* @brief        Add request command into waiting queue and post event to process item.
*
* @param    pThis       The pointer of ISSSRV object.
* @param    pData       The pointer of request command data.
*
* @retval       MAE_Ret value
 */
MAE_Ret mmi_SSSRV_AddItemIntoWaitingQueue(MMI_SSSRV *pThis, void *pData);


/**
* mmi_CheckWaitingQueue
* @brief        Check if waiting queue empty and get the first item to process.
*
* @param    pThis       The pointer of ISSSRV object.
 */
static void mmi_SSSRV_CheckWaitingQueue(MMI_SSSRV *pThis);


/**
* mmi_WaitingQueueFree
* @brief        To free waiting queue.
*
* @param    pThis       The pointer of SIMSRV_SEC_REQ_t object.
 */
static void mmi_SSSRV_WaitingQueueFree(void *pData);

static void _mmi_SSSRV_Release(MMI_SSSRV *pThis);

/**
To handle USSD CNF data.
**/
void _mmi_SSSRV_Handle_USSD_CNF(MMI_SSSRV *pThis, u32 param1, u32 param2);

/**
Network timeout handling function.
**/
void _mmi_SSSRV_NetworkTimeoutTimerCB(void *data);


#endif /* __MMI_SSSRV_PRIV_H__ */
