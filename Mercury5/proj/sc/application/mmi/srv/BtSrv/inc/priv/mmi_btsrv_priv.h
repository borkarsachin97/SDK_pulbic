/**
* @file mmi_btsrv_priv.h
*
* State Machine Service - BTSRV
* Generated by XFSM v1.0, CodeVer=v0.24
*
* Class Id: CLSID_BTSRV
*
*
* @version $Id$
*/
#ifndef __MMI_BTSRV_PRIV_H__
#define __MMI_BTSRV_PRIV_H__

#include "mmi_mae_common_def.h"
#include "mmi_mae_sm_defs.h"
#include "mmi_btsrv.h"
#include "mmi_btsrv_atcmd.h"
#include "mmi_btsrv_sm.h"
#include "mmi_mae_notifier.h"
#include "mmi_mae_vectormodel.h"
#include "mmi_cfgsrv.h"
#include "mmi_mmssrv.h"
#include "mmi_audioplayersrv.h"
#include "mmi_common_notallow_cfg.h"
#include "mmi_common_rai_id.h"
#include "mmi_btsrv_util.h"
#include "mmi_btobexsrv.h"
#include "DListItf.h"

//#define __BTSRV_WRITE_BT_ADDR__

#ifndef __BLUETOOTH_OBEX_MMI__
#define BTOBEXSRV_EVT_SEND_STATUS_IND               (CLSID_BTSRV << 16 | 100)
#define BTOBEXSRV_EVT_RECV_STATUS_IND               (CLSID_BTSRV << 16 | 101)
#define BTOBEXSRV_EVT_IMPORT_STATUS_IND             (CLSID_BTSRV << 16 | 102)
#define BTOBEXSRV_EVT_TRANS_PROGRESS_IND            (CLSID_BTSRV << 16 | 103)
#endif


enum
{
    BTSRV_Cmd_NoAction   = 0x00000000
    ,BTSRV_Cmd_Exec      = 0x00000001               //Execute the current command & delete it
    ,BTSRV_Cmd_FetchNext = 0x00000002               //Fetch next command in queue & delete the current cmd
};
typedef u32 BTSRV_AudioCmdExecType_e;

typedef enum
{
    BTSRV_None = 0
    ,BTSRV_CallStatusCmd
    ,BTSRV_CallReqCmd
} BTSRV_AudioCmdType_e;

typedef enum
{
    BTSRV_Ready = 0                                 //Ready to send request
    ,BTSRV_AudioLinkReq_WaitCnf
    ,BTSRV_AudioCallReq_WaitCnf
    ,BTSRV_CallStatusReq_WaitCnf
} BTSRV_Status_e;

typedef struct
{
    BTSRV_AudioCallType_e           eAudioCallType;
    BTSRV_PROFILE_e                 eProfile;
} BTSRV_AudioCallReqCmd_t;

typedef struct
{
    BTSRV_AudioCallStatus_e         eAudioCallStatus;
    u8                              au8CallerID[250];
    u8                              u8Type;
} BTSRV_AudioCallStatusCmd_t;

typedef struct
{
    BTSRV_AudioCmdType_e            eCmdType;

    union
    {
        BTSRV_AudioCallReqCmd_t     tAudioCallReqCmd;
        BTSRV_AudioCallStatusCmd_t  tAudioCallStatusCmd;
    } tCmdData;
} BTSRV_AudioCmd_t;

#ifdef __BLUETOOTH_A2DP_MMI__
typedef struct
{
    BTSRV_A2dpStatus_e              eA2dpStatus;
    BTSRV_A2dpLinkAction_e          eConnect;
    u8                              pAddr[BTSRV_DEVICE_ADDR_SIZE];
    u32                             eA2dpLinkEvt;
} BTSRV_A2dpLinkAction_t;
#endif

/**
* Application structure
*/
typedef struct MMI_BTSRV_TAG
{
    DECLARE_FUNCTBL(IBTSRV);                                         // function table pointer
    u32                         refCnt;                                         // reference count
    SM_Mao_t                    app;                                            // StateMachine Application data
    SM_ModeId_t                 _lastActiveMode[cBTSRV_ModeNumbers];            // Last child, current active child
    SM_ModeId_t                 _currentMode[1];

    /* Add custom fields below */
    ICFGSrv                     *pICFGSrv;
    IMMS                        *plMmsSrv;                                      //** workaround
    IAUDIOPLAYERSRV             *plAudioPlayerSrv;                              //** workaround
    MAE_Notifier_t              *pNotifier;                                     // to notify Setup Idle Text, Refresh event
    IApplet                     *pBTNotify;
    ModelListener_t             AirPlaneModeListener;

#ifdef __BLUETOOTH_OBEX_MMI__
    IBTOBEXSRV                  *pIBTObexSrv;
#endif

    boolean                     bIsNeglectNetworkOffLineMode;
    boolean                     bTerminate;
    boolean                     bIsBTChipResetting;                             //BT Chip tries to reset
    boolean                     bIsPhonePoweringOff;                            //Phone is being powered off
    boolean                     bIsMMSSuspend;

    BTSRV_PowerAction_e         eOnOffStatus;
    BTSRV_Discoverable_e        eDiscoveryStatus;
    MAE_WChar                   au16LocalName[BTSRV_DEVICE_NAME_LEN + 1];
    MAE_WChar                   au16ReceiveFolder[FILEMGR_MAX_FILEPATH_SIZE];

    BTSRV_FileInfo_t            *pBtFileInfo;
    //BTSRV_PROFILE_e                 eCurrentProfile;                                                          //Current BT Profile used
    u8                          au8CurrentAddr[BTSRV_DEVICE_ADDR_SIZE];         //Current audio link device address

    u8                          u8DeleteDevIdx;                                 //The device to be deleted.
    boolean                     bDisconnectFirst;                               //User tries to connect when there is already a connected BT Headset
    boolean                     bIsBtHeadsetConnectingBack;                     //If the BT headset is connecting back to the handset
    BTSRV_AudioDevLinkReq_t     *pReqAudioLink;                                 //The audio link request data. Used to avoid user requests before cnf is received.
    BTSRV_DevInfo_t             *pPairDevInfo;                                  //The device in pairing

    boolean                     bHeadsetCallRing;                               //Is BT Headset ringing
    BTSRV_AudioMuteType_e       eMuteStatus;                                    //Is mute status ON or OFF

    BTSRV_Status_e              eBtSrvStatus;                                   //Is BTSrv waiting for some confirm

    BTSRV_AudioLink_e           eCurrentAudioLinkStatus;
    BTSRV_AudioCallStatus_e     eCurrentAudioCallStatus;
    BTSRV_AudioPacketType_e     eCurrentAudioPacketType;
    BTSRV_AclModeType_e         eCurrentAclModeType;                            //The acl mode type from bt driver

    MAE_WChar                   awLastPinCode[BTSRV_PINCODE_LEN + 1];
    BTSRV_PowerAction_e         eInitAction;

    BTSRV_AudioCmdType_e        eLastCommand;
    IVectorModel                *pAudioCmdQueueModel;                           //Command queue;
    DList_t                     *pAvrcpCmdQueue;                                //The queue for AVRCP command

    boolean                     bIsHasATBLDNAction;
    boolean                     bIsHasATDAction;
    boolean                     bIsHasSCOOnAction;
    BtAtCmd_t                   *pBtAtCmd;                                      //The previous saved AtCmd for later execution

#ifdef __BLUETOOTH_A2DP_MMI__
    BTSRV_A2dpStatus_e          eCurrentA2dpStatus;                             //TO-DO: Shoud be integrated into a more general API
    boolean                     bIsA2DPActive;
    BTSRV_A2dpLinkAction_t      *pA2dpLinkAction;
    boolean                     bIsA2DPEnabled;                                 //If "A2dpStreaming" enabled or not?
    boolean                     bIsA2DPSuspendWhenLoadingHigh;
    boolean                     bIsA2DPConnecting;                              //Workaround!
    boolean                     bIsA2DPDisconnecting;
#ifdef __BLUETOOTH_AVRCP_MMI__
    IHandler                    *patAvrcpListener[BTSRV_AVRCP_REG_TOTAL_NUM];
    u8                          u8CurAvrcpHandler;
    boolean                     bIsRewindKeyPressed;
    boolean                     bIsFFKeyPressed;
    BTSRV_AvrcpActionType_e     eCurAvrcpAction;
#endif
#endif

    u8                          au8CallerID[BTSRV_CALLNUM_LEN + 1];
} MMI_BTSRV;

#endif /* __MMI_BTSRV_PRIV_H__ */
