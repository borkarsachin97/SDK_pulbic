/****************************************************************************/
/*  File    : e2p_stck.ho                                                   */
/*--------------------------------------------------------------------------*/
/*  Scope   : EEPROM structure acces defintion for  stack parameters        */
/*                                                                          */
/*  Contents:                                                               */
/*                                                                          */
/****************************************************************************/
/**
* @file    E2p_stck.ho
* @brief  Description of the file
*/
#ifndef __E2P_STCK_HO__
#define __E2P_STCK_HO__

#include "stdcomp.h"
#include "sys_traces.ho"        /* LAST SUBPROCESS def  */

#include "vm_e2p_stack.ho"

#ifdef DefExtern
#undef DefExtern
#endif
#ifdef __E2P_VAR__
#define DefExtern
#else
#define DefExtern extern
#endif

/*******************************************************************/
/* IMPORTANT !!!!
 * the E2P_VERSION used to manage the e2p stucture of protected group,
 * if the e2p stucture of protected group changed, the E2P_VERSION must upgrade,
 * and then the old e2p will be replaced by default value after download  */

#ifndef __NAND__
#define E2P_VERSION
#else
#define E2P_VERSION     0x02000001
#endif
/*******************************************************************/


#define E2P_PROD_STATION_RECORD_LEN VM_E2P_PROD_STATION_RECORD_LEN /* len of the string for factory production station record */

/* Monoband power ramping definition. */
typedef u32 ParamPwrRamp_t;

typedef struct
{
  u8 TxPwrMinRampUpAdj;
  u8 TxPwrMinRampDwnAdj;
  u16 TxPwrMax;
  u8 TxRampStartAdj;
  u8 TxRampStopAdj;
  u8 TxEn1StartAdj;
  u8 TxEn1StopAdj;
} Ramping_Param_t;


#define ProdNumber_t vm_ProdNumber_t


typedef struct
{
u8  RfCalibration;
u8  RfVerification;
u8  RefNumModule;
u8  RefRfModule;
u16 SpecialNumModule;
u16 SpecialRfModule;
u16 QualityBench;
u16 IqcBench;
u8  FixtureNumber;
u8  Spare[3];
} ProdNumberBis_t;


typedef struct
{
    u8 u8_Java;             /* Size of the java volume / 0x10000 */
    u8 u8_Dota;             /* Size of the volume used for download over the air operations / 0x10000 */
    u8 u8_Sound;            /* Size of the volume used to store melodies, voice memos, ... / 0x10000 */
    u8 u8_JavaExec;         /* Size of the volume used to store the executed applet / 0x10000 */
    u16 u16_CusSize;        /* customization size / 0x1000 */
    u8 u8_CustoBase;        /* Origin of the customisation files volume / 0x10000 */
    u8 u8_Control;          /* Control sum */
} AdVolumes_t;

#define E2P_DIM_MSCM2     4
#define E2P_DIM_MSCM3     5


#define E2P_DIM_IMEI        VM_E2P_DIM_IMEI
#define E2P_DIM_VERSION     VM_E2P_DIM_VERSION
#define E2P_DIM_SIGNATURE   VM_E2P_DIM_SIGNATURE
#define E2P_DIM_DATA_PARAM  VM_E2P_DIM_DATA_PARAM
#define E2P_DIM_GENPARAM    VM_E2P_DIM_GENPARAM

#define NB_TX_LEV_HIGH_BAND_GMSK 16 /* number of Tx level for DCS, PCS with GMSK modulation */
#define NB_TX_LEV_LOW_BAND_GMSK 15  /* number of Tx level for GSM900, GSM850 with GMSK modulation */
#define NB_TX_LEV_HIGH_BAND_8PSK 14 /* number of Tx level for DCS, PCS with 8PSK modulation */
#define NB_TX_LEV_LOW_BAND_8PSK 12  /* number of Tx level for GSM900, GSM850 with 8PSK modulation */

#define NB_TXPWRRAMP            16  /* number of Tx Ramping profile*/

#define AUDIO_FIR_LENGTH 32 /* Dsp Audio Fir declarations */
#define AUDIO_INCENSE_9TAP_DL_FIR_LENTH  5 /* Incense Audio DL FIR */
#define AUDIO_INCENSE_9TAP_UL_FIR_LENTH  5 /* Incense Audio UL FIR */
#define AUDIO_INCENSE_DL_FIR_LENTH   16    /* Incense Audio DL FIR */
#define AUDIO_INCENSE_UL_FIR_LENTH   16    /* Incense Audio UL FIR */
#define AUDIO_DSP_UL_FIR_LENGTH      16    /* DSP Audio UL FIR */

typedef u8    MsCm2_t    [E2P_DIM_MSCM2     ];  /* Ms Class Mark 2  */
typedef u8    MsCm3_t    [E2P_DIM_MSCM3     ];  /* Ms Class Mark 3  */


#define  Version_t vm_Version_t
#define  KeySignature_t          vm_KeySignature_t


#define E2P_DIM_DRX        2

#define E2P_DIM_PRO_CDC      32 /* len of the string product CDC USB*/
#define E2P_DIM_PRO_MS      32 /* len of the string product mass-storage USB */
#define E2P_DIM_MANUFACTURER  16  /* len of the string manufacturer */
#define E2P_DIM_SPEEDPROFILECONFIG 4


#ifdef __MOKA_DESCR_EEPROM__
/*
 * >>>>>>>>>>> Warning This structure is only for Gene2p analysing
 * >>>>>>>>>>> The analyse padding of this structure is not ANSI
 */

/*  Description for ExtendedCapability Eeprom parameter            */
/*  Warning, this structure hasn't a correct padding               */
/*  Use u8 for granularity : set the number of parameter in *.e2p  */
/*  files = 4 parameter %u8                                        */
typedef struct
{
    /* Byte 1 */
    u8  Sim5VExt         :1;    /* Parameter 1 %u8 in w.e2p file     */
    u8  TxpFoiBiais      :1;
    u8  DynLnaConf       :1;
    u8  Mirror           :1;
    u8  GainMic          :1;
    u8  ImediatSuspend   :1;
    u8  BattEnable       :1;
    u8  GetAbnormalReset :1;
    /* Byte 2 */
    u8  ShiftPolarity    :1;    /* Parameter 2 %u8 in w.e2p file     */
    u8  NotUsed1         :7;
    /* Bytes 3 */
    u8  NotUsed2         :8;    /* Parameter 3 %u8 in w.e2p file     */
    /* Bytes 4 */
    u8  NotUsed3         :8;    /* Parameter 4 %u8 in w.e2p file     */

} ExtendedCapability_bf;


/*  Description for MaskFoiPowerLev Eeprom parameter                 */
/*  This structure has a correct padding                             */
/*  Use u8 for granularity : set the number of parameter in *.e2p    */
/*  files = 4 %u8                                                    */
typedef struct
{
    /* Bytes 1 */
    u8  PCL0            :1;     /* Parameter 1 %u8 in w.e2p file     */
    u8  PCL1            :1;
    u8  PCL2            :1;
    u8  PCL3            :1;
    u8  PCL4            :1;
    u8  PCL5            :1;
    u8  PCL6            :1;
    u8  PCL7            :1;
    /* Bytes 2 */
    u8  PCL8            :1;     /* Parameter 2 %u8 in w.e2p file     */
    u8  PCL9            :1;
    u8  PCL10           :1;
    u8  PCL11           :1;
    u8  PCL12           :1;
    u8  PCL13           :1;
    u8  PCL14           :1;
    u8  PCL15           :1;
    /* Bytes 3 */
    u8  PCL_5           :1;     /* Parameter 3 %u8 in w.e2p file     */
    u8  PCL_6           :1;
    u8  PCL_7           :1;
    u8  PCL_8           :1;
    u8  PCL_9           :1;
    u8  PCL_10          :1;
    u8  PCL_11          :1;
    u8  PCL_12          :1;
    /* Bytes 4 */
    u8  PCL_13          :1;     /* Parameter 4 %u8 in w.e2p file     */
    u8  PCL_14          :1;
    u8  PCL_15          :1;
    u8  PCL_16          :1;
    u8  PCL_17          :1;
    u8  PCL_18          :1;
    u8  PCL_19          :1;
    u8  zero            :1;

} MaskFoiPowerLev_df;

#endif /* __MOKA_DESCR_EEPROM__ */

typedef struct
{
    u16 AecECState;                 /*  [2B/2B]     */
    u16 AecNlpShift4DTThr4nTap8;    /*  [2B/4B]     */
    u16 AecNlpMin;                  /*  [2B/6B]     */
    u16 AecMaxCng;                  /*  [2B/8B]     */
    u16 AecToneDetThres;            /*  [2B/10B]    */
    u16 AecNsMinWeight;             /*  [2B/12B]    */
    u16 AecRefSmoothingMag;         /*  [2B/14B]    */
    u16 AecDtSensThr;               /*  [2B/16B]    */
    u16 AecInAgcMaxLevel;           /*  [2B/18B]    */
    u16 AecInAgcMinLevel;           /*  [2B/20B]    */
    u16 AecInAgcClippingLevel;      /*  [2B/22B]    */
    u16 AecAgcPeriodOut8In8;        /*  [2B/24B]    */
    u32 AecInAgcMaxGain;            /*  [4B/28B]    */
    u32 AecInAgcMinGain;            /*  [4B/32B]    */
    u16 AecOutAgcMaxLevel;          /*  [2B/34B]    */
    u16 AecOutAgcMinLevel;          /*  [2B/36B]    */
    u16 AecOutAgcClippingLevel;     /*  [2B/38B]    */
    u16 AecOutAgcMaxGain;           /*  [2B/40B]    */
    u32 AecRapidDtThres;            /*  [4B/44B]    */
    u16 AecFreqDt;                  /*  [2B/46B]    */
    u16 AecRunCtrl;                 /*  [2B/48B]    */
    u8  AecLPFCutOff;               /*  [1B/49B]    */
    u8  AecDelayLineInit;           /*  [1B/50B]    */

    s8  ULAdcAgcDpga;               /*  [1B/51B]    */
    s8  ULDspInGain;                /*  [1B/52B]    */
    u32 E2PValidSignature;          /*  [4B/56B]    */
} E2PULDpgaAecParams;

typedef struct
{
    u16 AgcTarget;         /*  [2B/2B]     */
    u16 AgcMaxGain;        /*  [2B/4B]     */
    u16 AgcMinGain;        /*  [2B/6B]     */
    u16 AgcAttack;         /*  [2B/8B]     */
    u16 AgcDecay;          /*  [2B/10B]    */
    u16 DrcAtRate;         /*  [2B/12B]    */
    u16 DrcRtRate;         /*  [2B/14B]    */
    s16 DrcX0dB;           /*  [2B/16B]    */
    s16 DrcX1dB;           /*  [2B/18B]    */
    s16 DrcX2dB;           /*  [2B/20B]    */
    s16 DrcX3dB;           /*  [2B/22B]    */
    s16 DrcY0dB;           /*  [2B/24B]    */
    s16 DrcY1dB;           /*  [2B/26B]    */
    s16 DrcY2dB;           /*  [2B/28B]    */
    s16 DrcY3dB;           /*  [2B/30B]    */
    u16 E2PValidU16Signature;   /*  [2B/32B]    */
} E2PMstarAgcDrcParams;

typedef struct
{
    u16 CTA_CTRL_BIT;             /*  [2B/2B]     */
    u16 CTAEMode_ICNS_DetThd;     /*  [2B/4B]     */
    u16 CTAEMode_BPF_UpDetThd;    /*  [2B/6B]     */
    u16 DRC_CHBDet_DetThd;        /*  [2B/8B]     */
    u16 NoDRC_CHBDet_DetThd;      /*  [2B/10B]    */
    u16 CHBDet_InitChk_Prd;       /*  [2B/12B]    */
    u16 CHBDet_InitChk_Cnd;       /*  [2B/14B]    */
    u16 CHBDet_SubChk_Prd;        /*  [2B/16B]    */
    u16 CHBDet_SubChk_Cnd;        /*  [2B/18B]    */
    u16 EL_Att_Gain;              /*  [2B/20B]    */
    u16 ICNS_Att_Gain;            /*  [2B/22B]    */
    u16 EnvDet_MassNoise_Thd;     /*  [2B/24B]    */
    u16 EnvDet_LessNoise_Thd;     /*  [2B/26B]    */
    u16 E2PValidU16Signature;     /*  [2B/28B]    */
} E2PMstarCtaCtModeParams;

typedef struct
{
  u16 enable;                   /*  [2B/2B]     */
  u16 adp_filter_fir_depth;     /*  [2B/4B]     */
  u16 adp_filter_lim_step_size; /*  [2B/6B]     */
  u16 echo_suppr_enable;        /*  [2B/8B]     */
  u16 echo_suppr_latency;       /*  [2B/10B]     */
  u16 echo_suppr_alpha;         /* default : echo_suppr_alpha           512   *//*  [2B/12B]    */
  u16 echo_suppr_beta;          /* default : echo_suppr_beta            384   *//*  [2B/14B]    */
  u16 echo_suppr_bkgn_noise;    /* default : echo_suppr_bkgn_noise      128   *//*  [2B/16B]    */
  u16 echo_suppr_attack;        /* default : echo_suppr_attack          256   *//*  [2B/18B]    */
  u16 echo_suppr_decay;         /* default : echo_suppr_decay           20    *//*  [2B/20B]    */
  u16 echo_suppr_hold;          /* default : echo_suppr_hold            600   *//*  [2B/22B]    */
  u16 echo_suppr_min_gain;      /* default : echo_suppr_min_gain        0     *//*  [2B/24B]    */
  u16 ref_signal_clip_level;                                                    /*  [2B/26B]    */
  u16 E2PValidU16Signature;                                                                 /*  [2B/28B]    */
} E2PMstarEchoConfCfgDataParams;

typedef struct
{
  u16 enable;                   /*  [2B/2B]     */
  u16 gamma;                    /*  [2B/4B]     */
  u16 kappa;                    /*  [2B/6B]     */
  u16 scale;                    /*  [2B/8B]     */
  u32 E2PValidSignature;        /*  [4B/12B]    */
} E2PMstarNSCfgDataParams;

typedef struct
{
  u16 enable;                   /*  [2B/2B]     */
  u16 compX0dB;                 /*  [2B/4B]     */
  u16 compX1dB;                 /*  [2B/6B]     */
  u16 compX2dB;                 /*  [2B/8B]     */
  u16 compX3dB;                 /*  [2B/10B]    */
  u16 compY0dB;                 /*  [2B/12B]    */
  u16 compY1dB;                 /*  [2B/14B]    */
  u16 compY2dB;                 /*  [2B/16B]    */
  u16 compY3dB;                 /*  [2B/18B]    */
  u16 attackIdx;                /*  [2B/20B]    */
  u16 releaseIdx;               /*  [2B/22B]    */
  u16 E2PValidU16Signature;     /*  [2B/24B]    */
} E2PMstarDrcCfgDataParams;

typedef struct
{
  u16 enable;                               /*  [2B/2B]     */
  u16 filtCompensationGain;                 /*  [2B/4B]      */
  u16 numTaps;                              /*  [2B/6B]      */
  u16 coeffs0;                              /*  [2B/8B]      */
  u16 coeffs1;                              /*  [2B/10B]     */
  u16 coeffs2;                              /*  [2B/12B]     */
  u16 coeffs3;                              /*  [2B/14B]     */
  u16 coeffs4;                              /*  [2B/16B]     */
  u16 coeffs5;                              /*  [2B/18B]     */
  u16 coeffs6;                              /*  [2B/20B]     */
  u16 coeffs7;                              /*  [2B/22B]     */
  u16 coeffs8;                              /*  [2B/24B]     */
  u16 coeffs9;                              /*  [2B/26B]     */
  u16 coeffs10;                             /*  [2B/28B]     */
  u16 coeffs11;                             /*  [2B/30B]     */
  u16 coeffs12;                             /*  [2B/32B]     */
  u16 coeffs13;                             /*  [2B/34B]     */
  u16 coeffs14;                             /*  [2B/36B]     */
  u16 coeffs15;                             /*  [2B/38B]     */
  u16 coeffs16;                             /*  [2B/40B]     */
  u16 coeffs17;                             /*  [2B/42B]     */
  u16 coeffs18;                             /*  [2B/44B]     */
  u16 coeffs19;                             /*  [2B/46B]     */
  u16 coeffs20;                             /*  [2B/48B]     */
  u16 coeffs21;                             /*  [2B/50B]     */
  u16 coeffs22;                             /*  [2B/52B]     */
  u16 coeffs23;                             /*  [2B/54B]     */
  u16 coeffs24;                             /*  [2B/56B]     */
  u16 coeffs25;                             /*  [2B/58B]     */
  u16 coeffs26;                             /*  [2B/60B]     */
  u16 coeffs27;                             /*  [2B/62B]     */
  u16 coeffs28;                             /*  [2B/64B]     */
  u16 coeffs29;                             /*  [2B/66B]     */
  u16 coeffs30;                             /*  [2B/68B]     */
  u16 coeffs31;                             /*  [2B/70B]     */
  u16 E2PValidU16Signature;                 /*  [2B/72B]     */
} E2PMstarFiltCoeffsCfgDataParams;

typedef struct
{
    u16 MstarAecEcState;              /*  [2B/2B]     */
    u16 MstarAecAfIrDepth;            /*  [2B/4B]     */
    u16 MstarAecAfMuLimit;            /*  [2B/6B]     */
    u16 MstarAecAfRefClipLin1b15;     /*  [2B/8B]     */
    u16 MstarAecAfRefDelay;           /*  [2B/10B]     */
    u16 MstarAecNsGammaLin0b16;       /*  [2B/12B]    */
    u16 MstarAecNsKappaLin0b16;       /*  [2B/14B]    */
    u16 MstarAecNsScaleLin0b16;       /*  [2B/16B]    */
    u16 MstarAecEsFactorALin1b15;     /*  [2B/18B]    */
    u16 MstarAecEsFactorBLin1b15;     /*  [2B/20B]    */
    u16 MstarAecEsFactorCLin1b15;     /*  [2B/22B]    */
    u16 MstarAecEsAttRateLin4b12;     /*  [2B/24B]    */
    u16 MstarAecEsRelRateLin4b12;     /*  [2B/26B]    */
    u16 MstarAecEsBoundLin4b12;       /*  [2B/28B]    */
    u16 MstarAecEsNoiseLin0b15;       /*  [2B/30B]    */

    s8  ULAdcAgcDpga;                 /*  [1B/31B]    */
    s8  ULDspInGain;                  /*  [1B/32B]    */
    u32 E2PValidSignature;            /*  [4B/36B]    */
} E2PMstarAecParams;

#ifndef __NAND__
/**
  * This is the description of  the struture.
  */
/********************** e2p structure for NOR flash **********************/
typedef struct
{
///// BEGINNING OF SECTION COMMON WITH DOWNLOADER ////////////////
   KeySignature_t SignaturePck;
   KeySignature_t SignatureNck;
   KeySignature_t SignatureNsck;
   KeySignature_t SignatureSpck;
   KeySignature_t SignatureCck;
   KeySignature_t SignatureParam;
   u8             MeLockData[E2P_DIM_GENPARAM+1];  /* Data of ME Lock */

   u8             E2pChkSumWritten;        /* State of the special parameters protection   */
   u8             E2pChkSum;               /* Checksum of the special protected parameters */
   u8             E2pMirror;               /* Must be set to 2 to trigger a mirror setup at next startup */
   u8             u8_CustoBase_1;               /* NEW NOR ARCH */
   u16            E2pTstPattern;           /* E2prom test pattern, must be equal to 0xABCD */

   vm_Imei_t         Imei;                    /* Inter Mobile Equip Ident   */

   u8             ObjNumberOf32k;     /* Number of sectors used for E2P's Object Management or FMS' Random Access Items */
   u8             ObjFormatChkSum;        /* 255 - ObjNumberOfSectors */
   u8             Pad_RaiEntriesNumber;                   /* User defined number of entries for Random Access Items divided by 256 */

   u8             FlashJournalCtx[5];                 /* Private flash operations context */

   struct AdVolumes_s
   {
      u8    JavaVolumeSize;                     /* Size of the java volume / 0x10000 */
      u8    DotaVolumeSize;                     /* Size of the volume used for download over the air operations / 0x10000 */
      u8    SoundVolumeSize;                    /* Size of the volume used to store melodies, voice memos, ... / 0x10000 */
      u8    JavaExecVolumeSize;                 /* Size of the volume used to execute java applets / 0x10000 */
      u8    AdReserved[3];
      u8    AdControlSum;                       /* Sum of the "non-reserved" fields */
   } AdVolumes;         /* FMS "Applications&Data" volumes definition */
///// END OF SECTION COMMON WITH DOWNLOADER ////////////////

   u8             SysFeature;              /* features for Sys EL     */
   s8             AntennaGain;

   u8             TrcNumberOf32k;       /* Number of sectors used for E2P's BackTrace */
   u8             TrcFormatChkSum;          /* 100 - TrcNumberOfSectors */

   u8             u8_CustoBase_2;               /* NEW NOR ARCH */
   KeySignature_t SignatureForCustomerFeatures;
   u32            CustomerFeatures;

   Version_t      VersHard;                /* number of hard version */
   //Version_t      VersSoft;                /* number of soft version */
   u16            RaiSizeIn32k;     /* Size in 32K used for FMS' Random Access Items */
   u16            RaiFormatChkSum;        /* 65535 - RaiSizeIn32k */

   u32            L1cNbWakeFrame;
   u32            L1cNbSleepFrame;
   u32            L1cNbTxFrame;
   u8             rr_ScanMode;             /* Toggle between rr & rrs    */
   u8             ExhaustivePlmnSearch;    /* Fast and exhaustive emergency mode   */
   u8             ImeiSV;                  /* SV part of the IMEISV     */
   u8             NbRoughDacValue;
   u32            RoughDacSum;              /* For aging drift purpose.   */
   s8             RoughDacOffset;          /* Rough dac aging offset.    */
   u8             ScratchMemStatus; /* Status of the Scratch Memory in Flash */
   u8             v24_NominalMode;         /* 0 => V24 starts in HAPC mode */
   u8             v24_Framing;             /* Framing (parity, stop ...) */
   u8             v24_SignalForUsb;
   u8             v24_UsbFraming;          /* Usb framing (parity, stop ...) */
   u8             v24_UsbSpeed;            /* V.24 usb handler speed         */
   u8             v24_UsbOptions;          /* V.24 usb handler Options       */
   u8             v24_UsbExtOptions;       /* V24 usb user profile           */
   u8             v24_Speed;               /* V.24 handler speed         */
   u8             v24_Options;             /* V.24 Handler Options       */
   u8             v24_SerialOn;            /* serial link activation     */
   u8             v24_Uart2Framing;        /* Uart2 framing (parity, stop ...) */
   u8             v24_Uart2Speed;          /* V.24 uart2 handler speed         */
   u8             v24_Uart2Options;        /* V.24 uart2 handler Options       */
   u8             v24_Uart2ExtOptions;     /* V24 uart2 user profile           */
   u32            v24_ExtOptions;          /* V24 user profile           */
   u16            RoughDacValue;    /* To load in radio DAC.      */
   Greet_t        ProdData1;               /* Greeting message   size 49            */
   u8             AecType;
   u32            RtkMbxState[2];          /* Remote mailboxes for rtk    */
   u32            RtkTaskState;            /* Remote tasks for RTK        */
   u32            DiagState [LAST_SUBPROCESS + 1]; /* Trace levels.       */
   u8             RxSPErrorTres;           /* TCH BFI threshold.         */
   u8             FchTres;               /* Facch threshold.           */
   u16            RaiEntriesNumberExt;     /* User defined number of entries for Random Access Items divided by 256 (Extention)*/
   s32            ToiDrift;
   ProdNumber_t   ProdNumber;              /* Production information       */
   u16            NbSpeechFrameMuted;
   u8             MonoBand;                /* Band supported in monoband */
   MsCm3_t        MsCm3;                   /* Mobile station classmk 3   */
   u16            PowerMinBase;            /* For biband ramp up.        */
   u16            BearerCfg;               /* EFR,HALF RATE,DATA SPEED   */
   u32            L1cNbDcPlgFrame;
   vm_Imsi_t         Imsi;                    /* Inter Mobile Subs Ident    */
   u8             Pad4[2];             /* pad */
   u8             HRErrorThres;            /* Half rate BFI speech thres.*/
   u8             E2pNetMode;              /* Network selection mode     */
   MsCm2_t        MsCm2;                   /* Mobile station classmk 2   */
#ifdef __MOKA_DESCR_EEPROM__
   u8             EnabledFtr [6];          /* Enabled features.          */
   u8             BizzFtr    [2];          /* Business features          */
#else
   u8             EnabledFtr [8];          /* Enabled features.          */
#endif
   u8             ExtendedCapability [4];  /* Bit12&13: the status of SYS INFO listening during TBF in GPRS;  Bit16: Access Burst 11 bits */
   u8             MaskFoiPowerLev [4];     /* band 1 & 2 GSM900 et DCS */
   u8             StaticDacValue;          /* Static AFC DAC value */
   u8             Pad5;                    /* Pad */
   u8             TxPwrRampNbNullPts;      /* number of sample fixes to zero in power ramp ramp */
   u8             EplmnBehaviour;
   u8             Pad10[2];                /* Pad */
   u8             Pad11[2];                /* Pad */
#ifdef __VERSPROD__
   u8             ImsiProd[8];
#else
   u8             Pad09[8];
#endif
   u8             Pad17[3];
   u32            Hard2Capability;
   ProdNumberBis_t ProdNumberBis;
   u16            E2pOffsetParam;          /* Internal data of eeprom simulation */
   u16            E2pSizeParam;            /* Internal data of eeprom simulation */

   u16            e2p_WriteCycle;          /* Internal data of eeprom simulation */
   u16            UsbPid;
   u32            ExtendedDiagState[EXTENDED_LAST_SUBPROCESS]; /* Trace levels. second store area       */
   u16            ProdArfcn;
   u8             SimTimerFix;
   u8             SimPolIntTimer;

   u8             AudioAecOn[4];

   struct T3212Status_s
   {
    u16    T3212StartTimeYear;
    u8     T3212StartTimeMonth;
    u8     T3212StartTimeDay;
    u8     T3212StartTimeHour;
    u8     T3212StartTimeMinute;
    u8     T3212StartTimeSecond;
    u8     Pad1;
    u16    T3212StartTimeSecondFracPart;
    u8     T3212Value;
    u8     T3212Remain;
    u32    T3212Remain2;
   } T3212Status;
                                                   /* bit 7:5 Day period of RTC drift compensation                    */
   u16            PadRtcLastDayOfYearDriftCorrect; /* Day of the year when last RTC drift compensation occured */

   u8             Pad6[2];             /* pad */
   /* Nvx param GDiagState -> TxPwrCalNmin4 */
   u32            GDiagState  [GPRS_LAST_SUBPROCESS]; /* GPRS Trace levels          */
   u8             DrxParam    [E2P_DIM_DRX];          /* DRX parameters V           */
   u8             MultiSlotClass;          /* MultiSlotClass as in 05.02 */
   u8             MsClass;                 /* Ms class capability        */
   u8             StackConfig;             /* STACK Configuration        */
   u8             ReadyTimer;
   u8             IrActive;                /* Irda : Boolean Activation */
   u8             IrDiscTime;              /* Irda : Disconnection Time */
   u8             IrMaxTat;                /* Irda : Max Turn around Time */
   u8             IrPreambTh;              /* Irda : Preambule threshold */
   u8             DataParam[E2P_DIM_DATA_PARAM]; /*E2P_DIM_DATA_PARAM = 100 */
   u8             DataCompress;           /* Type of Data Compression */
   u8             DataSecurity;           /* Type of Data Security (V42, MNP2...) */
   u8             EquivPlmnList [19];       /* length + (6 * PLMN_LGTH) */
   u8             Rai[ 6 ];              /* SIM PARAMETERS         */
   u8             P_Tmsi[ 4 ];
   u8             P_Tmsi_Signature[ 3 ];
   u8             UpdateStatus;
   u8             GKc[ 8 ];
   u8             GCksn;
   vm_Imsi_t         PreviousImsi;

   u8       OpenCtrl;               /* flags for open-xx         */

   u32      HardCapability;
   u32      RequiredPatches;           /* To be downloaded toward Dsp. */

   u8       RadioType;
   u8       VoltageOrder;
   u8       BoardGain_GSM900;          /* Gain of the board, band GSM900  */
   u8       BoardGain_DCS1800;         /* Gain of the board, band DCS1800 */

   u8       BoardGain_PCS1900;         /* Gain of the board, band PCS1900 */
   u8       BoardGain_GSM850;          /* Gain of the board, band GSM850  */
   u16      TxPwrMinBase;

   u8       Egprs8PskUplinkCap;
   u8       EgprsMultiSlotClass;

   s16      TxFreqOffset_GSM900;
   s16      TxFreqOffset_DCS1800;
   s16      TxFreqOffset_PCS1900;
   s16      TxFreqOffset_GSM850;

   u16      MaskPclTxFreqOffset_GSM900;
   u16      MaskPclTxFreqOffset_DCS1800;
   u16      MaskPclTxFreqOffset_PCS1900;
   u16      MaskPclTxFreqOffset_GSM850;

   s8       TaOffset_GSM900;
   s8       TaOffset_DCS1800;
   s8       TaOffset_PCS1900;
   s8       TaOffset_GSM850;

   u8       FacchThres;
   u8       PadFacch;
   u16      FSBfiThres;
   u16      EFSBfiThres;
   u16      HSBfiThres;
   u16      AFSBfiThres;
   u16      AHSBfiThres;

   u16      HRUfiThres;
   u16      AMRDfiThres;
   u16      USFMetricCS1Thres;
   u16      USFMetricCS24Thres;
   u16      USFMetricE14Thres;
   u16      USFMetricE59Thres;

   s16      RoughDacStepValue;

   u32      Rf_Param1;
   u32      Rf_Param2;
   u32      Rf_Param3;
   u32      Rf_Param4;

   u8       MaskFoiPowerLevBis [4];  /* band 3 & 4 PCS et GSM850 */

   u32      ModuleVersion;
   u8       ManuallySelectedPlmn [4];

   u8       Pad7[2];             /* pad */

   u8       C1Threshold;
   u8       DotaState;                  /* DOTA state : Idle, Copy, Successful, Error*/
   u8       LastBa[144];
   u32      DotaCellId;                 /* Id of the DOTA cell to copy, used by the Xmodem downloader */
   u32      Extended2DiagState[EXTENDED2_LAST_SUBPROCESS]; /* Trace levels. second extended store area */

   u32      AudioDspGain;
   u16      AudioCtrl;
   u8       AudioHPFilterTable[3];
   u8       AudioLPFilterTable[3];
   u8       AudioLoopTest;
   u8       AudioSpeakerGain;
   u16      AudioHFTable;
   u8       Audio3Table;
   u8       AudioACTable[9];
   u8       AudioMMITable[3];
   u8       AudioLSTable[3];

   u16      CustomIdCDC[2]; /* Vendor and Produt ID for CDC class */
   u16      CustomIdMS[2]; /* Vendor and Produt ID for MASS storage class */
   u8       ProductStringCDC[E2P_DIM_PRO_CDC]; /* String descriptor for product CDC class */
   u8       ProductStringMS[E2P_DIM_PRO_MS]; /* String descriptor for product MASS class */
   u8       VendorString[E2P_DIM_MANUFACTURER]; /* String for manufacturer */

   u16     AudioFirCoeff[AUDIO_FIR_LENGTH];
   u8      AMCal_GSM850;   /* RF IC parameter for AM Loop calibration in GSM850 */
   u8      AMCal_GSM900;   /* RF IC parameter for AM Loop calibration in GSM900 */
   u8      AMCal_DCS1800; /* RF IC parameter for AM Loop calibration in DCS */
   u8      AMCal_PCS1900; /* RF IC parameter for AM Loop calibration in PCS */
   u8      NminGMSK_LB;    /* RF IC parameter : SOGL */
   u8      NminGMSK_HB;   /* RF IC parameter : SOGH */
   u8      NminInterGMSK_LB; /* RF IC parameter : POGL */
   u8      NminInterGMSK_HB; /* RF IC parameter : POGH */
   u8      Nmin8PSK_LB;  /* RF IC parameter : SOEL */
   u8      Nmin8PSK_HB;  /* RF IC parameter : SOEH */
   u8      NminInter8PSK_LB; /* RF IC parameter : POEL */
   u8      NminInter8PSK_HB; /* RF IC parameter : POEH */
   u8      FEMOnGMSK850; /* RF IC parameter : FEM Switch On for GMSK 850 */
   u8      FEMOffGMSK850; /* RF IC parameter : FEM Switch Off for GMSK 850 */
   u8      FEMOnGMSK900; /* RF IC parameter : FEM Switch On for GMSK 900 */
   u8      FEMOffGMSK900; /* RF IC parameter : FEM Switch Off for GMSK 900 */
   u8      FEMOnGMSK1800; /* RF IC parameter : FEM Switch On for GMSK 1800 */
   u8      FEMOffGMSK1800; /* RF IC parameter : FEM Switch Off for GMSK 1800 */
   u8      FEMOnGMSK1900; /* RF IC parameter : FEM Switch On for GMSK 1900 */
   u8      FEMOffGMSK1900; /* RF IC parameter : FEM Switch Off for GMSK 1900 */
   u8      FEMOn8PSK850;  /* RF IC parameter : FEM Switch On for 8PSK 850 */
   u8      FEMOff8PSK850; /* RF IC parameter : FEM Switch Off for 8PSK 850 */
   u8      FEMOn8PSK900; /* RF IC parameter : FEM Switch On for 8PSK 900 */
   u8      FEMOff8PSK900; /* RF IC parameter : FEM Switch Off for 8PSK 900 */
   u8      FEMOn8PSK1800;  /* RF IC parameter : FEM Switch On for 8PSK 1800 */
   u8      FEMOff8PSK1800; /* RF IC parameter : FEM Switch Off for 8PSK 1800 */
   u8      FEMOn8PSK1900; /* RF IC parameter : FEM Switch On for 8PSK 1900 */
   u8      FEMOff8PSK1900; /* RF IC parameter : FEM Switch Off for 8PSK 1900 */
   u8      RampUpGMSK850; /* RF IC parameter : Ramp Up timing for GMSK 850 */
   u8      RampDownGMSK850; /* RF IC parameter : Ramp Down timing for GMSK 850 */
   u8      RampUpGMSK900; /* RF IC parameter : Ramp Up timing for GMSK 900 */
   u8      RampDownGMSK900; /* RF IC parameter : Ramp Down timing for GMSK 900 */
   u8      RampUpGMSK1800; /* RF IC parameter : Ramp Up timing for GMSK 1800 */
   u8      RampDownGMSK1800; /* RF IC parameter : Ramp Down timing for GMSK 1800 */
   u8      RampUpGMSK1900; /* RF IC parameter : Ramp Up timing for GMSK 1900 */
   u8      RampDownGMSK1900; /* RF IC parameter : Ramp Down timing for GMSK 1900 */
   u8      RampUp8PSK850;  /* RF IC parameter : Ramp Up timing for 8PSK 850 */
   u8      RampDown8PSK850; /* RF IC parameter : Ramp Down timing for 8PSK 850 */
   u8      RampUp8PSK900; /* RF IC parameter : Ramp Up timing for 8PSK 900 */
   u8      RampDown8PSK900; /* RF IC parameter : Ramp Down timing for 8PSK 900 */
   u8      RampUp8PSK1800;  /* RF IC parameter : Ramp Up timing for 8PSK 1800 */
   u8      RampDown8PSK1800; /* RF IC parameter : Ramp Down timing for 8PSK 1800 */
   u8      RampUp8PSK1900; /* RF IC parameter : Ramp Up timing for 8PSK 1900 */
   u8      RampDown8PSK1900; /* RF IC parameter : Ramp Down timing for 8PSK 1900 */
//   u8      PAOnGMSK850; /* RF IC parameter : PA On timing for GMSK 850 */ //Format changed to signed by yunchu
//   u8      PAOffGMSK850; /* RF IC parameter : PA Off timing for GMSK 850 */
//   u8      PAOnGMSK900; /* RF IC parameter : PA On timing for GMSK 900 */
//   u8      PAOffGMSK900; /* RF IC parameter : PA Off timing for GMSK 900 */
//   u8      PAOnGMSK1800; /* RF IC parameter : PA On timing for GMSK 1800 */
//   u8      PAOffGMSK1800; /* RF IC parameter : PA Off timing for GMSK 1800 */
//   u8      PAOnGMSK1900; /* RF IC parameter : PA On timing for GMSK 1900 */
//   u8      PAOffGMSK1900; /* RF IC parameter : PA Off timing for GMSK 1900 */
//   u8      PAOn8PSK850;  /* RF IC parameter : PA On timing for 8PSK 850 */
//   u8      PAOff8PSK850; /* RF IC parameter : PA Off timing for 8PSK 850 */
//   u8      PAOn8PSK900; /* RF IC parameter : PA On timing for 8PSK 900 */
//   u8      PAOff8PSK900; /* RF IC parameter : PA Off timing for 8PSK 900 */
//   u8      PAOn8PSK1800;  /* RF IC parameter : PA On timing for 8PSK 1800 */
//   u8      PAOff8PSK1800; /* RF IC parameter : PA Off timing for 8PSK 1800 */
//   u8      PAOn8PSK1900; /* RF IC parameter : PA On timing for 8PSK 1900 */
//   u8      PAOff8PSK1900; /* RF IC parameter : PA Off timing for 8PSK 1900 */
   s8      PAOnGMSK850; /* RF IC parameter : PA On timing for GMSK 850 */ //Format changed to signed by yunchu
   s8      PAOffGMSK850; /* RF IC parameter : PA Off timing for GMSK 850 */
   s8      PAOnGMSK900; /* RF IC parameter : PA On timing for GMSK 900 */
   s8      PAOffGMSK900; /* RF IC parameter : PA Off timing for GMSK 900 */
   s8      PAOnGMSK1800; /* RF IC parameter : PA On timing for GMSK 1800 */
   s8      PAOffGMSK1800; /* RF IC parameter : PA Off timing for GMSK 1800 */
   s8      PAOnGMSK1900; /* RF IC parameter : PA On timing for GMSK 1900 */
   s8      PAOffGMSK1900; /* RF IC parameter : PA Off timing for GMSK 1900 */
   s8      PAOn8PSK850;  /* RF IC parameter : PA On timing for 8PSK 850 */
   s8      PAOff8PSK850; /* RF IC parameter : PA Off timing for 8PSK 850 */
   s8      PAOn8PSK900; /* RF IC parameter : PA On timing for 8PSK 900 */
   s8      PAOff8PSK900; /* RF IC parameter : PA Off timing for 8PSK 900 */
   s8      PAOn8PSK1800;  /* RF IC parameter : PA On timing for 8PSK 1800 */
   s8      PAOff8PSK1800; /* RF IC parameter : PA Off timing for 8PSK 1800 */
   s8      PAOn8PSK1900; /* RF IC parameter : PA On timing for 8PSK 1900 */
   s8      PAOff8PSK1900; /* RF IC parameter : PA Off timing for 8PSK 1900 */

   u16     Nmax8PSKGSM850[NB_TX_LEV_LOW_BAND_8PSK]; /* RF IC parameter : Nmax value for each PCL */
   u16     Nmax8PSKGSM900[NB_TX_LEV_LOW_BAND_8PSK]; /* RF IC parameter : Nmax value for each PCL */
   u16     Nmax8PSKDCS[NB_TX_LEV_HIGH_BAND_8PSK]; /* RF IC parameter : Nmax value for each PCL */
   u16     Nmax8PSKPCS[NB_TX_LEV_HIGH_BAND_8PSK]; /* RF IC parameter : Nmax value for each PCL */
   u16     NmaxGMSKGSM850[NB_TX_LEV_LOW_BAND_GMSK]; /* RF IC parameter : Nmax value for each PCL */
   u16     NmaxGMSKGSM900[NB_TX_LEV_LOW_BAND_GMSK]; /* RF IC parameter : Nmax value for each PCL */
   u16     NmaxGMSKDCS[NB_TX_LEV_HIGH_BAND_GMSK]; /* RF IC parameter : Nmax value for each PCL */
   u16     NmaxGMSKPCS[NB_TX_LEV_HIGH_BAND_GMSK]; /* RF IC parameter : Nmax value for each PCL */
   u8      SpeedProfileConfig[4];

   // Battery E2P parameters
   u16     PaddingBattLev[7];                      /* Definition of battery levels */
   u16     MaxVolt;                         /* Maximum voltage of battery */
   u16     BatteryCapacity;                 /* Maximum capacity of battery */
   u8      ThermistorCurrent;               /* NTC thermistor source current */
   u8      ThermistorRisingTime;            /* Battery temperature conversion delay */
   u16     MaxBatteryTemp;                  /* Maximum battery temperature */
   u16     MinBatteryTemp;                  /* Minimum battery temperature */
   u16     VoltageDropBeforeRecharge;       /* Minimum voltage drop before recharging */
   u8      BatteryLevel;                    /* Current battery level index */
   u8      VoltageLevelHysteresis;          /* Voltage level for hysterisis */
   u8      BatteryMeasureTimeOut;           /* Delay between 2 battery data measures */
   u8      BatterySecurityWaitTimeOut;      /* Value of battery security timer */
   u16     BatteryFastChargingTimeOut;      /* Maximum time for battery charge */
   u16     FastChargeBatteryStatusTimeOut;  /* Delay between 2 battery status in charging mode */

   // ADC Calibration E2P parameters
   s16     AdcBatCoeff;                     /* Battery voltage gain for ADC calibration */
   u16     AdcChargCoeff;                   /* Charger voltage gain for ADC calibration */
   u16     AdcIchargCoeff;                  /* Charger current gain for ADC calibration */
   u16     AdcTempCoeff;                    /* Battery temperature voltage gain for ADC calibration */
   u8      AdcPad[2];
   s32     AdcBatOffset;                    /* Battery voltage offset for ADC calibration */
   s32     AdcChargOffset;                  /* Charger voltage offset for ADC calibration */
   s32     AdcIchargOffset;                 /* Charger current offset for ADC calibration */
   s32     AdcTempOffset;                   /* Battery temperature voltage offset for ADC calibration */

// JY: Weird, it seems we have no choice but place the extended fields here.
//     Otherwise cus file will be unusable.
// FIXME: Check if we can place it else where.
#ifdef __MSTAR_DUAL_SIM_E2P__
   u32            DualSimDiagState[DUAL_SIM_EXTENDED_LAST_SUBPROCESS]; /* Trace levels for Dual SIM project*/
   u32            DuoStatus;
   u16            ProdArfcn_2;
   u8             LastBa_2[144];
   u8             ExhaustivePlmnSearch_2;    /* Fast and exhaustive emergency mode   */
   u8             E2pNetMode_2;              /* Network selection mode     */
   u8             EquivPlmnList_2 [19];       /* length + (6 * PLMN_LGTH) */
   u8             ManuallySelectedPlmn_2 [4];
   u8             Pad8;             /* pad */

  struct T3212Status_2_s
  {
    u16    T3212StartTimeYear_2;
    u8     T3212StartTimeMonth_2;
    u8     T3212StartTimeDay_2;
    u8     T3212StartTimeHour_2;
    u8     T3212StartTimeMinute_2;
    u8     T3212StartTimeSecond_2;
    u8     Pad1_2;
    u16    T3212StartTimeSecondFracPart_2;
    u8     T3212Value_2;
    u8     T3212Remain_2;
    u32    T3212Remain2_2;
  } T3212Status_2;

 vm_Imsi_t         PreviousImsi_2;
 u8             Rai_2[ 6 ];              /* SIM PARAMETERS         */
 u8             P_Tmsi_2[ 4 ];
 u8             UpdateStatus_2;
 u8             P_Tmsi_Signature_2[ 3 ];
 u8             GKc_2[ 8 ];
 u8             GCksn_2;
 vm_Imsi_t         Imsi_2;
#if 0 //Rearrangement for IMEI_2
 u8             Pad9[10];
#else
 u8             Pad9[1];
 vm_Imei_t         Imei_2;                    /* Inter Mobile Equip Ident 2 (9 bytes)  */
#endif

#else
 u8             DualSimReserved[324+7]; //Rearrangement for IMEI_2

#endif


#if 0 //Rearrangement for IMEI_2 (Concatenate 7 bytes to the prefixed 3 bytes.)
u32     TraceStoreSDBuffer;            /* Buffer Size for TMT trace store SD */
u8      TraceStoreSD;                  /* Mode for TMT trace to SD card (1) Circular Buffer (2) FlipFlap Buffer */
u8      GsensorDirection;
u8      EnableTaskMgr;
#endif
  u8  Pad18;

  /* MST for __PA_FREQ_COMP__ {*/
  u16 PAFreqCompChCenterGSM;
  u16 PAFreqCompChHighGSM;
  u16 PAFreqCompChLowGSM;
  u16 PAFreqCompChCenterDCS;
  u16 PAFreqCompChHighDCS;
  u16 PAFreqCompChLowDCS;
  u8  PAFreqCompPclGSM;
  u8  PAFreqCompPclDCS;
  u16 NmaxGmskFreqCompLowGSM;
  u16 NmaxGmskFreqCompHighGSM;
  u16 NmaxGmskFreqCompLowDCS;
  u16 NmaxGmskFreqCompHighDCS;
  //Total Size=10 x u16 + 2 x u8 = 22 Bytes
  /* MST for __PA_FREQ_COMP__ }*/


  /* MST for __RX_FREQ_COMP__ {*/
  u16 RxFreqCompCh1GSM;
  u16 RxFreqCompCh2GSM;
  u16 RxFreqCompCh3GSM;
  u16 RxFreqCompCh4GSM;
  u16 RxFreqCompCh5GSM;
  u16 RxFreqCompCh6GSM;
  u16 RxFreqCompChCenterGSM;

  u16 RxFreqCompCh1DCS;
  u16 RxFreqCompCh2DCS;
  u16 RxFreqCompCh3DCS;
  u16 RxFreqCompCh4DCS;
  u16 RxFreqCompCh5DCS;
  u16 RxFreqCompCh6DCS;
  u16 RxFreqCompChCenterDCS;

  u8  RxFreqCompBG1GSM;
  u8  RxFreqCompBG2GSM;
  u8  RxFreqCompBG3GSM;
  u8  RxFreqCompBG4GSM;
  u8  RxFreqCompBG5GSM;
  u8  RxFreqCompBG6GSM;

  u8  RxFreqCompBG1DCS;
  u8  RxFreqCompBG2DCS;
  u8  RxFreqCompBG3DCS;
  u8  RxFreqCompBG4DCS;
  u8  RxFreqCompBG5DCS;
  u8  RxFreqCompBG6DCS;
 //Total Size=14 x u16 + 12 x u8 = 40 Bytes
 /* MST for __RX_FREQ_COMP__ }*/

  u8  TxFreqCompEnable;
  u8  RxFreqCompEnable;

  /* Audio calibration */
  u8  MicGains[4];                                          /* 4B */
  u16 AudioDspUlFirGainHandset;
  u16 AudioDspUlFirGainHandsfree;
  u16 AudioDspUlFirGainHeadset;
  u16 AudioDspUlFirGainBt;

  u8  AudioMediaDriverHeadsetGain;
  u8  AudioMediaDriverReceiverGain;
  u8  AudioMediaDriverLineOutGain;

  u8  AudioClassDGain;
  u8  AudioMediaClassDGain;

  s8  AudioAtvMicGain;
  s8  AudioFmMicGain;
  s8  AudioVMHeadsetMicGain;
  s8  AudioCamHeadsetMicGain;
  s8  AudioPcmRecHeadsetMicGain;

  u8  AudioOutputDriverSpkHeadsetGain;
  u8  AudioMediaDriverSpkHeadsetGain;
  u8  AudioExtClassDGain;
  u8  AudioMediaExtClassDGain;

  s8  AudioRingToneGainHandsfree[8];
  s8  AudioRingToneGainHeadset[8];

  u16 dummyPad_IncenseULFIRHeadset[1];

 // yanni add start
  u8  BtAddr[8];
  u8  Sn[20];

  // yanni add end

//MST change for FACCH/H threshold {
  u8  FacchHRThres;
//MST change for FACCH/H threshold }
  u8  batLowBatteryReportPeriod;     //2177

  //u8  PaddingTo4Byte1[2]; //use by below two mic gain purpose
  s8  AudioVMMicGain;
  s8  AudioCamMicGain;

  struct rtcTimeSave_s
  {
    u8  rtcTimeSaved_DataValid;
    u8  rtcTimeSaved_Year;
    u8  rtcTimeSaved_Month;
    u8  rtcTimeSaved_Day;
    u8  rtcTimeSaved_Hour;
    u8  rtcTimeSaved_Minute;
    u8  rtcTimeSaved_Second;
    u8  rtcTimeSaved_Period;
  } rtcTimeSave;

  s8  AudioDLGainHandsfree[8];
  s8  AudioDLGainHandset[8];
  s8  AudioDLGainHeadset[8];
  s8  AudioDLGainBT[8];

  u32 PSConfig;

  u16 AudioFirCoeffHandsfree[AUDIO_FIR_LENGTH];     /* [64B]/64B    */
  u16 AudioFirCoeffHeadset[AUDIO_FIR_LENGTH];       /* [64B]/128B   */
  u16 AudioFirCoeffBT[AUDIO_FIR_LENGTH];            /* [64B]/192B   */

  E2PULDpgaAecParams AudioULDpgaAecHandsfree;       /* [56B]/248B   */
  E2PULDpgaAecParams AudioULDpgaAecHandset;         /* [56B]/304B   */
  E2PULDpgaAecParams AudioULDpgaAecHeadset;         /* [56B]/360B   */
  E2PULDpgaAecParams AudioULDpgaAecBT;              /* [56B]/416B   */
  u32 AudioCaliCtrl;                                /* 4B/420B      */
  u8  TrcNumberOfSectors_tmp;       /* this obj should be deleted later */
  u8  TrcFormatChkSum_tmp;          /* this obj should be deleted later */

/* MST for __PA_FREQ_COMP__ {*/
 u16 PAFreqCompChCenterGSM850;
 u16 PAFreqCompChHighGSM850;
 u16 PAFreqCompChLowGSM850;
 u16 PAFreqCompChCenterPCS;
 u16 PAFreqCompChHighPCS;
 u16 PAFreqCompChLowPCS;
 u8  PAFreqCompPclGSM850;
 u8  PAFreqCompPclPCS;
 u16 NmaxGmskFreqCompLowGSM850;
 u16 NmaxGmskFreqCompHighGSM850;
 u16 NmaxGmskFreqCompLowPCS;
 u16 NmaxGmskFreqCompHighPCS;
 //Total Size=10 x u16 + 2 x u8 = 22 Bytes
 /* MST for __PA_FREQ_COMP__ }*/

 /* MST for __RX_FREQ_COMP__ {*/
 u16 RxFreqCompCh1GSM850;
 u16 RxFreqCompCh2GSM850;
 u16 RxFreqCompCh3GSM850;
 u16 RxFreqCompCh4GSM850;
 u16 RxFreqCompCh5GSM850;
 u16 RxFreqCompCh6GSM850;
 u16 RxFreqCompChCenterGSM850;

 u16 RxFreqCompCh1PCS;
 u16 RxFreqCompCh2PCS;
 u16 RxFreqCompCh3PCS;
 u16 RxFreqCompCh4PCS;
 u16 RxFreqCompCh5PCS;
 u16 RxFreqCompCh6PCS;
 u16 RxFreqCompChCenterPCS;

 u8  RxFreqCompBG1GSM850;
 u8  RxFreqCompBG2GSM850;
 u8  RxFreqCompBG3GSM850;
 u8  RxFreqCompBG4GSM850;
 u8  RxFreqCompBG5GSM850;
 u8  RxFreqCompBG6GSM850;

 u8  RxFreqCompBG1PCS;
 u8  RxFreqCompBG2PCS;
 u8  RxFreqCompBG3PCS;
 u8  RxFreqCompBG4PCS;
 u8  RxFreqCompBG5PCS;
 u8  RxFreqCompBG6PCS;
//Total Size=14 x u16 + 12 x u8 = 40 Bytes
/* MST for __RX_FREQ_COMP__ }*/

  s8      AudioSTGain[4];           /* Audio SideTone Gain */

  u8      FacProdRecord[E2P_PROD_STATION_RECORD_LEN]; /* 32B */

  u8      Dvga8PSKGSM850[NB_TX_LEV_LOW_BAND_8PSK]; /* RF IC parameter : DVGA value for each PCL */
  u8      Dvga8PSKGSM900[NB_TX_LEV_LOW_BAND_8PSK]; /* RF IC parameter : DVGA value for each PCL */
  u8      Dvga8PSKDCS[NB_TX_LEV_HIGH_BAND_8PSK]; /* RF IC parameter : DVGA value for each PCL */
  u8      Dvga_pad1[2];
  u8      Dvga8PSKPCS[NB_TX_LEV_HIGH_BAND_8PSK]; /* RF IC parameter : DVGA value for each PCL */

  u8      TraceStoreSD;                  /* Mode for TMT trace to SD card (1) Circular Buffer (2) FlipFlap Buffer */
  u8      GsensorDirection;
  u32     TraceStoreSDFilter;            /* Buffer Size for TMT trace store SD */
  u8      EnableTaskMgr;

  //u8      Pad14; //use by below mic gain purpose
  s8      AudioPcmRecMicGain;            /* Mic gain of PCM recording */

  u8      GSensorCalibration[8]; /* 8B */

  s8      AudioMp3GainHandsfree[8];
  s8      Audio3gpGainHandsfree[8];
  s8      AudioIptvGainHandsfree[8];
  s8      AudioFmGainHandsfree[8];
  s8      AudioDtmfGainHandsfree[8];
  s8      AudioMp3GainHeadset[8];
  s8      Audio3gpGainHeadset[8];
  s8      AudioIptvGainHeadset[8];
  s8      AudioFmGainHeadset[8];
  s8      AudioDtmfGainHeadset[8];
  s8      AudioKeypadToneGain[4];

  u16     BattLev[10];                      /* Definition of battery levels */

  u8      PadDualSimExt2[2];
#if defined( __MSTAR_DUAL_SIM__ ) && defined( __MSTAR_DUAL_SIM_SIM_DUO__ )
  u32     DualSimExt2DiagState[DUAL_SIM_EXTENDED2_LAST_SUBPROCESS]; /* Trace levels for Dual SIM project*/
#else
  u32     DualSimExt2Reserved[1]; /* Extended trace levels for Dual SIM project*/
#endif //__MSTAR_DUAL_SIM_SIM_DUO__

  u16     IncenseDLFIRHandsfree[AUDIO_INCENSE_DL_FIR_LENTH];    /* 16x2 = 32B */
  u16     IncenseDLFIRHandset[AUDIO_INCENSE_DL_FIR_LENTH];      /* 16x2 = 32B */
  u16     IncenseDLFIRHeadset[AUDIO_INCENSE_DL_FIR_LENTH];      /* 16x2 = 32B */
  u16     IncenseULFIRHandsfree[AUDIO_INCENSE_UL_FIR_LENTH];    /* 16x2 = 32B */
  u16     IncenseULFIRHandset[AUDIO_INCENSE_UL_FIR_LENTH];      /* 16x2 = 32B */
  u16     IncenseULFIRHeadset[AUDIO_INCENSE_UL_FIR_LENTH];      /* 16x2 = 32B */
  u16     IncenseGsmCtaPath;

  u8      MpRelease;
  s8      AudioVtMicGain;



  //u8      PadFinal[97];

  u32     SDKDiagState[SDK_LAST_SUBPROCESS]; /* Trace levels. sdk store area */

  s8      AudioAtvGainHandsfree[8];
  s8      AudioAtvGainHeadset[8];

  u32     CamSensorIndex[2]; /* Index of camera sensor table, Cooper add */

  u32     RamDumpFlag;

  //Douglas : 16 *(8 * 2)*[8 * 6 + 4 * 2] = 1792 Bytes
  /*First Ramping Profile for GMSK*/
  u16     RampUpGMSKGSM900_H[NB_TXPWRRAMP];
  u16     RampDownGMSKGSM900_H[NB_TXPWRRAMP];
  u16     RampUpGMSKDCS_H[NB_TXPWRRAMP];
  u16     RampDownGMSKDCS_H[NB_TXPWRRAMP];
  u16     RampUpGMSKPCS_H[NB_TXPWRRAMP];
  u16     RampDownGMSKPCS_H[NB_TXPWRRAMP];
  u16     RampUpGMSKGSM850_H[NB_TXPWRRAMP];
  u16     RampDownGMSKGSM850_H[NB_TXPWRRAMP];

  /*Second Ramping Profile for GMSK*/
  u16     RampUpGMSKGSM900_M[NB_TXPWRRAMP];
  u16     RampDownGMSKGSM900_M[NB_TXPWRRAMP];
  u16     RampUpGMSKDCS_M[NB_TXPWRRAMP];
  u16     RampDownGMSKDCS_M[NB_TXPWRRAMP];
  u16     RampUpGMSKPCS_M[NB_TXPWRRAMP];
  u16     RampDownGMSKPCS_M[NB_TXPWRRAMP];
  u16     RampUpGMSKGSM850_M[NB_TXPWRRAMP];
  u16     RampDownGMSKGSM850_M[NB_TXPWRRAMP];

  /*Third Ramping Profile for GMSK*/
  u16     RampUpGMSKGSM900_L[NB_TXPWRRAMP];
  u16     RampDownGMSKGSM900_L[NB_TXPWRRAMP];
  u16     RampUpGMSKDCS_L[NB_TXPWRRAMP];
  u16     RampDownGMSKDCS_L[NB_TXPWRRAMP];
  u16     RampUpGMSKPCS_L[NB_TXPWRRAMP];
  u16     RampDownGMSKPCS_L[NB_TXPWRRAMP];
  u16     RampUpGMSKGSM850_L[NB_TXPWRRAMP];
  u16     RampDownGMSKGSM850_L[NB_TXPWRRAMP];

  /*First Ramping Profile for 8PSK*/
  u16     RampUp8PSKGSM900_H[NB_TXPWRRAMP];
  u16     RampDown8PSKGSM900_H[NB_TXPWRRAMP];
  u16     RampUp8PSKDCS_H[NB_TXPWRRAMP];
  u16     RampDown8PSKDCS_H[NB_TXPWRRAMP];
  u16     RampUp8PSKPCS_H[NB_TXPWRRAMP];
  u16     RampDown8PSKPCS_H[NB_TXPWRRAMP];
  u16     RampUp8PSKGSM850_H[NB_TXPWRRAMP];
  u16     RampDown8PSKGSM850_H[NB_TXPWRRAMP];

  /*Second Ramping Profile for 8PSK*/
  u16     RampUp8PSKGSM900_M[NB_TXPWRRAMP];
  u16     RampDown8PSKGSM900_M[NB_TXPWRRAMP];
  u16     RampUp8PSKDCS_M[NB_TXPWRRAMP];
  u16     RampDown8PSKDCS_M[NB_TXPWRRAMP];
  u16     RampUp8PSKPCS_M[NB_TXPWRRAMP];
  u16     RampDown8PSKPCS_M[NB_TXPWRRAMP];
  u16     RampUp8PSKGSM850_M[NB_TXPWRRAMP];
  u16     RampDown8PSKGSM850_M[NB_TXPWRRAMP];

  /*Third Ramping Profile for 8PSK*/
  u16     RampUp8PSKGSM900_L[NB_TXPWRRAMP];
  u16     RampDown8PSKGSM900_L[NB_TXPWRRAMP];
  u16     RampUp8PSKDCS_L[NB_TXPWRRAMP];
  u16     RampDown8PSKDCS_L[NB_TXPWRRAMP];
  u16     RampUp8PSKPCS_L[NB_TXPWRRAMP];
  u16     RampDown8PSKPCS_L[NB_TXPWRRAMP];
  u16     RampUp8PSKGSM850_L[NB_TXPWRRAMP];
  u16     RampDown8PSKGSM850_L[NB_TXPWRRAMP];

  //GMSK -> GMSK: No 3 options to choose
  u16     InterRampGMSKGMSKGSM900[NB_TXPWRRAMP];
  u16     InterRampGMSKGMSKDCS[NB_TXPWRRAMP];
  u16     InterRampGMSKGMSKPCS[NB_TXPWRRAMP];
  u16     InterRampGMSKGMSKGSM850[NB_TXPWRRAMP];

  //8PSK -> 8PSK: No 3 options to choose
  u16     InterRamp8PSK8PSKGSM900[NB_TXPWRRAMP];
  u16     InterRamp8PSK8PSKDCS[NB_TXPWRRAMP];
  u16     InterRamp8PSK8PSKPCS[NB_TXPWRRAMP];
  u16     InterRamp8PSK8PSKGSM850[NB_TXPWRRAMP];

  u8      AudioOutputDriverHeadsetGain;
  u8      AudioOutputDriverReceiverGain;
  u8      AudioOutputDriverLineOutGain;
  u8      AudioMicBiasLevel;

  u32     MixedDiagState[MIXED_LAST_SUBPROCESS]; /* Trace levels. mixed user store area */

  u8      WifiMac[6]; /* MAC address */

  //disable tmt trace function in factory mode
  u8      DisableErrorTraceInFacMode;
  u8      BootUpLogoIndex; /* Index of boot logo */

  /*
   Multimedia Capability Configuration (MCC)
   ck.wang @ 2010/04/29
   version 1.0
   */
  u32     MccVersion;
  u32     MccReserved[4];
  u32     MccAudioRecording;
  u32     MccAudioPlayback;
  u32     MccVideoRecording;
  u32     MccVideoPlayback;
  u32     MccMaxRomSizeEmu;

  /*
   Sensor ration parameters
   marine.wu @ 2010/06/30
   */
  u32     CamPriXYAxisMirror;     /* 0: No X,Y axis mirror */
                                  /* 1: X-axis mirror*/
                                  /* 2: X-axis mirror & Y-axis mirror*/
                                  /* 3: Y-axis mirror*/

  u32     CamPriRotationAngle;    /* 0: 0, 1: 90, 2: 180, 3: 270 */

  u32     CamSecXYAxisMirror;     /* 0: No X,Y axis mirror */
                                  /* 1: X-axis mirror*/
                                  /* 2: X-axis mirror & Y-axis mirror*/
                                  /* 3: Y-axis mirror*/
  u8     CamSecRotationAngle;    /* 0: 0, 1: 90, 2: 180, 3: 270 */
  u8     RFPower_4Bands;
  u8     RFPower_GSM900_DCS1800;
  u8     RFPower_PCS1900_GSM850;

  /*
   Max image capture resolution parameters
   spencer.cheng @ 2010/09/15
   */
  u16     CamMaxImageCaptureWidth;
  u16     CamMaxImageCaptureHeight;

  u16     LegacyTestGainTable_LB[94];
  u16     LegacyTestGainTable_HB[94];
  u16     LegacyInitRegTable[38];

  u16     AudioDspUlFirCoeffHandset[AUDIO_DSP_UL_FIR_LENGTH];     /* [32B] */
  u16     AudioDspUlFirCoeffHandsfree[AUDIO_DSP_UL_FIR_LENGTH];   /* [32B] */
  u16     AudioDspUlFirCoeffHeadset[AUDIO_DSP_UL_FIR_LENGTH];     /* [32B] */
  u16     AudioDspUlFirCoeffBt[AUDIO_DSP_UL_FIR_LENGTH];          /* [32B] */

  u32     TbuoDCSGSM900TR;
  u32     TbuoPCSGSM850TR;
  u8      TbuoPABandSel;
  u8      PABandSelHighBand;
  u8      TbuoPAVmode;
  u8      PAVmode8PSK;
  u8      TbuoPAEnable;
  u8      TbuoTxEnable;
  u8      TbuoRxEnable;
  u8      TbuoE2pDefEnable;
  u8      RMScrambleID[24];

  E2PMstarAgcDrcParams AudioMStarAgcDrc;       /* [32B] */
  E2PMstarCtaCtModeParams AudioMstarCTACTMode; /* [28B] */
  u8      AudioComfortNoiseGain[4];

  u32     BTAcrux2ChipVersion;
  u8      BootLogoID;
  u8      FacchHRThresSaic;        /* FACCH Half Rate Threshold for SAIC */
  u8      Pad16[2];

  u8      FmSpecialCarrierOn;
  u8      FmSpecialCarrierOff;
  u16     LCMModuleID;
  u16     LCMModuleIDChksum;

  u8      Pad19[2];

  u16     SDdrvRelatedCfg;
  u16     EnableUartPrintf;

  s8      AudioVtGainHandsfree[8];
  s8      AudioVtGainHeadset[8];

  /*
   * SIM card amount, standby capability
   * jack.hsueh @ 2010/11/25
   */
  u8      SimStandbyCapability;

  u8      TbuoSavedPinSet;
  u8      TbuoSi4209Set;
  u8      Pad21;
  u16     AdcBatActualVolt[2];
  u16     AdcBatRawData[2];
  u8      RaiReserveTrash;
  u8      Pad22[3];

    u32     ApusCtrlFlag_e;             // Apus control bits
    u16     ApusInitRegTableExt[9];     // For Apus initial register
    u8      ApusACLResult_e;            // store Apus ACL Cal result
    u8      Pad23[1];                   // for 32-bit alignment
    // Apus requires 4+(2*9)+1= 23+1 = 24, aligned to 32-bit

    s16     AFCSLOPE[8];                // for legacy AFC slope calibration
    u8      BoardGain_GSM900_H;   // for legacy AGC calibration with high gain index
    u8      BoardGain_DCS1800_H;
    u8      BoardGain_PCS1900_H;
    u8      BoardGain_GSM850_H;
    // 2*8 + 4 = 20 bytes

    /* MST for __RX_FREQ_COMP__ {*/
    // supporting two board gains in Apus/Legacy
    u16 RxFreqCompCh1GSM_HG;
    u16 RxFreqCompCh2GSM_HG;
    u16 RxFreqCompCh3GSM_HG;
    u16 RxFreqCompCh4GSM_HG;
    u16 RxFreqCompCh5GSM_HG;
    u16 RxFreqCompCh6GSM_HG;
    u16 RxFreqCompChCenterGSM_HG;

    u16 RxFreqCompCh1DCS_HG;
    u16 RxFreqCompCh2DCS_HG;
    u16 RxFreqCompCh3DCS_HG;
    u16 RxFreqCompCh4DCS_HG;
    u16 RxFreqCompCh5DCS_HG;
    u16 RxFreqCompCh6DCS_HG;
    u16 RxFreqCompChCenterDCS_HG;
    // 2*14 = 28

    u8  RxFreqCompBG1GSM_HG;
    u8  RxFreqCompBG2GSM_HG;
    u8  RxFreqCompBG3GSM_HG;
    u8  RxFreqCompBG4GSM_HG;
    u8  RxFreqCompBG5GSM_HG;
    u8  RxFreqCompBG6GSM_HG;

    u8  RxFreqCompBG1DCS_HG;
    u8  RxFreqCompBG2DCS_HG;
    u8  RxFreqCompBG3DCS_HG;
    u8  RxFreqCompBG4DCS_HG;
    u8  RxFreqCompBG5DCS_HG;
    u8  RxFreqCompBG6DCS_HG;
    // 1*12 = 12

    u16 RxFreqCompCh1GSM850_HG;
    u16 RxFreqCompCh2GSM850_HG;
    u16 RxFreqCompCh3GSM850_HG;
    u16 RxFreqCompCh4GSM850_HG;
    u16 RxFreqCompCh5GSM850_HG;
    u16 RxFreqCompCh6GSM850_HG;
    u16 RxFreqCompChCenterGSM850_HG;

    u16 RxFreqCompCh1PCS_HG;
    u16 RxFreqCompCh2PCS_HG;
    u16 RxFreqCompCh3PCS_HG;
    u16 RxFreqCompCh4PCS_HG;
    u16 RxFreqCompCh5PCS_HG;
    u16 RxFreqCompCh6PCS_HG;
    u16 RxFreqCompChCenterPCS_HG;
    // 2*14 = 28

    u8  RxFreqCompBG1GSM850_HG;
    u8  RxFreqCompBG2GSM850_HG;
    u8  RxFreqCompBG3GSM850_HG;
    u8  RxFreqCompBG4GSM850_HG;
    u8  RxFreqCompBG5GSM850_HG;
    u8  RxFreqCompBG6GSM850_HG;

    u8  RxFreqCompBG1PCS_HG;
    u8  RxFreqCompBG2PCS_HG;
    u8  RxFreqCompBG3PCS_HG;
    u8  RxFreqCompBG4PCS_HG;
    u8  RxFreqCompBG5PCS_HG;
    u8  RxFreqCompBG6PCS_HG;
    // 1*12 = 12
    // Total: 28 + 12 + 28 + 12 = 80

    // 799 - 44 - 80 = 675

  u16     NminPedestal[2];

  u8  RxpathDcocIGSM900 ;
  u8  RxpathDcocQGSM900 ;
  u8  RxpathDcocIDCS ;
  u8  RxpathDcocQDCS ;
  u8  RxpathDcocIPCS ;
  u8  RxpathDcocQPCS ;
  u8  RxpathDcocIGSM850 ;
  u8  RxpathDcocQGSM850 ;

  u8  RxpathLnaGSM900   ;
  u8  RxpathLnaDCS   ;
  u8  RxpathLnaPCS   ;
  u8  RxpathLnaGSM850   ;

  u8 RxpathIp2IGSM900  ;
  u8 RxpathIp2QGSM900  ;
  u8 RxpathIp2IDCS  ;
  u8 RxpathIp2QDCS  ;
  u8 RxpathIp2IPCS  ;
  u8 RxpathIp2QPCS  ;
  u8 RxpathIp2IGSM850  ;
  u8 RxpathIp2QGSM850  ;

  u16 RxpathIqmcAlphaGSM900;
  u16 RxpathIqmcBetaGSM900;
  u16 RxpathIqmcAlphaDCS;
  u16 RxpathIqmcBetaDCS;
  u16 RxpathIqmcAlphaPCS;
  u16 RxpathIqmcBetaPCS;
  u16 RxpathIqmcAlphaGSM850;
  u16 RxpathIqmcBetaGSM850;

  u16 RxpathDcocDeltaILB;
  u16 RxpathDcocDeltaQLB;
  u16 RxpathDcocDeltaIHB;
  u16 RxpathDcocDeltaQHB;

  u8      CalibrationReserved[196];

  u8      FmIsAntennaSupported;
  u8      FmIsRecordingSupported;
  u8	  EnablePedestalCal;
  u8      HiddenPartitionShowUp;

  u8      KMVScrambleID[20];

  u8      LCMDriverIndx[2];   // main & sub
  u8      SysTimeZone;
  u8      RfIsolationParameter;       // parameters(enable, rx/tx, and band) used for improving rf switch isolation performance

  u8      RfIsolationSwitchOnTime;    // switch on time used for improving rf switch isolation performance
  u8      RfIsolationSwitchOffTime;   // switch off time used for improving rf switch isolation performance
  u8      Pad24[2];

  E2PMstarAecParams AudioMstarAecHandsfree;       /* [36B] */
  E2PMstarAecParams AudioMstarAecHandset;         /* [36B] */
  E2PMstarAecParams AudioMstarAecHeadset;         /* [36B] */
  E2PMstarAecParams AudioMstarAecBT;              /* [36B] */

  u32      AudioAecSelection;

  u8      PadFinal1[251];    /* PadFinal1[799]; */
  u8      PadLastE2pField;
} E2pStck_t; // this struct is supposed to take 2304 bytes
#else



/********************** e2p structure for NAND flash **********************/
typedef struct
{
/*++++++++++++++   RO E2P DATA (CALIBRATION)  +++++++++++++++++++++*/

///// BEGINNING OF SECTION COMMON WITH DOWNLOADER ////////////////
   KeySignature_t SignaturePck;
   KeySignature_t SignatureNck;
   KeySignature_t SignatureNsck;
   KeySignature_t SignatureSpck;
   KeySignature_t SignatureCck;
   KeySignature_t SignatureParam;
   u8             MeLockData[E2P_DIM_GENPARAM+1];  /* Data of ME Lock */

   u8             E2pChkSumWritten;        /* State of the special parameters protection   */
   u8             Pad0;               /* pad 0 */
   u16            E2pTstPattern;           /* E2prom test pattern, must be equal to 0xABCD */

   vm_Imei_t         Imei;                    /* Inter Mobile Equip Ident   */
///// END OF SECTION COMMON WITH DOWNLOADER ////////////////

   u8      StaticDacValue;          /* Static AFC DAC value */
   u16     RoughDacValue;             /* To load in radio DAC.      */
   u32     RequiredPatches;           /* To be downloaded toward Dsp. */
   u8      BoardGain_GSM900;          /* Gain of the board, band GSM900  */
   u8      BoardGain_DCS1800;         /* Gain of the board, band DCS1800 */
   u8      BoardGain_PCS1900;         /* Gain of the board, band PCS1900 */
   u8      BoardGain_GSM850;          /* Gain of the board, band GSM850  */
   u8      AMCal_GSM850;   /* RF IC parameter for AM Loop calibration in GSM850 */
   u8      AMCal_GSM900;   /* RF IC parameter for AM Loop calibration in GSM900 */
   u8      AMCal_DCS1800; /* RF IC parameter for AM Loop calibration in DCS */
   u8      AMCal_PCS1900; /* RF IC parameter for AM Loop calibration in PCS */
   u16     Nmax8PSKGSM850[NB_TX_LEV_LOW_BAND_8PSK]; /* RF IC parameter : Nmax value for each PCL */
   u16     Nmax8PSKGSM900[NB_TX_LEV_LOW_BAND_8PSK]; /* RF IC parameter : Nmax value for each PCL */
   u16     Nmax8PSKDCS[NB_TX_LEV_HIGH_BAND_8PSK]; /* RF IC parameter : Nmax value for each PCL */
   u16     Nmax8PSKPCS[NB_TX_LEV_HIGH_BAND_8PSK]; /* RF IC parameter : Nmax value for each PCL */
   u16     NmaxGMSKGSM850[NB_TX_LEV_LOW_BAND_GMSK]; /* RF IC parameter : Nmax value for each PCL */
   u16     NmaxGMSKGSM900[NB_TX_LEV_LOW_BAND_GMSK]; /* RF IC parameter : Nmax value for each PCL */
   u16     NmaxGMSKDCS[NB_TX_LEV_HIGH_BAND_GMSK]; /* RF IC parameter : Nmax value for each PCL */
   u16     NmaxGMSKPCS[NB_TX_LEV_HIGH_BAND_GMSK]; /* RF IC parameter : Nmax value for each PCL */

   s16     AdcBatCoeff;      /* Battery voltage gain for ADC calibration */

   vm_Imei_t  Imei_2;           /* Inter Mobile Equip Ident 2 (9 bytes)  */
   u8      Pad1;             /* pad */

   /* MST for __PA_FREQ_COMP__ {*/
   u16 PAFreqCompChCenterGSM;
   u16 PAFreqCompChHighGSM;
   u16 PAFreqCompChLowGSM;
   u16 PAFreqCompChCenterDCS;
   u16 PAFreqCompChHighDCS;
   u16 PAFreqCompChLowDCS;
   u8  PAFreqCompPclGSM;
   u8  PAFreqCompPclDCS;
   u16 NmaxGmskFreqCompLowGSM;
   u16 NmaxGmskFreqCompHighGSM;
   u16 NmaxGmskFreqCompLowDCS;
   u16 NmaxGmskFreqCompHighDCS;
   /* MST for __PA_FREQ_COMP__ }*/

   /* MST for __RX_FREQ_COMP__ {*/
   u16 RxFreqCompCh1GSM;
   u16 RxFreqCompCh2GSM;
   u16 RxFreqCompCh3GSM;
   u16 RxFreqCompCh4GSM;
   u16 RxFreqCompCh5GSM;
   u16 RxFreqCompCh6GSM;
   u16 RxFreqCompChCenterGSM;

   u16 RxFreqCompCh1DCS;
   u16 RxFreqCompCh2DCS;
   u16 RxFreqCompCh3DCS;
   u16 RxFreqCompCh4DCS;
   u16 RxFreqCompCh5DCS;
   u16 RxFreqCompCh6DCS;
   u16 RxFreqCompChCenterDCS;

   u8  RxFreqCompBG1GSM;
   u8  RxFreqCompBG2GSM;
   u8  RxFreqCompBG3GSM;
   u8  RxFreqCompBG4GSM;
   u8  RxFreqCompBG5GSM;
   u8  RxFreqCompBG6GSM;

   u8  RxFreqCompBG1DCS;
   u8  RxFreqCompBG2DCS;
   u8  RxFreqCompBG3DCS;
   u8  RxFreqCompBG4DCS;
   u8  RxFreqCompBG5DCS;
   u8  RxFreqCompBG6DCS;
   /* MST for __RX_FREQ_COMP__ }*/

   u8  TxFreqCompEnable;
   u8  RxFreqCompEnable;

   u8  BtAddr[8];
   u8  Sn[20];

   /* MST for __PA_FREQ_COMP__ {*/
   u16 PAFreqCompChCenterGSM850;
   u16 PAFreqCompChHighGSM850;
   u16 PAFreqCompChLowGSM850;
   u16 PAFreqCompChCenterPCS;
   u16 PAFreqCompChHighPCS;
   u16 PAFreqCompChLowPCS;
   u8  PAFreqCompPclGSM850;
   u8  PAFreqCompPclPCS;
   u16 NmaxGmskFreqCompLowGSM850;
   u16 NmaxGmskFreqCompHighGSM850;
   u16 NmaxGmskFreqCompLowPCS;
   u16 NmaxGmskFreqCompHighPCS;
   /* MST for __PA_FREQ_COMP__ }*/

   /* MST for __RX_FREQ_COMP__ {*/
   u16 RxFreqCompCh1GSM850;
   u16 RxFreqCompCh2GSM850;
   u16 RxFreqCompCh3GSM850;
   u16 RxFreqCompCh4GSM850;
   u16 RxFreqCompCh5GSM850;
   u16 RxFreqCompCh6GSM850;
   u16 RxFreqCompChCenterGSM850;

   u16 RxFreqCompCh1PCS;
   u16 RxFreqCompCh2PCS;
   u16 RxFreqCompCh3PCS;
   u16 RxFreqCompCh4PCS;
   u16 RxFreqCompCh5PCS;
   u16 RxFreqCompCh6PCS;
   u16 RxFreqCompChCenterPCS;

   u8  RxFreqCompBG1GSM850;
   u8  RxFreqCompBG2GSM850;
   u8  RxFreqCompBG3GSM850;
   u8  RxFreqCompBG4GSM850;
   u8  RxFreqCompBG5GSM850;
   u8  RxFreqCompBG6GSM850;

   u8  RxFreqCompBG1PCS;
   u8  RxFreqCompBG2PCS;
   u8  RxFreqCompBG3PCS;
   u8  RxFreqCompBG4PCS;
   u8  RxFreqCompBG5PCS;
   u8  RxFreqCompBG6PCS;
   u8  Pad2[2];                                     /* pad 3 */
   /* MST for __RX_FREQ_COMP__ }*/

   u8  FacProdRecord[E2P_PROD_STATION_RECORD_LEN]; /* 32B */

   u8  GSensorCalibration[8]; /* 8B */
   u8  WifiMac[6]; /* MAC address */
   u16 LCMModuleID;
   u16 LCMModuleIDChksum;

   u16 AdcChargCoeff;                   /* Charger voltage gain for ADC calibration */
   u16 AdcIchargCoeff;                  /* Charger current gain for ADC calibration */
   u16 AdcTempCoeff;                    /* Battery temperature voltage gain for ADC calibration */
   s32 AdcBatOffset;                    /* Battery voltage offset for ADC calibration */
   s32 AdcChargOffset;                  /* Charger voltage offset for ADC calibration */
   s32 AdcIchargOffset;                 /* Charger current offset for ADC calibration */
   s32 AdcTempOffset;                   /* Battery temperature voltage offset for ADC calibration */
   u16 AdcBatActualVolt[2];
   u16 AdcBatRawData[2];
    /*Remove 9*u8 Pad, Add 3*u8 Pad = Remove 6 Pad, and Remove u8* 168,
      total remove u8 *174  3230 + 174 = 3404, 6 bytes for WifiMac, so 3404-6=3398 */

    s16     AFCSLOPE[8];                // for legacy AFC slope calibration
    u8      BoardGain_GSM900_H;   // for legacy AGC calibration with high gain index
    u8      BoardGain_DCS1800_H;
    u8      BoardGain_PCS1900_H;
    u8      BoardGain_GSM850_H;
    // 2*8 + 4 = 20 bytes

    /* MST for __RX_FREQ_COMP__ {*/
    // supporting two board gains in Apus/Legacy
    u16 RxFreqCompCh1GSM_HG;
    u16 RxFreqCompCh2GSM_HG;
    u16 RxFreqCompCh3GSM_HG;
    u16 RxFreqCompCh4GSM_HG;
    u16 RxFreqCompCh5GSM_HG;
    u16 RxFreqCompCh6GSM_HG;
    u16 RxFreqCompChCenterGSM_HG;

    u16 RxFreqCompCh1DCS_HG;
    u16 RxFreqCompCh2DCS_HG;
    u16 RxFreqCompCh3DCS_HG;
    u16 RxFreqCompCh4DCS_HG;
    u16 RxFreqCompCh5DCS_HG;
    u16 RxFreqCompCh6DCS_HG;
    u16 RxFreqCompChCenterDCS_HG;
    // 2*14 = 28

    u8  RxFreqCompBG1GSM_HG;
    u8  RxFreqCompBG2GSM_HG;
    u8  RxFreqCompBG3GSM_HG;
    u8  RxFreqCompBG4GSM_HG;
    u8  RxFreqCompBG5GSM_HG;
    u8  RxFreqCompBG6GSM_HG;

    u8  RxFreqCompBG1DCS_HG;
    u8  RxFreqCompBG2DCS_HG;
    u8  RxFreqCompBG3DCS_HG;
    u8  RxFreqCompBG4DCS_HG;
    u8  RxFreqCompBG5DCS_HG;
    u8  RxFreqCompBG6DCS_HG;
    // 1*12 = 12

    u16 RxFreqCompCh1GSM850_HG;
    u16 RxFreqCompCh2GSM850_HG;
    u16 RxFreqCompCh3GSM850_HG;
    u16 RxFreqCompCh4GSM850_HG;
    u16 RxFreqCompCh5GSM850_HG;
    u16 RxFreqCompCh6GSM850_HG;
    u16 RxFreqCompChCenterGSM850_HG;

    u16 RxFreqCompCh1PCS_HG;
    u16 RxFreqCompCh2PCS_HG;
    u16 RxFreqCompCh3PCS_HG;
    u16 RxFreqCompCh4PCS_HG;
    u16 RxFreqCompCh5PCS_HG;
    u16 RxFreqCompCh6PCS_HG;
    u16 RxFreqCompChCenterPCS_HG;
    // 2*14 = 28

    u8  RxFreqCompBG1GSM850_HG;
    u8  RxFreqCompBG2GSM850_HG;
    u8  RxFreqCompBG3GSM850_HG;
    u8  RxFreqCompBG4GSM850_HG;
    u8  RxFreqCompBG5GSM850_HG;
    u8  RxFreqCompBG6GSM850_HG;

    u8  RxFreqCompBG1PCS_HG;
    u8  RxFreqCompBG2PCS_HG;
    u8  RxFreqCompBG3PCS_HG;
    u8  RxFreqCompBG4PCS_HG;
    u8  RxFreqCompBG5PCS_HG;
    u8  RxFreqCompBG6PCS_HG;
    // 1*12 = 12
    // Total: 28 + 12 + 28 + 12 = 80
    // 3360 - 100 = 3260

    u16 NminPedestal[2];

  u8  RxpathDcocIGSM900 ;
  u8  RxpathDcocQGSM900 ;
  u8  RxpathDcocIDCS ;
  u8  RxpathDcocQDCS ;
  u8  RxpathDcocIPCS ;
  u8  RxpathDcocQPCS ;
  u8  RxpathDcocIGSM850 ;
  u8  RxpathDcocQGSM850 ;

  u8  RxpathLnaGSM900   ;
  u8  RxpathLnaDCS   ;
  u8  RxpathLnaPCS   ;
  u8  RxpathLnaGSM850   ;

  u8 RxpathIp2IGSM900  ;
  u8 RxpathIp2QGSM900  ;
  u8 RxpathIp2IDCS  ;
  u8 RxpathIp2QDCS  ;
  u8 RxpathIp2IPCS  ;
  u8 RxpathIp2QPCS  ;
  u8 RxpathIp2IGSM850  ;
  u8 RxpathIp2QGSM850  ;

  u16 RxpathIqmcAlphaGSM900;
  u16 RxpathIqmcBetaGSM900;
  u16 RxpathIqmcAlphaDCS;
  u16 RxpathIqmcBetaDCS;
  u16 RxpathIqmcAlphaPCS;
  u16 RxpathIqmcBetaPCS;
  u16 RxpathIqmcAlphaGSM850;
  u16 RxpathIqmcBetaGSM850;

  u16 RxpathDcocDeltaILB;
  u16 RxpathDcocDeltaQLB;
  u16 RxpathDcocDeltaIHB;
  u16 RxpathDcocDeltaQHB;

   u8  ProtPadFinal[2968];    /* ProtPadFinal[3012]; */
   u8  CusCalibrationData[200];
   u8  ProtPadFinal1[48];
   u8  ProtVersion[4];
   u8  ProtValidate[4];
//} E2pCal_t; // this struct is supposed to take 2304 bytes
/*--------------   RO E2P DATA (CALIBRATION)  --------------------*/

/*++++++++++++++   RO E2P DATA (INCLUDING STACK, LIB, APP)  +++++++++++++++++++++*/
//typedef struct
//{
///// BEGINNING OF SECTION COMMON WITH DOWNLOADER ////////////////
///// BEGINNING OF SECTION COMMON WITH DOWNLOADER ////////////////

    /*++++++++++++++   STACK RO E2P DATA  +++++++++++++++*/
    u8   MirrorPad[2048];

    u8   ObjNumberOf32k;          /* Number of sectors used for E2P's Object Management or FMS' Random Access Items */
    u8   ObjFormatChkSum;         /* 255 - ObjNumberOfSectors */

///// END OF SECTION COMMON WITH DOWNLOADER ////////////////

    s8   AntennaGain;
    u8   TrcNumberOf32k;          /* Number of sectors used for E2P's BackTrace */
    u8   TrcFormatChkSum;         /* 100 - TrcNumberOfSectors */

    u8   Pad7[3];                 /* pad */

    u32  L1cNbWakeFrame;
    u32  L1cNbSleepFrame;
    u32  L1cNbTxFrame;
    u8   ImeiSV;                  /* SV part of the IMEISV     */

    u8   Pad8[3];                 /* pad */

    u32  L1cNbDcPlgFrame;
    u8   ExtendedCapability [4];  /* Bit12&13: the status of SYS INFO listening during TBF in GPRS;  Bit16: Access Burst 11 bits */
    u8   MaskFoiPowerLev [4];     /* band 1 & 2 GSM900 et DCS */
    u8   TxPwrRampNbNullPts;      /* number of sample fixes to zero in power ramp ramp */
    u8   EplmnBehaviour;

    u8   Pad13[2];                /* pad */

    u32  Hard2Capability;
    u8   DrxParam  [E2P_DIM_DRX]; /* DRX parameters V           */
    u8   MsClass;                 /* Ms class capability        */
    u8   StackConfig;             /* STACK Configuration        */
    u8   ReadyTimer;
    u8   DataSecurity;            /* Type of Data Security (V42, MNP2...) */
    u8   OpenCtrl;                /* flags for open-xx         */
    u8   Egprs8PskUplinkCap;
    u8   C1Threshold;

    u8   Pad15;                   /* pad */

    u16  AudioCtrl;
    u8   AudioLoopTest;

    u8   Pad16;                   /* pad */

    u16  AudioFirCoeff[AUDIO_FIR_LENGTH];

    // Battery E2P parameters
    u16  BattLev[10];                     /* Definition of battery levels */
    u16  MaxVolt;                         /* Maximum voltage of battery */
    u16  BatteryCapacity;                 /* Maximum capacity of battery */
    u8   ThermistorCurrent;               /* NTC thermistor source current */
    u8   ThermistorRisingTime;            /* Battery temperature conversion delay */
    u16  MaxBatteryTemp;                  /* Maximum battery temperature */
    u16  MinBatteryTemp;                  /* Minimum battery temperature */
    u16  VoltageDropBeforeRecharge;       /* Minimum voltage drop before recharging */

    u8   VoltageLevelHysteresis;          /* Voltage level for hysterisis */
    u8   BatteryMeasureTimeOut;           /* Delay between 2 battery data measures */
    u8   BatterySecurityWaitTimeOut;      /* Value of battery security timer */

    u8   Pad9;

    u16  BatteryFastChargingTimeOut;      /* Maximum time for battery charge */
    u16  FastChargeBatteryStatusTimeOut;  /* Delay between 2 battery status in charging mode */

    u8   Pad17[2];                        /* pad */

// JY: Weird, it seems we have no choice but place the extended fields here.
//     Otherwise cus file will be unusable.
// FIXME: Check if we can place it else where.
    u32  DualSimDiagState[DUAL_SIM_EXTENDED_LAST_SUBPROCESS]; /* Trace levels for Dual SIM project*/
    u32  DuoStatus;

    /* Audio calibration */
    u8   MicGains[4];                                                        /* 4B */
    u16  AudioDspUlFirGainHandset;
    u16  AudioDspUlFirGainHandsfree;
    u16  AudioDspUlFirGainHeadset;
    u16  AudioDspUlFirGainBt;

    u8   AudioMediaDriverHeadsetGain;
    u8   AudioMediaDriverReceiverGain;
    u8   AudioMediaDriverLineOutGain;

    u8   AudioClassDGain;
    u8   AudioMediaClassDGain;

    s8   AudioAtvMicGain;
    s8   AudioFmMicGain;
    s8   AudioVMHeadsetMicGain;
    s8   AudioCamHeadsetMicGain;
    s8   AudioPcmRecHeadsetMicGain;

    u8   AudioOutputDriverSpkHeadsetGain;
    u8   AudioMediaDriverSpkHeadsetGain;
    u8   AudioExtClassDGain;
    u8   AudioMediaExtClassDGain;

    s8  AudioRingToneGainHandsfree[8];
    s8  AudioRingToneGainHeadset[8];

    u16  dummyPad_IncenseULFIRHeadset[1];
    u8   batLowBatteryReportPeriod;     //2177
    s8   AudioVMMicGain;
    s8   AudioCamMicGain;
    s8   AudioDLGainHandsfree[8];
    s8   AudioDLGainHandset[8];
    s8   AudioDLGainHeadset[8];
    s8   AudioDLGainBT[8];

    u8   Pad20;                                      /* pad */

    u32  PSConfig;
    u16  AudioFirCoeffHandsfree[AUDIO_FIR_LENGTH];   /* [64B]/64B    */
    u16  AudioFirCoeffHeadset[AUDIO_FIR_LENGTH];     /* [64B]/128B   */
    u16  AudioFirCoeffBT[AUDIO_FIR_LENGTH];          /* [64B]/192B   */
    E2PULDpgaAecParams AudioULDpgaAecHandsfree;      /* [56B]/248B   */
    E2PULDpgaAecParams AudioULDpgaAecHandset;        /* [56B]/304B   */
    E2PULDpgaAecParams AudioULDpgaAecHeadset;        /* [56B]/360B   */
    E2PULDpgaAecParams AudioULDpgaAecBT;             /* [56B]/416B   */
    u32  AudioCaliCtrl;                              /* 4B/420B      */
    s8   AudioSTGain[4];                             /* Audio SideTone Gain */
    u8   Dvga8PSKGSM850[NB_TX_LEV_LOW_BAND_8PSK];    /* RF IC parameter : DVGA value for each PCL */
    u8   Dvga8PSKGSM900[NB_TX_LEV_LOW_BAND_8PSK];    /* RF IC parameter : DVGA value for each PCL */
    u8   Dvga8PSKDCS[NB_TX_LEV_HIGH_BAND_8PSK];      /* RF IC parameter : DVGA value for each PCL */
    u8   Dvga8PSKPCS[NB_TX_LEV_HIGH_BAND_8PSK];      /* RF IC parameter : DVGA value for each PCL */

    s8   AudioMp3GainHandsfree[8];
    s8   Audio3gpGainHandsfree[8];
    s8   AudioIptvGainHandsfree[8];
    s8   AudioFmGainHandsfree[8];
    s8   AudioDtmfGainHandsfree[8];
    s8   AudioMp3GainHeadset[8];
    s8   Audio3gpGainHeadset[8];
    s8   AudioIptvGainHeadset[8];
    s8   AudioFmGainHeadset[8];
    s8   AudioDtmfGainHeadset[8];
    s8   AudioKeypadToneGain[4];

    //u8   Pad10[3];

#if defined( __MSTAR_DUAL_SIM__ ) && defined( __MSTAR_DUAL_SIM_SIM_DUO__ )
    u32  DualSimExt2DiagState[DUAL_SIM_EXTENDED2_LAST_SUBPROCESS]; /* Trace levels for Dual SIM project*/
#else
    u32  DualSimExt2Reserved[1]; /* Extended trace levels for Dual SIM project*/
#endif //__MSTAR_DUAL_SIM_SIM_DUO__
    u8      GsensorDirection;
    u8      E2pChkSum;               /* Checksum of the special protected parameters */
    u8      E2pMirror;               /* Must be set to 2 to trigger a mirror setup at next startup */
    u8      RaiEntriesNumber;        /* User defined number of entries for Random Access Items divided by 256 */
    u8      FlashJournalCtx[5];      /* Private flash operations context */

    struct AdVolumes_s
    {
        u8  JavaVolumeSize;          /* Size of the java volume / 0x10000 */
        u8  DotaVolumeSize;          /* Size of the volume used for download over the air operations / 0x10000 */
        u8  SoundVolumeSize;         /* Size of the volume used to store melodies, voice memos, ... / 0x10000 */
        u8  JavaExecVolumeSize;      /* Size of the volume used to execute java applets / 0x10000 */
        u8  AdReserved[3];
        u8  AdControlSum;            /* Sum of the "non-reserved" fields */
    } AdVolumes;                     /* FMS "Applications&Data" volumes definition */

    s8      AudioPcmRecMicGain;
    u16     IncenseDLFIRHandsfree[AUDIO_INCENSE_DL_FIR_LENTH];    /* 16x2 = 32B */
    u16     IncenseDLFIRHandset[AUDIO_INCENSE_DL_FIR_LENTH];      /* 16x2 = 32B */
    u16     IncenseDLFIRHeadset[AUDIO_INCENSE_DL_FIR_LENTH];      /* 16x2 = 32B */
    u16     IncenseGsmCtaPath;


    s8      AudioAtvGainHandsfree[8];//RO
    s8      AudioAtvGainHeadset[8];//RO

    u8      Pad31[3060];
    /*--------------   STACK RO E2P DATA  -----------------*/



    /*++++++++++++++   LIB, APP RO E2P DATA  +++++++++++++++*/
    u32                       LastCallTime;                       /* Last Calling Time */
    u32                       TotalCallTime;                      /* Total Call Time */
    LockPwd_t                 LockPwd;                            /* Phone Lock password */
    u8                        SmsConvTab;                         /* Selected char. set for SMS */
    u8                        Language;                           /* Active Language */
    Greet_t                   Greeting;                           /* Greeting message */
    u8                        SmsCbCustomFlags;                   /* bits 1 0 : status : 00 desactived */
    NetStr_t                  NetStr;                             /* MCC & MNC Network values */
    u32                       ProdTestRes;                        /* Result of Production Test */
    Greet2_t                  PadCGLGreeting2;                    /* Greeting2 message */

    u8                        Pad28[3];

    SettingsExt_bk2_t         SettingsExt;                        /* New settings for handsets */
    u8                        SettingMode;                        /* Current profile */
    u8                        TerminalProfileLength;              /* Terminal profile length : STK */
    u8                        PadCGLRingLevelAux;                 /* Ring level */

  //  u8                        Pad29;
    u8                        Uart;
    u32                       CustomerKey;                        /* Customer Key */
    CustomLabel_t             CustomLabel;                        /* Customer Version Label */

    u8                        VmlNbMaxASEClient;                  /* Define how many applications can register to ASE */
    u8                        AtDataRate;                         /* Preferred rate for MT data call: Half or Full rate  */
    u8                        Mmt_Ecc[E2P_DIM_MMT_ECC*3];

 //   u8                        Pad30;
    u8                        LlcSettings;
    u8                        RegControlMode;
    Message_waiting_group_bk2_t   message_waiting_group;              /* Message waiting group */
    u32                       GpsUnsolManagement;



    u32                       OatStartAddr;
    u8                        AdnNeedReload;                      /* check whether we shall reload ADN */
    u8                        AdnNeedSyncToMT;                    /* check whether ADN shall be sync to MT */

    u8                        PhbAdnChecksum[E2P_DIM_CHECKSUM];
    #ifdef __MSTAR_DUAL_SIM_E2P__
    u8                        SmsCbCustomFlags_2;                 /* bits 1 0 : status : 00 desactived */
    u8                        PhbAdnChecksum_2[E2P_DIM_CHECKSUM];
    u8                        AdnNeedReload_2;                    /* check whether we shall reload ADN2 */
    u32                       GpsUnsolManagement_2;
    Settings_bk2_t            Settings_BK;                        /* Settings for Volume&Sound */

    u8                        AdnNeedSyncToMT_2;                  /* check whether ADN2 shall be sync to MT */
    u8                        E2pNetMode_2_BK;                    /* Network selection mode     */
    u8                        StatusReport_BK;                    /* SMS Status Report parameters */
    u8                        StatusReport_2_BK;                  /* SMS Status Report parameters */
    Settings_bk2_t            Settings_2_BK;                      /* Settings for Volume&Sound */
    u8                        E2pNetMode_BK;                      /* Network selection mode     */
    u8                        CommonGprsSettings_2;
    #else
    u8                        DualSimReserved0[60];
    #endif
   // u8                        CFUQueryPowerOn;                    /* Default CFU when power on setting */
   // u8                        MMIRunMode;                         /* 0: business mode, 1: factory mode */
    /*-------------   LIB, APP RO E2P DATA  ---------------*/

    u8      PadStackRO[3870];

    /*-------------   Audio / DSP RO E2P DATA  ---------------*/
    //UL
    E2PMstarEchoConfCfgDataParams  AudioMStarULHandsetEchoConf;       /* [28B] */
    E2PMstarNSCfgDataParams  AudioMStarULHandsetNS;       /* [12B] */
    E2PMstarDrcCfgDataParams  AudioMStarULHandsetDrc;       /* [24B] */
    E2PMstarFiltCoeffsCfgDataParams  AudioMStarULHandsetFiltCoeffs;       /* [72B] */
    E2PMstarEchoConfCfgDataParams  AudioMStarULHeadsetEchoConf;       /* [28B] */
    E2PMstarNSCfgDataParams  AudioMStarULHeadsetNS;       /* [12B] */
    E2PMstarDrcCfgDataParams  AudioMStarULHeadsetDrc;       /* [24B] */
    E2PMstarFiltCoeffsCfgDataParams  AudioMStarULHeadsetFiltCoeffs;       /* [72B] */
    E2PMstarEchoConfCfgDataParams  AudioMStarULHandFreeEchoConf;       /* [28B] */
    E2PMstarNSCfgDataParams  AudioMStarULHandFreeNS;       /* [12B] */
    E2PMstarDrcCfgDataParams  AudioMStarULHandFreeDrc;       /* [24B] */
    E2PMstarFiltCoeffsCfgDataParams  AudioMStarULHandFreeFiltCoeffs;       /* [72B] */
    E2PMstarEchoConfCfgDataParams  AudioMStarULBluetoothEchoConf;       /* [28B] */
    E2PMstarNSCfgDataParams  AudioMStarULBluetoothNS;       /* [12B] */
    E2PMstarDrcCfgDataParams  AudioMStarULBluetoothDrc;       /* [24B] */
    E2PMstarFiltCoeffsCfgDataParams  AudioMStarULBluetoothFiltCoeffs;       /* [72B] */
    //DL
    E2PMstarEchoConfCfgDataParams  AudioMStarDLHandsetEchoConf;       /* [28B] */
    E2PMstarNSCfgDataParams  AudioMStarDLHandsetNS;       /* [12B] */
    E2PMstarDrcCfgDataParams  AudioMStarDLHandsetDrc;       /* [24B] */
    E2PMstarFiltCoeffsCfgDataParams  AudioMStarDLHandsetFiltCoeffs;       /* [72B] */
    E2PMstarEchoConfCfgDataParams  AudioMStarDLHeadsetEchoConf;       /* [28B] */
    E2PMstarNSCfgDataParams  AudioMStarDLHeadsetNS;       /* [12B] */
    E2PMstarDrcCfgDataParams  AudioMStarDLHeadsetDrc;       /* [24B] */
    E2PMstarFiltCoeffsCfgDataParams  AudioMStarDLHeadsetFiltCoeffs;       /* [72B] */
    E2PMstarEchoConfCfgDataParams  AudioMStarDLHandFreeEchoConf;       /* [28B] */
    E2PMstarNSCfgDataParams  AudioMStarDLHandFreeNS;       /* [12B] */
    E2PMstarDrcCfgDataParams  AudioMStarDLHandFreeDrc;       /* [24B] */
    E2PMstarFiltCoeffsCfgDataParams  AudioMStarDLHandFreeFiltCoeffs;       /* [72B] */
    E2PMstarEchoConfCfgDataParams  AudioMStarDLBluetoothEchoConf;       /* [28B] */
    E2PMstarNSCfgDataParams  AudioMStarDLBluetoothNS;       /* [12B] */
    E2PMstarDrcCfgDataParams  AudioMStarDLBluetoothDrc;       /* [24B] */
    E2PMstarFiltCoeffsCfgDataParams  AudioMStarDLBluetoothFiltCoeffs;       /* [72B] */
    u8      AudioAecOn[4];
    u32     AudioAecSelection;

    E2PMstarAecParams AudioMstarAecHandsfree;       /* [36B] */
    E2PMstarAecParams AudioMstarAecHandset;         /* [36B] */
    E2PMstarAecParams AudioMstarAecHeadset;         /* [36B] */
    E2PMstarAecParams AudioMstarAecBT;              /* [36B] */
    u8      PadStackAudio[808];
/*-------------   RO E2P DATA (INCLUDING STACK, LIB, APP, Audio)  --------------------*/



/*+++++++++++++   RW E2P DATA (STACK)  +++++++++++++++++++++++++++++++++++++*/
    u8      SysFeature;              /* features for Sys EL     */

  //  u8      Pad21[3];

    KeySignature_t SignatureForCustomerFeatures;

    u8      PadDualSimExt2[3];

    u32     CustomerFeatures;
    u8      ExhaustivePlmnSearch;    /* Fast and exhaustive emergency mode   */
    u8      v24_NominalMode;         /* 0 => V24 starts in HAPC mode */
    u8      v24_Framing;             /* Framing (parity, stop ...) */
    u8      v24_SignalForUsb;
    u8      v24_UsbFraming;          /* Usb framing (parity, stop ...) */
    u8      v24_UsbSpeed;            /* V.24 usb handler speed         */
    u8      v24_UsbOptions;          /* V.24 usb handler Options       */
    u8      v24_UsbExtOptions;       /* V24 usb user profile           */
    u8      v24_Speed;               /* V.24 handler speed         */
    u8      v24_Options;             /* V.24 Handler Options       */
    u8      v24_SerialOn;            /* serial link activation     */
    u8      v24_Uart2Framing;        /* Uart2 framing (parity, stop ...) */
    u8      v24_Uart2Speed;          /* V.24 uart2 handler speed         */
    u8      v24_Uart2Options;        /* V.24 uart2 handler Options       */
    u8      v24_Uart2ExtOptions;     /* V24 uart2 user profile           */

    u8      Pad23;

    u32     v24_ExtOptions;          /* V24 user profile           */
    u32     RtkMbxState[2];          /* Remote mailboxes for rtk    */
    u32     RtkTaskState;            /* Remote tasks for RTK        */
    u32     DiagState [LAST_SUBPROCESS + 1]; /* Trace levels.       */
    vm_Imsi_t  Imsi;                    /* Inter Mobile Subs Ident    */
    u8      E2pNetMode;              /* Network selection mode     */
#ifdef __MOKA_DESCR_EEPROM__
    u8      EnabledFtr [6];          /* Enabled features.          */
    u8      BizzFtr    [2];          /* Business features          */
#else
    u8      EnabledFtr [8];          /* Enabled features.          */
#endif

  //  u8      Pad24[2];
    u8      AecType;
    u8      DotaState;
                  /* DOTA state : Idle, Copy, Successful, Error*/
    u32     ExtendedDiagState[EXTENDED_LAST_SUBPROCESS]; /* Trace levels. second store area       */
    u16     ProdArfcn;
    u8      SimTimerFix;
    u8      SimPolIntTimer;
    struct T3212Status_s
    {
        u16 T3212StartTimeYear;
        u8  T3212StartTimeMonth;
        u8  T3212StartTimeDay;
        u8  T3212StartTimeHour;
        u8  T3212StartTimeMinute;
        u8  T3212StartTimeSecond;
        u8  Pad12;
        u16 T3212StartTimeSecondFracPart;
        u8  T3212Value;
        u8  T3212Remain;
        u32 T3212Remain2;
    } T3212Status;
    /* Nvx param GDiagState -> TxPwrCalNmin4 */
    u32     GDiagState  [GPRS_LAST_SUBPROCESS]; /* GPRS Trace levels          */
    u8      IrActive;                /* Irda : Boolean Activation */
    u8      IrDiscTime;              /* Irda : Disconnection Time */
    u8      IrMaxTat;                /* Irda : Max Turn around Time */
    u8      IrPreambTh;              /* Irda : Preambule threshold */
    u8      DataCompress;            /* Type of Data Compression */

    u8      EquivPlmnList [19];      /* length + (6 * PLMN_LGTH) */
    u8      Rai[ 6 ];                /* SIM PARAMETERS         */
    u8      P_Tmsi[ 4 ];
    u8      P_Tmsi_Signature[ 3 ];
    u8      UpdateStatus;
    u8      GKc[ 8 ];
    u8      GCksn;
    vm_Imsi_t  PreviousImsi;
    u8      ManuallySelectedPlmn [4];
    u8      LastBa[144];
    u32     Extended2DiagState[EXTENDED2_LAST_SUBPROCESS]; /* Trace levels. second extended store area */
    u8      VendorString[E2P_DIM_MANUFACTURER]; /* String for manufacturer */
    u8      SpeedProfileConfig[4];
    u8      BatteryLevel;                    /* Current battery level index */

   // u8      Pad25;

    // ADC Calibration E2P parameters

    u8      EnableTaskMgr;
    u8      PadAdc[22];

    u8      LastBa_2[144];
    u8      ExhaustivePlmnSearch_2;          /* Fast and exhaustive emergency mode   */

    u8      EquivPlmnList_2 [19];            /* length + (6 * PLMN_LGTH) */
    u8      ManuallySelectedPlmn_2 [4];

   // u8      Pad26;






    struct T3212Status_2_s
    {
        u16 T3212StartTimeYear_2;
        u8  T3212StartTimeMonth_2;
        u8  T3212StartTimeDay_2;
        u8  T3212StartTimeHour_2;
        u8  T3212StartTimeMinute_2;
        u8  T3212StartTimeSecond_2;
        u8  Pad18;
        u16 T3212StartTimeSecondFracPart_2;
        u8  T3212Value_2;
        u8  T3212Remain_2;
        u32 T3212Remain2_2;
    } T3212Status_2;
    u16     ProdArfcn_2;
    u8      E2pNetMode_2;                    /* Network selection mode     */
    vm_Imsi_t  PreviousImsi_2;
    u8      Rai_2[ 6 ];              /* SIM PARAMETERS         */
    u8      P_Tmsi_2[ 4 ];
    u8      UpdateStatus_2;
    u8      P_Tmsi_Signature_2[ 3 ];
    u8      GKc_2[ 8 ];
    u8      GCksn_2;
    vm_Imsi_t  Imsi_2;
   // u8      Pad19[1];

    struct rtcTimeSave_s
    {
        u8  rtcTimeSaved_DataValid;
        u8  rtcTimeSaved_Year;
        u8  rtcTimeSaved_Month;
        u8  rtcTimeSaved_Day;
        u8  rtcTimeSaved_Hour;
        u8  rtcTimeSaved_Minute;
        u8  rtcTimeSaved_Second;
        u8  rtcTimeSaved_Period;
    } rtcTimeSave;

    u8      TrcNumberOfSectors_tmp;       /* this obj should be deleted later */
    u8      TrcFormatChkSum_tmp;          /* this obj should be deleted later */
    u8      TraceStoreSD;                  /* Mode for TMT trace to SD card (1) Circular Buffer (2) FlipFlap Buffer */
    u8      MpRelease;

    u16     IncenseULFIRHandsfree[AUDIO_INCENSE_UL_FIR_LENTH];    /* 16x2 = 32B */
    u16     IncenseULFIRHandset[AUDIO_INCENSE_UL_FIR_LENTH];      /* 16x2 = 32B */
    u16     IncenseULFIRHeadset[AUDIO_INCENSE_UL_FIR_LENTH];      /* 16x2 = 32B */
   // u8      PadAK[2];
    u32     SDKDiagState[SDK_LAST_SUBPROCESS]; /* Trace levels. sdk store area */

// no use E2P +

    Version_t       VersHard;                /* number of hard version */
    Version_t       VersSoft;                /* number of soft version */
    u8              rr_ScanMode;             /* Toggle between rr & rrs    */
    u8              ScratchMemStatus; /* Status of the Scratch Memory in Flash */

    Greet_t         ProdData1;               /* Greeting message   size 49            */
    u8              PadAJ;
    s32             ToiDrift;
    ProdNumber_t    ProdNumber;              /* Production information       */
    u8              MonoBand;                /* Band supported in monoband */
    MsCm3_t         MsCm3;                   /* Mobile station classmk 3   */
    u16             BearerCfg;               /* EFR,HALF RATE,DATA SPEED   */
    MsCm2_t         MsCm2;                   /* Mobile station classmk 2   */
#ifdef __VERSPROD__
    u8              ImsiProd[8];
#else
    u8              Pad11 [8];
#endif
    ProdNumberBis_t ProdNumberBis;
    u16     E2pOffsetParam;          /* Internal data of eeprom simulation */
    u16     E2pSizeParam;            /* Internal data of eeprom simulation */

    u16     e2p_WriteCycle;          /* Internal data of eeprom simulation */
    u16     UsbPid;

    /* bit 7:5 Day period of RTC drift compensation                    */
    u16     PadRtcLastDayOfYearDriftCorrect; /* Day of the year when last RTC drift compensation occured */
    u8      MultiSlotClass;          /* MultiSlotClass as in 05.02 */
    u8      DataParam[E2P_DIM_DATA_PARAM]; /*E2P_DIM_DATA_PARAM = 100 */
    u8      EgprsMultiSlotClass;
    u8      MaskFoiPowerLevBis [4];  /* band 3 & 4 PCS et GSM850 */

    u32     ModuleVersion;


    //u8      Pad27[2];

    u32     DotaCellId;                 /* Id of the DOTA cell to copy, used by the Xmodem downloader */
    u16     CustomIdCDC[2]; /* Vendor and Produt ID for CDC class */
    u16     CustomIdMS[2]; /* Vendor and Produt ID for MASS storage class */
    u8      ProductStringCDC[E2P_DIM_PRO_CDC]; /* String descriptor for product CDC class */
    u8      ProductStringMS[E2P_DIM_PRO_MS]; /* String descriptor for product MASS class */
    u32     TraceStoreSDFilter;            /* Buffer Size for TMT trace store SD */

      //Total move from calibration protected area = 168 * u8,
      //Total Padded = 4 * u8
      //Total Added = 172 * u8
    //Stack Relevant Threshold
    u8      RxSPErrorTres;           /* Full Rate BFI Threshold    */
    u8      FchTres;                 /* FCH  Threshold             */
    u8      FacchThres;              /* FACCH Full Rate Threshold  */
    u8      FacchHRThres;            /* FACCH Half Rate Threshold  */
    u8      HRErrorThres;            /* Half Rate BFI Threshold    */
    u8      FacchHRThresSaic;        /* FACCH Half Rate Threshold for SAIC */
    //u8      Pad_0[1];                /* Pad0*/

    u16     FSBfiThres;              /* Full Rate BFI Threshold    */
    u16     EFSBfiThres;             /* E-Full Rate BFI Threshold  */
    u16     HSBfiThres;              /* Half Rate BFI Threshold    */
    u16     AFSBfiThres;             /* AMR-FS BFI Threshold       */
    u16     AHSBfiThres;             /* AMR-HS BFI Threshold       */

    u16     HRUfiThres;              /* Half Rate UFI Threshold    */
    u16     AMRDfiThres;
    u16     USFMetricCS1Thres;
    u16     USFMetricCS24Thres;
    u16     USFMetricE14Thres;
    u16     USFMetricE59Thres;

    u16     PowerMinBase;            /* For biband ramp up.        */
    u8      pad_1[2];                /* Pad1*/

    //Audio Relevant E2P Items
    u32     AudioDspGain;            /* Useless, remove someday*/

    u16     AudioHFTable;            /* Useless, remove someday*/
    u16     NbSpeechFrameMuted;

    u8      AudioHPFilterTable[3];   /* Useless, remove someday*/
    u8      AudioSpeakerGain;        /* Useless, remove someday*/

    u8      AudioLPFilterTable[3];   /* Useless, remove someday*/
    u8      Audio3Table;             /* Useless, remove someday*/

    u8      AudioACTable[9];         /* Useless, remove someday*/
    u8      AudioMMITable[3];        /* Useless, remove someday*/

    u8      AudioLSTable[3];         /* Useless, remove someday*/
    u8      pad_2[1];                /* Pad2*/

    //RF Relevant E2P Items
    u8      RadioType;               /* RF IC parameter : SOGL */
    u8      VoltageOrder;
    u8      NbRoughDacValue;
    s8      RoughDacOffset;          /* Rough dac aging offset.    */

    u32     RoughDacSum;             /* For aging drift purpose.   */
    s16     RoughDacStepValue;

    u16     TxPwrMinBase;

    s16     TxFreqOffset_GSM900;
    s16     TxFreqOffset_DCS1800;
    s16     TxFreqOffset_PCS1900;
    s16     TxFreqOffset_GSM850;

    u16     MaskPclTxFreqOffset_GSM900;
    u16     MaskPclTxFreqOffset_DCS1800;
    u16     MaskPclTxFreqOffset_PCS1900;
    u16     MaskPclTxFreqOffset_GSM850;

    s8      TaOffset_GSM900;
    s8      TaOffset_DCS1800;
    s8      TaOffset_PCS1900;
    s8      TaOffset_GSM850;

    u32     HardCapability;

    u8      NminGMSK_LB;       /* RF IC parameter : SOGL */
    u8      NminGMSK_HB;       /* RF IC parameter : SOGH */
    u8      NminInterGMSK_LB;  /* RF IC parameter : POGL */
    u8      NminInterGMSK_HB;  /* RF IC parameter : POGH */

    u8      Nmin8PSK_LB;       /* RF IC parameter : SOEL */
    u8      Nmin8PSK_HB;       /* RF IC parameter : SOEH */
    u8      NminInter8PSK_LB;  /* RF IC parameter : POEL */
    u8      NminInter8PSK_HB;  /* RF IC parameter : POEH */

    u8      FEMOnGMSK850;      /* RF IC parameter : FEM Switch On for GMSK 850 */
    u8      FEMOffGMSK850;     /* RF IC parameter : FEM Switch Off for GMSK 850 */
    u8      FEMOnGMSK900;      /* RF IC parameter : FEM Switch On for GMSK 900 */
    u8      FEMOffGMSK900;     /* RF IC parameter : FEM Switch Off for GMSK 900 */

    u8      FEMOnGMSK1800;     /* RF IC parameter : FEM Switch On for GMSK 1800 */
    u8      FEMOffGMSK1800;    /* RF IC parameter : FEM Switch Off for GMSK 1800 */
    u8      FEMOnGMSK1900;     /* RF IC parameter : FEM Switch On for GMSK 1900 */
    u8      FEMOffGMSK1900;    /* RF IC parameter : FEM Switch Off for GMSK 1900 */

    u8      FEMOn8PSK850;      /* RF IC parameter : FEM Switch On for 8PSK 850 */
    u8      FEMOff8PSK850;     /* RF IC parameter : FEM Switch Off for 8PSK 850 */
    u8      FEMOn8PSK900;      /* RF IC parameter : FEM Switch On for 8PSK 900 */
    u8      FEMOff8PSK900;     /* RF IC parameter : FEM Switch Off for 8PSK 900 */

    u8      FEMOn8PSK1800;     /* RF IC parameter : FEM Switch On for 8PSK 1800 */
    u8      FEMOff8PSK1800;    /* RF IC parameter : FEM Switch Off for 8PSK 1800 */
    u8      FEMOn8PSK1900;     /* RF IC parameter : FEM Switch On for 8PSK 1900 */
    u8      FEMOff8PSK1900;    /* RF IC parameter : FEM Switch Off for 8PSK 1900 */

    u8      RampUpGMSK850;     /* RF IC parameter : Ramp Up timing for GMSK 850 */
    u8      RampDownGMSK850;   /* RF IC parameter : Ramp Down timing for GMSK 850 */
    u8      RampUpGMSK900;     /* RF IC parameter : Ramp Up timing for GMSK 900 */
    u8      RampDownGMSK900;   /* RF IC parameter : Ramp Down timing for GMSK 900 */

    u8      RampUpGMSK1800;    /* RF IC parameter : Ramp Up timing for GMSK 1800 */
    u8      RampDownGMSK1800;  /* RF IC parameter : Ramp Down timing for GMSK 1800 */
    u8      RampUpGMSK1900;    /* RF IC parameter : Ramp Up timing for GMSK 1900 */
    u8      RampDownGMSK1900;  /* RF IC parameter : Ramp Down timing for GMSK 1900 */

    u8      RampUp8PSK850;     /* RF IC parameter : Ramp Up timing for 8PSK 850 */
    u8      RampDown8PSK850;   /* RF IC parameter : Ramp Down timing for 8PSK 850 */
    u8      RampUp8PSK900;     /* RF IC parameter : Ramp Up timing for 8PSK 900 */
    u8      RampDown8PSK900;   /* RF IC parameter : Ramp Down timing for 8PSK 900 */

    u8      RampUp8PSK1800;    /* RF IC parameter : Ramp Up timing for 8PSK 1800 */
    u8      RampDown8PSK1800;  /* RF IC parameter : Ramp Down timing for 8PSK 1800 */
    u8      RampUp8PSK1900;    /* RF IC parameter : Ramp Up timing for 8PSK 1900 */
    u8      RampDown8PSK1900;  /* RF IC parameter : Ramp Down timing for 8PSK 1900 */

    s8      PAOnGMSK850;       /* RF IC parameter : PA On timing for GMSK 850 */
    s8      PAOffGMSK850;      /* RF IC parameter : PA Off timing for GMSK 850 */
    s8      PAOnGMSK900;       /* RF IC parameter : PA On timing for GMSK 900 */
    s8      PAOffGMSK900;      /* RF IC parameter : PA Off timing for GMSK 900 */

    s8      PAOnGMSK1800;      /* RF IC parameter : PA On timing for GMSK 1800 */
    s8      PAOffGMSK1800;     /* RF IC parameter : PA Off timing for GMSK 1800 */
    s8      PAOnGMSK1900;      /* RF IC parameter : PA On timing for GMSK 1900 */
    s8      PAOffGMSK1900;     /* RF IC parameter : PA Off timing for GMSK 1900 */

    s8      PAOn8PSK850;       /* RF IC parameter : PA On timing for 8PSK 850 */
    s8      PAOff8PSK850;      /* RF IC parameter : PA Off timing for 8PSK 850 */
    s8      PAOn8PSK900;       /* RF IC parameter : PA On timing for 8PSK 900 */
    s8      PAOff8PSK900;      /* RF IC parameter : PA Off timing for 8PSK 900 */

    s8      PAOn8PSK1800;      /* RF IC parameter : PA On timing for 8PSK 1800 */
    s8      PAOff8PSK1800;     /* RF IC parameter : PA Off timing for 8PSK 1800 */
    s8      PAOn8PSK1900;      /* RF IC parameter : PA On timing for 8PSK 1900 */
    s8      PAOff8PSK1900;     /* RF IC parameter : PA Off timing for 8PSK 1900 */

    u32     Rf_Param1;
    u32     Rf_Param2;
    u32     Rf_Param3;
    u32     Rf_Param4;

    //Douglas : 16 *(8 * 2)*[8 * 6 + 4 * 2] = 1792 * 8
    /*First Ramping Profile for GMSK*/
    u16     RampUpGMSKGSM900_H[NB_TXPWRRAMP];
    u16     RampDownGMSKGSM900_H[NB_TXPWRRAMP];
    u16     RampUpGMSKDCS_H[NB_TXPWRRAMP];
    u16     RampDownGMSKDCS_H[NB_TXPWRRAMP];
    u16     RampUpGMSKPCS_H[NB_TXPWRRAMP];
    u16     RampDownGMSKPCS_H[NB_TXPWRRAMP];
    u16     RampUpGMSKGSM850_H[NB_TXPWRRAMP];
    u16     RampDownGMSKGSM850_H[NB_TXPWRRAMP];

    /*Second Ramping Profile for GMSK*/
    u16     RampUpGMSKGSM900_M[NB_TXPWRRAMP];
    u16     RampDownGMSKGSM900_M[NB_TXPWRRAMP];
    u16     RampUpGMSKDCS_M[NB_TXPWRRAMP];
    u16     RampDownGMSKDCS_M[NB_TXPWRRAMP];
    u16     RampUpGMSKPCS_M[NB_TXPWRRAMP];
    u16     RampDownGMSKPCS_M[NB_TXPWRRAMP];
    u16     RampUpGMSKGSM850_M[NB_TXPWRRAMP];
    u16     RampDownGMSKGSM850_M[NB_TXPWRRAMP];

    /*Third Ramping Profile for GMSK*/
    u16     RampUpGMSKGSM900_L[NB_TXPWRRAMP];
    u16     RampDownGMSKGSM900_L[NB_TXPWRRAMP];
    u16     RampUpGMSKDCS_L[NB_TXPWRRAMP];
    u16     RampDownGMSKDCS_L[NB_TXPWRRAMP];
    u16     RampUpGMSKPCS_L[NB_TXPWRRAMP];
    u16     RampDownGMSKPCS_L[NB_TXPWRRAMP];
    u16     RampUpGMSKGSM850_L[NB_TXPWRRAMP];
    u16     RampDownGMSKGSM850_L[NB_TXPWRRAMP];

    /*First Ramping Profile for 8PSK*/
    u16     RampUp8PSKGSM900_H[NB_TXPWRRAMP];
    u16     RampDown8PSKGSM900_H[NB_TXPWRRAMP];
    u16     RampUp8PSKDCS_H[NB_TXPWRRAMP];
    u16     RampDown8PSKDCS_H[NB_TXPWRRAMP];
    u16     RampUp8PSKPCS_H[NB_TXPWRRAMP];
    u16     RampDown8PSKPCS_H[NB_TXPWRRAMP];
    u16     RampUp8PSKGSM850_H[NB_TXPWRRAMP];
    u16     RampDown8PSKGSM850_H[NB_TXPWRRAMP];

    /*Second Ramping Profile for 8PSK*/
    u16     RampUp8PSKGSM900_M[NB_TXPWRRAMP];
    u16     RampDown8PSKGSM900_M[NB_TXPWRRAMP];
    u16     RampUp8PSKDCS_M[NB_TXPWRRAMP];
    u16     RampDown8PSKDCS_M[NB_TXPWRRAMP];
    u16     RampUp8PSKPCS_M[NB_TXPWRRAMP];
    u16     RampDown8PSKPCS_M[NB_TXPWRRAMP];
    u16     RampUp8PSKGSM850_M[NB_TXPWRRAMP];
    u16     RampDown8PSKGSM850_M[NB_TXPWRRAMP];

    /*Third Ramping Profile for 8PSK*/
    u16     RampUp8PSKGSM900_L[NB_TXPWRRAMP];
    u16     RampDown8PSKGSM900_L[NB_TXPWRRAMP];
    u16     RampUp8PSKDCS_L[NB_TXPWRRAMP];
    u16     RampDown8PSKDCS_L[NB_TXPWRRAMP];
    u16     RampUp8PSKPCS_L[NB_TXPWRRAMP];
    u16     RampDown8PSKPCS_L[NB_TXPWRRAMP];
    u16     RampUp8PSKGSM850_L[NB_TXPWRRAMP];
    u16     RampDown8PSKGSM850_L[NB_TXPWRRAMP];

    //GMSK -> GMSK: No 3 options to choose
    u16     InterRampGMSKGMSKGSM900[NB_TXPWRRAMP];
    u16     InterRampGMSKGMSKDCS[NB_TXPWRRAMP];
    u16     InterRampGMSKGMSKPCS[NB_TXPWRRAMP];
    u16     InterRampGMSKGMSKGSM850[NB_TXPWRRAMP];

    //8PSK -> 8PSK: No 3 options to choose
    u16     InterRamp8PSK8PSKGSM900[NB_TXPWRRAMP];
    u16     InterRamp8PSK8PSKDCS[NB_TXPWRRAMP];
    u16     InterRamp8PSK8PSKPCS[NB_TXPWRRAMP];
    u16     InterRamp8PSK8PSKGSM850[NB_TXPWRRAMP];

    u32     MixedDiagState[MIXED_LAST_SUBPROCESS]; /* Trace levels. mixed user store area */

    /*
     Multimedia Capability Configuration (MCC)
     ck.wang @ 2010/04/29
     version 1.0
     */
    u32     MccVersion;
    u32     MccReserved[4];
    u32     MccAudioRecording;
    u32     MccAudioPlayback;
    u32     MccVideoRecording;
    u32     MccVideoPlayback;
    u32     MccMaxRomSizeEmu;

    /*
     Sensor ration parameters
     marine.wu @ 2010/06/30
     */
    u32     CamPriXYAxisMirror;   /* 0: No X,Y axis mirror */
                                  /* 1: X-axis mirror*/
                                  /* 2: X-axis mirror & Y-axis mirror*/
                                  /* 3: Y-axis mirror*/
    u32     CamPriRotationAngle;  /* 0: 0, 1: 90, 2: 180, 3: 270 */
    u32     CamSecXYAxisMirror;   /* 0: No X,Y axis mirror */
                                  /* 1: X-axis mirror*/
                                  /* 2: X-axis mirror & Y-axis mirror*/
                                  /* 3: Y-axis mirror*/
  u8     CamSecRotationAngle;    /* 0: 0, 1: 90, 2: 180, 3: 270 */
  u8     RFPower_4Bands;
  u8     RFPower_GSM900_DCS1800;
  u8     RFPower_PCS1900_GSM850;


    u8      AudioOutputDriverHeadsetGain;
    u8      AudioOutputDriverReceiverGain;
    u8      AudioOutputDriverLineOutGain;
    u8      AudioMicBiasLevel;
    u32     RamDumpFlag;

    u32     CamSensorIndex[2]; /* Index of camera sensor table, Cooper add */

    u32     LCMTableOffset;
    u32     LCMTableOffsetChksum;
    u8      BootUpLogoIndex; /* Index of boot logo */
    u8      BootLogoID;

    u8      NRAIFreeSectorRecord[32];

    //disable tmt trace function in factory mode
    u8      DisableErrorTraceInFacMode;
    u8      AudioVtMicGain;

    u16     LegacyTestGainTable_LB[94];
    u16     LegacyTestGainTable_HB[94];
    u16     LegacyInitRegTable[38];

    u16     AudioDspUlFirCoeffHandset[AUDIO_DSP_UL_FIR_LENGTH];     /* [32B] */
    u16     AudioDspUlFirCoeffHandsfree[AUDIO_DSP_UL_FIR_LENGTH];   /* [32B] */
    u16     AudioDspUlFirCoeffHeadset[AUDIO_DSP_UL_FIR_LENGTH];     /* [32B] */
    u16     AudioDspUlFirCoeffBt[AUDIO_DSP_UL_FIR_LENGTH];          /* [32B] */

    u32     TbuoDCSGSM900TR;
    u32     TbuoPCSGSM850TR;
    u8      TbuoPABandSel;
    u8      PABandSelHighBand;
    u8      TbuoPAVmode;
    u8      PAVmode8PSK;
    u8      TbuoPAEnable;
    u8      TbuoTxEnable;
    u8      TbuoRxEnable;
    u8      TbuoE2pDefEnable;
    u8      RMScrambleID[24];

    u32     BTAcrux2ChipVersion;

    E2PMstarAgcDrcParams AudioMStarAgcDrc;       /* [32B] */
    E2PMstarCtaCtModeParams AudioMstarCTACTMode; /* [28B] */
    u8      AudioComfortNoiseGain[4];

  /*
   Max image capture resolution parameters
   spencer.cheng @ 2010/09/15
   */
    u16     CamMaxImageCaptureWidth;
    u16     CamMaxImageCaptureHeight;

    u8      FmSpecialCarrierOn;
    u8      FmSpecialCarrierOff;
    u8	    FmPadding[2];

    u16     SDdrvRelatedCfg;
    u16     EnableUartPrintf;

    s8      AudioVtGainHandsfree[8];
    s8      AudioVtGainHeadset[8];

    /*
     * SIM card amount, standby capability
     * jack.hsueh @ 2010/11/25
     */
    u8      SimStandbyCapability;
    u8      TbuoSavedPinSet;
    u8      TbuoSi4209Set;
    u8      Pad21;

    u32     ApusCtrlFlag_e;             // Apus control bits
    u16     ApusInitRegTableExt[9];     // For Apus initial register
    u8      ApusACLResult_e;            // store Apus ACL Cal result
    u8      Pad22[1];                   // for 32-bit alignment
    // Apus requires 4+(2*9)+1= 23+1 = 24, aligned to 32-bit
    // 2035 - 24 = 2015

    u8      KMVScrambleID[20];

    u8      FmIsAntennaSupported;
    u8      FmIsRecordingSupported;
    u8      EnablePedestalCal;
    u8      HiddenPartitionShowUp;

    u8      LCMDriverIndx[2];  // main & sub
    u8      SysTimeZone;
    u8      RfIsolationParameter;       // parameters(enable, rx/tx, and band) used for improving rf switch isolation performance

    u8      RfIsolationSwitchOnTime;    // switch on time used for improving rf switch isolation performance
    u8      RfIsolationSwitchOffTime;   // switch off time used for improving rf switch isolation performance
    u8      Pad24[2];

    u8      PadFinal[2003];  /* PadFinal[2059];*/
    u8      PadLastE2pField;

/*-------------   RW E2P DATA (STACK)  --------------------*/
} E2pStck_t; // this struct is supposed to take 2304 bytes

#endif


//#define __E2P_INDEX_SYM__
#ifdef __E2P_INDEX_SYM__
/*
**   ------------------------------------------------------------------------
**     DEFINE EXTERNAL SYMBOL FOR EEPROM RECORDS
**   ------------------------------------------------------------------------
*/
#ifndef __NAND__
extern u32    E2P_SYM_RxFreqCompCh4GSM850_HG;
extern u32    E2P_SYM_RxFreqCompBG6GSM_HG;
extern u32    E2P_SYM_RampDownGMSKGSM850_M;
extern u32    E2P_SYM_NmaxGmskFreqCompLowGSM850;
extern u32    E2P_SYM_ImeiSV;
extern u32    E2P_SYM_E2pTstPattern;
extern u32    E2P_SYM_RxFreqCompCh5GSM850_HG;
extern u32    E2P_SYM_RxFreqCompBG1GSM_HG;
extern u32    E2P_SYM_AudioSpeakerGain;
extern u32    E2P_SYM_EgprsMultiSlotClass;
extern u32    E2P_SYM_RxFreqCompBG3GSM_HG;
extern u32    E2P_SYM_AdcBatRawData;
extern u32    E2P_SYM_RampUpGMSKGSM850_L;
extern u32    E2P_SYM_RampDownGMSKGSM900_L;
extern u32    E2P_SYM_RampUpGMSKGSM900_L;
extern u32    E2P_SYM_RampUpGMSKGSM850_M;
extern u32    E2P_SYM_RampUpGMSKGSM900_M;
extern u32    E2P_SYM_RampUpGMSKGSM850_H;
extern u32    E2P_SYM_RampUpGMSKGSM900_H;
extern u32    E2P_SYM_AudioRingToneGainHandsfree;
extern u32    E2P_SYM_Nmax8PSKGSM850;
extern u32    E2P_SYM_RxFreqCompBG2GSM_HG;
extern u32    E2P_SYM_AdcBatActualVolt;
extern u32    E2P_SYM_AudioDspUlFirCoeffHandset;
extern u32    E2P_SYM_AudioMicBiasLevel;
extern u32    E2P_SYM_FEMOn8PSK1900;
extern u32    E2P_SYM_FEMOn8PSK1800;
extern u32    E2P_SYM_PreviousImsi;
extern u32    E2P_SYM_TbuoE2pDefEnable;
extern u32    E2P_SYM_RampDownGMSK900;
extern u32    E2P_SYM_PAFreqCompChHighGSM850;
extern u32    E2P_SYM_PAOffGMSK1900;
extern u32    E2P_SYM_PAOffGMSK1800;
extern u32    E2P_SYM_RampDownGMSK850;
extern u32    E2P_SYM_TxPwrMinBase;
extern u32    E2P_SYM_RampDown8PSKGSM850_H;
extern u32    E2P_SYM_T3212StartTimeMinute_2;
extern u32    E2P_SYM_RampUp8PSK850;
extern u32    E2P_SYM_u8_CustoBase_2;
extern u32    E2P_SYM_u8_CustoBase_1;
extern u32    E2P_SYM_DisableErrorTraceInFacMode;
extern u32    E2P_SYM_FacProdRecord;
extern u32    E2P_SYM_TbuoPABandSel;
extern u32    E2P_SYM_AudioSTGain;
extern u32    E2P_SYM_AudioAtvGainHandsfree;
extern u32    E2P_SYM_AudioDLGainHandset;
extern u32    E2P_SYM_PAVmode8PSK;
extern u32    E2P_SYM_FEMOnGMSK900;
extern u32    E2P_SYM_FEMOnGMSK850;
extern u32    E2P_SYM_PAOff8PSK1900;
extern u32    E2P_SYM_PAOff8PSK1800;
extern u32    E2P_SYM_InterRamp8PSK8PSKGSM900;
extern u32    E2P_SYM_InterRampGMSKGMSKGSM900;
extern u32    E2P_SYM_AudioDLGainHeadset;
extern u32    E2P_SYM_PadFacch;
extern u32    E2P_SYM_InterRamp8PSK8PSKGSM850;
extern u32    E2P_SYM_InterRampGMSKGMSKGSM850;
extern u32    E2P_SYM_TraceStoreSDFilter;
extern u32    E2P_SYM_GsensorDirection;
extern u32    E2P_SYM_PAFreqCompChLowPCS;
extern u32    E2P_SYM_PAOn8PSK850;
extern u32    E2P_SYM_UsbPid;
extern u32    E2P_SYM_PAOn8PSK900;
extern u32    E2P_SYM_USFMetricE14Thres;
extern u32    E2P_SYM_FEMOn8PSK900;
extern u32    E2P_SYM_FEMOn8PSK850;
extern u32    E2P_SYM_v24_Uart2Options;
extern u32    E2P_SYM_VersHard;
extern u32    E2P_SYM_Pad7;
extern u32    E2P_SYM_PowerMinBase;
extern u32    E2P_SYM_SignatureCck;
extern u32    E2P_SYM_SignatureNck;
extern u32    E2P_SYM_SignaturePck;
extern u32    E2P_SYM_AudioVtGainHandsfree;
extern u32    E2P_SYM_FEMOff8PSK1800;
extern u32    E2P_SYM_AudioVtGainHeadset;
extern u32    E2P_SYM_VendorString;
extern u32    E2P_SYM_AudioVMHeadsetMicGain;
extern u32    E2P_SYM_SDdrvRelatedCfg;
extern u32    E2P_SYM_EnableUartPrintf;
extern u32    E2P_SYM_PAOn8PSK1900;
extern u32    E2P_SYM_PAOn8PSK1800;
extern u32    E2P_SYM_PAFreqCompChCenterPCS;
extern u32    E2P_SYM_RequiredPatches;
extern u32    E2P_SYM_IncenseDLFIRHeadset;
extern u32    E2P_SYM_IncenseDLFIRHandset;
extern u32    E2P_SYM_LastBa;
extern u32    E2P_SYM_GKc;
extern u32    E2P_SYM_AudioFmGainHandsfree;
extern u32    E2P_SYM_RxFreqCompChCenterPCS;
extern u32    E2P_SYM_FEMOffGMSK850;
extern u32    E2P_SYM_AudioFmGainHeadset;
extern u32    E2P_SYM_rtcTimeSaved_Second;
extern u32    E2P_SYM_T3212StartTimeMonth_2;
extern u32    E2P_SYM_Egprs8PskUplinkCap;
extern u32    E2P_SYM_StaticDacValue;
extern u32    E2P_SYM_JavaExecVolumeSize;
extern u32    E2P_SYM_AudioDspUlFirGainHandsfree;
extern u32    E2P_SYM_CamMaxImageCaptureHeight;
extern u32    E2P_SYM_DiagState;
extern u32    E2P_SYM_PAFreqCompChCenterDCS;
extern u32    E2P_SYM_T3212Remain2_2;
extern u32    E2P_SYM_RxFreqCompBG5PCS_HG;
extern u32    E2P_SYM_RxFreqCompBG5DCS_HG;
extern u32    E2P_SYM_RxFreqCompBG4PCS_HG;
extern u32    E2P_SYM_RxFreqCompBG4DCS_HG;
extern u32    E2P_SYM_RxFreqCompChCenterDCS;
extern u32    E2P_SYM_OpenCtrl;
extern u32    E2P_SYM_ToiDrift;
extern u32    E2P_SYM_RxFreqCompBG6PCS_HG;
extern u32    E2P_SYM_RxFreqCompBG6DCS_HG;
extern u32    E2P_SYM_RxFreqCompChCenterGSM;
extern u32    E2P_SYM_MaskPclTxFreqOffset_PCS1900;
extern u32    E2P_SYM_RxFreqCompBG1PCS_HG;
extern u32    E2P_SYM_RxFreqCompBG1DCS_HG;
extern u32    E2P_SYM_AudioMp3GainHeadset;
extern u32    E2P_SYM_AudioDspGain;
extern u32    E2P_SYM_Rai;
extern u32    E2P_SYM_PadRtcLastDayOfYearDriftCorrect;
extern u32    E2P_SYM_Imsi;
extern u32    E2P_SYM_PAFreqCompChCenterGSM;
extern u32    E2P_SYM_ExhaustivePlmnSearch;
extern u32    E2P_SYM_RxFreqCompBG3PCS_HG;
extern u32    E2P_SYM_RxFreqCompBG3DCS_HG;
extern u32    E2P_SYM_WifiMac;
extern u32    E2P_SYM_AdcBatOffset;
extern u32    E2P_SYM_v24_UsbFraming;
extern u32    E2P_SYM_RxFreqCompBG2PCS_HG;
extern u32    E2P_SYM_RxFreqCompBG2DCS_HG;
extern u32    E2P_SYM_VoltageOrder;
extern u32    E2P_SYM_AudioDLGainHandsfree;
extern u32    E2P_SYM_L1cNbSleepFrame;
extern u32    E2P_SYM_RampUpGMSK1800;
extern u32    E2P_SYM_RxFreqCompChCenterGSM850;
extern u32    E2P_SYM_LegacyTestGainTable_LB;
extern u32    E2P_SYM_Imei;
extern u32    E2P_SYM_PAFreqCompChCenterGSM850;
extern u32    E2P_SYM_MaxBatteryTemp;
extern u32    E2P_SYM_MaskPclTxFreqOffset_GSM850;
extern u32    E2P_SYM_AudioMediaDriverHeadsetGain;
extern u32    E2P_SYM_AudioFirCoeff;
extern u32    E2P_SYM_FmIsAntennaSupported;
extern u32    E2P_SYM_RaiReserveTrash;
extern u32    E2P_SYM_IncenseDLFIRHandsfree;
extern u32    E2P_SYM_RxFreqCompBG2GSM850;
extern u32    E2P_SYM_NminPedestal;
extern u32    E2P_SYM_LCMModuleIDChksum;
extern u32    E2P_SYM_LegacyTestGainTable_HB;
extern u32    E2P_SYM_RxFreqCompBG3GSM850;
extern u32    E2P_SYM_rtcTimeSaved_DataValid;
extern u32    E2P_SYM_MccReserved;
extern u32    E2P_SYM_MaskPclTxFreqOffset_DCS1800;
extern u32    E2P_SYM_RxFreqCompBG1GSM850;
extern u32    E2P_SYM_L1cNbWakeFrame;
extern u32    E2P_SYM_RampDown8PSKGSM900_L;
extern u32    E2P_SYM_RxFreqCompBG6GSM850;
extern u32    E2P_SYM_Pad9;
extern u32    E2P_SYM_RtkTaskState;
extern u32    E2P_SYM_EnableTaskMgr;
extern u32    E2P_SYM_MinBatteryTemp;
extern u32    E2P_SYM_RxFreqCompBG4GSM850;
extern u32    E2P_SYM_PAOffGMSK900;
extern u32    E2P_SYM_PAOffGMSK850;
extern u32    E2P_SYM_ProductStringMS;
extern u32    E2P_SYM_MaskFoiPowerLev;
extern u32    E2P_SYM_RampDown8PSKGSM850_M;
extern u32    E2P_SYM_RxFreqCompBG5GSM850;
extern u32    E2P_SYM_NmaxGmskFreqCompLowDCS;
extern u32    E2P_SYM_DotaVolumeSize;
extern u32    E2P_SYM_RamDumpFlag;
extern u32    E2P_SYM_RampUp8PSK900;
extern u32    E2P_SYM_MeLockData;
extern u32    E2P_SYM_DotaState;
extern u32    E2P_SYM_Rf_Param3;
extern u32    E2P_SYM_rr_ScanMode;
extern u32    E2P_SYM_AudioMStarAgcDrc;
extern u32    E2P_SYM_AudioOutputDriverHeadsetGain;
extern u32    E2P_SYM_Rf_Param2;
extern u32    E2P_SYM_AudioOutputDriverSpkHeadsetGain;
extern u32    E2P_SYM_Rf_Param1;
extern u32    E2P_SYM_AntennaGain;
extern u32    E2P_SYM_CustomIdCDC;
extern u32    E2P_SYM_RtkMbxState;
extern u32    E2P_SYM_ScratchMemStatus;
extern u32    E2P_SYM_PAOff8PSK900;
extern u32    E2P_SYM_PAOff8PSK850;
extern u32    E2P_SYM_Pad09;
extern u32    E2P_SYM_MonoBand;
extern u32    E2P_SYM_v24_Uart2Speed;
extern u32    E2P_SYM_JavaVolumeSize;
extern u32    E2P_SYM_T3212Value;
extern u32    E2P_SYM_C1Threshold;
extern u32    E2P_SYM_Rf_Param4;
extern u32    E2P_SYM_USFMetricCS24Thres;
extern u32    E2P_SYM_RampDownGMSKGSM900_H;
extern u32    E2P_SYM_pad;
extern u32    E2P_SYM_MccVideoPlayback;
extern u32    E2P_SYM_AudioFirCoeffBT;
extern u32    E2P_SYM_v24_NominalMode;
extern u32    E2P_SYM_NmaxGmskFreqCompHighGSM850;
extern u32    E2P_SYM_T3212StartTimeHour;
extern u32    E2P_SYM_AudioDspUlFirCoeffHeadset;
extern u32    E2P_SYM_BtAddr;
extern u32    E2P_SYM_RampUp8PSK1900;
extern u32    E2P_SYM_SDKDiagState;
extern u32    E2P_SYM_T3212StartTimeHour_2;
extern u32    E2P_SYM_CustomIdMS;
extern u32    E2P_SYM_GDiagState;
extern u32    E2P_SYM_BattLev;
extern u32    E2P_SYM_FEMOffGMSK900;
extern u32    E2P_SYM_NbErrorStored;
extern u32    E2P_SYM_BTAcrux2ChipVersion;
extern u32    E2P_SYM_AudioULDpgaAecHandsfree;
extern u32    E2P_SYM_P_Tmsi;
extern u32    E2P_SYM_IrDiscTime;
extern u32    E2P_SYM_PadLastE2pField;
extern u32    E2P_SYM_RxFreqCompBG2GSM;
extern u32    E2P_SYM_RxFreqCompBG3GSM;
extern u32    E2P_SYM_PAFreqCompChLowGSM;
extern u32    E2P_SYM_ApusACLResult_e;
extern u32    E2P_SYM_Sn;
extern u32    E2P_SYM_RxFreqCompBG1GSM;
extern u32    E2P_SYM_FastChargeBatteryStatusTimeOut;
extern u32    E2P_SYM_BoardGain_GSM850;
extern u32    E2P_SYM_BoardGain_GSM900;
extern u32    E2P_SYM_RxFreqCompBG6GSM;
extern u32    E2P_SYM_T3212StartTimeDay_2;
extern u32    E2P_SYM_Pad_RaiEntriesNumber;
extern u32    E2P_SYM_Pad21;
extern u32    E2P_SYM_RxFreqCompBG4GSM;
extern u32    E2P_SYM_FmIsRecordingSupported;
extern u32    E2P_SYM_Pad22;
extern u32    E2P_SYM_InterRamp8PSK8PSKPCS;
extern u32    E2P_SYM_InterRamp8PSK8PSKDCS;
extern u32    E2P_SYM_InterRampGMSKGMSKPCS;
extern u32    E2P_SYM_InterRampGMSKGMSKDCS;
extern u32    E2P_SYM_RxFreqCompBG5GSM;
extern u32    E2P_SYM_BatteryLevel;
extern u32    E2P_SYM_Pad23;
extern u32    E2P_SYM_AMCal_DCS1800;
extern u32    E2P_SYM_ProdArfcn_2;
extern u32    E2P_SYM_AudioDspUlFirGainBt;
extern u32    E2P_SYM_ProdNumberBis;
extern u32    E2P_SYM_T3212StartTimeDay;
extern u32    E2P_SYM_FEMOffGMSK1900;
extern u32    E2P_SYM_ReadyTimer;
extern u32    E2P_SYM_MccMaxRomSizeEmu;
extern u32    E2P_SYM_PAFreqCompChHighPCS;
extern u32    E2P_SYM_BatterySecurityWaitTimeOut;
extern u32    E2P_SYM_EnablePedestalCal;
extern u32    E2P_SYM_CamSecRotationAngle;
extern u32    E2P_SYM_RFPower_4Bands;
extern u32    E2P_SYM_RFPower_GSM900_DCS1800;
extern u32    E2P_SYM_RFPower_PCS1900_GSM850;
extern u32    E2P_SYM_batLowBatteryReportPeriod;
extern u32    E2P_SYM_LastBa_2;
extern u32    E2P_SYM_AMCal_PCS1900;
extern u32    E2P_SYM_RadioType;
extern u32    E2P_SYM_T3212StartTimeMonth;
extern u32    E2P_SYM_FacchHRThres;
extern u32    E2P_SYM_FacchHRThresSaic;
extern u32    E2P_SYM_UpdateStatus_2;
extern u32    E2P_SYM_IrPreambTh;
extern u32    E2P_SYM_v24_Framing;
extern u32    E2P_SYM_AFCSLOPE;
extern u32    E2P_SYM_Audio3gpGainHandsfree;
extern u32    E2P_SYM_Pad4;
extern u32    E2P_SYM_CamSecXYAxisMirror;
extern u32    E2P_SYM_PAFreqCompChLowGSM850;
extern u32    E2P_SYM_T3212StartTimeSecondFracPart;
extern u32    E2P_SYM_BatteryCapacity;
extern u32    E2P_SYM_RoughDacValue;
extern u32    E2P_SYM_TbuoSavedPinSet;
extern u32    E2P_SYM_AudioDspUlFirCoeffHandsfree;
extern u32    E2P_SYM_AMCal_GSM900;
extern u32    E2P_SYM_AMCal_GSM850;
extern u32    E2P_SYM_AudioCtrl;
extern u32    E2P_SYM_DataCompress;
extern u32    E2P_SYM_v24_UsbExtOptions;
extern u32    E2P_SYM_MicGains;
extern u32    E2P_SYM_USFMetricCS1Thres;
extern u32    E2P_SYM_FchTres;
extern u32    E2P_SYM_AudioMediaClassDGain;
extern u32    E2P_SYM_DrxParam;
extern u32    E2P_SYM_TbuoPAVmode;
extern u32    E2P_SYM_IncenseGsmCtaPath;
extern u32    E2P_SYM_HRUfiThres;
extern u32    E2P_SYM_ProdArfcn;
extern u32    E2P_SYM_AudioULDpgaAecHandset;
extern u32    E2P_SYM_AudioFirCoeffHandsfree;
extern u32    E2P_SYM_Nmax8PSKGSM900;
extern u32    E2P_SYM_ApusCtrlFlag_e;
extern u32    E2P_SYM_MaskFoiPowerLevBis;
extern u32    E2P_SYM_ExtendedDiagState;
extern u32    E2P_SYM_BearerCfg;
extern u32    E2P_SYM_PAFreqCompChHighDCS;
extern u32    E2P_SYM_RxFreqCompCh5PCS_HG;
extern u32    E2P_SYM_RxFreqCompCh5DCS_HG;
extern u32    E2P_SYM_RxFreqCompCh4PCS_HG;
extern u32    E2P_SYM_RxFreqCompCh4DCS_HG;
extern u32    E2P_SYM_Pad1_2;
extern u32    E2P_SYM_RampDown8PSKGSM900_H;
extern u32    E2P_SYM_rtcTimeSaved_Minute;
extern u32    E2P_SYM_AudioMediaDriverReceiverGain;
extern u32    E2P_SYM_HSBfiThres;
extern u32    E2P_SYM_RxFreqCompCh6PCS_HG;
extern u32    E2P_SYM_RxFreqCompCh6DCS_HG;
extern u32    E2P_SYM_BootLogoID;
extern u32    E2P_SYM_AudioMstarCTACTMode;
extern u32    E2P_SYM_rtcTimeSaved_Year;
extern u32    E2P_SYM_AdControlSum;
extern u32    E2P_SYM_RxFreqCompCh1PCS_HG;
extern u32    E2P_SYM_RxFreqCompCh1DCS_HG;
extern u32    E2P_SYM_RxFreqCompBG2PCS;
extern u32    E2P_SYM_RxFreqCompBG2DCS;
extern u32    E2P_SYM_AecType;
extern u32    E2P_SYM_RoughDacSum;
extern u32    E2P_SYM_HiddenPartitionShowUp;
extern u32    E2P_SYM_RxFreqCompBG3PCS;
extern u32    E2P_SYM_RxFreqCompBG3DCS;
extern u32    E2P_SYM_AdcBatCoeff;
extern u32    E2P_SYM_DataParam;
extern u32    E2P_SYM_RxFreqCompCh3PCS_HG;
extern u32    E2P_SYM_RxFreqCompCh3DCS_HG;
extern u32    E2P_SYM_NmaxGMSKGSM850;
extern u32    E2P_SYM_BoardGain_DCS1800;
extern u32    E2P_SYM_RxFreqCompCh2PCS_HG;
extern u32    E2P_SYM_RxFreqCompCh2DCS_HG;
extern u32    E2P_SYM_RxFreqCompBG1PCS;
extern u32    E2P_SYM_AudioAtvMicGain;
extern u32    E2P_SYM_RxFreqCompBG1DCS;
extern u32    E2P_SYM_L1cNbTxFrame;
extern u32    E2P_SYM_AudioComfortNoiseGain;
extern u32    E2P_SYM_RxFreqCompBG6PCS;
extern u32    E2P_SYM_RxFreqCompBG6DCS;
extern u32    E2P_SYM_FSBfiThres;
extern u32    E2P_SYM_v24_Uart2ExtOptions;
extern u32    E2P_SYM_PAFreqCompPclPCS;
extern u32    E2P_SYM_PAFreqCompPclDCS;
extern u32    E2P_SYM_PAFreqCompChHighGSM;
extern u32    E2P_SYM_TbuoTxEnable;
extern u32    E2P_SYM_RxFreqCompBG4PCS;
extern u32    E2P_SYM_RxFreqCompBG4DCS;
extern u32    E2P_SYM_E2pMirror;
extern u32    E2P_SYM_RxFreqCompBG5PCS;
extern u32    E2P_SYM_RxFreqCompBG5DCS;
extern u32    E2P_SYM_CamSensorIndex;
extern u32    E2P_SYM_TxFreqOffset_GSM850;
extern u32    E2P_SYM_CalibrationReserved;
extern u32    E2P_SYM_TxFreqOffset_GSM900;
extern u32    E2P_SYM_BoardGain_PCS1900;
extern u32    E2P_SYM_TbuoPAEnable;
extern u32    E2P_SYM_MaxVolt;
extern u32    E2P_SYM_TxPwrRampNbNullPts;
extern u32    E2P_SYM_SignatureSpck;
extern u32    E2P_SYM_SignatureNsck;
extern u32    E2P_SYM_T3212Value_2;
extern u32    E2P_SYM_TbuoRxEnable;
extern u32    E2P_SYM_SpeedProfileConfig;
extern u32    E2P_SYM_UpdateStatus;
extern u32    E2P_SYM_StackConfig;
extern u32    E2P_SYM_AudioDtmfGainHandsfree;
extern u32    E2P_SYM_AudioIptvGainHandsfree;
extern u32    E2P_SYM_AdcIchargOffset;
extern u32    E2P_SYM_Pad6;
extern u32    E2P_SYM_RxFreqCompChCenterGSM850_HG;
extern u32    E2P_SYM_FEMOff8PSK1900;
extern u32    E2P_SYM_VoltageDropBeforeRecharge;
extern u32    E2P_SYM_IrActive;
extern u32    E2P_SYM_RxFreqCompBG2GSM850_HG;
extern u32    E2P_SYM_Dvga8PSKGSM900;
extern u32    E2P_SYM_ModuleVersion;
extern u32    E2P_SYM_RxFreqCompBG3GSM850_HG;
extern u32    E2P_SYM_DataSecurity;
extern u32    E2P_SYM_PadDualSimExt2;
extern u32    E2P_SYM_T3212StartTimeSecond;
extern u32    E2P_SYM_E2pOffsetParam;
extern u32    E2P_SYM_RxFreqCompBG1GSM850_HG;
extern u32    E2P_SYM_RxFreqCompCh5GSM_HG;
extern u32    E2P_SYM_IncenseULFIRHeadset;
extern u32    E2P_SYM_IncenseULFIRHandset;
extern u32    E2P_SYM_RxFreqCompEnable;
extern u32    E2P_SYM_RxFreqCompBG6GSM850_HG;
extern u32    E2P_SYM_RxFreqCompCh4GSM_HG;
extern u32    E2P_SYM_ExtendedCapability;
extern u32    E2P_SYM_SignatureForCustomerFeatures;
extern u32    E2P_SYM_MpRelease;
extern u32    E2P_SYM_TxFreqCompEnable;
extern u32    E2P_SYM_v24_ExtOptions;
extern u32    E2P_SYM_RxFreqCompBG4GSM850_HG;
extern u32    E2P_SYM_RxFreqCompCh6GSM_HG;
extern u32    E2P_SYM_RampDownGMSKGSM850_L;
extern u32    E2P_SYM_RxFreqCompBG5GSM850_HG;
extern u32    E2P_SYM_RxFreqCompCh1GSM_HG;
extern u32    E2P_SYM_AudioDtmfGainHeadset;
extern u32    E2P_SYM_e2p_WriteCycle;
extern u32    E2P_SYM_NmaxGmskFreqCompHighDCS;
extern u32    E2P_SYM_ThermistorCurrent;
extern u32    E2P_SYM_E2pChkSum;
extern u32    E2P_SYM_RxFreqCompCh3GSM_HG;
extern u32    E2P_SYM_RampDownGMSKGSM900_M;
extern u32    E2P_SYM_P_Tmsi_2;
extern u32    E2P_SYM_RxSPErrorTres;
extern u32    E2P_SYM_RxFreqCompCh2GSM_HG;
extern u32    E2P_SYM_RampUp8PSKDCS_L;
extern u32    E2P_SYM_RampUp8PSKDCS_M;
extern u32    E2P_SYM_RampUp8PSKDCS_H;
extern u32    E2P_SYM_DualSimExt2DiagState;
extern u32    E2P_SYM_NmaxGmskFreqCompHighGSM;
extern u32    E2P_SYM_VoltageLevelHysteresis;
extern u32    E2P_SYM_BoardGain_DCS1800_H;
extern u32    E2P_SYM_SimStandbyCapability;
extern u32    E2P_SYM_FEMOff8PSK900;
extern u32    E2P_SYM_DotaCellId;
extern u32    E2P_SYM_v24_UsbOptions;
extern u32    E2P_SYM_AudioMediaDriverLineOutGain;
extern u32    E2P_SYM_ManuallySelectedPlmn_2;
extern u32    E2P_SYM_MultiSlotClass;
extern u32    E2P_SYM_Extended2DiagState;
extern u32    E2P_SYM_TbuoPCSGSM850TR;
extern u32    E2P_SYM_RampUp8PSKPCS_L;
extern u32    E2P_SYM_RampUp8PSKPCS_M;
extern u32    E2P_SYM_RampUp8PSKPCS_H;
extern u32    E2P_SYM_MaskPclTxFreqOffset_GSM900;
extern u32    E2P_SYM_DuoStatus;
extern u32    E2P_SYM_GsmApp;
extern u32    E2P_SYM_BoardGain_PCS1900_H;
extern u32    E2P_SYM_RampUpGMSK1900;
extern u32    E2P_SYM_EnabledFtr;
extern u32    E2P_SYM_AudioClassDGain;
extern u32    E2P_SYM_AudioDspUlFirGainHandset;
extern u32    E2P_SYM_rtcTimeSaved_Month;
extern u32    E2P_SYM_v24_Options;
extern u32    E2P_SYM_Dvga8PSKPCS;
extern u32    E2P_SYM_CamPriRotationAngle;
extern u32    E2P_SYM_CamMaxImageCaptureWidth;
extern u32    E2P_SYM_BizzFtr;
extern u32    E2P_SYM_LCMModuleID;
extern u32    E2P_SYM_ThermistorRisingTime;
extern u32    E2P_SYM_NmaxGmskFreqCompHighPCS;
extern u32    E2P_SYM_Rai_2;
extern u32    E2P_SYM_Pad8;
extern u32    E2P_SYM_PABandSelHighBand;
extern u32    E2P_SYM_TraceStoreSD;
extern u32    E2P_SYM_PAFreqCompPclGSM850;
extern u32    E2P_SYM_PadFinal1;
extern u32    E2P_SYM_GSensorCalibration;
extern u32    E2P_SYM_TaOffset_GSM900;
extern u32    E2P_SYM_CustomerFeatures;
extern u32    E2P_SYM_BoardGain_GSM850_H;
extern u32    E2P_SYM_BoardGain_GSM900_H;
extern u32    E2P_SYM_Audio3Table;
extern u32    E2P_SYM_TaOffset_GSM850;
extern u32    E2P_SYM_v24_Uart2Framing;
extern u32    E2P_SYM_AdcTempCoeff;
extern u32    E2P_SYM_BatteryFastChargingTimeOut;
extern u32    E2P_SYM_SimTimerFix;
extern u32    E2P_SYM_PaddingBattLev;
extern u32    E2P_SYM_Nmax8PSKPCS;
extern u32    E2P_SYM_AudioLSTable;
extern u32    E2P_SYM_FirstErrorStored;
extern u32    E2P_SYM_AudioOutputDriverReceiverGain;
extern u32    E2P_SYM_RampUpGMSK900;
extern u32    E2P_SYM_Dvga8PSKDCS;
extern u32    E2P_SYM_AudioDspUlFirGainHeadset;
extern u32    E2P_SYM_T3212StartTimeSecondFracPart_2;
extern u32    E2P_SYM_GCksn;
extern u32    E2P_SYM_E2pChkSumWritten;
extern u32    E2P_SYM_MccVersion;
extern u32    E2P_SYM_PSConfig;
extern u32    E2P_SYM_AudioIptvGainHeadset;
extern u32    E2P_SYM_rtcTimeSaved_Period;
extern u32    E2P_SYM_AudioCamMicGain;
extern u32    E2P_SYM_AudioCamHeadsetMicGain;
extern u32    E2P_SYM_T3212Remain;
extern u32    E2P_SYM_MsCm3;
extern u32    E2P_SYM_AudioACTable;
extern u32    E2P_SYM_AudioHFTable;
extern u32    E2P_SYM_HardCapability;
extern u32    E2P_SYM_MsCm2;
extern u32    E2P_SYM_ApusInitRegTableExt;
extern u32    E2P_SYM_SoundVolumeSize;
extern u32    E2P_SYM_RampDown8PSK850;
extern u32    E2P_SYM_EplmnBehaviour;
extern u32    E2P_SYM_GCksn_2;
extern u32    E2P_SYM_RampDown8PSK900;
extern u32    E2P_SYM_Pad1;
extern u32    E2P_SYM_rtcTimeSaved_Hour;
extern u32    E2P_SYM_T3212StartTimeSecond_2;
extern u32    E2P_SYM_TrcNumberOf32k;
extern u32    E2P_SYM_Nmax8PSKDCS;
extern u32    E2P_SYM_FlashJournalCtx;
extern u32    E2P_SYM_NmaxGmskFreqCompLowGSM;
extern u32    E2P_SYM_RampUp8PSK1800;
extern u32    E2P_SYM_RampDown8PSKDCS_H;
extern u32    E2P_SYM_AudioULDpgaAecBT;
extern u32    E2P_SYM_GKc_2;
extern u32    E2P_SYM_TbuoSi4209Set;
extern u32    E2P_SYM_T3212StartTimeYear;
extern u32    E2P_SYM_TrcNumberOfSectors_tmp;
extern u32    E2P_SYM_AudioULDpgaAecHeadset;
extern u32    E2P_SYM_RampDown8PSK1900;
extern u32    E2P_SYM_RampDown8PSK1800;
extern u32    E2P_SYM_v24_Speed;
extern u32    E2P_SYM_v24_UsbSpeed;
extern u32    E2P_SYM_RampDown8PSKDCS_L;
extern u32    E2P_SYM_AudioDLGainBT;
extern u32    E2P_SYM_E2pNetMode;
extern u32    E2P_SYM_RampDown8PSKDCS_M;
extern u32    E2P_SYM_EFSBfiThres;
extern u32    E2P_SYM_ProductStringCDC;
extern u32    E2P_SYM_SimPolIntTimer;
extern u32    E2P_SYM_IncenseULFIRHandsfree;
extern u32    E2P_SYM_RxFreqCompCh2GSM850;
extern u32    E2P_SYM_AdcChargOffset;
extern u32    E2P_SYM_RxFreqCompCh3GSM850;
extern u32    E2P_SYM_AudioMMITable;
extern u32    E2P_SYM_USFMetricE59Thres;
extern u32    E2P_SYM_GsmLib;
extern u32    E2P_SYM_CamPriXYAxisMirror;
extern u32    E2P_SYM_AHSBfiThres;
extern u32    E2P_SYM_AFSBfiThres;
extern u32    E2P_SYM_v24_SerialOn;
extern u32    E2P_SYM_RxFreqCompCh1GSM850;
extern u32    E2P_SYM_AudioFirCoeffHeadset;
extern u32    E2P_SYM_rtcTimeSaved_Day;
extern u32    E2P_SYM_PreviousImsi_2;
extern u32    E2P_SYM_LegacyInitRegTable;
extern u32    E2P_SYM_RampDown8PSKGSM900_M;
extern u32    E2P_SYM_RxFreqCompCh6GSM850;
extern u32    E2P_SYM_Pad10;
extern u32    E2P_SYM_FEMOff8PSK850;
extern u32    E2P_SYM_Pad11;
extern u32    E2P_SYM_ObjFormatChkSum;
extern u32    E2P_SYM_RxFreqCompCh2PCS;
extern u32    E2P_SYM_RxFreqCompCh4GSM850;
extern u32    E2P_SYM_RxFreqCompCh2DCS;
extern u32    E2P_SYM_Nmin8PSK_HB;
extern u32    E2P_SYM_Nmin8PSK_LB;
extern u32    E2P_SYM_Pad12;
extern u32    E2P_SYM_RampDown8PSKGSM850_L;
extern u32    E2P_SYM_RxFreqCompCh3PCS;
extern u32    E2P_SYM_RxFreqCompCh5GSM850;
extern u32    E2P_SYM_RxFreqCompCh3DCS;
extern u32    E2P_SYM_TaOffset_PCS1900;
extern u32    E2P_SYM_TaOffset_DCS1800;
extern u32    E2P_SYM_Pad13;
extern u32    E2P_SYM_MccAudioPlayback;
extern u32    E2P_SYM_E2pNetMode_2;
extern u32    E2P_SYM_RampDown8PSKPCS_L;
extern u32    E2P_SYM_RxFreqCompCh1PCS;
extern u32    E2P_SYM_RxFreqCompCh1DCS;
extern u32    E2P_SYM_AudioLPFilterTable;
extern u32    E2P_SYM_AudioHPFilterTable;
extern u32    E2P_SYM_Pad16;
extern u32    E2P_SYM_RampDown8PSKPCS_M;
extern u32    E2P_SYM_RxFreqCompCh6PCS;
extern u32    E2P_SYM_RxFreqCompCh6DCS;
extern u32    E2P_SYM_v24_SignalForUsb;
extern u32    E2P_SYM_Pad17;
extern u32    E2P_SYM_AudioDspUlFirCoeffBt;
extern u32    E2P_SYM_RxFreqCompCh4PCS;
extern u32    E2P_SYM_RxFreqCompCh4DCS;
extern u32    E2P_SYM_Pad18;
extern u32    E2P_SYM_FEMOffGMSK1800;
extern u32    E2P_SYM_Pad19;
extern u32    E2P_SYM_RampDown8PSKPCS_H;
extern u32    E2P_SYM_RxFreqCompCh5PCS;
extern u32    E2P_SYM_RxFreqCompCh5DCS;
extern u32    E2P_SYM_RoughDacOffset;
extern u32    E2P_SYM_RampDownGMSKGSM850_H;
extern u32    E2P_SYM_T3212Remain_2;
extern u32    E2P_SYM_AudioLoopTest;
extern u32    E2P_SYM_RaiSizeIn32k;
extern u32    E2P_SYM_ObjNumberOf32k;
extern u32    E2P_SYM_Audio3gpGainHeadset;
extern u32    E2P_SYM_dummyPad_IncenseULFIRHeadset;
extern u32    E2P_SYM_AudioMediaExtClassDGain;
extern u32    E2P_SYM_AudioOutputDriverLineOutGain;
extern u32    E2P_SYM_RampUpGMSKPCS_L;
extern u32    E2P_SYM_RampUpGMSKPCS_M;
extern u32    E2P_SYM_RampUpGMSKPCS_H;
extern u32    E2P_SYM_AudioExtClassDGain;
extern u32    E2P_SYM_PAFreqCompChLowDCS;
extern u32    E2P_SYM_ManuallySelectedPlmn;
extern u32    E2P_SYM_T3212Remain2;
extern u32    E2P_SYM_AudioPcmRecHeadsetMicGain;
extern u32    E2P_SYM_NmaxGMSKDCS;
extern u32    E2P_SYM_AudioVMMicGain;
extern u32    E2P_SYM_L1cNbDcPlgFrame;
extern u32    E2P_SYM_AudioKeypadToneGain;
extern u32    E2P_SYM_RaiEntriesNumberExt;
extern u32    E2P_SYM_NbRoughDacValue;
extern u32    E2P_SYM_TbuoDCSGSM900TR;
extern u32    E2P_SYM_NminInterGMSK_HB;
extern u32    E2P_SYM_NminInterGMSK_LB;
extern u32    E2P_SYM_P_Tmsi_Signature;
extern u32    E2P_SYM_RampUpGMSKDCS_L;
extern u32    E2P_SYM_RampUpGMSKDCS_M;
extern u32    E2P_SYM_RampUpGMSKDCS_H;
extern u32    E2P_SYM_AdcIchargCoeff;
extern u32    E2P_SYM_T3212StartTimeMinute;
extern u32    E2P_SYM_AudioMediaDriverSpkHeadsetGain;
extern u32    E2P_SYM_RaiFormatChkSum;
extern u32    E2P_SYM_KMVScrambleID;
extern u32    E2P_SYM_AudioVtMicGain;
extern u32    E2P_SYM_FacchThres;
extern u32    E2P_SYM_ProdNumber;
extern u32    E2P_SYM_TrcFormatChkSum;
extern u32    E2P_SYM_BootUpLogoIndex;
extern u32    E2P_SYM_AudioMp3GainHandsfree;
extern u32    E2P_SYM_RampUpGMSK850;
extern u32    E2P_SYM_NminInter8PSK_HB;
extern u32    E2P_SYM_NminInter8PSK_LB;
extern u32    E2P_SYM_MsClass;
extern u32    E2P_SYM_FmSpecialCarrierOff;
extern u32    E2P_SYM_NmaxGMSKPCS;
extern u32    E2P_SYM_MixedDiagState;
extern u32    E2P_SYM_LCMDriverIndx;
extern u32    E2P_SYM_RxFreqCompCh2GSM;
extern u32    E2P_SYM_RampDownGMSKPCS_H;
extern u32    E2P_SYM_AudioFmMicGain;
extern u32    E2P_SYM_RxFreqCompCh3GSM;
extern u32    E2P_SYM_TxFreqOffset_PCS1900;
extern u32    E2P_SYM_TxFreqOffset_DCS1800;
extern u32    E2P_SYM_MccVideoRecording;
extern u32    E2P_SYM_DualSimDiagState;
extern u32    E2P_SYM_RoughDacStepValue;
extern u32    E2P_SYM_RxFreqCompCh1GSM;
extern u32    E2P_SYM_PAFreqCompPclGSM;
extern u32    E2P_SYM_AMRDfiThres;
extern u32    E2P_SYM_RampDownGMSKPCS_M;
extern u32    E2P_SYM_RxFreqCompCh6GSM;
extern u32    E2P_SYM_SignatureParam;
extern u32    E2P_SYM_RampDownGMSKPCS_L;
extern u32    E2P_SYM_TrcFormatChkSum_tmp;
extern u32    E2P_SYM_RxFreqCompCh4GSM;
extern u32    E2P_SYM_RampUp8PSKGSM850_L;
extern u32    E2P_SYM_RampUp8PSKGSM900_L;
extern u32    E2P_SYM_RampUp8PSKGSM850_M;
extern u32    E2P_SYM_RampUp8PSKGSM900_M;
extern u32    E2P_SYM_RampUp8PSKGSM850_H;
extern u32    E2P_SYM_RampUp8PSKGSM900_H;
extern u32    E2P_SYM_RxFreqCompCh5GSM;
extern u32    E2P_SYM_PAOnGMSK1900;
extern u32    E2P_SYM_PAOnGMSK1800;
extern u32    E2P_SYM_EquivPlmnList;
extern u32    E2P_SYM_RxFreqCompChCenterPCS_HG;
extern u32    E2P_SYM_AudioCaliCtrl;
extern u32    E2P_SYM_RMScrambleID;
extern u32    E2P_SYM_AdcTempOffset;
extern u32    E2P_SYM_FmSpecialCarrierOn;
extern u32    E2P_SYM_NmaxGMSKGSM900;
extern u32    E2P_SYM_AudioPcmRecMicGain;
extern u32    E2P_SYM_ProdData1;
extern u32    E2P_SYM_NbSpeechFrameMuted;
extern u32    E2P_SYM_PAOnGMSK900;
extern u32    E2P_SYM_RxFreqCompChCenterDCS_HG;
extern u32    E2P_SYM_RampDownGMSKDCS_M;
extern u32    E2P_SYM_T3212StartTimeYear_2;
extern u32    E2P_SYM_PAOnGMSK850;
extern u32    E2P_SYM_RampDownGMSKDCS_L;
extern u32    E2P_SYM_Hard2Capability;
extern u32    E2P_SYM_RxFreqCompChCenterGSM_HG;
extern u32    E2P_SYM_IrMaxTat;
extern u32    E2P_SYM_ExhaustivePlmnSearch_2;
extern u32    E2P_SYM_SysFeature;
extern u32    E2P_SYM_Imsi_2;
extern u32    E2P_SYM_NminGMSK_HB;
extern u32    E2P_SYM_NminGMSK_LB;
extern u32    E2P_SYM_MccAudioRecording;
extern u32    E2P_SYM_RampDownGMSKDCS_H;
extern u32    E2P_SYM_AudioRingToneGainHeadset;
extern u32    E2P_SYM_AdcPad;
extern u32    E2P_SYM_Pad5;
extern u32    E2P_SYM_AudioAtvGainHeadset;
extern u32    E2P_SYM_NmaxGmskFreqCompLowPCS;
extern u32    E2P_SYM_AdReserved;
extern u32    E2P_SYM_RxFreqCompCh2GSM850_HG;
extern u32    E2P_SYM_Dvga_pad1;
extern u32    E2P_SYM_P_Tmsi_Signature_2;
extern u32    E2P_SYM_RxFreqCompCh3GSM850_HG;
extern u32    E2P_SYM_AdcChargCoeff;
extern u32    E2P_SYM_Imei_2;
extern u32    E2P_SYM_E2pSizeParam;
extern u32    E2P_SYM_RxFreqCompCh1GSM850_HG;
extern u32    E2P_SYM_RxFreqCompBG5GSM_HG;
extern u32    E2P_SYM_Dvga8PSKGSM850;
extern u32    E2P_SYM_EquivPlmnList_2;
extern u32    E2P_SYM_RxFreqCompCh6GSM850_HG;
extern u32    E2P_SYM_RxFreqCompBG4GSM_HG;
extern u32    E2P_SYM_FEMOnGMSK1900;
extern u32    E2P_SYM_FEMOnGMSK1800;
extern u32    E2P_SYM_BatteryMeasureTimeOut;
extern u32    E2P_SYM_RampDownGMSK1900;
extern u32    E2P_SYM_RampDownGMSK1800;
extern u32    E2P_SYM_HRErrorThres;
extern u32    E2P_SYM_SysTimeZone;
extern u32    E2P_SYM_RfIsolationParameter;
extern u32    E2P_SYM_RfIsolationSwitchOnTime;
extern u32    E2P_SYM_RfIsolationSwitchOffTime;
extern u32    E2P_SYM_Pad24;
extern u32    E2P_SYM_AudioMstarAecHandsfree;
extern u32    E2P_SYM_AudioMstarAecHandset;
extern u32    E2P_SYM_AudioMstarAecHeadset;
extern u32    E2P_SYM_AudioMstarAecBT;
extern u32    E2P_SYM_AudioAecSelection;
extern u32    E2P_SYM_AudioAecOn;

extern u32    E2P_SYM_RxpathDcocIGSM900;
extern u32    E2P_SYM_RxpathDcocQGSM900;
extern u32    E2P_SYM_RxpathLnaGSM900  ;
extern u32    E2P_SYM_RxpathIp2IGSM900  ;
extern u32    E2P_SYM_RxpathIp2QGSM900  ;
extern u32    E2P_SYM_RxpathIqmcAlphaGSM900;
extern u32    E2P_SYM_RxpathIqmcBetaGSM900;

extern u32    E2P_SYM_RxpathDcocIDCS;
extern u32    E2P_SYM_RxpathDcocQDCS;
extern u32    E2P_SYM_RxpathLnaDCS  ;
extern u32    E2P_SYM_RxpathIp2IDCS  ;
extern u32    E2P_SYM_RxpathIp2QDCS  ;
extern u32    E2P_SYM_RxpathIqmcAlphaDCS;
extern u32    E2P_SYM_RxpathIqmcBetaDCS;

extern u32    E2P_SYM_RxpathDcocIPCS;
extern u32    E2P_SYM_RxpathDcocQPCS;
extern u32    E2P_SYM_RxpathLnaPCS  ;
extern u32    E2P_SYM_RxpathIp2IPCS  ;
extern u32    E2P_SYM_RxpathIp2QPCS  ;
extern u32    E2P_SYM_RxpathIqmcAlphaPCS;
extern u32    E2P_SYM_RxpathIqmcBetaPCS;

extern u32    E2P_SYM_RxpathDcocIGSM850;
extern u32    E2P_SYM_RxpathDcocQGSM850;
extern u32    E2P_SYM_RxpathLnaGSM850  ;
extern u32    E2P_SYM_RxpathIp2IGSM850  ;
extern u32    E2P_SYM_RxpathIp2QGSM850  ;
extern u32    E2P_SYM_RxpathIqmcAlphaGSM850;
extern u32    E2P_SYM_RxpathIqmcBetaGSM850;

extern u32    E2P_SYM_RxpathDcocDeltaILB;
extern u32    E2P_SYM_RxpathDcocDeltaQLB;
extern u32    E2P_SYM_RxpathDcocDeltaIHB;
extern u32    E2P_SYM_RxpathDcocDeltaQHB;

#else
extern u32    E2P_SYM_RampDownGMSKGSM850_M;
extern u32    E2P_SYM_TotalCallTime;
extern u32    E2P_SYM_ImeiSV;
extern u32    E2P_SYM_RxFreqCompCh4GSM850_HG;
extern u32    E2P_SYM_RxFreqCompBG6GSM_HG;
extern u32    E2P_SYM_NmaxGmskFreqCompLowGSM850;
extern u32    E2P_SYM_E2pTstPattern;
extern u32    E2P_SYM_AudioSpeakerGain;
extern u32    E2P_SYM_RxFreqCompCh5GSM850_HG;
extern u32    E2P_SYM_RxFreqCompBG1GSM_HG;
extern u32    E2P_SYM_EgprsMultiSlotClass;
extern u32    E2P_SYM_RampUpGMSKGSM850_L;
extern u32    E2P_SYM_RampDownGMSKGSM900_L;
extern u32    E2P_SYM_RampUpGMSKGSM900_L;
extern u32    E2P_SYM_RampUpGMSKGSM850_M;
extern u32    E2P_SYM_RampUpGMSKGSM900_M;
extern u32    E2P_SYM_RampUpGMSKGSM850_H;
extern u32    E2P_SYM_RampUpGMSKGSM900_H;
extern u32    E2P_SYM_AudioMStarULBluetoothNS;
extern u32    E2P_SYM_AudioRingToneGainHandsfree;
extern u32    E2P_SYM_RxFreqCompBG3GSM_HG;
extern u32    E2P_SYM_AdcBatRawData;
extern u32    E2P_SYM_Nmax8PSKGSM850;
extern u32    E2P_SYM_RxFreqCompBG2GSM_HG;
extern u32    E2P_SYM_AdcBatActualVolt;
extern u32    E2P_SYM_AudioDspUlFirCoeffHandset;
extern u32    E2P_SYM_AudioMicBiasLevel;
extern u32    E2P_SYM_FEMOn8PSK1900;
extern u32    E2P_SYM_FEMOn8PSK1800;
extern u32    E2P_SYM_AudioMStarULHandFreeDrc;
extern u32    E2P_SYM_PreviousImsi;
extern u32    E2P_SYM_TbuoE2pDefEnable;
extern u32    E2P_SYM_RampDownGMSK900;
extern u32    E2P_SYM_PAOffGMSK1900;
extern u32    E2P_SYM_PAOffGMSK1800;
extern u32    E2P_SYM_RampDownGMSK850;
extern u32    E2P_SYM_TxPwrMinBase;
extern u32    E2P_SYM_PAFreqCompChHighGSM850;
extern u32    E2P_SYM_RampDown8PSKGSM850_H;
extern u32    E2P_SYM_RampUp8PSK850;
extern u32    E2P_SYM_T3212StartTimeMinute_2;
extern u32    E2P_SYM_DisableErrorTraceInFacMode;
extern u32    E2P_SYM_LCMTableOffset;
extern u32    E2P_SYM_FacProdRecord;
extern u32    E2P_SYM_TbuoPABandSel;
extern u32    E2P_SYM_AudioMStarDLBluetoothFiltCoeffs;
extern u32    E2P_SYM_AudioSTGain;
extern u32    E2P_SYM_AudioAtvGainHandsfree;
extern u32    E2P_SYM_AudioDLGainHandset;
extern u32    E2P_SYM_PAVmode8PSK;
extern u32    E2P_SYM_FEMOnGMSK900;
extern u32    E2P_SYM_FEMOnGMSK850;
extern u32    E2P_SYM_PAOff8PSK1900;
extern u32    E2P_SYM_PAOff8PSK1800;
extern u32    E2P_SYM_InterRamp8PSK8PSKGSM900;
extern u32    E2P_SYM_InterRampGMSKGMSKGSM900;
extern u32    E2P_SYM_AudioMStarDLHandFreeFiltCoeffs;
extern u32    E2P_SYM_AudioDLGainHeadset;
extern u32    E2P_SYM_InterRamp8PSK8PSKGSM850;
extern u32    E2P_SYM_InterRampGMSKGMSKGSM850;
extern u32    E2P_SYM_PAOn8PSK850;
extern u32    E2P_SYM_TraceStoreSDFilter;
extern u32    E2P_SYM_UsbPid;
extern u32    E2P_SYM_GsensorDirection;
extern u32    E2P_SYM_PAFreqCompChLowPCS;
extern u32    E2P_SYM_PAOn8PSK900;
extern u32    E2P_SYM_USFMetricE14Thres;
extern u32    E2P_SYM_AudioMStarULBluetoothFiltCoeffs;
extern u32    E2P_SYM_FEMOn8PSK900;
extern u32    E2P_SYM_FEMOn8PSK850;
extern u32    E2P_SYM_VersHard;
extern u32    E2P_SYM_v24_Uart2Options;
extern u32    E2P_SYM_PowerMinBase;
extern u32    E2P_SYM_Pad7;
extern u32    E2P_SYM_SignatureCck;
extern u32    E2P_SYM_SignatureNck;
extern u32    E2P_SYM_SignaturePck;
extern u32    E2P_SYM_AudioVtGainHandsfree;
extern u32    E2P_SYM_FEMOff8PSK1800;
extern u32    E2P_SYM_AudioVtGainHeadset;
extern u32    E2P_SYM_VendorString;
extern u32    E2P_SYM_AudioMStarULHandFreeFiltCoeffs;
extern u32    E2P_SYM_AudioVMHeadsetMicGain;
extern u32    E2P_SYM_SDdrvRelatedCfg;
extern u32    E2P_SYM_EnableUartPrintf;
extern u32    E2P_SYM_PAOn8PSK1900;
extern u32    E2P_SYM_PAOn8PSK1800;
extern u32    E2P_SYM_PAFreqCompChCenterPCS;
extern u32    E2P_SYM_RequiredPatches;
extern u32    E2P_SYM_LastBa;
extern u32    E2P_SYM_GKc;
extern u32    E2P_SYM_IncenseDLFIRHeadset;
extern u32    E2P_SYM_IncenseDLFIRHandset;
extern u32    E2P_SYM_FEMOffGMSK850;
extern u32    E2P_SYM_AudioFmGainHandsfree;
extern u32    E2P_SYM_RxFreqCompChCenterPCS;
extern u32    E2P_SYM_AudioFmGainHeadset;
extern u32    E2P_SYM_CusCalibrationData;
extern u32    E2P_SYM_ProtPadFinal;
extern u32    E2P_SYM_ProtPadFinal1;
extern u32    E2P_SYM_rtcTimeSaved_Second;
extern u32    E2P_SYM_T3212StartTimeMonth_2;
extern u32    E2P_SYM_OatStartAddr;
extern u32    E2P_SYM_JavaExecVolumeSize;
extern u32    E2P_SYM_Egprs8PskUplinkCap;
extern u32    E2P_SYM_StaticDacValue;
extern u32    E2P_SYM_AudioDspUlFirGainHandsfree;
extern u32    E2P_SYM_CamMaxImageCaptureHeight;
extern u32    E2P_SYM_DiagState;
extern u32    E2P_SYM_T3212Remain2_2;
extern u32    E2P_SYM_PAFreqCompChCenterDCS;
extern u32    E2P_SYM_RxFreqCompBG5PCS_HG;
extern u32    E2P_SYM_RxFreqCompBG5DCS_HG;
extern u32    E2P_SYM_OpenCtrl;
extern u32    E2P_SYM_RxFreqCompBG4PCS_HG;
extern u32    E2P_SYM_RxFreqCompBG4DCS_HG;
extern u32    E2P_SYM_RxFreqCompChCenterDCS;
extern u32    E2P_SYM_ToiDrift;
extern u32    E2P_SYM_AudioMStarDLHandFreeEchoConf;
extern u32    E2P_SYM_AudioMStarULHeadsetNS;
extern u32    E2P_SYM_AudioMStarULHandsetNS;
extern u32    E2P_SYM_Pad0;
extern u32    E2P_SYM_MaskPclTxFreqOffset_PCS1900;
extern u32    E2P_SYM_RxFreqCompBG6PCS_HG;
extern u32    E2P_SYM_RxFreqCompBG6DCS_HG;
extern u32    E2P_SYM_RxFreqCompChCenterGSM;
extern u32    E2P_SYM_AudioDspGain;
extern u32    E2P_SYM_PadRtcLastDayOfYearDriftCorrect;
extern u32    E2P_SYM_Rai;
extern u32    E2P_SYM_Imsi;
extern u32    E2P_SYM_AudioMp3GainHeadset;
extern u32    E2P_SYM_RxFreqCompBG1PCS_HG;
extern u32    E2P_SYM_RxFreqCompBG1DCS_HG;
extern u32    E2P_SYM_ExhaustivePlmnSearch;
extern u32    E2P_SYM_PAFreqCompChCenterGSM;
extern u32    E2P_SYM_v24_UsbFraming;
extern u32    E2P_SYM_RxFreqCompBG3PCS_HG;
extern u32    E2P_SYM_RxFreqCompBG3DCS_HG;
extern u32    E2P_SYM_AdcBatOffset;
extern u32    E2P_SYM_WifiMac;
extern u32    E2P_SYM_LCMTableOffsetChksum;
extern u32    E2P_SYM_VoltageOrder;
extern u32    E2P_SYM_StatusReport_2_BK;
extern u32    E2P_SYM_RxFreqCompBG2PCS_HG;
extern u32    E2P_SYM_RxFreqCompBG2DCS_HG;
extern u32    E2P_SYM_ProdTestRes;
extern u32    E2P_SYM_AudioDLGainHandsfree;
extern u32    E2P_SYM_L1cNbSleepFrame;
extern u32    E2P_SYM_RampUpGMSK1800;
extern u32    E2P_SYM_AudioMStarDLHeadsetNS;
extern u32    E2P_SYM_AudioMStarDLHandsetNS;
extern u32    E2P_SYM_AudioMStarULHandFreeEchoConf;
extern u32    E2P_SYM_AdnNeedSyncToMT;
extern u32    E2P_SYM_ProtVersion;
extern u32    E2P_SYM_RxFreqCompChCenterGSM850;
extern u32    E2P_SYM_LegacyTestGainTable_LB;
extern u32    E2P_SYM_Imei;
extern u32    E2P_SYM_MaskPclTxFreqOffset_GSM850;
extern u32    E2P_SYM_AudioMStarDLHeadsetFiltCoeffs;
extern u32    E2P_SYM_AudioMStarDLHandsetFiltCoeffs;
extern u32    E2P_SYM_MaxBatteryTemp;
extern u32    E2P_SYM_PAFreqCompChCenterGSM850;
extern u32    E2P_SYM_AudioMediaDriverHeadsetGain;
extern u32    E2P_SYM_AudioFirCoeff;
extern u32    E2P_SYM_FmIsAntennaSupported;
extern u32    E2P_SYM_Settings_BK;
extern u32    E2P_SYM_IncenseDLFIRHandsfree;
extern u32    E2P_SYM_RxFreqCompBG2GSM850;
extern u32    E2P_SYM_LegacyTestGainTable_HB;
extern u32    E2P_SYM_rtcTimeSaved_DataValid;
extern u32    E2P_SYM_NminPedestal;
extern u32    E2P_SYM_LCMModuleIDChksum;
extern u32    E2P_SYM_RxFreqCompBG3GSM850;
extern u32    E2P_SYM_MccReserved;
extern u32    E2P_SYM_MaskPclTxFreqOffset_DCS1800;
extern u32    E2P_SYM_SettingMode;
extern u32    E2P_SYM_L1cNbWakeFrame;
extern u32    E2P_SYM_RxFreqCompBG1GSM850;
extern u32    E2P_SYM_RampDown8PSKGSM900_L;
extern u32    E2P_SYM_RtkTaskState;
extern u32    E2P_SYM_Pad9;
extern u32    E2P_SYM_RxFreqCompBG6GSM850;
extern u32    E2P_SYM_EnableTaskMgr;
extern u32    E2P_SYM_AudioMStarULHeadsetFiltCoeffs;
extern u32    E2P_SYM_AudioMStarULHandsetFiltCoeffs;
extern u32    E2P_SYM_MinBatteryTemp;
extern u32    E2P_SYM_PAOffGMSK900;
extern u32    E2P_SYM_PAOffGMSK850;
extern u32    E2P_SYM_ProductStringMS;
extern u32    E2P_SYM_MaskFoiPowerLev;
extern u32    E2P_SYM_RxFreqCompBG4GSM850;
extern u32    E2P_SYM_RampDown8PSKGSM850_M;
extern u32    E2P_SYM_DotaVolumeSize;
extern u32    E2P_SYM_RxFreqCompBG5GSM850;
extern u32    E2P_SYM_NmaxGmskFreqCompLowDCS;
extern u32    E2P_SYM_RamDumpFlag;
extern u32    E2P_SYM_RampUp8PSK900;
extern u32    E2P_SYM_AtDataRate;
extern u32    E2P_SYM_MeLockData;
extern u32    E2P_SYM_Rf_Param3;
extern u32    E2P_SYM_rr_ScanMode;
extern u32    E2P_SYM_DotaState;
extern u32    E2P_SYM_AudioMStarAgcDrc;
extern u32    E2P_SYM_AudioOutputDriverHeadsetGain;
extern u32    E2P_SYM_Rf_Param2;
extern u32    E2P_SYM_NRAIFreeSectorRecord;
extern u32    E2P_SYM_Rf_Param1;
extern u32    E2P_SYM_AudioOutputDriverSpkHeadsetGain;
extern u32    E2P_SYM_AntennaGain;
extern u32    E2P_SYM_CustomIdCDC;
extern u32    E2P_SYM_ScratchMemStatus;
extern u32    E2P_SYM_RtkMbxState;
extern u32    E2P_SYM_PAOff8PSK900;
extern u32    E2P_SYM_PAOff8PSK850;
extern u32    E2P_SYM_MonoBand;
extern u32    E2P_SYM_v24_Uart2Speed;
extern u32    E2P_SYM_JavaVolumeSize;
extern u32    E2P_SYM_T3212Value;
extern u32    E2P_SYM_Rf_Param4;
extern u32    E2P_SYM_USFMetricCS24Thres;
extern u32    E2P_SYM_C1Threshold;
extern u32    E2P_SYM_RampDownGMSKGSM900_H;
extern u32    E2P_SYM_SettingsExt;
extern u32    E2P_SYM_pad;
extern u32    E2P_SYM_MccVideoPlayback;
extern u32    E2P_SYM_v24_NominalMode;
extern u32    E2P_SYM_SmsCbCustomFlags_2;
extern u32    E2P_SYM_AudioFirCoeffBT;
extern u32    E2P_SYM_Pad2;
extern u32    E2P_SYM_AudioMStarULBluetoothEchoConf;
extern u32    E2P_SYM_TerminalProfileLength;
extern u32    E2P_SYM_NmaxGmskFreqCompHighGSM850;
extern u32    E2P_SYM_T3212StartTimeHour;
extern u32    E2P_SYM_AudioDspUlFirCoeffHeadset;
extern u32    E2P_SYM_RampUp8PSK1900;
extern u32    E2P_SYM_BtAddr;
extern u32    E2P_SYM_SDKDiagState;
extern u32    E2P_SYM_AdnNeedSyncToMT_2;
extern u32    E2P_SYM_AdnNeedReload;
extern u32    E2P_SYM_CustomIdMS;
extern u32    E2P_SYM_T3212StartTimeHour_2;
extern u32    E2P_SYM_LockPwd;
extern u32    E2P_SYM_GDiagState;
extern u32    E2P_SYM_SmsConvTab;
extern u32    E2P_SYM_FEMOffGMSK900;
extern u32    E2P_SYM_AudioMStarDLBluetoothEchoConf;
extern u32    E2P_SYM_BattLev;
extern u32    E2P_SYM_NbErrorStored;
extern u32    E2P_SYM_BTAcrux2ChipVersion;
extern u32    E2P_SYM_P_Tmsi;
extern u32    E2P_SYM_IrDiscTime;
extern u32    E2P_SYM_AudioULDpgaAecHandsfree;
extern u32    E2P_SYM_PadLastE2pField;
extern u32    E2P_SYM_RxFreqCompBG2GSM;
extern u32    E2P_SYM_AdnNeedReload_2;
extern u32    E2P_SYM_RxFreqCompBG3GSM;
extern u32    E2P_SYM_PAFreqCompChLowGSM;
extern u32    E2P_SYM_ApusACLResult_e;
extern u32    E2P_SYM_PadCGLRingLevelAux;
extern u32    E2P_SYM_Greeting;
extern u32    E2P_SYM_Sn;
extern u32    E2P_SYM_FastChargeBatteryStatusTimeOut;
extern u32    E2P_SYM_RxFreqCompBG1GSM;
extern u32    E2P_SYM_BoardGain_GSM850;
extern u32    E2P_SYM_BoardGain_GSM900;
extern u32    E2P_SYM_RxFreqCompBG6GSM;
extern u32    E2P_SYM_T3212StartTimeDay_2;
extern u32    E2P_SYM_RaiEntriesNumber;
extern u32    E2P_SYM_Pad20;
extern u32    E2P_SYM_Pad21;
extern u32    E2P_SYM_RxFreqCompBG4GSM;
extern u32    E2P_SYM_FmIsRecordingSupported;
extern u32    E2P_SYM_Pad22;
extern u32    E2P_SYM_InterRamp8PSK8PSKPCS;
extern u32    E2P_SYM_InterRamp8PSK8PSKDCS;
extern u32    E2P_SYM_InterRampGMSKGMSKPCS;
extern u32    E2P_SYM_InterRampGMSKGMSKDCS;
extern u32    E2P_SYM_BatteryLevel;
extern u32    E2P_SYM_RxFreqCompBG5GSM;
extern u32    E2P_SYM_Pad23;
extern u32    E2P_SYM_Language;
extern u32    E2P_SYM_AMCal_DCS1800;
extern u32    E2P_SYM_ProdArfcn_2;
extern u32    E2P_SYM_AudioDspUlFirGainBt;
extern u32    E2P_SYM_ProdNumberBis;
extern u32    E2P_SYM_T3212StartTimeDay;
extern u32    E2P_SYM_FEMOffGMSK1900;
extern u32    E2P_SYM_Pad28;
extern u32    E2P_SYM_ReadyTimer;
extern u32    E2P_SYM_MccMaxRomSizeEmu;
extern u32    E2P_SYM_BatterySecurityWaitTimeOut;
extern u32    E2P_SYM_PAFreqCompChHighPCS;
extern u32    E2P_SYM_EnablePedestalCal;
extern u32    E2P_SYM_CamSecRotationAngle;
extern u32    E2P_SYM_RFPower_4Bands;
extern u32    E2P_SYM_RFPower_GSM900_DCS1800;
extern u32    E2P_SYM_RFPower_PCS1900_GSM850;
extern u32    E2P_SYM_LastBa_2;
extern u32    E2P_SYM_batLowBatteryReportPeriod;
extern u32    E2P_SYM_AMCal_PCS1900;
extern u32    E2P_SYM_RadioType;
extern u32    E2P_SYM_T3212StartTimeMonth;
extern u32    E2P_SYM_FacchHRThres;
extern u32    E2P_SYM_FacchHRThresSaic;
extern u32    E2P_SYM_UpdateStatus_2;
extern u32    E2P_SYM_IrPreambTh;
extern u32    E2P_SYM_v24_Framing;
extern u32    E2P_SYM_Uart;
extern u32    E2P_SYM_AudioMStarULHeadsetDrc;
extern u32    E2P_SYM_AudioMStarULHandsetDrc;
extern u32    E2P_SYM_Audio3gpGainHandsfree;
extern u32    E2P_SYM_AFCSLOPE;
extern u32    E2P_SYM_CamSecXYAxisMirror;
extern u32    E2P_SYM_T3212StartTimeSecondFracPart;
extern u32    E2P_SYM_PAFreqCompChLowGSM850;
extern u32    E2P_SYM_BatteryCapacity;
extern u32    E2P_SYM_RoughDacValue;
extern u32    E2P_SYM_TbuoSavedPinSet;
extern u32    E2P_SYM_AudioDspUlFirCoeffHandsfree;
extern u32    E2P_SYM_DataCompress;
extern u32    E2P_SYM_v24_UsbExtOptions;
extern u32    E2P_SYM_AudioCtrl;
extern u32    E2P_SYM_AMCal_GSM900;
extern u32    E2P_SYM_AMCal_GSM850;
extern u32    E2P_SYM_AudioMStarDLHeadsetDrc;
extern u32    E2P_SYM_AudioMStarDLHandsetDrc;
extern u32    E2P_SYM_MicGains;
extern u32    E2P_SYM_USFMetricCS1Thres;
extern u32    E2P_SYM_FchTres;
extern u32    E2P_SYM_AudioMediaClassDGain;
extern u32    E2P_SYM_DrxParam;
extern u32    E2P_SYM_TbuoPAVmode;
extern u32    E2P_SYM_HRUfiThres;
extern u32    E2P_SYM_ProdArfcn;
extern u32    E2P_SYM_IncenseGsmCtaPath;
extern u32    E2P_SYM_PadStackAudio;
extern u32    E2P_SYM_AudioULDpgaAecHandset;
extern u32    E2P_SYM_AudioFirCoeffHandsfree;
extern u32    E2P_SYM_Nmax8PSKGSM900;
extern u32    E2P_SYM_ApusCtrlFlag_e;
extern u32    E2P_SYM_MaskFoiPowerLevBis;
extern u32    E2P_SYM_CommonGprsSettings_2;
extern u32    E2P_SYM_Mmt_Ecc;
extern u32    E2P_SYM_BearerCfg;
extern u32    E2P_SYM_ExtendedDiagState;
extern u32    E2P_SYM_PadCGLGreeting2;
extern u32    E2P_SYM_PAFreqCompChHighDCS;
extern u32    E2P_SYM_RxFreqCompCh5PCS_HG;
extern u32    E2P_SYM_RxFreqCompCh5DCS_HG;
extern u32    E2P_SYM_RxFreqCompCh4PCS_HG;
extern u32    E2P_SYM_RxFreqCompCh4DCS_HG;
extern u32    E2P_SYM_RampDown8PSKGSM900_H;
extern u32    E2P_SYM_HSBfiThres;
extern u32    E2P_SYM_rtcTimeSaved_Minute;
extern u32    E2P_SYM_AudioMediaDriverReceiverGain;
extern u32    E2P_SYM_AudioMstarCTACTMode;
extern u32    E2P_SYM_BootLogoID;
extern u32    E2P_SYM_rtcTimeSaved_Year;
extern u32    E2P_SYM_AdControlSum;
extern u32    E2P_SYM_RxFreqCompCh6PCS_HG;
extern u32    E2P_SYM_RxFreqCompCh6DCS_HG;
extern u32    E2P_SYM_RoughDacSum;
extern u32    E2P_SYM_AecType;
extern u32    E2P_SYM_RxFreqCompCh1PCS_HG;
extern u32    E2P_SYM_RxFreqCompCh1DCS_HG;
extern u32    E2P_SYM_RxFreqCompBG2PCS;
extern u32    E2P_SYM_RxFreqCompBG2DCS;
extern u32    E2P_SYM_HiddenPartitionShowUp;
extern u32    E2P_SYM_DataParam;
extern u32    E2P_SYM_RxFreqCompBG3PCS;
extern u32    E2P_SYM_RxFreqCompBG3DCS;
extern u32    E2P_SYM_AdcBatCoeff;
extern u32    E2P_SYM_LastCallTime;
extern u32    E2P_SYM_RxFreqCompCh3PCS_HG;
extern u32    E2P_SYM_RxFreqCompCh3DCS_HG;
extern u32    E2P_SYM_NmaxGMSKGSM850;
extern u32    E2P_SYM_BoardGain_DCS1800;
extern u32    E2P_SYM_AudioAtvMicGain;
extern u32    E2P_SYM_L1cNbTxFrame;
extern u32    E2P_SYM_RxFreqCompCh2PCS_HG;
extern u32    E2P_SYM_RxFreqCompCh2DCS_HG;
extern u32    E2P_SYM_RxFreqCompBG1PCS;
extern u32    E2P_SYM_RxFreqCompBG1DCS;
extern u32    E2P_SYM_AudioComfortNoiseGain;
extern u32    E2P_SYM_FSBfiThres;
extern u32    E2P_SYM_v24_Uart2ExtOptions;
extern u32    E2P_SYM_RxFreqCompBG6PCS;
extern u32    E2P_SYM_RxFreqCompBG6DCS;
extern u32    E2P_SYM_PAFreqCompPclPCS;
extern u32    E2P_SYM_PAFreqCompPclDCS;
extern u32    E2P_SYM_PAFreqCompChHighGSM;
extern u32    E2P_SYM_TbuoTxEnable;
extern u32    E2P_SYM_E2pMirror;
extern u32    E2P_SYM_RxFreqCompBG4PCS;
extern u32    E2P_SYM_RxFreqCompBG4DCS;
extern u32    E2P_SYM_RxFreqCompBG5PCS;
extern u32    E2P_SYM_RxFreqCompBG5DCS;
extern u32    E2P_SYM_CamSensorIndex;
extern u32    E2P_SYM_TxFreqOffset_GSM850;
extern u32    E2P_SYM_PadAJ;
extern u32    E2P_SYM_TxFreqOffset_GSM900;
extern u32    E2P_SYM_BoardGain_PCS1900;
extern u32    E2P_SYM_TbuoPAEnable;
extern u32    E2P_SYM_MaxVolt;
extern u32    E2P_SYM_TxPwrRampNbNullPts;
extern u32    E2P_SYM_SignatureSpck;
extern u32    E2P_SYM_SignatureNsck;
extern u32    E2P_SYM_T3212Value_2;
extern u32    E2P_SYM_TbuoRxEnable;
extern u32    E2P_SYM_SpeedProfileConfig;
extern u32    E2P_SYM_UpdateStatus;
extern u32    E2P_SYM_StackConfig;
extern u32    E2P_SYM_AudioDtmfGainHandsfree;
extern u32    E2P_SYM_AudioIptvGainHandsfree;
extern u32    E2P_SYM_AdcIchargOffset;
extern u32    E2P_SYM_FEMOff8PSK1900;
extern u32    E2P_SYM_pad_1;
extern u32    E2P_SYM_RxFreqCompChCenterGSM850_HG;
extern u32    E2P_SYM_pad_2;
extern u32    E2P_SYM_IrActive;
extern u32    E2P_SYM_VoltageDropBeforeRecharge;
extern u32    E2P_SYM_ModuleVersion;
extern u32    E2P_SYM_Dvga8PSKGSM900;
extern u32    E2P_SYM_RxFreqCompBG2GSM850_HG;
extern u32    E2P_SYM_DataSecurity;
extern u32    E2P_SYM_RxFreqCompBG3GSM850_HG;
extern u32    E2P_SYM_E2pOffsetParam;
extern u32    E2P_SYM_T3212StartTimeSecond;
extern u32    E2P_SYM_PadDualSimExt2;
extern u32    E2P_SYM_IncenseULFIRHeadset;
extern u32    E2P_SYM_IncenseULFIRHandset;
extern u32    E2P_SYM_RxFreqCompBG1GSM850_HG;
extern u32    E2P_SYM_RxFreqCompCh5GSM_HG;
extern u32    E2P_SYM_RxFreqCompEnable;
extern u32    E2P_SYM_SignatureForCustomerFeatures;
extern u32    E2P_SYM_ExtendedCapability;
extern u32    E2P_SYM_RxFreqCompBG6GSM850_HG;
extern u32    E2P_SYM_RxFreqCompCh4GSM_HG;
extern u32    E2P_SYM_MpRelease;
extern u32    E2P_SYM_v24_ExtOptions;
extern u32    E2P_SYM_VmlNbMaxASEClient;
extern u32    E2P_SYM_TxFreqCompEnable;
extern u32    E2P_SYM_RampDownGMSKGSM850_L;
extern u32    E2P_SYM_RxFreqCompBG4GSM850_HG;
extern u32    E2P_SYM_RxFreqCompCh6GSM_HG;
extern u32    E2P_SYM_e2p_WriteCycle;
extern u32    E2P_SYM_AudioDtmfGainHeadset;
extern u32    E2P_SYM_RxFreqCompBG5GSM850_HG;
extern u32    E2P_SYM_RxFreqCompCh1GSM_HG;
extern u32    E2P_SYM_E2pChkSum;
extern u32    E2P_SYM_ThermistorCurrent;
extern u32    E2P_SYM_NmaxGmskFreqCompHighDCS;
extern u32    E2P_SYM_RampDownGMSKGSM900_M;
extern u32    E2P_SYM_RxSPErrorTres;
extern u32    E2P_SYM_P_Tmsi_2;
extern u32    E2P_SYM_RxFreqCompCh3GSM_HG;
extern u32    E2P_SYM_RampUp8PSKDCS_L;
extern u32    E2P_SYM_RampUp8PSKDCS_M;
extern u32    E2P_SYM_RampUp8PSKDCS_H;
extern u32    E2P_SYM_DualSimExt2DiagState;
extern u32    E2P_SYM_RxFreqCompCh2GSM_HG;
extern u32    E2P_SYM_E2pNetMode_BK;
extern u32    E2P_SYM_VoltageLevelHysteresis;
extern u32    E2P_SYM_NmaxGmskFreqCompHighGSM;
extern u32    E2P_SYM_SimStandbyCapability;
extern u32    E2P_SYM_BoardGain_DCS1800_H;
extern u32    E2P_SYM_FEMOff8PSK900;
extern u32    E2P_SYM_DotaCellId;
extern u32    E2P_SYM_v24_UsbOptions;
extern u32    E2P_SYM_MultiSlotClass;
extern u32    E2P_SYM_ManuallySelectedPlmn_2;
extern u32    E2P_SYM_AudioMediaDriverLineOutGain;
extern u32    E2P_SYM_PadAdc;
extern u32    E2P_SYM_Extended2DiagState;
extern u32    E2P_SYM_TbuoPCSGSM850TR;
extern u32    E2P_SYM_RampUp8PSKPCS_L;
extern u32    E2P_SYM_RampUp8PSKPCS_M;
extern u32    E2P_SYM_RampUp8PSKPCS_H;
extern u32    E2P_SYM_MaskPclTxFreqOffset_GSM900;
extern u32    E2P_SYM_DuoStatus;
extern u32    E2P_SYM_GsmApp;
extern u32    E2P_SYM_RampUpGMSK1900;
extern u32    E2P_SYM_EnabledFtr;
extern u32    E2P_SYM_PhbAdnChecksum_2;
extern u32    E2P_SYM_CustomerKey;
extern u32    E2P_SYM_BoardGain_PCS1900_H;
extern u32    E2P_SYM_AudioClassDGain;
extern u32    E2P_SYM_AudioDspUlFirGainHandset;
extern u32    E2P_SYM_FmPadding;
extern u32    E2P_SYM_rtcTimeSaved_Month;
extern u32    E2P_SYM_v24_Options;
extern u32    E2P_SYM_Dvga8PSKPCS;
extern u32    E2P_SYM_CamPriRotationAngle;
extern u32    E2P_SYM_CamMaxImageCaptureWidth;
extern u32    E2P_SYM_BizzFtr;
extern u32    E2P_SYM_ThermistorRisingTime;
extern u32    E2P_SYM_LCMModuleID;
extern u32    E2P_SYM_Pad_0;
extern u32    E2P_SYM_Rai_2;
extern u32    E2P_SYM_Pad8;
extern u32    E2P_SYM_NmaxGmskFreqCompHighPCS;
extern u32    E2P_SYM_PABandSelHighBand;
extern u32    E2P_SYM_TraceStoreSD;
extern u32    E2P_SYM_PAFreqCompPclGSM850;
extern u32    E2P_SYM_TaOffset_GSM900;
extern u32    E2P_SYM_CustomerFeatures;
extern u32    E2P_SYM_PhbAdnChecksum;
extern u32    E2P_SYM_GSensorCalibration;
extern u32    E2P_SYM_TaOffset_GSM850;
extern u32    E2P_SYM_Audio3Table;
extern u32    E2P_SYM_v24_Uart2Framing;
extern u32    E2P_SYM_BoardGain_GSM850_H;
extern u32    E2P_SYM_BoardGain_GSM900_H;
extern u32    E2P_SYM_AdcTempCoeff;
extern u32    E2P_SYM_SimTimerFix;
extern u32    E2P_SYM_BatteryFastChargingTimeOut;
extern u32    E2P_SYM_AudioLSTable;
extern u32    E2P_SYM_Nmax8PSKPCS;
extern u32    E2P_SYM_FirstErrorStored;
extern u32    E2P_SYM_AudioOutputDriverReceiverGain;
extern u32    E2P_SYM_RampUpGMSK900;
extern u32    E2P_SYM_T3212StartTimeSecondFracPart_2;
extern u32    E2P_SYM_Dvga8PSKDCS;
extern u32    E2P_SYM_AudioDspUlFirGainHeadset;
extern u32    E2P_SYM_GCksn;
extern u32    E2P_SYM_E2pChkSumWritten;
extern u32    E2P_SYM_MccVersion;
extern u32    E2P_SYM_PSConfig;
extern u32    E2P_SYM_AudioIptvGainHeadset;
extern u32    E2P_SYM_ProtValidate;
extern u32    E2P_SYM_MsCm3;
extern u32    E2P_SYM_rtcTimeSaved_Period;
extern u32    E2P_SYM_T3212Remain;
extern u32    E2P_SYM_AudioCamMicGain;
extern u32    E2P_SYM_AudioCamHeadsetMicGain;
extern u32    E2P_SYM_HardCapability;
extern u32    E2P_SYM_AudioACTable;
extern u32    E2P_SYM_AudioHFTable;
extern u32    E2P_SYM_MsCm2;
extern u32    E2P_SYM_ApusInitRegTableExt;
extern u32    E2P_SYM_SoundVolumeSize;
extern u32    E2P_SYM_RampDown8PSK850;
extern u32    E2P_SYM_EplmnBehaviour;
extern u32    E2P_SYM_RampDown8PSK900;
extern u32    E2P_SYM_GCksn_2;
extern u32    E2P_SYM_GpsUnsolManagement;
extern u32    E2P_SYM_Pad1;
extern u32    E2P_SYM_rtcTimeSaved_Hour;
extern u32    E2P_SYM_T3212StartTimeSecond_2;
extern u32    E2P_SYM_TrcNumberOf32k;
extern u32    E2P_SYM_FlashJournalCtx;
extern u32    E2P_SYM_Nmax8PSKDCS;
extern u32    E2P_SYM_NetStr;
extern u32    E2P_SYM_NmaxGmskFreqCompLowGSM;
extern u32    E2P_SYM_RampUp8PSK1800;
extern u32    E2P_SYM_AudioMStarDLBluetoothDrc;
extern u32    E2P_SYM_RampDown8PSKDCS_H;
extern u32    E2P_SYM_GKc_2;
extern u32    E2P_SYM_AudioULDpgaAecBT;
extern u32    E2P_SYM_TbuoSi4209Set;
extern u32    E2P_SYM_T3212StartTimeYear;
extern u32    E2P_SYM_TrcNumberOfSectors_tmp;
extern u32    E2P_SYM_E2pNetMode_2_BK;
extern u32    E2P_SYM_LlcSettings;
extern u32    E2P_SYM_AudioULDpgaAecHeadset;
extern u32    E2P_SYM_RampDown8PSK1900;
extern u32    E2P_SYM_RampDown8PSK1800;
extern u32    E2P_SYM_v24_Speed;
extern u32    E2P_SYM_v24_UsbSpeed;
extern u32    E2P_SYM_RampDown8PSKDCS_L;
extern u32    E2P_SYM_E2pNetMode;
extern u32    E2P_SYM_AudioDLGainBT;
extern u32    E2P_SYM_RampDown8PSKDCS_M;
extern u32    E2P_SYM_EFSBfiThres;
extern u32    E2P_SYM_ProductStringCDC;
extern u32    E2P_SYM_SimPolIntTimer;
extern u32    E2P_SYM_AudioMStarULBluetoothDrc;
extern u32    E2P_SYM_GpsUnsolManagement_2;
extern u32    E2P_SYM_IncenseULFIRHandsfree;
extern u32    E2P_SYM_AdcChargOffset;
extern u32    E2P_SYM_RxFreqCompCh2GSM850;
extern u32    E2P_SYM_AudioMMITable;
extern u32    E2P_SYM_USFMetricE59Thres;
extern u32    E2P_SYM_RxFreqCompCh3GSM850;
extern u32    E2P_SYM_GsmLib;
extern u32    E2P_SYM_CamPriXYAxisMirror;
extern u32    E2P_SYM_AHSBfiThres;
extern u32    E2P_SYM_AFSBfiThres;
extern u32    E2P_SYM_v24_SerialOn;
extern u32    E2P_SYM_rtcTimeSaved_Day;
extern u32    E2P_SYM_PreviousImsi_2;
extern u32    E2P_SYM_AudioFirCoeffHeadset;
extern u32    E2P_SYM_RxFreqCompCh1GSM850;
extern u32    E2P_SYM_LegacyInitRegTable;
extern u32    E2P_SYM_RampDown8PSKGSM900_M;
extern u32    E2P_SYM_RxFreqCompCh6GSM850;
extern u32    E2P_SYM_FEMOff8PSK850;
extern u32    E2P_SYM_Pad11;
extern u32    E2P_SYM_ObjFormatChkSum;
extern u32    E2P_SYM_Nmin8PSK_HB;
extern u32    E2P_SYM_Nmin8PSK_LB;
extern u32    E2P_SYM_Pad12;
extern u32    E2P_SYM_RxFreqCompCh2PCS;
extern u32    E2P_SYM_RxFreqCompCh4GSM850;
extern u32    E2P_SYM_RxFreqCompCh2DCS;
extern u32    E2P_SYM_RampDown8PSKGSM850_L;
extern u32    E2P_SYM_TaOffset_PCS1900;
extern u32    E2P_SYM_TaOffset_DCS1800;
extern u32    E2P_SYM_Pad13;
extern u32    E2P_SYM_RxFreqCompCh3PCS;
extern u32    E2P_SYM_RxFreqCompCh5GSM850;
extern u32    E2P_SYM_RxFreqCompCh3DCS;
extern u32    E2P_SYM_MccAudioPlayback;
extern u32    E2P_SYM_E2pNetMode_2;
extern u32    E2P_SYM_RampDown8PSKPCS_L;
extern u32    E2P_SYM_AudioLPFilterTable;
extern u32    E2P_SYM_AudioHPFilterTable;
extern u32    E2P_SYM_Pad15;
extern u32    E2P_SYM_RxFreqCompCh1PCS;
extern u32    E2P_SYM_RxFreqCompCh1DCS;
extern u32    E2P_SYM_RampDown8PSKPCS_M;
extern u32    E2P_SYM_v24_SignalForUsb;
extern u32    E2P_SYM_Pad16;
extern u32    E2P_SYM_RxFreqCompCh6PCS;
extern u32    E2P_SYM_RxFreqCompCh6DCS;
extern u32    E2P_SYM_Pad17;
extern u32    E2P_SYM_AudioDspUlFirCoeffBt;
extern u32    E2P_SYM_FEMOffGMSK1800;
extern u32    E2P_SYM_Pad18;
extern u32    E2P_SYM_RxFreqCompCh4PCS;
extern u32    E2P_SYM_RxFreqCompCh4DCS;
extern u32    E2P_SYM_RampDown8PSKPCS_H;
extern u32    E2P_SYM_RoughDacOffset;
extern u32    E2P_SYM_RxFreqCompCh5PCS;
extern u32    E2P_SYM_RxFreqCompCh5DCS;
extern u32    E2P_SYM_RampDownGMSKGSM850_H;
extern u32    E2P_SYM_T3212Remain_2;
extern u32    E2P_SYM_AudioLoopTest;
extern u32    E2P_SYM_ObjNumberOf32k;
extern u32    E2P_SYM_Audio3gpGainHeadset;
extern u32    E2P_SYM_dummyPad_IncenseULFIRHeadset;
extern u32    E2P_SYM_AudioMediaExtClassDGain;
extern u32    E2P_SYM_AudioOutputDriverLineOutGain;
extern u32    E2P_SYM_RampUpGMSKPCS_L;
extern u32    E2P_SYM_RampUpGMSKPCS_M;
extern u32    E2P_SYM_RampUpGMSKPCS_H;
extern u32    E2P_SYM_ManuallySelectedPlmn;
extern u32    E2P_SYM_T3212Remain2;
extern u32    E2P_SYM_AudioExtClassDGain;
extern u32    E2P_SYM_PAFreqCompChLowDCS;
extern u32    E2P_SYM_AudioPcmRecHeadsetMicGain;
extern u32    E2P_SYM_NmaxGMSKDCS;
extern u32    E2P_SYM_AudioVMMicGain;
extern u32    E2P_SYM_L1cNbDcPlgFrame;
extern u32    E2P_SYM_NbRoughDacValue;
extern u32    E2P_SYM_AudioKeypadToneGain;
extern u32    E2P_SYM_TbuoDCSGSM900TR;
extern u32    E2P_SYM_NminInterGMSK_HB;
extern u32    E2P_SYM_NminInterGMSK_LB;
extern u32    E2P_SYM_P_Tmsi_Signature;
extern u32    E2P_SYM_PadFinal;
extern u32    E2P_SYM_RampUpGMSKDCS_L;
extern u32    E2P_SYM_RampUpGMSKDCS_M;
extern u32    E2P_SYM_RampUpGMSKDCS_H;
extern u32    E2P_SYM_T3212StartTimeMinute;
extern u32    E2P_SYM_StatusReport_BK;
extern u32    E2P_SYM_AdcIchargCoeff;
extern u32    E2P_SYM_AudioMediaDriverSpkHeadsetGain;
extern u32    E2P_SYM_KMVScrambleID;
extern u32    E2P_SYM_AudioVtMicGain;
extern u32    E2P_SYM_FacchThres;
extern u32    E2P_SYM_ProdNumber;
extern u32    E2P_SYM_TrcFormatChkSum;
extern u32    E2P_SYM_BootUpLogoIndex;
extern u32    E2P_SYM_RampUpGMSK850;
extern u32    E2P_SYM_AudioMp3GainHandsfree;
extern u32    E2P_SYM_NminInter8PSK_HB;
extern u32    E2P_SYM_NminInter8PSK_LB;
extern u32    E2P_SYM_AudioMStarDLHandFreeNS;
extern u32    E2P_SYM_MsClass;
extern u32    E2P_SYM_FmSpecialCarrierOff;
extern u32    E2P_SYM_NmaxGMSKPCS;
extern u32    E2P_SYM_MixedDiagState;
extern u32    E2P_SYM_LCMDriverIndx;
extern u32    E2P_SYM_RxFreqCompCh2GSM;
extern u32    E2P_SYM_RampDownGMSKPCS_H;
extern u32    E2P_SYM_TxFreqOffset_PCS1900;
extern u32    E2P_SYM_TxFreqOffset_DCS1800;
extern u32    E2P_SYM_Settings_2_BK;
extern u32    E2P_SYM_AudioFmMicGain;
extern u32    E2P_SYM_RxFreqCompCh3GSM;
extern u32    E2P_SYM_MccVideoRecording;
extern u32    E2P_SYM_RoughDacStepValue;
extern u32    E2P_SYM_DualSimDiagState;
extern u32    E2P_SYM_AMRDfiThres;
extern u32    E2P_SYM_RxFreqCompCh1GSM;
extern u32    E2P_SYM_PAFreqCompPclGSM;
extern u32    E2P_SYM_RampDownGMSKPCS_M;
extern u32    E2P_SYM_AudioMStarULHandFreeNS;
extern u32    E2P_SYM_RxFreqCompCh6GSM;
extern u32    E2P_SYM_SignatureParam;
extern u32    E2P_SYM_RampDownGMSKPCS_L;
extern u32    E2P_SYM_TrcFormatChkSum_tmp;
extern u32    E2P_SYM_Pad31;
extern u32    E2P_SYM_RxFreqCompCh4GSM;
extern u32    E2P_SYM_RampUp8PSKGSM850_L;
extern u32    E2P_SYM_RampUp8PSKGSM900_L;
extern u32    E2P_SYM_RampUp8PSKGSM850_M;
extern u32    E2P_SYM_RampUp8PSKGSM900_M;
extern u32    E2P_SYM_RampUp8PSKGSM850_H;
extern u32    E2P_SYM_RampUp8PSKGSM900_H;
extern u32    E2P_SYM_PAOnGMSK1900;
extern u32    E2P_SYM_PAOnGMSK1800;
extern u32    E2P_SYM_EquivPlmnList;
extern u32    E2P_SYM_MirrorPad;
extern u32    E2P_SYM_RxFreqCompCh5GSM;
extern u32    E2P_SYM_AudioCaliCtrl;
extern u32    E2P_SYM_RxFreqCompChCenterPCS_HG;
extern u32    E2P_SYM_RMScrambleID;
extern u32    E2P_SYM_AdcTempOffset;
extern u32    E2P_SYM_FmSpecialCarrierOn;
extern u32    E2P_SYM_NmaxGMSKGSM900;
extern u32    E2P_SYM_ProdData1;
extern u32    E2P_SYM_VersSoft;
extern u32    E2P_SYM_AudioPcmRecMicGain;
extern u32    E2P_SYM_NbSpeechFrameMuted;
extern u32    E2P_SYM_PAOnGMSK900;
extern u32    E2P_SYM_RampDownGMSKDCS_M;
extern u32    E2P_SYM_PAOnGMSK850;
extern u32    E2P_SYM_T3212StartTimeYear_2;
extern u32    E2P_SYM_RxFreqCompChCenterDCS_HG;
extern u32    E2P_SYM_RampDownGMSKDCS_L;
extern u32    E2P_SYM_Hard2Capability;
extern u32    E2P_SYM_IrMaxTat;
extern u32    E2P_SYM_RegControlMode;
extern u32    E2P_SYM_RxFreqCompChCenterGSM_HG;
extern u32    E2P_SYM_ExhaustivePlmnSearch_2;
extern u32    E2P_SYM_SysFeature;
extern u32    E2P_SYM_message_waiting_group;
extern u32    E2P_SYM_NminGMSK_HB;
extern u32    E2P_SYM_NminGMSK_LB;
extern u32    E2P_SYM_Imsi_2;
extern u32    E2P_SYM_MccAudioRecording;
extern u32    E2P_SYM_RampDownGMSKDCS_H;
extern u32    E2P_SYM_PadStackRO;
extern u32    E2P_SYM_AudioRingToneGainHeadset;
extern u32    E2P_SYM_AudioMStarULHeadsetEchoConf;
extern u32    E2P_SYM_AudioMStarULHandsetEchoConf;
extern u32    E2P_SYM_AudioAtvGainHeadset;
extern u32    E2P_SYM_SmsCbCustomFlags;
extern u32    E2P_SYM_AdReserved;
extern u32    E2P_SYM_NmaxGmskFreqCompLowPCS;
extern u32    E2P_SYM_P_Tmsi_Signature_2;
extern u32    E2P_SYM_RxFreqCompCh2GSM850_HG;
extern u32    E2P_SYM_CustomLabel;
extern u32    E2P_SYM_RxFreqCompCh3GSM850_HG;
extern u32    E2P_SYM_AdcChargCoeff;
extern u32    E2P_SYM_E2pSizeParam;
extern u32    E2P_SYM_AudioMStarDLBluetoothNS;
extern u32    E2P_SYM_Imei_2;
extern u32    E2P_SYM_EquivPlmnList_2;
extern u32    E2P_SYM_Dvga8PSKGSM850;
extern u32    E2P_SYM_RxFreqCompCh1GSM850_HG;
extern u32    E2P_SYM_RxFreqCompBG5GSM_HG;
extern u32    E2P_SYM_FEMOnGMSK1900;
extern u32    E2P_SYM_FEMOnGMSK1800;
extern u32    E2P_SYM_AudioMStarDLHandFreeDrc;
extern u32    E2P_SYM_AudioMStarDLHeadsetEchoConf;
extern u32    E2P_SYM_AudioMStarDLHandsetEchoConf;
extern u32    E2P_SYM_RxFreqCompCh6GSM850_HG;
extern u32    E2P_SYM_RxFreqCompBG4GSM_HG;
extern u32    E2P_SYM_RampDownGMSK1900;
extern u32    E2P_SYM_RampDownGMSK1800;
extern u32    E2P_SYM_HRErrorThres;
extern u32    E2P_SYM_BatteryMeasureTimeOut;
extern u32    E2P_SYM_SysTimeZone;
extern u32    E2P_SYM_RfIsolationParameter;
extern u32    E2P_SYM_RfIsolationSwitchOnTime;
extern u32    E2P_SYM_RfIsolationSwitchOffTime;
extern u32    E2P_SYM_Pad24;
extern u32    E2P_SYM_AudioMstarAecHandsfree;
extern u32    E2P_SYM_AudioMstarAecHandset;
extern u32    E2P_SYM_AudioMstarAecHeadset;
extern u32    E2P_SYM_AudioMstarAecBT;
extern u32    E2P_SYM_AudioAecSelection;
extern u32    E2P_SYM_AudioAecOn;

extern u32    E2P_SYM_RxpathDcocIGSM900;
extern u32    E2P_SYM_RxpathDcocQGSM900;
extern u32    E2P_SYM_RxpathLnaGSM900  ;
extern u32    E2P_SYM_RxpathIp2IGSM900  ;
extern u32    E2P_SYM_RxpathIp2QGSM900  ;
extern u32    E2P_SYM_RxpathIqmcAlphaGSM900;
extern u32    E2P_SYM_RxpathIqmcBetaGSM900;

extern u32    E2P_SYM_RxpathDcocIDCS;
extern u32    E2P_SYM_RxpathDcocQDCS;
extern u32    E2P_SYM_RxpathLnaDCS  ;
extern u32    E2P_SYM_RxpathIp2IDCS  ;
extern u32    E2P_SYM_RxpathIp2QDCS  ;
extern u32    E2P_SYM_RxpathIqmcAlphaDCS;
extern u32    E2P_SYM_RxpathIqmcBetaDCS;

extern u32    E2P_SYM_RxpathDcocIPCS;
extern u32    E2P_SYM_RxpathDcocQPCS;
extern u32    E2P_SYM_RxpathLnaPCS  ;
extern u32    E2P_SYM_RxpathIp2IPCS  ;
extern u32    E2P_SYM_RxpathIp2QPCS  ;
extern u32    E2P_SYM_RxpathIqmcAlphaPCS;
extern u32    E2P_SYM_RxpathIqmcBetaPCS;

extern u32    E2P_SYM_RxpathDcocIGSM850;
extern u32    E2P_SYM_RxpathDcocQGSM850;
extern u32    E2P_SYM_RxpathLnaGSM850  ;
extern u32    E2P_SYM_RxpathIp2IGSM850  ;
extern u32    E2P_SYM_RxpathIp2QGSM850  ;
extern u32    E2P_SYM_RxpathIqmcAlphaGSM850;
extern u32    E2P_SYM_RxpathIqmcBetaGSM850;

extern u32    E2P_SYM_RxpathDcocDeltaILB;
extern u32    E2P_SYM_RxpathDcocDeltaQLB;
extern u32    E2P_SYM_RxpathDcocDeltaIHB;
extern u32    E2P_SYM_RxpathDcocDeltaQHB;


#endif
#endif
/*
**   ------------------------------------------------------------------------
**     DEFINE LOGICAL NAMES FOR EEPROM RECORDS
**   ------------------------------------------------------------------------
*/

#define VM_E2P_STACK_AREA    0x00000000

#ifdef __E2P_INDEX_SYM__

//#define E2P_RECORD_TEST(_X_,_Y_)  E2P_EXT_SYMBOL(_X_), _Y_
#define E2P_RECORD(_X_,_Y_)  E2P_EXT_SYMBOL(_X_), _Y_
#define E2P_RECORD_OFFSET(_X_,_I_,_Y_)  (E2P_EXT_SYMBOL(_X_)+_Y_*_I_), _Y_

#else
#define E2P_RECORD(_X_,_Y_)  offsetof(E2pStck_t, _X_), _Y_
#define E2P_RECORD_OFFSET(_X_,_I_,_Y_)  (offsetof(E2pStck_t, _X_)+_Y_*_I_), _Y_
#endif
/*merge 6.61 APA*/
/*!
  \def E2P_EGPRS8PSKUPCAP
  Category: L3\n
  Description: 8PSK Uplink Capable\n
  Default value: <Egprs8PskUplinkCap>
*/
#define E2P_EGPRS8PSKUPCAP          E2P_RECORD( Egprs8PskUplinkCap, sizeof(u8))
#define E2P_EGPRSMULTISLOTCLASS     E2P_RECORD( EgprsMultiSlotClass, sizeof(u8))

//#define E2P_EGPRS8PSKUPCAP_TEST     E2P_RECORD_TEST(Egprs8PskUplinkCap, sizeof(u8))

/*!
  \def E2P_T3212_VALUE
  Category: L3\n
  Description: T3212 Timer Value in Deci-Hours\n
  Default value: <T3212Value>
*/
#ifdef __E2P_INDEX_SYM__
#define E2P_T3212_VALUE             E2P_RECORD(T3212Value, sizeof(u8) )
#else
#define E2P_T3212_VALUE             E2P_RECORD( T3212Status.T3212Value, sizeof(u8) )
#endif
/*!
  \def E2P_T3212_REMAIN
  Category: L3\n
  Description: Remaining T3212 in Deci-Hours\n
  Default value: <T3212Remain>
*/
#ifdef __E2P_INDEX_SYM__
#define E2P_T3212_REMAIN            E2P_RECORD( T3212Remain, sizeof(u8) )
#else
#define E2P_T3212_REMAIN            E2P_RECORD( T3212Status.T3212Remain, sizeof(u8) )
#endif
/*!
  \def E2P_T3212_REMAIN2
  Category: L3\n
  Description: Remaining T3212 in Tick\n
  Default value: <T3212Remain2>
*/
#ifdef __E2P_INDEX_SYM__
#define E2P_T3212_REMAIN2           E2P_RECORD( T3212Remain2, sizeof(u32) )
#else
#define E2P_T3212_REMAIN2           E2P_RECORD( T3212Status.T3212Remain2, sizeof(u32) )
#endif
/*!
  \def E2P_T3212_START_TIME_YEAR
  Category: L3\n
  Description: The Moment Recording T3212 Timer Status\n
  Default value: <T3212StartTimeYear>
*/
#ifdef __E2P_INDEX_SYM__
#define E2P_T3212_START_TIME_YEAR            E2P_RECORD( T3212StartTimeYear,    sizeof(u16) )
#else
#define E2P_T3212_START_TIME_YEAR            E2P_RECORD( T3212Status.T3212StartTimeYear,    sizeof(u16) )
#endif
/*!
  \def E2P_T3212_START_TIME_MONTH
  Category: L3\n
  Description: The Moment Recording T3212 Timer Status\n
  Default value: <T3212StartTimeMonth>
*/
#ifdef __E2P_INDEX_SYM__
#define E2P_T3212_START_TIME_MONTH           E2P_RECORD( T3212StartTimeMonth,   sizeof(u8) )
#else
#define E2P_T3212_START_TIME_MONTH           E2P_RECORD( T3212Status.T3212StartTimeMonth,   sizeof(u8) )
#endif
/*!
  \def E2P_T3212_START_TIME_DAY
  Category: L3\n
  Description: The Moment Recording T3212 Timer Status\n
  Default value: <T3212StartTimeDay>
*/
#ifdef __E2P_INDEX_SYM__
#define E2P_T3212_START_TIME_DAY             E2P_RECORD( T3212StartTimeDay,     sizeof(u8) )
#else
#define E2P_T3212_START_TIME_DAY             E2P_RECORD( T3212Status.T3212StartTimeDay,     sizeof(u8) )
#endif
/*!
  \def E2P_T3212_START_TIME_HOUR
  Category: L3\n
  Description: The Moment Recording T3212 Timer Status\n
  Default value: <T3212StartTimeHour>
*/
#ifdef __E2P_INDEX_SYM__
#define E2P_T3212_START_TIME_HOUR            E2P_RECORD(T3212StartTimeHour,    sizeof(u8) )
#else
#define E2P_T3212_START_TIME_HOUR            E2P_RECORD( T3212Status.T3212StartTimeHour,    sizeof(u8) )
#endif
/*!
  \def E2P_T3212_START_TIME_MINUTE
  Category: L3\n
  Description: The Moment Recording T3212 Timer Status\n
  Default value: <T3212StartTimeMinute>
*/
#ifdef __E2P_INDEX_SYM__
#define E2P_T3212_START_TIME_MINUTE          E2P_RECORD( T3212StartTimeMinute,  sizeof(u8) )
#else
#define E2P_T3212_START_TIME_MINUTE          E2P_RECORD( T3212Status.T3212StartTimeMinute,  sizeof(u8) )
#endif
/*!
  \def E2P_T3212_START_TIME_SECOND
  Category: L3\n
  Description: The Moment Recording T3212 Timer Status\n
  Default value: <T3212StartTimeSecond>
*/
#ifdef __E2P_INDEX_SYM__
#define E2P_T3212_START_TIME_SECOND          E2P_RECORD( T3212StartTimeSecond,  sizeof(u8) )
#else
#define E2P_T3212_START_TIME_SECOND          E2P_RECORD( T3212Status.T3212StartTimeSecond,  sizeof(u8) )
#endif
/*!
  \def E2P_T3212_START_TIME_SECONDFRACPART
  Category: L3\n
  Description: The Moment Recording T3212 Timer Status\n
  Default value: <T3212StartTimeSecondFracPart>
*/
#ifdef __E2P_INDEX_SYM__
#define E2P_T3212_START_TIME_SECONDFRACPART  E2P_RECORD( T3212StartTimeSecondFracPart, sizeof(u16) )
#else
#define E2P_T3212_START_TIME_SECONDFRACPART  E2P_RECORD( T3212Status.T3212StartTimeSecondFracPart, sizeof(u16) )
#endif
/*end merge*/

/*!
  \def E2P_SYSFEATURE
  Category: SYS\n
  Description: For JTAG debug and watchdog control\n
  Default value: <SysFeature>
*/
#define E2P_SYSFEATURE                       E2P_RECORD( SysFeature       , sizeof(u8))
/*!
  \def E2P_SIGNATURE_PCK
  Category: SYS\n
  Description: SignaturePck\n
  Default value: <SignaturePck>
*/
#ifdef __E2P_INDEX_SYM__
#define E2P_SIGNATURE_PCK                    E2P_RECORD( SignaturePck  , sizeof(KeySignature_t))
#else
#define E2P_SIGNATURE_PCK                    E2P_RECORD( SignaturePck[0]  , sizeof(KeySignature_t))
#endif
/*!
  \def E2P_SIGNATURE_NCK
  Category: SYS\n
  Description: SignatureNck\n
  Default value: <SignatureNck>
*/
#ifdef __E2P_INDEX_SYM__
#define E2P_SIGNATURE_NCK                    E2P_RECORD( SignatureNck  , sizeof(KeySignature_t))
#else
#define E2P_SIGNATURE_NCK                    E2P_RECORD( SignatureNck[0]  , sizeof(KeySignature_t))
#endif
/*!
  \def E2P_SIGNATURE_NSCK
  Category: SYS\n
  Description: SignatureNsck\n
  Default value: <SignatureNsck>
*/
#ifdef __E2P_INDEX_SYM__
#define E2P_SIGNATURE_NSCK                   E2P_RECORD( SignatureNsck , sizeof(KeySignature_t))
#else
#define E2P_SIGNATURE_NSCK                   E2P_RECORD( SignatureNsck[0] , sizeof(KeySignature_t))
#endif
/*!
  \def E2P_SIGNATURE_SPCK
  Category: SYS\n
  Description: SignatureSpck\n
  Default value: <SignatureSpck>
*/
#ifdef __E2P_INDEX_SYM__
#define E2P_SIGNATURE_SPCK                   E2P_RECORD( SignatureSpck , sizeof(KeySignature_t))
#else
#define E2P_SIGNATURE_SPCK                   E2P_RECORD( SignatureSpck[0] , sizeof(KeySignature_t))
#endif
/*!
  \def E2P_SIGNATURE_CCK
  Category: SYS\n
  Description: SignatureCck\n
  Default value: <SignatureCck>
*/
#ifdef __E2P_INDEX_SYM__
#define E2P_SIGNATURE_CCK                    E2P_RECORD( SignatureCck  , sizeof(KeySignature_t))
#else
#define E2P_SIGNATURE_CCK                    E2P_RECORD( SignatureCck[0]  , sizeof(KeySignature_t))
#endif
/*!
  \def E2P_SIGNATURE_PARAM
  Category: SYS\n
  Description: SignatureParam\n
  Default value: <SignatureParam>
*/
#ifdef __E2P_INDEX_SYM__
#define E2P_SIGNATURE_PARAM                  E2P_RECORD( SignatureParam, sizeof(KeySignature_t))
#else
#define E2P_SIGNATURE_PARAM                  E2P_RECORD( SignatureParam[0], sizeof(KeySignature_t))
#endif
/*!
  \def E2P_SIGNATURE_CUSTOMER_FEATURES
  Category: SYS\n
  Description: SignatureForCustomerFeatures\n
  Default value: <SignatureForCustomerFeatures>
*/
#ifdef __E2P_INDEX_SYM__
#define E2P_SIGNATURE_CUSTOMER_FEATURES      E2P_RECORD( SignatureForCustomerFeatures, sizeof(KeySignature_t))
#else
#define E2P_SIGNATURE_CUSTOMER_FEATURES      E2P_RECORD( SignatureForCustomerFeatures[0], sizeof(KeySignature_t))
#endif
/*!
  \def E2P_CUSTOMER_FEATURES
  Category: SYS\n
  Description: CustomerFeatures\n
  Default value: <CustomerFeatures>
*/
#define E2P_CUSTOMER_FEATURES                E2P_RECORD( CustomerFeatures , sizeof (u32) )
/*!
  \def E2P_ME_LOCK_DATA
  Category: SYS\n
  Description: MeLockData\n
  Default value: <MeLockData>
*/
#ifdef __E2P_INDEX_SYM__
#define E2P_ME_LOCK_DATA                     E2P_RECORD( MeLockData    , sizeof(u8)*(E2P_DIM_GENPARAM+1) )
#else
#define E2P_ME_LOCK_DATA                     E2P_RECORD( MeLockData[0]    , sizeof(u8)*(E2P_DIM_GENPARAM+1) )
#endif
/*!
  \def E2P_IRACTIVE
  Category: BB\n
  Description: set Irda active\n
  Default value: <IrActive>
*/
#define E2P_IRACTIVE         E2P_RECORD(  IrActive, sizeof (u8) )
/*!
  \def E2P_IRDISCTIME
  Category: BB\n
  Description: set Irda disconnection time\n
  Default value: <IrDiscTime>
*/
#define E2P_IRDISCTIME       E2P_RECORD(  IrDiscTime, sizeof (u8) )
/*!
  \def E2P_IRMAXTAT
  Category: BB\n
  Description: set Irda turn around time\n
  Default value: <IrMaxTat>
*/
#define E2P_IRMAXTAT         E2P_RECORD(  IrMaxTat, sizeof (u8) )
/*!
  \def E2P_IRPREAMBTH
  Category: BB\n
  Description: set Irda preamble threshold\n
  Default value: <IrPreambTh>
*/
#define E2P_IRPREAMBTH       E2P_RECORD(  IrPreambTh, sizeof (u8) )
/*!
  \def E2P_DATACOMPRESS
  Category: SYS\n
  Description: DataCompress\n
  Default value: <DataCompress>
*/
#define E2P_DATACOMPRESS     E2P_RECORD(  DataCompress, sizeof (u8) )
/*!
  \def E2P_DATASECURITY
  Category: SYS\n
  Description: DataSecurity\n
  Default value: <DataSecurity>
*/
#define E2P_DATASECURITY     E2P_RECORD(  DataSecurity, sizeof(u8))

#define E2P_VOLTAGEORDER   E2P_RECORD( VoltageOrder,   sizeof(u8) )

/*!
  \def E2P_RTKMBXSTATE
  Category: SYS\n
  Description: RtkMbxState\n
  Default value: <RtkMbxState>
*/
#ifdef __E2P_INDEX_SYM__
#define E2P_RTKMBXSTATE    E2P_RECORD( RtkMbxState,     sizeof(u32) * 2 )
#else
#define E2P_RTKMBXSTATE    E2P_RECORD( RtkMbxState[0],     sizeof(u32) * 2 )
#endif
/*!
  \def E2P_RTKTASKSTATE
  Category: SYS\n
  Description: RtkTaskState\n
  Default value: <RtkTaskState>
*/
#define E2P_RTKTASKSTATE   E2P_RECORD( RtkTaskState,    sizeof(u32) )
/*!
  \def E2P_DIAGLEVEL
  Category: SYS\n
  Description: DiagState\n
  Default value: <DiagState>
*/
#ifdef __E2P_INDEX_SYM__
#define E2P_DIAGLEVEL(i)   E2P_RECORD_OFFSET ( DiagState, i, sizeof (u32))
#else
#define E2P_DIAGLEVEL(i)   E2P_RECORD_OFFSET ( DiagState[ 0 ], i, sizeof (u32))
#endif
/*!
  \def E2P_EXTENDED_DIAGLEVEL
  Category: SYS\n
  Description: ExtendedDiagState\n
  Default value: <ExtendedDiagState>
*/
#ifdef __E2P_INDEX_SYM__
#define E2P_EXTENDED_DIAGLEVEL(i)   E2P_RECORD_OFFSET ( ExtendedDiagState, i, sizeof (u32))
#else
#define E2P_EXTENDED_DIAGLEVEL(i)   E2P_RECORD_OFFSET ( ExtendedDiagState[0], i, sizeof (u32))
#endif
#ifdef __MSTAR_DUAL_SIM_E2P__
/*!
  \def E2P_DUALSIM_DIAGLEVEL
  Category: L3\n
  Description: Trace Levels for Dual SIM Project\n
  Default value: <DualSimDiagState>
*/
#ifdef __E2P_INDEX_SYM__
#define E2P_DUALSIM_DIAGLEVEL(i)   E2P_RECORD_OFFSET ( DualSimDiagState, i, sizeof (u32))
#else
#define E2P_DUALSIM_DIAGLEVEL(i)   E2P_RECORD_OFFSET ( DualSimDiagState[0], i, sizeof (u32))
#endif
#ifdef __MSTAR_DUAL_SIM_SIM_DUO__
/*!
  \def E2P_DUALSIM_EXT2_DIAGLEVEL
  Category: L3\n
  Description: Extented2 Trace Levels for Dual SIM Project\n
  Default value: <DualSimExt2DiagState>
*/
#ifdef __E2P_INDEX_SYM__
#define E2P_DUALSIM_EXT2_DIAGLEVEL(i)   E2P_RECORD_OFFSET ( DualSimExt2DiagState, i, sizeof (u32))
#else
#define E2P_DUALSIM_EXT2_DIAGLEVEL(i)   E2P_RECORD_OFFSET ( DualSimExt2DiagState[0], i, sizeof (u32))
#endif
#endif //__MSTAR_DUAL_SIM_SIM_DUO__
/*!
  \def E2P_DUOSTATUS
  Category: L3\n
  Description: Dual-SIM configuration.\n
  Default value: <DuoStatus>.
*/
#define E2P_DUOSTATUS   E2P_RECORD ( DuoStatus, sizeof (u32))
/*!
  \def E2P_PRODARFCN_2
  Category: L3\n
  Description: Prod test mode arfcn\n
  Default value: <ProdArfcn_2>
*/
#define E2P_PRODARFCN_2        E2P_RECORD( ProdArfcn_2, sizeof(u16))
/*!
  \def E2P_LASTBA_2
  Category: L3\n
  Description: Last BA list\n
  Default value: <LastBa_2>
*/
#ifdef __E2P_INDEX_SYM__
#define E2P_LASTBA_2( _NUM_ , _SIZ_ )     E2P_EXT_SYMBOL(LastBa_2)+(_NUM_*sizeof(u8)), sizeof(u8)* _SIZ_
#else
#define E2P_LASTBA_2( _NUM_ , _SIZ_ )     E2P_RECORD( LastBa_2[_NUM_], sizeof(u8)* _SIZ_ )
#endif
/*!
  \def E2P_EXHAUSTIVEPLMNSEARCH_2
  Category: L3\n
  Description: It is used to manage fast synchronisation for US products\n
  Default value: <ExhaustivePlmnSearch_2>
*/
#define E2P_EXHAUSTIVEPLMNSEARCH_2     E2P_RECORD( ExhaustivePlmnSearch_2, sizeof(u8))
/*!
  \def E2P_NETMODE_2
  Category: L3\n
  Description: Manual or Automatic\n
  Default value: <E2pNetMode_2>
*/
#define E2P_NETMODE_2        E2P_RECORD( E2pNetMode_2,     sizeof(u8) )
/*!
  \def E2P_EQUIV_PLMN_LIST_2
  Category: L3\n
  Description: EPLMN\n
  Default value: <EquivPlmnList_2>
*/
#ifdef __E2P_INDEX_SYM__
#define E2P_EQUIV_PLMN_LIST_2             E2P_RECORD (EquivPlmnList_2, 19 * sizeof (u8) )
#else
#define E2P_EQUIV_PLMN_LIST_2             E2P_RECORD (EquivPlmnList_2[0], 19 * sizeof (u8) )
#endif
/*!
  \def E2P_MANUALLYSELECTEDPLMN_2
  Category: L3\n
  Description: manually selected PLMN\n
  Default value: <ManuallySelectedPlmn_2>
*/
#ifdef __E2P_INDEX_SYM__
#define E2P_MANUALLYSELECTEDPLMN_2 E2P_RECORD (ManuallySelectedPlmn_2, 4 * sizeof (u8))
#else
#define E2P_MANUALLYSELECTEDPLMN_2 E2P_RECORD (ManuallySelectedPlmn_2[0], 4 * sizeof (u8))
#endif
//#ifdef 0
/*!
  \def E2P_T3212_VALUE_2
  Category: L3\n
  Description: T3212 Timer Value in Deci-Hours\n
  Default value: <T3212Value_2>
*/
#ifdef __E2P_INDEX_SYM__
#define E2P_T3212_VALUE_2             E2P_RECORD( T3212Value_2, sizeof(u8) )
#else
#define E2P_T3212_VALUE_2             E2P_RECORD( T3212Status_2.T3212Value_2, sizeof(u8) )
#endif
/*!
  \def E2P_T3212_REMAIN_2
  Category: L3\n
  Description: Remaining T3212 in Deci-Hours\n
  Default value: <T3212Remain_2>
*/
#ifdef __E2P_INDEX_SYM__
#define E2P_T3212_REMAIN_2           E2P_RECORD( T3212Remain_2, sizeof(u8) )
#else
#define E2P_T3212_REMAIN_2           E2P_RECORD( T3212Status_2.T3212Remain_2, sizeof(u8) )
#endif
/*!
  \def E2P_T3212_REMAIN2_2
  Category: L3\n
  Description: Remaining T3212 in Tick\n
  Default value: <T3212Remain2_2>
*/
#ifdef __E2P_INDEX_SYM__
#define E2P_T3212_REMAIN2_2           E2P_RECORD( T3212Remain2_2, sizeof(u32) )
#else
#define E2P_T3212_REMAIN2_2           E2P_RECORD( T3212Status_2.T3212Remain2_2, sizeof(u32) )
#endif
/*!
  \def E2P_T3212_START_TIME_YEAR_2
  Category: L3\n
  Description: The Moment Recording T3212 Timer Status\n
  Default value: <T3212StartTimeYear_2>
*/
#ifdef __E2P_INDEX_SYM__
#define E2P_T3212_START_TIME_YEAR_2            E2P_RECORD( T3212StartTimeYear_2,    sizeof(u16) )
#else
#define E2P_T3212_START_TIME_YEAR_2            E2P_RECORD( T3212Status_2.T3212StartTimeYear_2,    sizeof(u16) )
#endif
/*!
  \def E2P_T3212_START_TIME_MONTH_2
  Category: L3\n
  Description: The Moment Recording T3212 Timer Status\n
  Default value: <T3212StartTimeMonth_2>
*/
#ifdef __E2P_INDEX_SYM__
#define E2P_T3212_START_TIME_MONTH_2           E2P_RECORD( T3212StartTimeMonth_2,   sizeof(u8) )
#else
#define E2P_T3212_START_TIME_MONTH_2           E2P_RECORD( T3212Status_2.T3212StartTimeMonth_2,   sizeof(u8) )
#endif
/*!
  \def E2P_T3212_START_TIME_DAY_2
  Category: L3\n
  Description: The Moment Recording T3212 Timer Status\n
  Default value: <T3212StartTimeDay_2>
*/
#ifdef __E2P_INDEX_SYM__
#define E2P_T3212_START_TIME_DAY_2             E2P_RECORD( T3212StartTimeDay_2,     sizeof(u8) )
#else
#define E2P_T3212_START_TIME_DAY_2             E2P_RECORD( T3212Status_2.T3212StartTimeDay_2,     sizeof(u8) )
#endif
/*!
  \def E2P_T3212_START_TIME_HOUR_2
  Category: L3\n
  Description: The Moment Recording T3212 Timer Status\n
  Default value: <T3212StartTimeHour_2>
*/
#ifdef __E2P_INDEX_SYM__
#define E2P_T3212_START_TIME_HOUR_2            E2P_RECORD( T3212StartTimeHour_2,    sizeof(u8) )
#else
#define E2P_T3212_START_TIME_HOUR_2            E2P_RECORD( T3212Status_2.T3212StartTimeHour_2,    sizeof(u8) )
#endif
/*!
  \def E2P_T3212_START_TIME_MINUTE_2
  Category: L3\n
  Description: The Moment Recording T3212 Timer Status\n
  Default value: <T3212StartTimeMinute_2>
*/
#ifdef __E2P_INDEX_SYM__
#define E2P_T3212_START_TIME_MINUTE_2          E2P_RECORD( T3212StartTimeMinute_2,  sizeof(u8) )
#else
#define E2P_T3212_START_TIME_MINUTE_2          E2P_RECORD( T3212Status_2.T3212StartTimeMinute_2,  sizeof(u8) )
#endif
/*!
  \def E2P_T3212_START_TIME_SECOND_2
  Category: L3\n
  Description: The Moment Recording T3212 Timer Status\n
  Default value: <T3212StartTimeSecond_2>
*/
#ifdef __E2P_INDEX_SYM__
#define E2P_T3212_START_TIME_SECOND_2          E2P_RECORD( T3212StartTimeSecond_2,  sizeof(u8) )
#else
#define E2P_T3212_START_TIME_SECOND_2          E2P_RECORD( T3212Status_2.T3212StartTimeSecond_2,  sizeof(u8) )
#endif
/*!
  \def E2P_T3212_START_TIME_SECONDFRACPART_2
  Category: L3\n
  Description: The Moment Recording T3212 Timer Status\n
  Default value: <T3212StartTimeSecondFracPart_2>
*/
#ifdef __E2P_INDEX_SYM__
#define E2P_T3212_START_TIME_SECONDFRACPART_2  E2P_RECORD( T3212StartTimeSecondFracPart_2, sizeof(u16) )
#else
#define E2P_T3212_START_TIME_SECONDFRACPART_2  E2P_RECORD( T3212Status_2.T3212StartTimeSecondFracPart_2, sizeof(u16) )
#endif
//#endif
/*!
  \def E2P_PREVIOUS_IMSI_2
  Category: L3\n
  Description: Previous IMSI\n
  Default value: <PreviousImsi_2>
*/
#ifdef __E2P_INDEX_SYM__
#define E2P_PREVIOUS_IMSI_2               E2P_RECORD( PreviousImsi_2, sizeof(vm_Imsi_t) )
#else
#define E2P_PREVIOUS_IMSI_2               E2P_RECORD( PreviousImsi_2[0], sizeof(vm_Imsi_t) )
#endif
/*!
  \def E2P_RAI_2
  Category: L3\n
  Description: Routing Area Identity\n
  Default value: <Rai_2>
*/
#ifdef __E2P_INDEX_SYM__
#define E2P_RAI_2                         E2P_RECORD( Rai_2, 6 * sizeof (u8))
#else
#define E2P_RAI_2                         E2P_RECORD( Rai_2[ 0 ], 6 * sizeof (u8))
#endif
/*!
  \def E2P_PTMSI_2
  Category: L3\n
  Description: Packet Temporary Mobile Subscriber Identity\n
  Default value: <P_Tmsi_2>
*/
#ifdef __E2P_INDEX_SYM__
#define E2P_PTMSI_2                       E2P_RECORD( P_Tmsi_2, 4 * sizeof (u8))
#else
#define E2P_PTMSI_2                       E2P_RECORD( P_Tmsi_2[ 0 ], 4 * sizeof (u8))
#endif
/*!
  \def E2P_GUPDAT_2
  Category: L3\n
  Description: Routing Area Update Status\n
  Default value: <UpdateStatus_2>
*/
#define E2P_GUPDAT_2                      E2P_RECORD( UpdateStatus_2, 1 * sizeof (u8))
/*!
  \def E2P_P_TMSI_SIGNATURE_2
  Category: L3\n
  Description: PTMSI Signature\n
  Default value: <P_Tmsi_Signature_2>
*/
#ifdef __E2P_INDEX_SYM__
#define E2P_P_TMSI_SIGNATURE_2            E2P_RECORD( P_Tmsi_Signature_2, 3 * sizeof (u8) )
#else
#define E2P_P_TMSI_SIGNATURE_2            E2P_RECORD( P_Tmsi_Signature_2[ 0 ], 3 * sizeof (u8) )
#endif
/*!
  \def E2P_GKC_2
  Category: L3\n
  Description: GPRS Ciphering Key\n
  Default value: <GKc_2>
*/
#ifdef __E2P_INDEX_SYM__
#define E2P_GKC_2                         E2P_RECORD( GKc_2, 8 * sizeof (u8))
#else
#define E2P_GKC_2                         E2P_RECORD( GKc_2[ 0 ], 8 * sizeof (u8))
#endif
/*!
  \def E2P_GCKSN_2
  Category: L3\n
  Description: GPRS Ciphering Key Sequence Number\n
  Default value: <GCksn_2>
*/
#define E2P_GCKSN_2                       E2P_RECORD( GCksn_2, 1 * sizeof (u8))
/*!
  \def E2P_IMSI_2
  Category: L3\n
  Description: International Mobile Subscriber Identity\n
  Default value: <Imsi_2>
*/
#ifdef __E2P_INDEX_SYM__
#define E2P_IMSI_2                        E2P_RECORD( Imsi_2,      sizeof(vm_Imsi_t) )
#else
#define E2P_IMSI_2                        E2P_RECORD( Imsi_2[ 0 ],      sizeof(vm_Imsi_t) )
#endif
/*!
  \def E2P_IMEI_2
  Category: L3\n
  Description: International Mobile Equipment Identity\n
  Default value: <Imei_2>
*/
#ifdef __E2P_INDEX_SYM__
#define E2P_IMEI_2                        E2P_RECORD( Imei_2,      sizeof(vm_Imei_t)  )
#else
#define E2P_IMEI_2                        E2P_RECORD( Imei_2[ 0 ],      sizeof(vm_Imei_t)  )
#endif
#endif
/*!
  \def E2P_PSCONFIG
  Category: L3\n
  Description: Enable/Disable Protocol specific feature\n
  Default value: <PSConfig>
*/
#define E2P_PSCONFIG                      E2P_RECORD( PSConfig,      sizeof(u32) )
/*!
  \def E2P_SIMSTANDBYCAPABILITY
  Category: L3\n
  Description: SIM standby capability\n
  Default value: <SimStandbyCapability>
*/
#define E2P_SIMSTANDBYCAPABILITY                      E2P_RECORD( SimStandbyCapability,      sizeof(u8) )
/*!
  \def E2P_EPLMN_BEHAVIOUR
  Category: L3\n
  Description: It is for roaming features and EPLMN\n
  Default value: <EplmnBehaviour>
*/
#define E2P_EPLMN_BEHAVIOUR        E2P_RECORD (EplmnBehaviour, sizeof (u8) )
#define E2P_RXSPERRORTRES  E2P_RECORD( RxSPErrorTres,  sizeof (u8))
#define E2P_FCHTRES      E2P_RECORD( FchTres,      sizeof (u8))
/*!
  \def E2P_E2PTSTPATTERN
  Category: SYS\n
  Description: E2pTstPattern\n
  Default value: <E2pTstPattern>
*/
#define E2P_E2PTSTPATTERN  E2P_RECORD( E2pTstPattern,  sizeof (u16))
#define E2P_TOIDRIFT       E2P_RECORD( ToiDrift, sizeof (s32))
#define E2P_MONOBAND       E2P_RECORD( MonoBand   ,    sizeof(u8) )
#define E2P_CLASSMK3       E2P_RECORD( MsCm3   ,       sizeof(MsCm3_t) )
/*!
  \def E2P_IMEI
  Category: L3\n
  Description: International Mobile Equipment Identity\n
  Default value: <Imei>
*/
#ifdef __E2P_INDEX_SYM__
#define E2P_IMEI           E2P_RECORD( Imei,      sizeof(vm_Imei_t)  )
#define E2P_CLASSMK2       E2P_RECORD( MsCm2   ,       sizeof(MsCm2_t) )
#else
#define E2P_IMEI           E2P_RECORD( Imei[ 0 ],      sizeof(vm_Imei_t)  )
#define E2P_CLASSMK2       E2P_RECORD( MsCm2[0]   ,       sizeof(MsCm2_t) )
#endif
/*!
  \def E2P_IMSI
  Category: L3\n
  Description: International Mobile Subscriber Identity\n
  Default value: <Imsi>
*/
#ifdef __E2P_INDEX_SYM__
#define E2P_IMSI           E2P_RECORD( Imsi,      sizeof(vm_Imsi_t) )
#else
#define E2P_IMSI           E2P_RECORD( Imsi[ 0 ],      sizeof(vm_Imsi_t) )
#endif
/*!
  \def E2P_V24_SERIALON
  Category: V24\n
  Description:serial link activation, the default value is 0 which mean UART1(Bit1), UART2(Bit2) and USB(Bit4) is OFF\n
  Default value: <v24_SerialOn>
*/
#define E2P_V24_SERIALON   E2P_RECORD( v24_SerialOn,   sizeof(u8) )
/*!
  \def E2P_V24_FRAMING
  Category: V24\n
  Description:Uart1 character framing (parity, stop ...), the default value is 3 which mean the UART is 8 Bit per char, No parity Check and 1 Stop Bit\n
  Default value: <v24_Framing>
*/
#define E2P_V24_FRAMING    E2P_RECORD( v24_Framing,    sizeof(u8) )


/*!
  \def E2P_VERSHARD
  Category: SYS\n
  Description: VersHard\n
  Default value: <VersHard>
*/
#ifdef __E2P_INDEX_SYM__
#define E2P_VERSHARD       E2P_RECORD( VersHard,       sizeof(Version_t)  )
#else
#define E2P_VERSHARD       E2P_RECORD( VersHard[0],       sizeof(Version_t)  )
#endif
/*!
  \def E2P_VERSSOFT
  Category: SYS\n
  Description: VersSoft\n
  Default value: <VersSoft>
*/
//#define E2P_VERSSOFT       E2P_RECORD( VersSoft,       sizeof(Version_t)  )

/*!
  \def E2P_NETMODE
  Category: L3\n
  Description: Manual or Automatic\n
  Default value: <E2pNetMode>
*/
#define E2P_NETMODE        E2P_RECORD( E2pNetMode,     sizeof(u8) )
/*!
  \def E2P_V24_SPEED
  Category: V24\n
  Description: V.24 Uart1 handler speed, the default value is 0xb which means 460800 bauds \n
  Default value: <v24_Speed>
*/
#define E2P_V24_SPEED      E2P_RECORD( v24_Speed,      sizeof(u8) )
/*!
  \def E2P_V24_OPTIONS
  Category: V24\n
  Description:V.24 Uart1 Handler Options, the default value is 0x1D which mean Bit0:the DCD signal value is set 1,
                    Bit1Bit2: DSR signal value is set 01, Bit3: DTR signal value is set 1, Bit4: ECHO is set 1\n
  Default value: <v24_Options>
*/
#define E2P_V24_OPTIONS    E2P_RECORD( v24_Options,    sizeof(u8) )
/*!
  \def E2P_V24_EXTOPTIONS
  Category: V24\n
  Description:V.24 Uart1 user profile, the default value is 0x05 which mean Bit0 is set 1, RX Flow Control is enabled,
                    Bit2 is set 1, TX Flow Control is enabled\n
  Default value: <v24_ExtOptions>
*/
#define E2P_V24_EXTOPTIONS E2P_RECORD( v24_ExtOptions, sizeof(u32) )

#define E2P_NBROUGHDACVALUE  E2P_RECORD( NbRoughDacValue, sizeof(u8) )
#define E2P_ROUGHDACSUM      E2P_RECORD( RoughDacSum,     sizeof(u32) )
#define E2P_RR_SCANMODE     E2P_RECORD( rr_ScanMode,    sizeof(u8) )
/*!
  \def E2P_USBPID
  Category: SYS\n
  Description: USB product ID\n
  Default value: <UsbPid>
*/
#define E2P_USBPID          E2P_RECORD( UsbPid,         sizeof(u16)  )
/*!
  \def E2P_V24_NOMINALMODE
  Category: V24\n
  Description: If value is 0 which means V24 will starts in HAPC mode; When __V24_COMPOSITE_USB___ defined, LSB 4 bits (value 0) mean HAPC mode and MSB 4 bits (value 1) mean Trace mode\n
  Default value: <v24_NominalMode>
*/
#define E2P_V24_NOMINALMODE E2P_RECORD( v24_NominalMode, sizeof(u8) )
#define E2P_ROUGHDACOFFSET  E2P_RECORD( RoughDacOffset, sizeof(s8) )
/*!
  \def E2P_ANTENNAGAIN
  Category: L3\n
  Description: Antenna Gain use to compute C1 value\n
  Default value: <AntennaGain>
*/
#define E2P_ANTENNAGAIN      E2P_RECORD( AntennaGain,      sizeof(s8) )
/*!
  \def E2P_E2PCHKSUMWRITTEN
  Category: SYS\n
  Description: E2pChkSumWritten\n
  Default value: <E2pChkSumWritten>
*/
#define E2P_E2PCHKSUMWRITTEN E2P_RECORD( E2pChkSumWritten, sizeof(u8) )
/*!
  \def E2P_E2PCHKSUM
  Category: SYS\n
  Description: E2pChkSum\n
  Default value: <E2pChkSum>
*/
#define E2P_E2PCHKSUM        E2P_RECORD( E2pChkSum,        sizeof(u8) )
#define E2P_L1CNBWAKEFRAME   E2P_RECORD( L1cNbWakeFrame,   sizeof(u32) )
#define E2P_L1CNBSLEEPFRAME  E2P_RECORD( L1cNbSleepFrame,  sizeof(u32) )
#define E2P_L1CNBTXFRAME     E2P_RECORD( L1cNbTxFrame,     sizeof(u32) )

/*!
  \def E2P_PRODNUMBER
  Category: SYS\n
  Description: ProdNumber\n
  Default value: <ProdNumber>
*/
#define E2P_PRODNUMBER       E2P_RECORD( ProdNumber,     sizeof(ProdNumber_t) )


#define E2P_L1CNBDCPLGFRAME  E2P_RECORD( L1cNbDcPlgFrame,     sizeof(u32) )

#define E2P_POWERMINBASE     E2P_RECORD( PowerMinBase, sizeof(u16) )

#define E2P_BEARERCFG        E2P_RECORD( BearerCfg, sizeof(u16))
#define E2P_HRERRORTHRES     E2P_RECORD( HRErrorThres, sizeof(u8))
/*!
  \def E2P_ENABLEDFTR
  Category: SYS\n
  Description: EnabledFtr\n
  Default value: <EnabledFtr>
*/
#ifdef __E2P_INDEX_SYM__
#define E2P_ENABLEDFTR       E2P_RECORD( EnabledFtr, 2*sizeof(u32) )
#else
#define E2P_ENABLEDFTR       E2P_RECORD( EnabledFtr[0], 2*sizeof(u32) )
#endif
/*!
  \def E2P_EXTENDEDCAPABILITY
  Category: L1\n
  Description:  Bit12&13: the status of SYS INFO listening during TBF in GPRS\n
                Bit16: Access Burst 11 bits\n
  Default value: <ExtendedCapability>.
*/
#ifdef __E2P_INDEX_SYM__
#define E2P_EXTENDEDCAPABILITY E2P_RECORD( ExtendedCapability, 4*sizeof(u8))
#else
#define E2P_EXTENDEDCAPABILITY E2P_RECORD( ExtendedCapability[0], 4*sizeof(u8))
#endif

#define E2P_MASKFOIPOWERLEV  E2P_RECORD( MaskFoiPowerLev, 4*sizeof(u8))
#define E2P_MASKFOIPOWERLEVBIS E2P_RECORD( MaskFoiPowerLevBis, 4*sizeof(u8))

/*!
  \def E2P_E2PMIRROR
  Category: SYS\n
  Description: E2pMirror\n
  Default value: <E2pMirror>
*/
#define E2P_E2PMIRROR        E2P_RECORD( E2pMirror, sizeof(u8))
#define E2P_HARD2CAPABILITY  E2P_RECORD( Hard2Capability, sizeof(u32) )



#define E2P_WRITECYCLE       E2P_RECORD( e2p_WriteCycle, sizeof(u16))
#define E2P_E2POFFSETPARAM   E2P_RECORD( E2pOffsetParam, sizeof(u16))
#define E2P_E2PSIZEPARAM     E2P_RECORD( E2pSizeParam, sizeof(u16))
/*!
  \def E2P_PRODARFCN
  Category: L3\n
  Description: Prod test mode arfcn\n
  Default value: <ProdArfcn>
*/
#define E2P_PRODARFCN        E2P_RECORD( ProdArfcn, sizeof(u16))
#define E2P_IMSIPROD         E2P_RECORD( ImsiProd, 8*sizeof(u8))
/*!
  \def E2P_SIM_TIMER_FIX
  Category: L3\n
  Description: Fixed timer value for SIM waiting time\n
  Default value: <SimTimerFix>.
*/
#define E2P_SIM_TIMER_FIX    E2P_RECORD( SimTimerFix, sizeof(u8) )
/*!
  \def E2P_SIM_POLINT_TIMER
  Category: L3\n
  Description: SIM polling interval timer\n
  Default value: <SimPolIntTimer>.
*/
#define E2P_SIM_POLINT_TIMER E2P_RECORD( SimPolIntTimer, sizeof(u8) )
#define E2P_TXPWRRAMPNBNULLPTS E2P_RECORD( TxPwrRampNbNullPts, sizeof(u8) )

#ifdef __E2P_INDEX_SYM__
#define E2P_NMAXGMSK_GSM900     E2P_RECORD( NmaxGMSKGSM900,   (NB_TX_LEV_LOW_BAND_GMSK)*sizeof(u16))
#define E2P_NMAXGMSK_DCS            E2P_RECORD( NmaxGMSKDCS,   (NB_TX_LEV_HIGH_BAND_GMSK)*sizeof(u16))
#define E2P_NMAXGMSK_PCS            E2P_RECORD( NmaxGMSKPCS,   (NB_TX_LEV_HIGH_BAND_GMSK)*sizeof(u16))
#define E2P_NMAXGMSK_GSM850     E2P_RECORD( NmaxGMSKGSM850,   (NB_TX_LEV_LOW_BAND_GMSK)*sizeof(u16))
#define E2P_NMAX8PSK_GSM900     E2P_RECORD( Nmax8PSKGSM900,   (NB_TX_LEV_LOW_BAND_8PSK)*sizeof(u16))
#define E2P_NMAX8PSK_DCS            E2P_RECORD( Nmax8PSKDCS,   (NB_TX_LEV_HIGH_BAND_8PSK)*sizeof(u16))
#define E2P_NMAX8PSK_PCS            E2P_RECORD( Nmax8PSKPCS,   (NB_TX_LEV_HIGH_BAND_8PSK)*sizeof(u16))
#define E2P_NMAX8PSK_GSM850     E2P_RECORD( Nmax8PSKGSM850,   (NB_TX_LEV_LOW_BAND_8PSK)*sizeof(u16))
#else
#define E2P_NMAXGMSK_GSM900     E2P_RECORD( NmaxGMSKGSM900[0],   (NB_TX_LEV_LOW_BAND_GMSK)*sizeof(u16))
#define E2P_NMAXGMSK_DCS            E2P_RECORD( NmaxGMSKDCS[0],   (NB_TX_LEV_HIGH_BAND_GMSK)*sizeof(u16))
#define E2P_NMAXGMSK_PCS            E2P_RECORD( NmaxGMSKPCS[0],   (NB_TX_LEV_HIGH_BAND_GMSK)*sizeof(u16))
#define E2P_NMAXGMSK_GSM850     E2P_RECORD( NmaxGMSKGSM850[0],   (NB_TX_LEV_LOW_BAND_GMSK)*sizeof(u16))
#define E2P_NMAX8PSK_GSM900     E2P_RECORD( Nmax8PSKGSM900[0],   (NB_TX_LEV_LOW_BAND_8PSK)*sizeof(u16))
#define E2P_NMAX8PSK_DCS            E2P_RECORD( Nmax8PSKDCS[0],   (NB_TX_LEV_HIGH_BAND_8PSK)*sizeof(u16))
#define E2P_NMAX8PSK_PCS            E2P_RECORD( Nmax8PSKPCS[0],   (NB_TX_LEV_HIGH_BAND_8PSK)*sizeof(u16))
#define E2P_NMAX8PSK_GSM850     E2P_RECORD( Nmax8PSKGSM850[0],   (NB_TX_LEV_LOW_BAND_8PSK)*sizeof(u16))
#endif
/*!
  \def E2P_NB_SPEECHFRAME_MUTED
  Category: Audio\n
  Description: For audio debug purpose\n
  Default value: <NbSpeechFrameMuted>
*/
#define E2P_NB_SPEECHFRAME_MUTED     E2P_RECORD( NbSpeechFrameMuted, sizeof(u16))
/*!
  \def E2P_C1THRESHOLD
  Category: L3\n
  Description: C1 Threshold\n
  Default value: <C1Threshold>
*/
#define E2P_C1THRESHOLD      E2P_RECORD( C1Threshold,      sizeof(u8) )

/*!
  \def E2P_EXHAUSTIVEPLMNSEARCH
  Category: L3\n
  Description: It is used to manage fast synchronisation for US products\n
  Default value: <ExhaustivePlmnSearch>
*/
#define E2P_EXHAUSTIVEPLMNSEARCH     E2P_RECORD( ExhaustivePlmnSearch, sizeof(u8))
/*!
  \def E2P_IMEISV
  Category: L3\n
  Description: Software version of the IMEISV\n
  Default value: <ImeiSV>
*/
#define E2P_IMEISV                   E2P_RECORD( ImeiSV, sizeof(u8))
#ifdef __E2P_INDEX_SYM__
#define E2P_GPRSDIAGLEVEL(i)         E2P_RECORD_OFFSET ( GDiagState, i, sizeof (u32))
#else
#define E2P_GPRSDIAGLEVEL(i)         E2P_RECORD_OFFSET ( GDiagState[0], i, sizeof (u32))
#endif
#define E2P_MULTISLOTCLASS           E2P_RECORD( MultiSlotClass, sizeof(u8))
/*!
  \def E2P_DRXPARAM
  Category: L3\n
  Description: Drx Parameters\n
  Default value: <DrxParam>
*/
#ifdef __E2P_INDEX_SYM__
#define E2P_DRXPARAM                 E2P_RECORD( DrxParam,   E2P_DIM_DRX )
#else
#define E2P_DRXPARAM                 E2P_RECORD( DrxParam[0],   E2P_DIM_DRX )
#endif
/*!
  \def E2P_MSCLASS
  Category: L3\n
  Description: MS Class Capability\n
  Default value: <MsClass>
*/
#define E2P_MSCLASS                  E2P_RECORD( MsClass,    sizeof (u8))
/*!
  \def E2P_STACKCONFIG
  Category: L3\n
  Description: STACK Configuration\n
                      bit b0 used for Compression VJC and LLC parameters negociation\n
                      bit b1 used for RLD re-assembly methode\n
                      bit b2 used for preferred TBF type\n
                      bits b3, b4, b5 not used\n
                      bit 6 used to activate XID command sending after PDP activation\n
                      bit 7 READY timer\n
  Default value: <StackConfig>
*/
#define E2P_STACKCONFIG              E2P_RECORD( StackConfig, sizeof (u8))
/*!
  \def E2P_READYTIMER
  Category: L3\n
  Description: MS Preferred Ready Timer Value\n
  Default value: <ReadyTimer>
*/
#define E2P_READYTIMER               E2P_RECORD( ReadyTimer, sizeof(u8))


/*!
  \def E2P_OBJNUMBEROFSECTORS
  Category: SYS\n
  Description: ObjNumberOfSectors\n
  Default value: <ObjNumberOfSectors>
*/
#define E2P_OBJNUMBEROF32K E2P_RECORD( ObjNumberOf32k, sizeof(u8))

/*!
  \def E2P_OBJFORMATCHKSUM
  Category: SYS\n
  Description: ObjFormatChkSum\n
  Default value: <ObjFormatChkSum>
*/
#define E2P_OBJFORMATCHKSUM    E2P_RECORD( ObjFormatChkSum, sizeof(u8))

/*!
  \def E2P_RAISIZEIN32K
  Category: SYS\n
  Description: RaiSizeIn32k\n
  Default value: <RaiSizeIn32k>
*/
#define E2P_RAISIZEIN32K E2P_RECORD( RaiSizeIn32k, sizeof(u16))

/*!
  \def E2P_RAIFORMATCHKSUM
  Category: SYS\n
  Description: RaiFormatChkSum\n
  Default value: <RaiFormatChkSum>
*/
#define E2P_RAIFORMATCHKSUM    E2P_RECORD( RaiFormatChkSum, sizeof(u16))

/*!
  \def E2P_SCRATCHMEMSTATUS
  Category: SYS\n
  Description: ScratchMemStatus\n
  Default value: <ScratchMemStatus>
*/
#define E2P_SCRATCHMEMSTATUS         E2P_RECORD( ScratchMemStatus, sizeof(u8))
/*!
  \def E2P_EQUIV_PLMN_LIST
  Category: L3\n
  Description: EPLMN\n
  Default value: <EquivPlmnList>
*/
#ifdef __E2P_INDEX_SYM__
#define E2P_EQUIV_PLMN_LIST             E2P_RECORD (EquivPlmnList, 19 * sizeof (u8) )
#else
#define E2P_EQUIV_PLMN_LIST             E2P_RECORD (EquivPlmnList[0], 19 * sizeof (u8) )
#endif
/*!
  \def E2P_RAI
  Category: L3\n
  Description: Routing Area Identity\n
  Default value: <Rai>
*/
#ifdef __E2P_INDEX_SYM__
#define E2P_RAI                         E2P_RECORD( Rai, 6 * sizeof (u8))
#else
#define E2P_RAI                         E2P_RECORD( Rai[ 0 ], 6 * sizeof (u8))
#endif
/*!
  \def E2P_PTMSI
  Category: L3\n
  Description: Packet Temporary Mobile Subscriber Identity\n
  Default value: <P_Tmsi>
*/
#ifdef __E2P_INDEX_SYM__
#define E2P_PTMSI                       E2P_RECORD( P_Tmsi, 4 * sizeof (u8))
#else
#define E2P_PTMSI                       E2P_RECORD( P_Tmsi[ 0 ], 4 * sizeof (u8))
#endif
/*!
  \def E2P_P_TMSI_SIGNATURE
  Category: L3\n
  Description: PTMSI Signature\n
  Default value: <P_Tmsi_Signature>
*/
#ifdef __E2P_INDEX_SYM__
#define E2P_P_TMSI_SIGNATURE            E2P_RECORD( P_Tmsi_Signature, 3 * sizeof (u8) )
#else
#define E2P_P_TMSI_SIGNATURE            E2P_RECORD( P_Tmsi_Signature[ 0 ], 3 * sizeof (u8) )
#endif
/*!
  \def E2P_GUPDAT
  Category: L3\n
  Description: Routing Area Update Status\n
  Default value: <UpdateStatus>
*/
#define E2P_GUPDAT                      E2P_RECORD( UpdateStatus, 1 * sizeof (u8))
/*!
  \def E2P_GKC
  Category: L3\n
  Description: GPRS Ciphering Key\n
  Default value: <GKc>
*/
#ifdef __E2P_INDEX_SYM__
#define E2P_GKC                         E2P_RECORD( GKc, 8 * sizeof (u8))
#else
#define E2P_GKC                         E2P_RECORD( GKc[ 0 ], 8 * sizeof (u8))
#endif
/*!
  \def E2P_GCKSN
  Category: L3\n
  Description: GPRS Ciphering Key Sequence Number\n
  Default value: <GCksn>
*/
#define E2P_GCKSN                       E2P_RECORD( GCksn, 1 * sizeof (u8))
/*!
  \def E2P_PREVIOUS_IMSI
  Category: L3\n
  Description: Previous IMSI\n
  Default value: <PreviousImsi>
*/
#ifdef __E2P_INDEX_SYM__
#define E2P_PREVIOUS_IMSI               E2P_RECORD( PreviousImsi, sizeof(vm_Imsi_t) )
#else
#define E2P_PREVIOUS_IMSI               E2P_RECORD( PreviousImsi[0], sizeof(vm_Imsi_t) )
#endif
/*!
  \def E2P_DATAPARAM
  Category: SYS\n
  Description: DataParam\n
  Default value: <DataParam>
*/
#ifdef __E2P_INDEX_SYM__
#define E2P_DATAPARAM( _NUM_ , _SIZ_ )  E2P_EXT_SYMBOL(DataParam)+(_NUM_*sizeof(u8)), sizeof(u8)* _SIZ_
#else
#define E2P_DATAPARAM( _NUM_ , _SIZ_ )  E2P_RECORD( DataParam[_NUM_], sizeof(u8)* _SIZ_ )
#endif
#define E2P_MODULEVERSION               E2P_RECORD(  ModuleVersion, sizeof (u32) )
/*!
  \def E2P_MANUALLYSELECTEDPLMN
  Category: L3\n
  Description: manually selected PLMN\n
  Default value: <ManuallySelectedPlmn>
*/
#ifdef __E2P_INDEX_SYM__
#define E2P_MANUALLYSELECTEDPLMN E2P_RECORD (ManuallySelectedPlmn, 4 * sizeof (u8))
#else
#define E2P_MANUALLYSELECTEDPLMN E2P_RECORD (ManuallySelectedPlmn[0], 4 * sizeof (u8))
#endif
/*!
  \def E2P_V24_UART2_FRAMING
  Category: V24\n
  Description: Uart2 character framing (parity, stop ...), the default value is 3, whihc means the UART2 is 8 Bit per char, No parity Check and 1 Stop Bit\n
  Default value: <v24_Uart2Framing>
*/
#define E2P_V24_UART2_FRAMING    E2P_RECORD( v24_Uart2Framing,    sizeof(u8) )
/*!
  \def E2P_V24_UART2_SPEED
  Category: V24\n
  Description: V.24 uart2 handler speed, the default value is 7 which means 115200 bauds \n
  Default value: <v24_Uart2Speed>
*/
#define E2P_V24_UART2_SPEED      E2P_RECORD( v24_Uart2Speed,      sizeof(u8) )
/*!
  \def E2P_V24_UART2_OPTIONS
  Category: V24\n
  Description:V.24 Uart2 Handler Options, the default value is 0x1D which mean Bit0:the DCD signal value is set 1,
                    Bit1Bit2: DSR signal value is set 01, Bit3: DTR signal value is set 1, Bit4: ECHO is set 1\n
  Default value: <v24_Uart2Options>
*/
#define E2P_V24_UART2_OPTIONS    E2P_RECORD( v24_Uart2Options,    sizeof(u8) )
/*!
  \def E2P_V24_UART2_EXTOPTIONS
  Category: V24\n
  Description:V.24 Uart2 user profile, the default value is 0 which mean Bit0 is set 0, RX Flow Control is disabled,
                    Bit2 is set 0, TX Flow Control is disabled\n
  Default value: <v24_Uart2ExtOptions>
*/
#define E2P_V24_UART2_EXTOPTIONS E2P_RECORD( v24_Uart2ExtOptions, sizeof(u8) )


/*!
  \def E2P_ADVOLUMESDEFINITION
  Category: SYS\n
  Description: AdVolumes\n
  Default value: <AdVolumes>
*/
#ifdef __E2P_INDEX_SYM__
#define E2P_ADVOLUMESDEFINITION  E2P_RECORD( JavaVolumeSize, sizeof(AdVolumes_t))//First element in AdVolumes
#else
#define E2P_ADVOLUMESDEFINITION  E2P_RECORD( AdVolumes, sizeof(AdVolumes_t))
#endif
/*!
  \def E2P_FMS_JOURNALCTX
  Category: SYS\n
  Description: FlashJournalCtx\n
  Default value: <FlashJournalCtx>
*/
#ifdef __E2P_INDEX_SYM__
#define E2P_FMS_JOURNALCTX       E2P_RECORD( FlashJournalCtx, 5*sizeof(u8) )
#define E2P_FMS_JOURNALCTX_STATE E2P_EXT_SYMBOL(FlashJournalCtx)+(4*sizeof(u8)), sizeof(u8)
#else
#define E2P_FMS_JOURNALCTX       E2P_RECORD( FlashJournalCtx[0], 5*sizeof(u8) )
#define E2P_FMS_JOURNALCTX_STATE E2P_RECORD( FlashJournalCtx[4],   sizeof(u8) )
#endif
/*!
  \def E2P_LASTBA
  Category: L3\n
  Description: Last BA list\n
  Default value: <LastBa>
*/
#ifdef __E2P_INDEX_SYM__
#define E2P_LASTBA( _NUM_ , _SIZ_ )     E2P_EXT_SYMBOL(LastBa)+(_NUM_*sizeof(u8)), sizeof(u8)* _SIZ_
#else
#define E2P_LASTBA( _NUM_ , _SIZ_ )     E2P_RECORD( LastBa[_NUM_], sizeof(u8)* _SIZ_ )
#endif

/*!
  \def E2P_V24_SIGNAL_FOR_USB
  Category: V24\n
  Description:  VML Control signals to use with USB CDC\n
  Default value: <v24_SignalForUsb>
*/
#define E2P_V24_SIGNAL_FOR_USB E2P_RECORD( v24_SignalForUsb,  sizeof(u8) )
/*!
  \def E2P_V24_USB_FRAMING
  Category: V24\n
  Description:USB CDC character framing (parity, stop ...), the default value is 3, whihc means the USB CDC is 8 Bit per char, No parity Check and 1 Stop Bit\n
  Default value: <v24_UsbFraming>
*/
#define E2P_V24_USB_FRAMING    E2P_RECORD( v24_UsbFraming,    sizeof(u8) )
/*!
  \def E2P_V24_USB_SPEED
  Category: V24\n
  Description: V.24 usb handler speed, the default value is 7 which means 115200 bauds \n
  Default value: <v24_UsbSpeed>
*/
#define E2P_V24_USB_SPEED      E2P_RECORD( v24_UsbSpeed,      sizeof(u8) )
/*!
  \def E2P_V24_USB_OPTIONS
  Category: V24\n
  Description:V.24 USB Handler Options, the default value is 0x15 which mean Bit0:the DCD signal value is set 1,
                    Bit1Bit2: DSR signal value is set 01, Bit3: DTR signal value is set 0, Bit4: ECHO is set 1\n
  Default value: <v24_UsbOptions>
*/
#define E2P_V24_USB_OPTIONS    E2P_RECORD( v24_UsbOptions,    sizeof(u8) )
/*!
  \def E2P_V24_USB_EXTOPTIONS
  Category: V24\n
  Description:V24 usb user profile, the default value is 0x05 which mean Bit0 is set 1, RX Flow Control is enabled,
                    Bit2 is set 1, TX Flow Control is enabled\n
  Default value: <v24_UsbExtOptions>
*/
#define E2P_V24_USB_EXTOPTIONS E2P_RECORD( v24_UsbExtOptions, sizeof(u8) )


#define E2P_DOTA_STATE         E2P_RECORD( DotaState,  sizeof(u8) )
#define E2P_DOTA_CELL_ID       E2P_RECORD( DotaCellId,  sizeof(u32) )
/*!
  \def E2P_OPENCTRL
  Category: SYS\n
  Description: OpenCtrl\n
  Default value: <OpenCtrl>
*/
#define E2P_OPENCTRL           E2P_RECORD( OpenCtrl, sizeof(u8) )
#ifdef __E2P_INDEX_SYM__
#define E2P_EXTENDED2_DIAGLEVEL(i)   E2P_RECORD_OFFSET ( Extended2DiagState, i, sizeof (u32))
#else
#define E2P_EXTENDED2_DIAGLEVEL(i)   E2P_RECORD_OFFSET ( Extended2DiagState[0], i, sizeof (u32))
#endif

/* NEW PARAM HWL */
#define E2P_HARDCAPABILITY     E2P_RECORD( HardCapability      , sizeof(u32))
#define E2P_REQUIREDPATCHES    E2P_RECORD( RequiredPatches     , sizeof(u32))
#define E2P_RADIOTYPE          E2P_RECORD( RadioType           , sizeof(u8) )

//#define E2P_IQVOLTAGEORDER     E2P_RECORD( IQ_VoltageOrder     , sizeof(u8) )
#define E2P_BOARDGAIN_GSM900   E2P_RECORD( BoardGain_GSM900    , sizeof(u8) )
#define E2P_BOARDGAIN_DCS1800  E2P_RECORD( BoardGain_DCS1800   , sizeof(u8) )
#define E2P_BOARDGAIN_PCS1900  E2P_RECORD( BoardGain_PCS1900   , sizeof(u8) )
#define E2P_BOARDGAIN_GSM_850  E2P_RECORD( BoardGain_GSM850    , sizeof(u8) )


#define E2P_TXPWRMINBASE       E2P_RECORD( TxPwrMinBase        , sizeof(u16))



#define E2P_TXEN2STOP          E2P_RECORD( TxEn2Stop           , sizeof(s8) )

#define E2P_TXFREQOFFSET_GSM900   E2P_RECORD( TxFreqOffset_GSM900     , sizeof(s16) )
#define E2P_TXFREQOFFSET_DCS1800  E2P_RECORD( TxFreqOffset_DCS1800    , sizeof(s16) )
#define E2P_TXFREQOFFSET_PCS1900  E2P_RECORD( TxFreqOffset_PCS1900    , sizeof(s16) )
#define E2P_TXFREQOFFSET_GSM850   E2P_RECORD( TxFreqOffset_GSM850     , sizeof(s16) )

#define E2P_MASKPCLTXFREQOFFSET_GSM900   E2P_RECORD( MaskPclTxFreqOffset_GSM900     , sizeof(u16) )
#define E2P_MASKPCLTXFREQOFFSET_DCS1800  E2P_RECORD( MaskPclTxFreqOffset_DCS1800    , sizeof(u16) )
#define E2P_MASKPCLTXFREQOFFSET_PCS1900  E2P_RECORD( MaskPclTxFreqOffset_PCS1900    , sizeof(u16) )
#define E2P_MASKPCLTXFREQOFFSET_GSM850   E2P_RECORD( MaskPclTxFreqOffset_GSM850     , sizeof(u16) )

#define E2P_TAOFFSET_GSM900    E2P_RECORD( TaOffset_GSM900     , sizeof(s8) )
#define E2P_TAOFFSET_DCS1800   E2P_RECORD( TaOffset_DCS1800    , sizeof(s8) )
#define E2P_TAOFFSET_PCS1900   E2P_RECORD( TaOffset_PCS1900    , sizeof(s8) )
#define E2P_TAOFFSET_GSM850    E2P_RECORD( TaOffset_GSM850     , sizeof(s8) )

#define E2P_AMCAL_GSM850   E2P_RECORD( AMCal_GSM850     , sizeof(u8) )
#define E2P_AMCAL_GSM900   E2P_RECORD( AMCal_GSM900     , sizeof(u8) )
#define E2P_AMCAL_DCS1800  E2P_RECORD( AMCal_DCS1800    , sizeof(u8) )
#define E2P_AMCAL_PCS1900  E2P_RECORD( AMCal_PCS1900    , sizeof(u8) )

#define E2P_NMINGMSK_LB   E2P_RECORD( NminGMSK_LB     , sizeof(u8) )
#define E2P_NMINGMSK_HB   E2P_RECORD( NminGMSK_HB     , sizeof(u8) )
#define E2P_NMININTERGMSK_LB   E2P_RECORD( NminInterGMSK_LB     , sizeof(u8) )
#define E2P_NMININTERGMSK_HB  E2P_RECORD( NminInterGMSK_HB     , sizeof(u8) )
#define E2P_NMIN8PSK_LB   E2P_RECORD( Nmin8PSK_LB     , sizeof(u8) )
#define E2P_NMIN8PSK_HB   E2P_RECORD( Nmin8PSK_HB     , sizeof(u8) )
#define E2P_NMININTER8PSK_LB   E2P_RECORD( NminInter8PSK_LB     , sizeof(u8) )
#define E2P_NMININTER8PSK_HB  E2P_RECORD( NminInter8PSK_HB     , sizeof(u8) )

#define E2P_FEMON_GMSK850  E2P_RECORD( FEMOnGMSK850     , sizeof(u8) )
#define E2P_FEMOFF_GMSK850  E2P_RECORD( FEMOffGMSK850     , sizeof(u8) )
#define E2P_FEMON_GMSK900  E2P_RECORD( FEMOnGMSK900     , sizeof(u8) )
#define E2P_FEMOFF_GMSK900  E2P_RECORD( FEMOffGMSK900     , sizeof(u8) )
#define E2P_FEMON_GMSK1800  E2P_RECORD( FEMOnGMSK1800     , sizeof(u8) )
#define E2P_FEMOFF_GMSK1800  E2P_RECORD( FEMOffGMSK1800     , sizeof(u8) )
#define E2P_FEMON_GMSK1900  E2P_RECORD( FEMOnGMSK1900     , sizeof(u8) )
#define E2P_FEMOFF_GMSK1900  E2P_RECORD( FEMOffGMSK1900     , sizeof(u8) )
#define E2P_FEMON_8PSK850  E2P_RECORD( FEMOn8PSK850     , sizeof(u8) )
#define E2P_FEMOFF_8PSK850  E2P_RECORD( FEMOff8PSK850     , sizeof(u8) )
#define E2P_FEMON_8PSK900  E2P_RECORD( FEMOn8PSK900     , sizeof(u8) )
#define E2P_FEMOFF_8PSK900  E2P_RECORD( FEMOff8PSK900     , sizeof(u8) )
#define E2P_FEMON_8PSK1800  E2P_RECORD( FEMOn8PSK1800     , sizeof(u8) )
#define E2P_FEMOFF_8PSK1800  E2P_RECORD( FEMOff8PSK1800     , sizeof(u8) )
#define E2P_FEMON_8PSK1900  E2P_RECORD( FEMOn8PSK1900     , sizeof(u8) )
#define E2P_FEMOFF_8PSK1900  E2P_RECORD( FEMOff8PSK1900     , sizeof(u8) )

#define E2P_RAMPUP_GMSK850  E2P_RECORD( RampUpGMSK850     , sizeof(u8) )
#define E2P_RAMPDOWN_GMSK850  E2P_RECORD( RampDownGMSK850     , sizeof(u8) )
#define E2P_RAMPUP_GMSK900  E2P_RECORD( RampUpGMSK900     , sizeof(u8) )
#define E2P_RAMPDOWN_GMSK900  E2P_RECORD( RampDownGMSK900     , sizeof(u8) )
#define E2P_RAMPUP_GMSK1800  E2P_RECORD( RampUpGMSK1800     , sizeof(u8) )
#define E2P_RAMPDOWN_GMSK1800  E2P_RECORD( RampDownGMSK1800     , sizeof(u8) )
#define E2P_RAMPUP_GMSK1900  E2P_RECORD( RampUpGMSK1900     , sizeof(u8) )
#define E2P_RAMPDOWN_GMSK1900  E2P_RECORD( RampDownGMSK1900     , sizeof(u8) )
#define E2P_RAMPUP_8PSK850  E2P_RECORD( RampUp8PSK850     , sizeof(u8) )
#define E2P_RAMPDOWN_8PSK850  E2P_RECORD( RampDown8PSK850     , sizeof(u8) )
#define E2P_RAMPUP_8PSK900  E2P_RECORD( RampUp8PSK900     , sizeof(u8) )
#define E2P_RAMPDOWN_8PSK900  E2P_RECORD( RampDown8PSK900     , sizeof(u8) )
#define E2P_RAMPUP_8PSK1800  E2P_RECORD( RampUp8PSK1800     , sizeof(u8) )
#define E2P_RAMPDOWN_8PSK1800  E2P_RECORD( RampDown8PSK1800     , sizeof(u8) )
#define E2P_RAMPUP_8PSK1900  E2P_RECORD( RampUp8PSK1900     , sizeof(u8) )
#define E2P_RAMPDOWN_8PSK1900  E2P_RECORD( RampDown8PSK1900     , sizeof(u8) )

//#define E2P_PAON_GMSK850  E2P_RECORD( PAOnGMSK850     , sizeof(u8) )
//#define E2P_PAOFF_GMSK850  E2P_RECORD( PAOffGMSK850     , sizeof(u8) )
//#define E2P_PAON_GMSK900  E2P_RECORD( PAOnGMSK900     , sizeof(u8) )
//#define E2P_PAOFF_GMSK900  E2P_RECORD( PAOffGMSK900     , sizeof(u8) )
//#define E2P_PAON_GMSK1800  E2P_RECORD( PAOnGMSK1800     , sizeof(u8) )
//#define E2P_PAOFF_GMSK1800  E2P_RECORD( PAOffGMSK1800     , sizeof(u8) )
//#define E2P_PAON_GMSK1900  E2P_RECORD( PAOnGMSK1900     , sizeof(u8) )
//#define E2P_PAOFF_GMSK1900  E2P_RECORD( PAOffGMSK1900     , sizeof(u8) )
//#define E2P_PAON_8PSK850  E2P_RECORD( PAOn8PSK850     , sizeof(u8) )
//#define E2P_PAOFF_8PSK850  E2P_RECORD( PAOff8PSK850     , sizeof(u8) )
//#define E2P_PAON_8PSK900  E2P_RECORD( PAOn8PSK900     , sizeof(u8) )
//#define E2P_PAOFF_8PSK900  E2P_RECORD( PAOff8PSK900     , sizeof(u8) )
//#define E2P_PAON_8PSK1800  E2P_RECORD( PAOn8PSK1800     , sizeof(u8) )
//#define E2P_PAOFF_8PSK1800  E2P_RECORD( PAOff8PSK1800     , sizeof(u8) )
//#define E2P_PAON_8PSK1900  E2P_RECORD( PAOn8PSK1900     , sizeof(u8) )
//#define E2P_PAOFF_8PSK1900  E2P_RECORD( PAOff8PSK1900     , sizeof(u8) )
#define E2P_PAON_GMSK850  E2P_RECORD( PAOnGMSK850     , sizeof(s8) ) //Format changed to signed by yunchu
#define E2P_PAOFF_GMSK850  E2P_RECORD( PAOffGMSK850     , sizeof(s8) )
#define E2P_PAON_GMSK900  E2P_RECORD( PAOnGMSK900     , sizeof(s8) )
#define E2P_PAOFF_GMSK900  E2P_RECORD( PAOffGMSK900     , sizeof(s8) )
#define E2P_PAON_GMSK1800  E2P_RECORD( PAOnGMSK1800     , sizeof(s8) )
#define E2P_PAOFF_GMSK1800  E2P_RECORD( PAOffGMSK1800     , sizeof(s8) )
#define E2P_PAON_GMSK1900  E2P_RECORD( PAOnGMSK1900     , sizeof(s8) )
#define E2P_PAOFF_GMSK1900  E2P_RECORD( PAOffGMSK1900     , sizeof(s8) )
#define E2P_PAON_8PSK850  E2P_RECORD( PAOn8PSK850     , sizeof(s8) )
#define E2P_PAOFF_8PSK850  E2P_RECORD( PAOff8PSK850     , sizeof(s8) )
#define E2P_PAON_8PSK900  E2P_RECORD( PAOn8PSK900     , sizeof(s8) )
#define E2P_PAOFF_8PSK900  E2P_RECORD( PAOff8PSK900     , sizeof(s8) )
#define E2P_PAON_8PSK1800  E2P_RECORD( PAOn8PSK1800     , sizeof(s8) )
#define E2P_PAOFF_8PSK1800  E2P_RECORD( PAOff8PSK1800     , sizeof(s8) )
#define E2P_PAON_8PSK1900  E2P_RECORD( PAOn8PSK1900     , sizeof(s8) )
#define E2P_PAOFF_8PSK1900  E2P_RECORD( PAOff8PSK1900     , sizeof(s8) )

#define E2P_FACCHTHRES         E2P_RECORD( FacchThres          , sizeof(u8) )
//MST change for FACCH/H threshold {
#define E2P_FACCHHRTHRES     E2P_RECORD( FacchHRThres        , sizeof(u8))
#define E2P_FACCHHRTHRESSAIC E2P_RECORD( FacchHRThresSaic    , sizeof(u8))
//MST change for FACCH/H threshold }
#define E2P_FSBFITHRES         E2P_RECORD( FSBfiThres          , sizeof(u16) )
#define E2P_EFSBFITHRES        E2P_RECORD( EFSBfiThres         , sizeof(u16) )
#define E2P_HSBFITHRES         E2P_RECORD( HSBfiThres          , sizeof(u16) )
#define E2P_ASBFITHRES         E2P_RECORD( AFSBfiThres         , sizeof(u16) )
#define E2P_AHSBFITHRES        E2P_RECORD( AHSBfiThres         , sizeof(u16) )

#define E2P_HRUFITHRES         E2P_RECORD( HRUfiThres          , sizeof(u16) )
#define E2P_AMRDFITHRES        E2P_RECORD( AMRDfiThres         , sizeof(u16) )
#define E2P_USFMETRICCS1THRES  E2P_RECORD( USFMetricCS1Thres   , sizeof(u16) )
#define E2P_USFMETRICCS24THRES E2P_RECORD( USFMetricCS24Thres  , sizeof(u16) )
#define E2P_USFMETRICE14THRES  E2P_RECORD( USFMetricE14Thres   , sizeof(u16) )
#define E2P_USFMETRICE59THRES  E2P_RECORD( USFMetricE59Thres   , sizeof(u16) )

//#define E2P_AFCSTEPVALUE_GSM900 E2P_RECORD( AfcStepValue        , sizeof(u16) )
#define E2P_STATICDACVALUE     E2P_RECORD( StaticDacValue      , sizeof(u8))
#define E2P_ROUGHDACVALUE       E2P_RECORD( RoughDacValue       , sizeof(u16) )
#define E2P_ROUGHDACSTEPVALUE   E2P_RECORD( RoughDacStepValue   , sizeof(s16) )

/*!
  \def E2P_AECTYPE
  Category: Audio\n
  Description: AEC type\n
  Default value: <AecType>
*/
#define E2P_AECTYPE            E2P_RECORD( AecType             , sizeof(u8)  )
/*!
  \def E2P_AUDIOCTRL
  Category: Audio\n
  Description: Audio Control\n
  Default value: <AudioCtrl>
*/
#define E2P_AUDIOCTRL          E2P_RECORD( AudioCtrl           , sizeof(u16) )
#define E2P_AUDIOHPFILTERTABLE E2P_RECORD( AudioHPFilterTable  , 3*sizeof(u8))
#define E2P_AUDIOLPFILTERTABLE E2P_RECORD( AudioLPFilterTable  , 3*sizeof(u8))
#define E2P_AUDIOHFTABLE       E2P_RECORD( AudioHFTable        , sizeof(u16) )
#define E2P_AUDIO3TABLE        E2P_RECORD( Audio3Table         , sizeof(u8)  )
#define E2P_AUDIOACTABLE       E2P_RECORD( AudioACTable        , 9*sizeof(u8))
#define E2P_AUDIOMMITABLE      E2P_RECORD( AudioMMITable       , 3*sizeof(u8))
#define E2P_AUDIOLSTABLE       E2P_RECORD( AudioLSTable        , 3*sizeof(u8))
#define E2P_AUDIODSPGAIN       E2P_RECORD( AudioDspGain        , sizeof(u32) )
/*!
  \def E2P_AUDIOLOOPTEST
  Category: Audio\n
  Description: For audio debug purpose\n
  Default value: <AudioLoopTest>
*/
#define E2P_AUDIOLOOPTEST      E2P_RECORD( AudioLoopTest       , sizeof(u8)  )
#define E2P_AUDIOSPEAKERGAIN   E2P_RECORD( AudioSpeakerGain    , sizeof(u8)  )
/*!
  \def E2P_AUDIOFIRCOEFF
  Category: Audio\n
  Description: For audio calibartion purpose\n
  Default value: <AudioFirCoeff>
*/
#ifdef __E2P_INDEX_SYM__
#define E2P_AUDIOFIRCOEFF      E2P_RECORD( AudioFirCoeff       , AUDIO_FIR_LENGTH*sizeof(u16)  )
#else
#define E2P_AUDIOFIRCOEFF      E2P_RECORD( AudioFirCoeff[0]       , AUDIO_FIR_LENGTH*sizeof(u16)  )
#endif
#define E2P_ENDGSMSTCKE2P      E2P_RECORD( EndGSMStckE2p       , sizeof(u8)  )


#define E2P_RFPARAM1           E2P_RECORD( Rf_Param1           , sizeof(u32) )
#define E2P_RFPARAM2           E2P_RECORD( Rf_Param2           , sizeof(u32) )
#define E2P_RFPARAM3           E2P_RECORD( Rf_Param3           , sizeof(u32) )
#define E2P_RFPARAM4           E2P_RECORD( Rf_Param4           , sizeof(u32) )

/*!
  \def E2P_USBCUSTOMCDC
  Category: SYS\n
  Description: CustomIdCDC\n
  Default value: <CustomIdCDC>
*/
#define E2P_USBCUSTOMCDC       E2P_RECORD(CustomIdCDC, 2*sizeof(u16))
/*!
  \def E2P_USBCUSTOMIDMS
  Category: SYS\n
  Description: CustomIdMS\n
  Default value: <CustomIdMS>
*/
#define E2P_USBCUSTOMIDMS     E2P_RECORD(CustomIdMS, 2*sizeof(u16))
/*!
  \def E2P_USBPROSTRINGCDC
  Category: SYS\n
  Description: ProductStringCDC\n
  Default value: <ProductStringCDC>
*/
#define E2P_USBPROSTRINGCDC  E2P_RECORD(ProductStringCDC, E2P_DIM_PRO_CDC)
/*!
  \def E2P_USBPROSTRINGMS
  Category: SYS\n
  Description: ProductStringMS\n
  Default value: <ProductStringMS>
*/
#define E2P_USBPROSTRINGMS    E2P_RECORD(ProductStringMS, E2P_DIM_PRO_MS)
/*!
  \def E2P_USBMANSTRING
  Category: SYS\n
  Description: VendorString\n
  Default value: <VendorString>
*/
#define E2P_USBMANSTRING        E2P_RECORD(VendorString, E2P_DIM_MANUFACTURER)
/*!
  \def E2P_SPEEDPROFILECONFIG
  Category: SYS\n
  Description: SpeedProfileConfig\n
  Default value: <SpeedProfileConfig>
*/
#ifdef __E2P_INDEX_SYM__
#define E2P_SPEEDPROFILECONFIG E2P_RECORD(SpeedProfileConfig, 4*sizeof(u8))
#else
#define E2P_SPEEDPROFILECONFIG E2P_RECORD(SpeedProfileConfig[0], 4*sizeof(u8))
#endif

// Battery E2P parameters
/*!
  \def E2P_BATTLEV
  Category: BB\n
  Description: definition of battery level\n
  Default value: <BattLev>
*/
#ifdef __E2P_INDEX_SYM__
#define E2P_BATTLEV                         E2P_RECORD( BattLev                       , 10 * sizeof(u16))
#else
#define E2P_BATTLEV                         E2P_RECORD( BattLev[0]                       , 10 * sizeof(u16))
#endif
/*!
  \def E2P_MAXVOLT
  Category: BB\n
  Description: Maximum voltage of battery\n
  Default value: <MaxVolt>
*/
#define E2P_MAXVOLT                         E2P_RECORD( MaxVolt                          , sizeof(u16))
/*!
  \def E2P_BATTERYCAPACITY
  Category: BB\n
  Description: Maximum capacity of battery\n
  Default value: <BatteryCapacity>
*/
#define E2P_BATTERYCAPACITY                 E2P_RECORD( BatteryCapacity                  , sizeof(u16))
/*!
  \def E2P_THERMISTORCURRENT
  Category: BB\n
  Description: NTC thermistor source current\n
  Default value: <ThermistorCurrent>
*/
#define E2P_THERMISTORCURRENT               E2P_RECORD( ThermistorCurrent                , sizeof(u8))
/*!
  \def E2P_THERMISTORRISINGTIME
  Category: BB\n
  Description: Battery temperature conversion delay\n
  Default value: <ThermistorRisingTime>
*/
#define E2P_THERMISTORRISINGTIME            E2P_RECORD( ThermistorRisingTime             , sizeof(u8))
/*!
  \def E2P_MAXBATTERYTEMP
  Category: BB\n
  Description: Maximum battery temperature\n
  Default value: <MaxBatteryTemp>
*/
#define E2P_MAXBATTERYTEMP                  E2P_RECORD( MaxBatteryTemp                   , sizeof(u16))
/*!
  \def E2P_MINBATTERYTEMP
  Category: BB\n
  Description: Minimum battery temperature\n
  Default value: <MinBatteryTemp>
*/
#define E2P_MINBATTERYTEMP                  E2P_RECORD( MinBatteryTemp                   , sizeof(u16))
/*!
  \def E2P_VOLTAGELEVELHYSTERESIS
  Category: BB\n
  Description: Voltage level for hysterisis\n
  Default value: <VoltageLevelHysteresis>
*/
#define E2P_VOLTAGELEVELHYSTERESIS          E2P_RECORD( VoltageLevelHysteresis           , sizeof(u8))
/*!
  \def E2P_VOLTAGEDROPBEFORERECHARGE
  Category: BB\n
  Description: Minimum voltage drop before recharging\n
  Default value: <VoltageDropBeforeRecharge>
*/
#define E2P_VOLTAGEDROPBEFORERECHARGE       E2P_RECORD( VoltageDropBeforeRecharge        , sizeof(u16))
/*!
  \def E2P_BATTERYMEASURETIMEOUT
  Category: BB\n
  Description: Delay between 2 battery data measures\n
  Default value: <BatteryMeasureTimeOut>
*/
#define E2P_BATTERYMEASURETIMEOUT           E2P_RECORD( BatteryMeasureTimeOut            , sizeof(u8))
/*!
  \def E2P_BATTERYSECURITYWAITTIMEOUT
  Category: BB\n
  Description: Value of battery security timer\n
  Default value: <BatterySecurityWaitTimeOut>
*/
#define E2P_BATTERYSECURITYWAITTIMEOUT      E2P_RECORD( BatterySecurityWaitTimeOut       , sizeof(u8))
/*!
  \def E2P_BATTERYFASTCHARGINGTIMEOUT
  Category: BB\n
  Description: Maximum time for battery charge\n
  Default value: <BatteryFastChargingTimeOut>
*/
#define E2P_BATTERYFASTCHARGINGTIMEOUT      E2P_RECORD( BatteryFastChargingTimeOut       , sizeof(u16))
/*!
  \def E2P_FASTCHARGEBATTERYSTATUSTIMEOUT
  Category: BB\n
  Description: Delay between 2 battery status in charging mode\n
  Default value: <FastChargeBatteryStatusTimeOut>
*/
#define E2P_FASTCHARGEBATTERYSTATUSTIMEOUT  E2P_RECORD( FastChargeBatteryStatusTimeOut   , sizeof(u16))
/*!
  \def E2P_BATTERYLEVEL
  Category: BB\n
  Description: Current battery level index\n
  Default value: <BatteryLevel>
*/
#define E2P_BATTERYLEVEL                    E2P_RECORD( BatteryLevel                     , sizeof(u8))
/*!
  \def E2P_LOWBATTERYREPORTPERIOD
  Category: BB\n
  Description: Low battery reporting period\n
  Default value: <batLowBatteryReportPeriod>
*/
#define E2P_LOWBATTERYREPORTPERIOD          E2P_RECORD( batLowBatteryReportPeriod        , sizeof(u8))

#ifdef __E2P_INDEX_SYM__
//RTC
/*!
  \def E2P_RTC_SAVE_DATA_VALID
  Category: BB\n
  Description: RTC backup time, DataValid\n
  Default value: <rtcTimeSaved_DataValid>
*/
#define E2P_RTC_SAVE_DATA_VALID             E2P_RECORD( rtcTimeSaved_DataValid  ,sizeof(u8) )
/*!
  \def E2P_RTC_SAVE_YEAR
  Category: BB\n
  Description: RTC backup time, Year\n
  Default value: <rtcTimeSaved_Year>
*/
#define E2P_RTC_SAVE_YEAR                   E2P_RECORD( rtcTimeSaved_Year       ,sizeof(u8) )
/*!
  \def E2P_RTC_SAVE_MONTH
  Category: BB\n
  Description: RTC backup time, Month\n
  Default value: <rtcTimeSaved_Month>
*/
#define E2P_RTC_SAVE_MONTH                  E2P_RECORD( rtcTimeSaved_Month      ,sizeof(u8) )
/*!
  \def E2P_RTC_SAVE_DAY
  Category: BB\n
  Description: RTC backup time, Day\n
  Default value: <rtcTimeSaved_Day>
*/
#define E2P_RTC_SAVE_DAY                    E2P_RECORD( rtcTimeSaved_Day        ,sizeof(u8) )
/*!
  \def E2P_RTC_SAVE_HOUR
  Category: BB\n
  Description: RTC backup time, Hour\n
  Default value: <rtcTimeSaved_Hour>
*/
#define E2P_RTC_SAVE_HOUR                   E2P_RECORD( rtcTimeSaved_Hour       ,sizeof(u8) )
/*!
  \def E2P_RTC_SAVE_MINUTE
  Category: BB\n
  Description: RTC backup time, Minute\n
  Default value: <rtcTimeSaved_Minute>
*/
#define E2P_RTC_SAVE_MINUTE                 E2P_RECORD( rtcTimeSaved_Minute     ,sizeof(u8) )
/*!
  \def E2P_RTC_SAVE_SECOND
  Category: BB\n
  Description: RTC backup time, Second\n
  Default value: <rtcTimeSaved_Second>
*/
#define E2P_RTC_SAVE_SECOND                 E2P_RECORD( rtcTimeSaved_Second     ,sizeof(u8) )
/*!
  \def E2P_RTC_SAVE_PERIOD
  Category: BB\n
  Description: RTC backup time, Second\n
  Default value: <rtcTimeSaved_Second>
*/
#define E2P_RTC_SAVE_PERIOD                 E2P_RECORD( rtcTimeSaved_Period     ,sizeof(u8) )
#else
//RTC
/*!
  \def E2P_RTC_SAVE_DATA_VALID
  Category: BB\n
  Description: RTC backup time, DataValid\n
  Default value: <rtcTimeSaved_DataValid>
*/
#define E2P_RTC_SAVE_DATA_VALID             E2P_RECORD( rtcTimeSave.rtcTimeSaved_DataValid  ,sizeof(u8) )
/*!
  \def E2P_RTC_SAVE_YEAR
  Category: BB\n
  Description: RTC backup time, Year\n
  Default value: <rtcTimeSaved_Year>
*/
#define E2P_RTC_SAVE_YEAR                   E2P_RECORD( rtcTimeSave.rtcTimeSaved_Year       ,sizeof(u8) )
/*!
  \def E2P_RTC_SAVE_MONTH
  Category: BB\n
  Description: RTC backup time, Month\n
  Default value: <rtcTimeSaved_Month>
*/
#define E2P_RTC_SAVE_MONTH                  E2P_RECORD( rtcTimeSave.rtcTimeSaved_Month      ,sizeof(u8) )
/*!
  \def E2P_RTC_SAVE_DAY
  Category: BB\n
  Description: RTC backup time, Day\n
  Default value: <rtcTimeSaved_Day>
*/
#define E2P_RTC_SAVE_DAY                    E2P_RECORD( rtcTimeSave.rtcTimeSaved_Day        ,sizeof(u8) )
/*!
  \def E2P_RTC_SAVE_HOUR
  Category: BB\n
  Description: RTC backup time, Hour\n
  Default value: <rtcTimeSaved_Hour>
*/
#define E2P_RTC_SAVE_HOUR                   E2P_RECORD( rtcTimeSave.rtcTimeSaved_Hour       ,sizeof(u8) )
/*!
  \def E2P_RTC_SAVE_MINUTE
  Category: BB\n
  Description: RTC backup time, Minute\n
  Default value: <rtcTimeSaved_Minute>
*/
#define E2P_RTC_SAVE_MINUTE                 E2P_RECORD( rtcTimeSave.rtcTimeSaved_Minute     ,sizeof(u8) )
/*!
  \def E2P_RTC_SAVE_SECOND
  Category: BB\n
  Description: RTC backup time, Second\n
  Default value: <rtcTimeSaved_Second>
*/
#define E2P_RTC_SAVE_SECOND                 E2P_RECORD( rtcTimeSave.rtcTimeSaved_Second     ,sizeof(u8) )
/*!
  \def E2P_RTC_SAVE_PERIOD
  Category: BB\n
  Description: RTC backup time, Second\n
  Default value: <rtcTimeSaved_Second>
*/
#define E2P_RTC_SAVE_PERIOD                 E2P_RECORD( rtcTimeSave.rtcTimeSaved_Period     ,sizeof(u8) )
#endif
// ADC Calibration E2P parameters
/*!
  \def E2P_ADCBATCOEFF
  Category: BB\n
  Description: Battery voltage gain for ADC calibration\n
  Default value: <AdcBatCoeff>
*/
#define E2P_ADCBATCOEFF                     E2P_RECORD( AdcBatCoeff                      , sizeof(s16))
/*!
  \def E2P_ADCCHARGCOEFF
  Category: BB\n
  Description: Charger voltage gain for ADC calibration\n
  Default value: <AdcChargCoeff>
*/
#define E2P_ADCCHARGCOEFF                   E2P_RECORD( AdcChargCoeff                    , sizeof(u16))
/*!
  \def E2P_ADCICHARGCOEFF
  Category: BB\n
  Description: Charger current gain for ADC calibration\n
  Default value: <AdcIchargCoeff>
*/
#define E2P_ADCICHARGCOEFF                  E2P_RECORD( AdcIchargCoeff                   , sizeof(u16))
/*!
  \def E2P_ADCTEMPCOEFF
  Category: BB\n
  Description: Battery temperature voltage gain for ADC calibration\n
  Default value: <AdcTempCoeff>
*/
#define E2P_ADCTEMPCOEFF                    E2P_RECORD( AdcTempCoeff                     , sizeof(u16))
/*!
  \def E2P_ADCBATOFFSET
  Category: BB\n
  Description: Battery voltage offset for ADC calibration\n
  Default value: <AdcBatOffset>
*/
#define E2P_ADCBATOFFSET                    E2P_RECORD( AdcBatOffset                     , sizeof(s32))
/*!
  \def E2P_ADCCHARGOFFSET
  Category: BB\n
  Description: Charger voltage offset for ADC calibration\n
  Default value: <AdcChargOffset>
*/
#define E2P_ADCCHARGOFFSET                  E2P_RECORD( AdcChargOffset                   , sizeof(s32))
/*!
  \def E2P_ADCICHARGOFFSET
  Category: BB\n
  Description: Charger current offset for ADC calibration\n
  Default value: <AdcIchargOffset>
*/
#define E2P_ADCICHARGOFFSET                 E2P_RECORD( AdcIchargOffset                  , sizeof(s32))
/*!
  \def E2P_ADCTEMPOFFSET
  Category: BB\n
  Description: Battery temperature voltage offset for ADC calibration\n
  Default value: <AdcTempOffset>
*/
#define E2P_ADCTEMPOFFSET                   E2P_RECORD( AdcTempOffset                    , sizeof(s32))
/*
  \def E2P_ADCBATACTUALVOLT
  Category: V24\n
  Description:Mode for TMT trace to SD card, (1) Circular Buffer (2) FlipFlap Buffer, the default value is 1 (Circular Buffer Mode)\n
  Default value: <TraceStoreSD>
*/
#ifdef __E2P_INDEX_SYM__
#define E2P_ADCACTUALVOLT_1                 E2P_RECORD( AdcBatActualVolt              , sizeof(u16))
#define E2P_ADCACTUALVOLT_2                E2P_EXT_SYMBOL(AdcBatActualVolt)+(1*sizeof(u16)), sizeof(u16)
#define E2P_ADCRAWDATA_1                    E2P_RECORD( AdcBatRawData                 , sizeof(u16))
#define E2P_ADCRAWDATA_2                   E2P_EXT_SYMBOL(AdcBatRawData)+(1*sizeof(u16)), sizeof(u16)
#else
#define E2P_ADCACTUALVOLT_1                 E2P_RECORD( AdcBatActualVolt[0]              , sizeof(u16))
#define E2P_ADCACTUALVOLT_2                 E2P_RECORD( AdcBatActualVolt[1]              , sizeof(u16))
#define E2P_ADCRAWDATA_1                    E2P_RECORD( AdcBatRawData[0]                 , sizeof(u16))
#define E2P_ADCRAWDATA_2                    E2P_RECORD( AdcBatRawData[1]                 , sizeof(u16))
#endif
// TMT Trace Store to SD card
#define E2P_TRACESTORESDFILTER              E2P_RECORD( TraceStoreSDFilter,   sizeof(u32) )
/*!
  \def E2P_TRACESTORESD
  Category: V24\n
  Description:Mode for TMT trace to SD card, (1) Circular Buffer (2) FlipFlap Buffer, the default value is 1 (Circular Buffer Mode)\n
  Default value: <TraceStoreSD>
*/
#define E2P_TRACESTORESD                    E2P_RECORD( TraceStoreSD,   sizeof(u8) )
#define E2P_GSENSORDIRECTION                E2P_RECORD( GsensorDirection,   sizeof(u8) )
#define E2P_ENABLETASKMGR                   E2P_RECORD( EnableTaskMgr,   sizeof(u8) )

/* MST for __PA_FREQ_COMP__ {*/
#if defined(__PA_FREQ_COMP__)
#define E2P_PA_FREQ_COMP_CH_Center_GSM      E2P_RECORD( PAFreqCompChCenterGSM            , sizeof(u16))
#define E2P_PA_FREQ_COMP_CH_HIGH_GSM        E2P_RECORD( PAFreqCompChHighGSM              , sizeof(u16))
#define E2P_PA_FREQ_COMP_CH_LOW_GSM         E2P_RECORD( PAFreqCompChLowGSM               , sizeof(u16))
#define E2P_PA_FREQ_COMP_CH_Center_DCS      E2P_RECORD( PAFreqCompChCenterDCS            , sizeof(u16))
#define E2P_PA_FREQ_COMP_CH_HIGH_DCS        E2P_RECORD( PAFreqCompChHighDCS              , sizeof(u16))
#define E2P_PA_FREQ_COMP_CH_LOW_DCS         E2P_RECORD( PAFreqCompChLowDCS               , sizeof(u16))
#define E2P_PA_FREQ_COMP_PCL_GSM            E2P_RECORD( PAFreqCompPclGSM                 , sizeof(u8))
#define E2P_PA_FREQ_COMP_PCL_DCS            E2P_RECORD( PAFreqCompPclDCS                 , sizeof(u8))
#define E2P_NMAX_GMSK_FREQ_COMP_LOW_GSM     E2P_RECORD( NmaxGmskFreqCompLowGSM           , sizeof(u16))
#define E2P_NMAX_GMSK_FREQ_COMP_HIGH_GSM    E2P_RECORD( NmaxGmskFreqCompHighGSM          , sizeof(u16))
#define E2P_NMAX_GMSK_FREQ_COMP_LOW_DCS     E2P_RECORD( NmaxGmskFreqCompLowDCS           , sizeof(u16))
#define E2P_NMAX_GMSK_FREQ_COMP_HIGH_DCS    E2P_RECORD( NmaxGmskFreqCompHighDCS          , sizeof(u16))
//Total Size=10 x u16 + 2 x u8 = 22 Bytes

#define E2P_PA_FREQ_COMP_CH_Center_GSM850      E2P_RECORD( PAFreqCompChCenterGSM850      , sizeof(u16))
#define E2P_PA_FREQ_COMP_CH_HIGH_GSM850        E2P_RECORD( PAFreqCompChHighGSM850        , sizeof(u16))
#define E2P_PA_FREQ_COMP_CH_LOW_GSM850         E2P_RECORD( PAFreqCompChLowGSM850         , sizeof(u16))
#define E2P_PA_FREQ_COMP_CH_Center_PCS      E2P_RECORD( PAFreqCompChCenterPCS            , sizeof(u16))
#define E2P_PA_FREQ_COMP_CH_HIGH_PCS        E2P_RECORD( PAFreqCompChHighPCS              , sizeof(u16))
#define E2P_PA_FREQ_COMP_CH_LOW_PCS         E2P_RECORD( PAFreqCompChLowPCS               , sizeof(u16))
#define E2P_PA_FREQ_COMP_PCL_GSM850            E2P_RECORD( PAFreqCompPclGSM850           , sizeof(u8))
#define E2P_PA_FREQ_COMP_PCL_PCS            E2P_RECORD( PAFreqCompPclPCS                 , sizeof(u8))
#define E2P_NMAX_GMSK_FREQ_COMP_LOW_GSM850     E2P_RECORD( NmaxGmskFreqCompLowGSM850     , sizeof(u16))
#define E2P_NMAX_GMSK_FREQ_COMP_HIGH_GSM850    E2P_RECORD( NmaxGmskFreqCompHighGSM850    , sizeof(u16))
#define E2P_NMAX_GMSK_FREQ_COMP_LOW_PCS     E2P_RECORD( NmaxGmskFreqCompLowPCS           , sizeof(u16))
#define E2P_NMAX_GMSK_FREQ_COMP_HIGH_PCS    E2P_RECORD( NmaxGmskFreqCompHighPCS          , sizeof(u16))

#endif//__PA_FREQ_COMP__
/* MST for __PA_FREQ_COMP__ }*/


/* MST for __RX_FREQ_COMP__ {*/
#if defined(__RX_FREQ_COMP__)
#define E2P_RX_FREQ_COMP_CH_1_GSM           E2P_RECORD( RxFreqCompCh1GSM                 , sizeof(u16))
#define E2P_RX_FREQ_COMP_CH_2_GSM           E2P_RECORD( RxFreqCompCh2GSM                 , sizeof(u16))
#define E2P_RX_FREQ_COMP_CH_3_GSM           E2P_RECORD( RxFreqCompCh3GSM                 , sizeof(u16))
#define E2P_RX_FREQ_COMP_CH_4_GSM           E2P_RECORD( RxFreqCompCh4GSM                 , sizeof(u16))
#define E2P_RX_FREQ_COMP_CH_5_GSM           E2P_RECORD( RxFreqCompCh5GSM                 , sizeof(u16))
#define E2P_RX_FREQ_COMP_CH_6_GSM           E2P_RECORD( RxFreqCompCh6GSM                 , sizeof(u16))
#define E2P_RX_FREQ_COMP_CH_Center_GSM      E2P_RECORD( RxFreqCompChCenterGSM            , sizeof(u16))

#define E2P_RX_FREQ_COMP_CH_1_DCS           E2P_RECORD( RxFreqCompCh1DCS                 , sizeof(u16))
#define E2P_RX_FREQ_COMP_CH_2_DCS           E2P_RECORD( RxFreqCompCh2DCS                 , sizeof(u16))
#define E2P_RX_FREQ_COMP_CH_3_DCS           E2P_RECORD( RxFreqCompCh3DCS                 , sizeof(u16))
#define E2P_RX_FREQ_COMP_CH_4_DCS           E2P_RECORD( RxFreqCompCh4DCS                 , sizeof(u16))
#define E2P_RX_FREQ_COMP_CH_5_DCS           E2P_RECORD( RxFreqCompCh5DCS                 , sizeof(u16))
#define E2P_RX_FREQ_COMP_CH_6_DCS           E2P_RECORD( RxFreqCompCh6DCS                 , sizeof(u16))
#define E2P_RX_FREQ_COMP_CH_Center_DCS      E2P_RECORD( RxFreqCompChCenterDCS            , sizeof(u16))

#define E2P_RX_FREQ_COMP_CH_1_GSM850           E2P_RECORD( RxFreqCompCh1GSM850                 , sizeof(u16))
#define E2P_RX_FREQ_COMP_CH_2_GSM850           E2P_RECORD( RxFreqCompCh2GSM850                 , sizeof(u16))
#define E2P_RX_FREQ_COMP_CH_3_GSM850           E2P_RECORD( RxFreqCompCh3GSM850                 , sizeof(u16))
#define E2P_RX_FREQ_COMP_CH_4_GSM850           E2P_RECORD( RxFreqCompCh4GSM850                 , sizeof(u16))
#define E2P_RX_FREQ_COMP_CH_5_GSM850           E2P_RECORD( RxFreqCompCh5GSM850                 , sizeof(u16))
#define E2P_RX_FREQ_COMP_CH_6_GSM850           E2P_RECORD( RxFreqCompCh6GSM850                 , sizeof(u16))
#define E2P_RX_FREQ_COMP_CH_Center_GSM850      E2P_RECORD( RxFreqCompChCenterGSM850            , sizeof(u16))

#define E2P_RX_FREQ_COMP_CH_1_PCS           E2P_RECORD( RxFreqCompCh1PCS                 , sizeof(u16))
#define E2P_RX_FREQ_COMP_CH_2_PCS           E2P_RECORD( RxFreqCompCh2PCS                 , sizeof(u16))
#define E2P_RX_FREQ_COMP_CH_3_PCS           E2P_RECORD( RxFreqCompCh3PCS                 , sizeof(u16))
#define E2P_RX_FREQ_COMP_CH_4_PCS           E2P_RECORD( RxFreqCompCh4PCS                 , sizeof(u16))
#define E2P_RX_FREQ_COMP_CH_5_PCS           E2P_RECORD( RxFreqCompCh5PCS                 , sizeof(u16))
#define E2P_RX_FREQ_COMP_CH_6_PCS           E2P_RECORD( RxFreqCompCh6PCS                 , sizeof(u16))
#define E2P_RX_FREQ_COMP_CH_Center_PCS      E2P_RECORD( RxFreqCompChCenterPCS            , sizeof(u16))


#define E2P_RX_FREQ_COMP_BG_1_GSM           E2P_RECORD( RxFreqCompBG1GSM                 , sizeof(u8))
#define E2P_RX_FREQ_COMP_BG_2_GSM           E2P_RECORD( RxFreqCompBG2GSM                 , sizeof(u8))
#define E2P_RX_FREQ_COMP_BG_3_GSM           E2P_RECORD( RxFreqCompBG3GSM                 , sizeof(u8))
#define E2P_RX_FREQ_COMP_BG_4_GSM           E2P_RECORD( RxFreqCompBG4GSM                 , sizeof(u8))
#define E2P_RX_FREQ_COMP_BG_5_GSM           E2P_RECORD( RxFreqCompBG5GSM                 , sizeof(u8))
#define E2P_RX_FREQ_COMP_BG_6_GSM           E2P_RECORD( RxFreqCompBG6GSM                 , sizeof(u8))

#define E2P_RX_FREQ_COMP_BG_1_DCS           E2P_RECORD( RxFreqCompBG1DCS                 , sizeof(u8))
#define E2P_RX_FREQ_COMP_BG_2_DCS           E2P_RECORD( RxFreqCompBG2DCS                 , sizeof(u8))
#define E2P_RX_FREQ_COMP_BG_3_DCS           E2P_RECORD( RxFreqCompBG3DCS                 , sizeof(u8))
#define E2P_RX_FREQ_COMP_BG_4_DCS           E2P_RECORD( RxFreqCompBG4DCS                 , sizeof(u8))
#define E2P_RX_FREQ_COMP_BG_5_DCS           E2P_RECORD( RxFreqCompBG5DCS                 , sizeof(u8))
#define E2P_RX_FREQ_COMP_BG_6_DCS           E2P_RECORD( RxFreqCompBG6DCS                 , sizeof(u8))
//Tptal Size=14 x u16 + 12 x u8 = 40 Bytes

#define E2P_RX_FREQ_COMP_BG_1_GSM850           E2P_RECORD( RxFreqCompBG1GSM850                 , sizeof(u8))
#define E2P_RX_FREQ_COMP_BG_2_GSM850           E2P_RECORD( RxFreqCompBG2GSM850                 , sizeof(u8))
#define E2P_RX_FREQ_COMP_BG_3_GSM850           E2P_RECORD( RxFreqCompBG3GSM850                 , sizeof(u8))
#define E2P_RX_FREQ_COMP_BG_4_GSM850           E2P_RECORD( RxFreqCompBG4GSM850                 , sizeof(u8))
#define E2P_RX_FREQ_COMP_BG_5_GSM850           E2P_RECORD( RxFreqCompBG5GSM850                 , sizeof(u8))
#define E2P_RX_FREQ_COMP_BG_6_GSM850           E2P_RECORD( RxFreqCompBG6GSM850                 , sizeof(u8))

#define E2P_RX_FREQ_COMP_BG_1_PCS           E2P_RECORD( RxFreqCompBG1PCS                 , sizeof(u8))
#define E2P_RX_FREQ_COMP_BG_2_PCS           E2P_RECORD( RxFreqCompBG2PCS                 , sizeof(u8))
#define E2P_RX_FREQ_COMP_BG_3_PCS           E2P_RECORD( RxFreqCompBG3PCS                 , sizeof(u8))
#define E2P_RX_FREQ_COMP_BG_4_PCS           E2P_RECORD( RxFreqCompBG4PCS                 , sizeof(u8))
#define E2P_RX_FREQ_COMP_BG_5_PCS           E2P_RECORD( RxFreqCompBG5PCS                 , sizeof(u8))
#define E2P_RX_FREQ_COMP_BG_6_PCS           E2P_RECORD( RxFreqCompBG6PCS                 , sizeof(u8))

#define E2P_RX_FREQ_COMP_CH_1_GSM_HG           E2P_RECORD( RxFreqCompCh1GSM_HG                 , sizeof(u16))
#define E2P_RX_FREQ_COMP_CH_2_GSM_HG           E2P_RECORD( RxFreqCompCh2GSM_HG                 , sizeof(u16))
#define E2P_RX_FREQ_COMP_CH_3_GSM_HG           E2P_RECORD( RxFreqCompCh3GSM_HG                 , sizeof(u16))
#define E2P_RX_FREQ_COMP_CH_4_GSM_HG           E2P_RECORD( RxFreqCompCh4GSM_HG                 , sizeof(u16))
#define E2P_RX_FREQ_COMP_CH_5_GSM_HG           E2P_RECORD( RxFreqCompCh5GSM_HG                 , sizeof(u16))
#define E2P_RX_FREQ_COMP_CH_6_GSM_HG           E2P_RECORD( RxFreqCompCh6GSM_HG                 , sizeof(u16))
#define E2P_RX_FREQ_COMP_CH_Center_GSM_HG      E2P_RECORD( RxFreqCompChCenterGSM_HG            , sizeof(u16))

#define E2P_RX_FREQ_COMP_BG_1_GSM_HG           E2P_RECORD( RxFreqCompBG1GSM_HG                 , sizeof(u8))
#define E2P_RX_FREQ_COMP_BG_2_GSM_HG           E2P_RECORD( RxFreqCompBG2GSM_HG                 , sizeof(u8))
#define E2P_RX_FREQ_COMP_BG_3_GSM_HG           E2P_RECORD( RxFreqCompBG3GSM_HG                 , sizeof(u8))
#define E2P_RX_FREQ_COMP_BG_4_GSM_HG           E2P_RECORD( RxFreqCompBG4GSM_HG                 , sizeof(u8))
#define E2P_RX_FREQ_COMP_BG_5_GSM_HG           E2P_RECORD( RxFreqCompBG5GSM_HG                 , sizeof(u8))
#define E2P_RX_FREQ_COMP_BG_6_GSM_HG           E2P_RECORD( RxFreqCompBG6GSM_HG                 , sizeof(u8))

#define E2P_RX_FREQ_COMP_CH_1_DCS_HG           E2P_RECORD( RxFreqCompCh1DCS_HG                 , sizeof(u16))
#define E2P_RX_FREQ_COMP_CH_2_DCS_HG           E2P_RECORD( RxFreqCompCh2DCS_HG                 , sizeof(u16))
#define E2P_RX_FREQ_COMP_CH_3_DCS_HG           E2P_RECORD( RxFreqCompCh3DCS_HG                 , sizeof(u16))
#define E2P_RX_FREQ_COMP_CH_4_DCS_HG           E2P_RECORD( RxFreqCompCh4DCS_HG                 , sizeof(u16))
#define E2P_RX_FREQ_COMP_CH_5_DCS_HG           E2P_RECORD( RxFreqCompCh5DCS_HG                 , sizeof(u16))
#define E2P_RX_FREQ_COMP_CH_6_DCS_HG           E2P_RECORD( RxFreqCompCh6DCS_HG                 , sizeof(u16))
#define E2P_RX_FREQ_COMP_CH_Center_DCS_HG      E2P_RECORD( RxFreqCompChCenterDCS_HG            , sizeof(u16))

#define E2P_RX_FREQ_COMP_BG_1_DCS_HG           E2P_RECORD( RxFreqCompBG1DCS_HG                 , sizeof(u8))
#define E2P_RX_FREQ_COMP_BG_2_DCS_HG           E2P_RECORD( RxFreqCompBG2DCS_HG                 , sizeof(u8))
#define E2P_RX_FREQ_COMP_BG_3_DCS_HG           E2P_RECORD( RxFreqCompBG3DCS_HG                 , sizeof(u8))
#define E2P_RX_FREQ_COMP_BG_4_DCS_HG           E2P_RECORD( RxFreqCompBG4DCS_HG                 , sizeof(u8))
#define E2P_RX_FREQ_COMP_BG_5_DCS_HG           E2P_RECORD( RxFreqCompBG5DCS_HG                 , sizeof(u8))
#define E2P_RX_FREQ_COMP_BG_6_DCS_HG           E2P_RECORD( RxFreqCompBG6DCS_HG                 , sizeof(u8))

#define E2P_RX_FREQ_COMP_CH_1_PCS_HG           E2P_RECORD( RxFreqCompCh1PCS_HG                 , sizeof(u16))
#define E2P_RX_FREQ_COMP_CH_2_PCS_HG           E2P_RECORD( RxFreqCompCh2PCS_HG                 , sizeof(u16))
#define E2P_RX_FREQ_COMP_CH_3_PCS_HG           E2P_RECORD( RxFreqCompCh3PCS_HG                 , sizeof(u16))
#define E2P_RX_FREQ_COMP_CH_4_PCS_HG           E2P_RECORD( RxFreqCompCh4PCS_HG                 , sizeof(u16))
#define E2P_RX_FREQ_COMP_CH_5_PCS_HG           E2P_RECORD( RxFreqCompCh5PCS_HG                 , sizeof(u16))
#define E2P_RX_FREQ_COMP_CH_6_PCS_HG           E2P_RECORD( RxFreqCompCh6PCS_HG                 , sizeof(u16))
#define E2P_RX_FREQ_COMP_CH_Center_PCS_HG      E2P_RECORD( RxFreqCompChCenterPCS_HG            , sizeof(u16))

#define E2P_RX_FREQ_COMP_BG_1_PCS_HG           E2P_RECORD( RxFreqCompBG1PCS_HG                 , sizeof(u8))
#define E2P_RX_FREQ_COMP_BG_2_PCS_HG           E2P_RECORD( RxFreqCompBG2PCS_HG                 , sizeof(u8))
#define E2P_RX_FREQ_COMP_BG_3_PCS_HG           E2P_RECORD( RxFreqCompBG3PCS_HG                 , sizeof(u8))
#define E2P_RX_FREQ_COMP_BG_4_PCS_HG           E2P_RECORD( RxFreqCompBG4PCS_HG                 , sizeof(u8))
#define E2P_RX_FREQ_COMP_BG_5_PCS_HG           E2P_RECORD( RxFreqCompBG5PCS_HG                 , sizeof(u8))
#define E2P_RX_FREQ_COMP_BG_6_PCS_HG           E2P_RECORD( RxFreqCompBG6PCS_HG                 , sizeof(u8))

#define E2P_RX_FREQ_COMP_CH_1_GSM850_HG           E2P_RECORD( RxFreqCompCh1GSM850_HG                 , sizeof(u16))
#define E2P_RX_FREQ_COMP_CH_2_GSM850_HG           E2P_RECORD( RxFreqCompCh2GSM850_HG                 , sizeof(u16))
#define E2P_RX_FREQ_COMP_CH_3_GSM850_HG           E2P_RECORD( RxFreqCompCh3GSM850_HG                 , sizeof(u16))
#define E2P_RX_FREQ_COMP_CH_4_GSM850_HG           E2P_RECORD( RxFreqCompCh4GSM850_HG                 , sizeof(u16))
#define E2P_RX_FREQ_COMP_CH_5_GSM850_HG           E2P_RECORD( RxFreqCompCh5GSM850_HG                 , sizeof(u16))
#define E2P_RX_FREQ_COMP_CH_6_GSM850_HG           E2P_RECORD( RxFreqCompCh6GSM850_HG                 , sizeof(u16))
#define E2P_RX_FREQ_COMP_CH_Center_GSM850_HG      E2P_RECORD( RxFreqCompChCenterGSM850_HG            , sizeof(u16))

#define E2P_RX_FREQ_COMP_BG_1_GSM850_HG           E2P_RECORD( RxFreqCompBG1GSM850_HG                 , sizeof(u8))
#define E2P_RX_FREQ_COMP_BG_2_GSM850_HG           E2P_RECORD( RxFreqCompBG2GSM850_HG                 , sizeof(u8))
#define E2P_RX_FREQ_COMP_BG_3_GSM850_HG           E2P_RECORD( RxFreqCompBG3GSM850_HG                 , sizeof(u8))
#define E2P_RX_FREQ_COMP_BG_4_GSM850_HG           E2P_RECORD( RxFreqCompBG4GSM850_HG                 , sizeof(u8))
#define E2P_RX_FREQ_COMP_BG_5_GSM850_HG           E2P_RECORD( RxFreqCompBG5GSM850_HG                 , sizeof(u8))
#define E2P_RX_FREQ_COMP_BG_6_GSM850_HG           E2P_RECORD( RxFreqCompBG6GSM850_HG                 , sizeof(u8))

#endif//__RX_FREQ_COMP__
/* MST for __RX_FREQ_COMP__ }*/

#define E2P_TX_FREQ_COMP_ENABLE             E2P_RECORD( TxFreqCompEnable                 , sizeof(u8))
#define E2P_RX_FREQ_COMP_ENABLE             E2P_RECORD( RxFreqCompEnable                 , sizeof(u8))

#ifdef __E2P_INDEX_SYM__
#define E2P_LEGTESTGAINTAB_LB               E2P_RECORD(LegacyTestGainTable_LB, 94* sizeof(u16))
#define E2P_LEGTESTGAINTAB_HB               E2P_RECORD(LegacyTestGainTable_HB, 94* sizeof(u16))
#define E2P_LEGINITREGTAB                   E2P_RECORD(LegacyInitRegTable, 38* sizeof(u16))
#else
#define E2P_LEGTESTGAINTAB_LB               E2P_RECORD(LegacyTestGainTable_LB[0], 94* sizeof(u16))
#define E2P_LEGTESTGAINTAB_HB               E2P_RECORD(LegacyTestGainTable_HB[0], 94* sizeof(u16))
#define E2P_LEGINITREGTAB                   E2P_RECORD(LegacyInitRegTable[0], 38* sizeof(u16))
#endif

#ifdef __E2P_INDEX_SYM__
#define E2P_APUSINITREGTAB_EXT              E2P_RECORD(ApusInitRegTableExt, 9* sizeof(u16))
#else
#define E2P_APUSINITREGTAB_EXT              E2P_RECORD(ApusInitRegTableExt[0], 9* sizeof(u16))
#endif
#define E2P_APUS_ACL_RESULT                 E2P_RECORD(ApusACLResult_e, sizeof(u8))
#define E2P_BLOSSOM_ACL_RESULT              E2P_APUS_ACL_RESULT
#define E2P_APUS_CTRL_FLAG                  E2P_RECORD(ApusCtrlFlag_e, sizeof(u32))
#ifdef __E2P_INDEX_SYM__
#define E2P_APUS_AFC_SLOPE                  E2P_RECORD(AFCSLOPE, sizeof(s16))
#else
#define E2P_APUS_AFC_SLOPE                  E2P_RECORD(AFCSLOPE[0], sizeof(s16))
#endif

#define E2P_TBUO_DEFINE_EN                  E2P_RECORD(TbuoE2pDefEnable, sizeof(u8))
#define E2P_TBUO_PA_BS                      E2P_RECORD(TbuoPABandSel, sizeof(u8))
#define E2P_TBUO_PA_BS_HB                   E2P_RECORD(PABandSelHighBand, sizeof(u8))
#define E2P_TBUO_PA_VMODE                   E2P_RECORD(TbuoPAVmode, sizeof(u8))
#define E2P_TBUO_PA_VMODE_8PSK              E2P_RECORD(PAVmode8PSK, sizeof(u8))
#define E2P_TBUO_PA_ENABLE                  E2P_RECORD(TbuoPAEnable, sizeof(u8))
#define E2P_TBUO_TX_ENABLE                  E2P_RECORD(TbuoTxEnable, sizeof(u8))
#define E2P_TBUO_RX_ENABLE                  E2P_RECORD(TbuoRxEnable, sizeof(u8))
#define E2P_TBUO_DCS_GSM900_TRSWITCH        E2P_RECORD(TbuoDCSGSM900TR, sizeof(u32))
#define E2P_TBUO_PCS_GSM850_TRSWITCH        E2P_RECORD(TbuoPCSGSM850TR, sizeof(u32))
#define E2P_TBUO_SAVEDPIN_SET               E2P_RECORD(TbuoSavedPinSet, sizeof(u8))
#define E2P_TBUO_SI4209_SET                 E2P_RECORD(TbuoSi4209Set, sizeof(u8))

// Improve rf switch isolation via e2p control
#define E2P_RF_ISOLATION_PARAMETER                 E2P_RECORD(RfIsolationParameter, sizeof(u8))
#define E2P_RF_ISOLATION_SWITCH_ON_TIME            E2P_RECORD(RfIsolationSwitchOnTime, sizeof(u8))
#define E2P_RF_ISOLATION_SWITCH_OFF_TIME           E2P_RECORD(RfIsolationSwitchOffTime, sizeof(u8))

#ifdef __E2P_INDEX_SYM__
#define E2P_NMIN_Pedestal    E2P_RECORD( NminPedestal, 2*sizeof(u16))
#else
#define E2P_NMIN_Pedestal    E2P_RECORD( NminPedestal[0], 2*sizeof(u16))
#endif
#define E2P_ENABLE_PEDESTAL_CAL                 E2P_RECORD(EnablePedestalCal, sizeof(u8))

// Apus & Legacy improved AGC algorithm supporting
#ifdef __E2P_INDEX_SYM__
#define E2P_AFC_SLOPE                       E2P_RECORD( AFCSLOPE, 8*sizeof(s16) )
#else
#define E2P_AFC_SLOPE                       E2P_RECORD( AFCSLOPE[0], 8*sizeof(s16) )
#endif
#define E2P_BOARDGAIN_GSM900_H              E2P_RECORD( BoardGain_GSM900_H, sizeof(u8) )
#define E2P_BOARDGAIN_DCS1800_H             E2P_RECORD( BoardGain_DCS1800_H, sizeof(u8) )
#define E2P_BOARDGAIN_PCS1900_H             E2P_RECORD( BoardGain_PCS1900_H, sizeof(u8) )
#define E2P_BOARDGAIN_GSM850_H              E2P_RECORD( BoardGain_GSM850_H, sizeof(u8) )


#define E2P_RXPATH_DCOCI_GSM900             E2P_RECORD( RxpathDcocIGSM900 , sizeof(u8) )
#define E2P_RXPATH_DCOCQ_GSM900             E2P_RECORD( RxpathDcocQGSM900 , sizeof(u8) )
#define E2P_RXPATH_LNA_GSM900               E2P_RECORD( RxpathLnaGSM900   , sizeof(u8) )
#define E2P_RXPATH_IP2I_GSM900              E2P_RECORD( RxpathIp2IGSM900   , sizeof(u8) )
#define E2P_RXPATH_IP2Q_GSM900              E2P_RECORD( RxpathIp2QGSM900   , sizeof(u8) )
#define E2P_RXPATH_IQMCALPHA_GSM900        E2P_RECORD( RxpathIqmcAlphaGSM900 , sizeof(u16) )
#define E2P_RXPATH_IQMCBETA_GSM900         E2P_RECORD( RxpathIqmcBetaGSM900 , sizeof(u16) )

#define E2P_RXPATH_DCOCI_DCS                E2P_RECORD( RxpathDcocIDCS , sizeof(u8) )
#define E2P_RXPATH_DCOCQ_DCS                E2P_RECORD( RxpathDcocQDCS , sizeof(u8) )
#define E2P_RXPATH_LNA_DCS                  E2P_RECORD( RxpathLnaDCS   , sizeof(u8) )
#define E2P_RXPATH_IP2I_DCS                 E2P_RECORD( RxpathIp2IDCS   , sizeof(u8) )
#define E2P_RXPATH_IP2Q_DCS                 E2P_RECORD( RxpathIp2QDCS   , sizeof(u8) )
#define E2P_RXPATH_IQMCALPHA_DCS           E2P_RECORD( RxpathIqmcAlphaDCS , sizeof(u16) )
#define E2P_RXPATH_IQMCBETA_DCS            E2P_RECORD( RxpathIqmcBetaDCS , sizeof(u16) )

#define E2P_RXPATH_DCOCI_PCS                E2P_RECORD( RxpathDcocIPCS , sizeof(u8) )
#define E2P_RXPATH_DCOCQ_PCS                E2P_RECORD( RxpathDcocQPCS , sizeof(u8) )
#define E2P_RXPATH_LNA_PCS                  E2P_RECORD( RxpathLnaPCS   , sizeof(u8) )
#define E2P_RXPATH_IP2I_PCS                 E2P_RECORD( RxpathIp2IPCS   , sizeof(u8) )
#define E2P_RXPATH_IP2Q_PCS                 E2P_RECORD( RxpathIp2QPCS   , sizeof(u8) )
#define E2P_RXPATH_IQMCALPHA_PCS           E2P_RECORD( RxpathIqmcAlphaPCS , sizeof(u16) )
#define E2P_RXPATH_IQMCBETA_PCS            E2P_RECORD( RxpathIqmcBetaPCS , sizeof(u16) )

#define E2P_RXPATH_DCOCI_GSM850             E2P_RECORD( RxpathDcocIGSM850 , sizeof(u8) )
#define E2P_RXPATH_DCOCQ_GSM850             E2P_RECORD( RxpathDcocQGSM850 , sizeof(u8) )
#define E2P_RXPATH_LNA_GSM850               E2P_RECORD( RxpathLnaGSM850   , sizeof(u8) )
#define E2P_RXPATH_IP2I_GSM850              E2P_RECORD( RxpathIp2IGSM850   , sizeof(u8) )
#define E2P_RXPATH_IP2Q_GSM850              E2P_RECORD( RxpathIp2QGSM850   , sizeof(u8) )
#define E2P_RXPATH_IQMCALPHA_GSM850        E2P_RECORD( RxpathIqmcAlphaGSM850 , sizeof(u16) )
#define E2P_RXPATH_IQMCBETA_GSM850         E2P_RECORD( RxpathIqmcBetaGSM850 , sizeof(u16) )

#define E2P_RXPATH_DCOCDELTAI_LB            E2P_RECORD( RxpathDcocDeltaILB   , sizeof(u16) )
#define E2P_RXPATH_DCOCDELTAQ_LB            E2P_RECORD( RxpathDcocDeltaQLB   , sizeof(u16) )
#define E2P_RXPATH_DCOCDELTAI_HB            E2P_RECORD( RxpathDcocDeltaIHB   , sizeof(u16) )
#define E2P_RXPATH_DCOCDELTAQ_HB            E2P_RECORD( RxpathDcocDeltaQHB   , sizeof(u16) )

#ifdef __E2P_INDEX_SYM__
/*!
  \def E2P_MIC_GAINS
  Category: Audio\n
  Description: Initial MIC gain\n
  Default value: <MicGains>
*/
#define E2P_MIC_GAINS                       E2P_RECORD( MicGains                         , 4 * sizeof(u8))
/*!
  \def E2P_INCENSE_DL_FIR_HANDSFREE
  Category: Audio\n
  Description: For audio calibration purpose\n
  Default value: <IncenseDLFIRHandsfree>
*/
#define E2P_INCENSE_DL_FIR_HANDSFREE        E2P_RECORD( IncenseDLFIRHandsfree         , AUDIO_INCENSE_DL_FIR_LENTH * sizeof(u16))
/*!
  \def E2P_INCENSE_DL_FIR_HANDSET
  Category: Audio\n
  Description: For audio calibration purpose\n
  Default value: <IncenseDLFIRHandset>
*/
#define E2P_INCENSE_DL_FIR_HANDSET          E2P_RECORD( IncenseDLFIRHandset           , AUDIO_INCENSE_DL_FIR_LENTH * sizeof(u16))
/*!
  \def E2P_INCENSE_DL_FIR_HEADSET
  Category: Audio\n
  Description: For audio calibration purpose\n
  Default value: <IncenseDLFIRHeadset>
*/
#define E2P_INCENSE_DL_FIR_HEADSET          E2P_RECORD( IncenseDLFIRHeadset           , AUDIO_INCENSE_DL_FIR_LENTH * sizeof(u16))
/*!
  \def E2P_INCENSE_UL_FIR_HANDSFREE
  Category: Audio\n
  Description: For audio calibration purpose\n
  Default value: <IncenseULFIRHandsfree>
*/
#define E2P_INCENSE_UL_FIR_HANDSFREE        E2P_RECORD( IncenseULFIRHandsfree         , AUDIO_INCENSE_UL_FIR_LENTH * sizeof(u16))
/*!
  \def E2P_INCENSE_UL_FIR_HANDSET
  Category: Audio\n
  Description: For audio calibration purpose\n
  Default value: <IncenseULFIRHandset>
*/
#define E2P_INCENSE_UL_FIR_HANDSET          E2P_RECORD( IncenseULFIRHandset           , AUDIO_INCENSE_UL_FIR_LENTH * sizeof(u16))
/*!
  \def E2P_INCENSE_UL_FIR_HEADSET
  Category: Audio\n
  Description: For audio calibration purpose\n
  Default value: <IncenseULFIRHeadset>
*/
#define E2P_INCENSE_UL_FIR_HEADSET          E2P_RECORD( IncenseULFIRHeadset           , AUDIO_INCENSE_UL_FIR_LENTH * sizeof(u16))
/*!
  \def E2P_AUDIO_DSP_UL_FIR_COEFF_HANDSET
  Category: Audio\n
  Description: For audio calibration purpose\n
  Default value: <AudioDspUlFirCoeffHandset>
*/
#define E2P_AUDIO_DSP_UL_FIR_COEFF_HANDSET   E2P_RECORD( AudioDspUlFirCoeffHandset     , AUDIO_DSP_UL_FIR_LENGTH * sizeof(u16))
/*!
  \def E2P_AUDIO_DSP_UL_FIR_COEFF_HANDSET
  Category: Audio\n
  Description: For audio calibration purpose\n
  Default value: <AudioDspUlFirCoeffHandsfree>
*/
#define E2P_AUDIO_DSP_UL_FIR_COEFF_HANDSFREE E2P_RECORD( AudioDspUlFirCoeffHandsfree   , AUDIO_DSP_UL_FIR_LENGTH * sizeof(u16))
/*!
  \def E2P_AUDIO_DSP_UL_FIR_COEFF_HANDSET
  Category: Audio\n
  Description: For audio calibration purpose\n
  Default value: <AudioDspUlFirCoeffHeadset>
*/
#define E2P_AUDIO_DSP_UL_FIR_COEFF_HEADSET   E2P_RECORD( AudioDspUlFirCoeffHeadset     , AUDIO_DSP_UL_FIR_LENGTH * sizeof(u16))
/*!
  \def E2P_AUDIO_DSP_UL_FIR_COEFF_HANDSET
  Category: Audio\n
  Description: For audio calibration purpose\n
  Default value: <AudioDspUlFirCoeffBt>
*/
#define E2P_AUDIO_DSP_UL_FIR_COEFF_BT        E2P_RECORD( AudioDspUlFirCoeffBt          , AUDIO_DSP_UL_FIR_LENGTH * sizeof(u16))
#else
/*!
  \def E2P_MIC_GAINS
  Category: Audio\n
  Description: Initial MIC gain\n
  Default value: <MicGains>
*/
#define E2P_MIC_GAINS                       E2P_RECORD( MicGains[0]                         , 4 * sizeof(u8))
/*!
  \def E2P_INCENSE_DL_FIR_HANDSFREE
  Category: Audio\n
  Description: For audio calibration purpose\n
  Default value: <IncenseDLFIRHandsfree>
*/
#define E2P_INCENSE_DL_FIR_HANDSFREE        E2P_RECORD( IncenseDLFIRHandsfree[0]         , AUDIO_INCENSE_DL_FIR_LENTH * sizeof(u16))
/*!
  \def E2P_INCENSE_DL_FIR_HANDSET
  Category: Audio\n
  Description: For audio calibration purpose\n
  Default value: <IncenseDLFIRHandset>
*/
#define E2P_INCENSE_DL_FIR_HANDSET          E2P_RECORD( IncenseDLFIRHandset[0]           , AUDIO_INCENSE_DL_FIR_LENTH * sizeof(u16))
/*!
  \def E2P_INCENSE_DL_FIR_HEADSET
  Category: Audio\n
  Description: For audio calibration purpose\n
  Default value: <IncenseDLFIRHeadset>
*/
#define E2P_INCENSE_DL_FIR_HEADSET          E2P_RECORD( IncenseDLFIRHeadset[0]           , AUDIO_INCENSE_DL_FIR_LENTH * sizeof(u16))
/*!
  \def E2P_INCENSE_UL_FIR_HANDSFREE
  Category: Audio\n
  Description: For audio calibration purpose\n
  Default value: <IncenseULFIRHandsfree>
*/
#define E2P_INCENSE_UL_FIR_HANDSFREE        E2P_RECORD( IncenseULFIRHandsfree[0]         , AUDIO_INCENSE_UL_FIR_LENTH * sizeof(u16))
/*!
  \def E2P_INCENSE_UL_FIR_HANDSET
  Category: Audio\n
  Description: For audio calibration purpose\n
  Default value: <IncenseULFIRHandset>
*/
#define E2P_INCENSE_UL_FIR_HANDSET          E2P_RECORD( IncenseULFIRHandset[0]           , AUDIO_INCENSE_UL_FIR_LENTH * sizeof(u16))
/*!
  \def E2P_INCENSE_UL_FIR_HEADSET
  Category: Audio\n
  Description: For audio calibration purpose\n
  Default value: <IncenseULFIRHeadset>
*/
#define E2P_INCENSE_UL_FIR_HEADSET          E2P_RECORD( IncenseULFIRHeadset[0]           , AUDIO_INCENSE_UL_FIR_LENTH * sizeof(u16))
/*!
  \def E2P_AUDIO_DSP_UL_FIR_COEFF_HANDSET
  Category: Audio\n
  Description: For audio calibration purpose\n
  Default value: <AudioDspUlFirCoeffHandset>
*/
#define E2P_AUDIO_DSP_UL_FIR_COEFF_HANDSET   E2P_RECORD( AudioDspUlFirCoeffHandset[0]     , AUDIO_DSP_UL_FIR_LENGTH * sizeof(u16))
/*!
  \def E2P_AUDIO_DSP_UL_FIR_COEFF_HANDSET
  Category: Audio\n
  Description: For audio calibration purpose\n
  Default value: <AudioDspUlFirCoeffHandsfree>
*/
#define E2P_AUDIO_DSP_UL_FIR_COEFF_HANDSFREE E2P_RECORD( AudioDspUlFirCoeffHandsfree[0]   , AUDIO_DSP_UL_FIR_LENGTH * sizeof(u16))
/*!
  \def E2P_AUDIO_DSP_UL_FIR_COEFF_HANDSET
  Category: Audio\n
  Description: For audio calibration purpose\n
  Default value: <AudioDspUlFirCoeffHeadset>
*/
#define E2P_AUDIO_DSP_UL_FIR_COEFF_HEADSET   E2P_RECORD( AudioDspUlFirCoeffHeadset[0]     , AUDIO_DSP_UL_FIR_LENGTH * sizeof(u16))
/*!
  \def E2P_AUDIO_DSP_UL_FIR_COEFF_HANDSET
  Category: Audio\n
  Description: For audio calibration purpose\n
  Default value: <AudioDspUlFirCoeffBt>
*/
#define E2P_AUDIO_DSP_UL_FIR_COEFF_BT        E2P_RECORD( AudioDspUlFirCoeffBt[0]          , AUDIO_DSP_UL_FIR_LENGTH * sizeof(u16))
#endif
/*!
  \def E2P_AUDIO_DSP_UL_FIR_GAIN_HANDSET
  Category: Audio\n
  Description: For audio calibration purpose\n
  Default value: <AudioDspUlFirGainHandset>
*/
#define E2P_AUDIO_DSP_UL_FIR_GAIN_HANDSET    E2P_RECORD( AudioDspUlFirGainHandset         , sizeof(u16))
/*!
  \def E2P_AUDIO_DSP_UL_FIR_GAIN_HANDSFREE
  Category: Audio\n
  Description: For audio calibration purpose\n
  Default value: <AudioDspUlFirGainHandsfree>
*/
#define E2P_AUDIO_DSP_UL_FIR_GAIN_HANDSFREE  E2P_RECORD( AudioDspUlFirGainHandsfree       , sizeof(u16))
/*!
  \def E2P_AUDIO_DSP_UL_FIR_GAIN_HEADSET
  Category: Audio\n
  Description: For audio calibration purpose\n
  Default value: <AudioDspUlFirGainHeadset>
*/
#define E2P_AUDIO_DSP_UL_FIR_GAIN_HEADSET    E2P_RECORD( AudioDspUlFirGainHeadset         , sizeof(u16))
/*!
  \def E2P_AUDIO_DSP_UL_FIR_GAIN_BT
  Category: Audio\n
  Description: For audio calibration purpose\n
  Default value: <AudioDspUlFirGainBt>
*/
#define E2P_AUDIO_DSP_UL_FIR_GAIN_BT         E2P_RECORD( AudioDspUlFirGainBt              , sizeof(u16))
/*!
  \def E2P_AUDIO_AGC_DRC_HANDSFREE
  Category: Audio\n
  Description: Speaker phone profile Mstar AGC and DRC parameters setting\n
  Default value: <AudioMStarAgcDrc>
*/
#define E2P_AUDIO_MSTAR_AGC_DRC             E2P_RECORD( AudioMStarAgcDrc          , sizeof(E2PMstarAgcDrcParams))
/*!
  \def E2P_AUDIO_CTA_CT_MODE
  Category: Audio\n
  Description: CTA CT Mode parameters setting\n
  Default value: <AudioMStarAgcDrc>
*/
#define E2P_AUDIO_MSTAR_CTA_CT_MODE         E2P_RECORD( AudioMstarCTACTMode          , sizeof(E2PMstarCtaCtModeParams))
/*!
  \def E2P_AUDIO_COMFORT_NOISE_GAIN
  Category: Audio\n
  Description: Comfort noise gain setting\n
  Default value: <AudioComfortNoiseGain>
*/
#ifdef __E2P_INDEX_SYM__
#define E2P_AUDIO_COMFORT_NOISE_GAIN         E2P_RECORD( AudioComfortNoiseGain          , 4 * sizeof(u8))
#else
#define E2P_AUDIO_COMFORT_NOISE_GAIN         E2P_RECORD( AudioComfortNoiseGain[0]          , 4 * sizeof(u8))
#endif
/*!
  \def E2P_INCENSE_GSM_CTA_PATH
  Category: Audio\n
  Description: For audio calibration purpose\n
  Default value: <IncenseGsmCtaPath>
*/
#define E2P_INCENSE_GSM_CTA_PATH            E2P_RECORD( IncenseGsmCtaPath                , sizeof(u16))
/*!
  \def E2P_AUDIO_CALI_CTRL
  Category: Audio\n
  Description: For audio calibration purpose\n
  Default value: <AudioCaliCtrl>
*/
#define E2P_AUDIO_CALI_CTRL                 E2P_RECORD( AudioCaliCtrl                    , sizeof(u32))
/*!
  \def E2P_AUDIO_UL_HANDSET_ECHOCONF_CFG_DATA
  Category: Audio\n
  Description: For audio calibration purpose for VT HANDSET\n
  Default value: <AudioCaliCtrl>
*/
#define E2P_AUDIO_UL_HANDSET_ECHOCONF_CFG_DATA      E2P_RECORD( AudioMStarULHandsetEchoConf                    , sizeof(E2PMstarEchoConfCfgDataParams))
/*!
  \def E2P_AUDIO_HANDSET_NOISESUPPRESSOR_CFG_DATA
  Category: Audio\n
  Description: For audio calibration purpose for VT HANDSET\n
  Default value: <AudioCaliCtrl>
*/
#define E2P_AUDIO_UL_HANDSET_NOISESUPPRESSOR_CFG_DATA  E2P_RECORD( AudioMStarULHandsetNS                    , sizeof(E2PMstarNSCfgDataParams))
    /*!
      \def E2P_AUDIO_HANDSET_DRC_CFG_DATA
      Category: Audio\n
      Description: For audio calibration purpose for VT HANDSET\n
      Default value: <AudioCaliCtrl>
    */
#define E2P_AUDIO_UL_HANDSET_DRC_CFG_DATA              E2P_RECORD( AudioMStarULHandsetDrc                    , sizeof(E2PMstarDrcCfgDataParams))
    /*!
      \def E2P_AUDIO_HANDSET_FILTCOEFFS_CFG_DATA
      Category: Audio\n
      Description: For audio calibration purpose for VT HANDSET\n
      Default value: <AudioCaliCtrl>
    */
#define E2P_AUDIO_UL_HANDSET_FILTCOEFFS_CFG_DATA       E2P_RECORD( AudioMStarULHandsetFiltCoeffs                    , sizeof(E2PMstarFiltCoeffsCfgDataParams))

  /*!
    \def E2P_AUDIO_UL_HEADSET_ECHOCONF_CFG_DATA
    Category: Audio\n
    Description: For audio calibration purpose for VT HEADSET\n
    Default value: <AudioCaliCtrl>
  */
#define E2P_AUDIO_UL_HEADSET_ECHOCONF_CFG_DATA      E2P_RECORD( AudioMStarULHeadsetEchoConf                    , sizeof(E2PMstarEchoConfCfgDataParams))
  /*!
    \def E2P_AUDIO_HEADSET_NOISESUPPRESSOR_CFG_DATA
    Category: Audio\n
    Description: For audio calibration purpose for VT HEADSET\n
    Default value: <AudioCaliCtrl>
  */
#define E2P_AUDIO_UL_HEADSET_NOISESUPPRESSOR_CFG_DATA  E2P_RECORD( AudioMStarULHeadsetNS                    , sizeof(E2PMstarNSCfgDataParams))
      /*!
        \def E2P_AUDIO_HEADSET_DRC_CFG_DATA
        Category: Audio\n
        Description: For audio calibration purpose for VT HEADSET\n
        Default value: <AudioCaliCtrl>
      */
#define E2P_AUDIO_UL_HEADSET_DRC_CFG_DATA              E2P_RECORD( AudioMStarULHeadsetDrc                    , sizeof(E2PMstarDrcCfgDataParams))
      /*!
        \def E2P_AUDIO_HEADSET_FILTCOEFFS_CFG_DATA
        Category: Audio\n
        Description: For audio calibration purpose for VT HEADSET\n
        Default value: <AudioCaliCtrl>
      */
#define E2P_AUDIO_UL_HEADSET_FILTCOEFFS_CFG_DATA       E2P_RECORD( AudioMStarULHeadsetFiltCoeffs                    , sizeof(E2PMstarFiltCoeffsCfgDataParams))

  /*!
    \def E2P_AUDIO_UL_HANDFREE_ECHOCONF_CFG_DATA
    Category: Audio\n
    Description: For audio calibration purpose for VT HANDFREE\n
    Default value: <AudioCaliCtrl>
  */
#define E2P_AUDIO_UL_HANDFREE_ECHOCONF_CFG_DATA      E2P_RECORD( AudioMStarULHandFreeEchoConf                    , sizeof(E2PMstarEchoConfCfgDataParams))
  /*!
    \def E2P_AUDIO_HANDFREE_NOISESUPPRESSOR_CFG_DATA
    Category: Audio\n
    Description: For audio calibration purpose for VT HANDFREE\n
    Default value: <AudioCaliCtrl>
  */
#define E2P_AUDIO_UL_HANDFREE_NOISESUPPRESSOR_CFG_DATA  E2P_RECORD( AudioMStarULHandFreeNS                    , sizeof(E2PMstarNSCfgDataParams))
      /*!
        \def E2P_AUDIO_HANDFREE_DRC_CFG_DATA
        Category: Audio\n
        Description: For audio calibration purpose for VT HANDFREE\n
        Default value: <AudioCaliCtrl>
      */
#define E2P_AUDIO_UL_HANDFREE_DRC_CFG_DATA              E2P_RECORD( AudioMStarULHandFreeDrc                    , sizeof(E2PMstarDrcCfgDataParams))
      /*!
        \def E2P_AUDIO_HANDFREE_FILTCOEFFS_CFG_DATA
        Category: Audio\n
        Description: For audio calibration purpose for VT HANDFREE\n
        Default value: <AudioCaliCtrl>
      */
#define E2P_AUDIO_UL_HANDFREE_FILTCOEFFS_CFG_DATA       E2P_RECORD( AudioMStarULHandFreeFiltCoeffs                    , sizeof(E2PMstarFiltCoeffsCfgDataParams))

  /*!
    \def E2P_AUDIO_UL_BLUETOOTH_ECHOCONF_CFG_DATA
    Category: Audio\n
    Description: For audio calibration purpose for VT BLUETOOTH\n
    Default value: <AudioCaliCtrl>
  */
#define E2P_AUDIO_UL_BLUETOOTH_ECHOCONF_CFG_DATA      E2P_RECORD( AudioMStarULBluetoothEchoConf                    , sizeof(E2PMstarEchoConfCfgDataParams))
  /*!
    \def E2P_AUDIO_HF_NOISESUPPRESSOR_CFG_DATA
    Category: Audio\n
    Description: For audio calibration purpose for VT BLUETOOTH\n
    Default value: <AudioCaliCtrl>
  */
#define E2P_AUDIO_UL_BLUETOOTH_NOISESUPPRESSOR_CFG_DATA  E2P_RECORD( AudioMStarULBluetoothNS                    , sizeof(E2PMstarNSCfgDataParams))
      /*!
        \def E2P_AUDIO_BLUETOOTH_DRC_CFG_DATA
        Category: Audio\n
        Description: For audio calibration purpose for VT BLUETOOTH\n
        Default value: <AudioCaliCtrl>
      */
#define E2P_AUDIO_UL_BLUETOOTH_DRC_CFG_DATA              E2P_RECORD( AudioMStarULBluetoothDrc                    , sizeof(E2PMstarDrcCfgDataParams))
      /*!
        \def E2P_AUDIO_BLUETOOTH_FILTCOEFFS_CFG_DATA
        Category: Audio\n
        Description: For audio calibration purpose for VT BLUETOOTH\n
        Default value: <AudioCaliCtrl>
      */
#define E2P_AUDIO_UL_BLUETOOTH_FILTCOEFFS_CFG_DATA       E2P_RECORD( AudioMStarULBluetoothFiltCoeffs                    , sizeof(E2PMstarFiltCoeffsCfgDataParams))

  /*!
    \def E2P_AUDIO_DL_HANDSET_ECHOCONF_CFG_DATA
    Category: Audio\n
    Description: For audio calibration purpose for VT HANDSET\n
    Default value: <AudioCaliCtrl>
  */
#define E2P_AUDIO_DL_HANDSET_ECHOCONF_CFG_DATA      E2P_RECORD( AudioMStarDLHandsetEchoConf                    , sizeof(E2PMstarEchoConfCfgDataParams))
  /*!
    \def E2P_AUDIO_HANDSET_NOISESUPPRESSOR_CFG_DATA
    Category: Audio\n
    Description: For audio calibration purpose for VT HANDSET\n
    Default value: <AudioCaliCtrl>
  */
#define E2P_AUDIO_DL_HANDSET_NOISESUPPRESSOR_CFG_DATA  E2P_RECORD( AudioMStarDLHandsetNS                    , sizeof(E2PMstarNSCfgDataParams))
  /*!
    \def E2P_AUDIO_HANDSET_DRC_CFG_DATA
    Category: Audio\n
    Description: For audio calibration purpose for VT HANDSET\n
    Default value: <AudioCaliCtrl>
  */
#define E2P_AUDIO_DL_HANDSET_DRC_CFG_DATA              E2P_RECORD( AudioMStarDLHandsetDrc                    , sizeof(E2PMstarDrcCfgDataParams))
  /*!
    \def E2P_AUDIO_HANDSET_FILTCOEFFS_CFG_DATA
    Category: Audio\n
    Description: For audio calibration purpose for VT HANDSET\n
    Default value: <AudioCaliCtrl>
  */
#define E2P_AUDIO_DL_HANDSET_FILTCOEFFS_CFG_DATA       E2P_RECORD( AudioMStarDLHandsetFiltCoeffs                    , sizeof(E2PMstarFiltCoeffsCfgDataParams))
    /*!
      \def E2P_AUDIO_DL_HEADSET_ECHOCONF_CFG_DATA
      Category: Audio\n
      Description: For audio calibration purpose for VT HEADSET\n
      Default value: <AudioCaliCtrl>
    */
#define E2P_AUDIO_DL_HEADSET_ECHOCONF_CFG_DATA      E2P_RECORD( AudioMStarDLHeadsetEchoConf                    , sizeof(E2PMstarEchoConfCfgDataParams))
    /*!
      \def E2P_AUDIO_HEADSET_NOISESUPPRESSOR_CFG_DATA
      Category: Audio\n
      Description: For audio calibration purpose for VT HEADSET\n
      Default value: <AudioCaliCtrl>
    */
#define E2P_AUDIO_DL_HEADSET_NOISESUPPRESSOR_CFG_DATA  E2P_RECORD( AudioMStarDLHeadsetNS                    , sizeof(E2PMstarNSCfgDataParams))
    /*!
      \def E2P_AUDIO_HEADSET_DRC_CFG_DATA
      Category: Audio\n
      Description: For audio calibration purpose for VT HEADSET\n
      Default value: <AudioCaliCtrl>
    */
#define E2P_AUDIO_DL_HEADSET_DRC_CFG_DATA              E2P_RECORD( AudioMStarDLHeadsetDrc                    , sizeof(E2PMstarDrcCfgDataParams))
    /*!
      \def E2P_AUDIO_HEADSET_FILTCOEFFS_CFG_DATA
      Category: Audio\n
      Description: For audio calibration purpose for VT HEADSET\n
      Default value: <AudioCaliCtrl>
    */
#define E2P_AUDIO_DL_HEADSET_FILTCOEFFS_CFG_DATA       E2P_RECORD( AudioMStarDLHeadsetFiltCoeffs                    , sizeof(E2PMstarFiltCoeffsCfgDataParams))
    /*!
      \def E2P_AUDIO_DL_HANDFREE_ECHOCONF_CFG_DATA
      Category: Audio\n
      Description: For audio calibration purpose for VT HANDFREE\n
      Default value: <AudioCaliCtrl>
    */
#define E2P_AUDIO_DL_HANDFREE_ECHOCONF_CFG_DATA      E2P_RECORD( AudioMStarDLHandFreeEchoConf                    , sizeof(E2PMstarEchoConfCfgDataParams))
    /*!
      \def E2P_AUDIO_HANDFREE_NOISESUPPRESSOR_CFG_DATA
      Category: Audio\n
      Description: For audio calibration purpose for VT HANDFREE\n
      Default value: <AudioCaliCtrl>
    */
#define E2P_AUDIO_DL_HANDFREE_NOISESUPPRESSOR_CFG_DATA  E2P_RECORD( AudioMStarDLHandFreeNS                    , sizeof(E2PMstarNSCfgDataParams))
    /*!
      \def E2P_AUDIO_HANDFREE_DRC_CFG_DATA
      Category: Audio\n
      Description: For audio calibration purpose for VT HANDFREE\n
      Default value: <AudioCaliCtrl>
    */
#define E2P_AUDIO_DL_HANDFREE_DRC_CFG_DATA              E2P_RECORD( AudioMStarDLHandFreeDrc                    , sizeof(E2PMstarDrcCfgDataParams))
    /*!
      \def E2P_AUDIO_HANDFREE_FILTCOEFFS_CFG_DATA
      Category: Audio\n
      Description: For audio calibration purpose for VT HANDFREE\n
      Default value: <AudioCaliCtrl>
    */
#define E2P_AUDIO_DL_HANDFREE_FILTCOEFFS_CFG_DATA       E2P_RECORD( AudioMStarDLHandFreeFiltCoeffs                    , sizeof(E2PMstarFiltCoeffsCfgDataParams))
    /*!
      \def E2P_AUDIO_DL_BLUETOOTH_ECHOCONF_CFG_DATA
      Category: Audio\n
      Description: For audio calibration purpose for VT BLUETOOTH\n
      Default value: <AudioCaliCtrl>
    */
#define E2P_AUDIO_DL_BLUETOOTH_ECHOCONF_CFG_DATA      E2P_RECORD( AudioMStarDLBluetoothEchoConf                    , sizeof(E2PMstarEchoConfCfgDataParams))
    /*!
      \def E2P_AUDIO_BLUETOOTH_NOISESUPPRESSOR_CFG_DATA
      Category: Audio\n
      Description: For audio calibration purpose for VT BLUETOOTH\n
      Default value: <AudioCaliCtrl>
    */
#define E2P_AUDIO_DL_BLUETOOTH_NOISESUPPRESSOR_CFG_DATA  E2P_RECORD( AudioMStarDLBluetoothNS                    , sizeof(E2PMstarNSCfgDataParams))
    /*!
      \def E2P_AUDIO_BLUETOOTH_DRC_CFG_DATA
      Category: Audio\n
      Description: For audio calibration purpose for VT BLUETOOTH\n
      Default value: <AudioCaliCtrl>
    */
#define E2P_AUDIO_DL_BLUETOOTH_DRC_CFG_DATA              E2P_RECORD( AudioMStarDLBluetoothDrc                    , sizeof(E2PMstarDrcCfgDataParams))
    /*!
      \def E2P_AUDIO_BLUETOOTH_FILTCOEFFS_CFG_DATA
      Category: Audio\n
      Description: For audio calibration purpose for VT BLUETOOTH\n
      Default value: <AudioCaliCtrl>
    */
#define E2P_AUDIO_DL_BLUETOOTH_FILTCOEFFS_CFG_DATA       E2P_RECORD( AudioMStarDLBluetoothFiltCoeffs                    , sizeof(E2PMstarFiltCoeffsCfgDataParams))
  // yanni add start
#ifdef __E2P_INDEX_SYM__
/*!
  \def E2P_BT_ADDR
  Category: BB\n
  Description: BT address\n
  Default value: <BtAddr>
*/
#define E2P_BT_ADDR                         E2P_RECORD( BtAddr                      , 8 * sizeof(u8))
/*!
  \def E2P_SN
  Category: BB\n
  Description: serial number\n
  Default value: <Sn>
*/
#define E2P_SN                                    E2P_RECORD( Sn                      ,20* sizeof(u8))
#else
/*!
  \def E2P_BT_ADDR
  Category: BB\n
  Description: BT address\n
  Default value: <BtAddr>
*/
#define E2P_BT_ADDR                         E2P_RECORD( BtAddr[0]                      , 8 * sizeof(u8))
/*!
  \def E2P_SN
  Category: BB\n
  Description: serial number\n
  Default value: <Sn>
*/
#define E2P_SN                                    E2P_RECORD( Sn[0]                      ,20* sizeof(u8))
  // yanni add end
#endif

/*!
  \def E2P_TRCNUMBEROFSECTORS
  Category: SYS\n
  Description: TrcNumberOfSectors\n
  Default value: <TrcNumberOfSectors>
*/
#define E2P_TRCNUMBEROF32K E2P_RECORD( TrcNumberOf32k, sizeof(u8))
/*!
  \def E2P_TRCFORMATCHKSUM
  Category: SYS\n
  Description: TrcFormatChkSum\n
  Default value: <TrcFormatChkSum>
*/
#define E2P_TRCFORMATCHKSUM    E2P_RECORD( TrcFormatChkSum, sizeof(u8))

/*!
  \def E2P_AUDIO_VM_MIC_GAIN
  Category: Audio\n
  Description: Voice memo microphone gain setting\n
  Default value: <AudioVMMicGain>
*/
#define E2P_AUDIO_VM_MIC_GAIN               E2P_RECORD( AudioVMMicGain                   , sizeof(s8))
/*!
  \def E2P_AUDIO_CAM_MIC_GAIN
  Category: Audio\n
  Description: Camcoder recroding microphone gain setting\n
  Default value: <AudioCamMicGain>
*/
#define E2P_AUDIO_CAM_MIC_GAIN              E2P_RECORD( AudioCamMicGain                  , sizeof(s8))
/*!
  \def E2P_AUDIO_PCM_REC_MIC_GAIN
  Category: Audio\n
  Description: PCM recording microphone gain setting\n
  Default value: <AudioVMMicGain>
*/
#define E2P_AUDIO_PCM_REC_MIC_GAIN          E2P_RECORD( AudioPcmRecMicGain               , sizeof(s8))
/*!
  \def E2P_AUDIO_VM_HEADSET_MIC_GAIN
  Category: Audio\n
  Description: Voice memo microphone gain setting\n
  Default value: <AudioVMHeadsetMicGain>
*/
#define E2P_AUDIO_VM_HEADSET_MIC_GAIN       E2P_RECORD( AudioVMHeadsetMicGain            , sizeof(s8))
/*!
  \def E2P_AUDIO_CAM_HEADSET_MIC_GAIN
  Category: Audio\n
  Description: Camcoder recroding microphone gain setting\n
  Default value: <AudioCamHeadsetMicGain>
*/
#define E2P_AUDIO_CAM_HEADSET_MIC_GAIN      E2P_RECORD( AudioCamHeadsetMicGain           , sizeof(s8))
/*!
  \def E2P_AUDIO_PCM_REC_HEADSET_MIC_GAIN
  Category: Audio\n
  Description: PCM recording microphone gain setting\n
  Default value: <AudioPcmRecHeadsetMicGain>
*/
#define E2P_AUDIO_PCM_REC_HEADSET_MIC_GAIN  E2P_RECORD( AudioPcmRecHeadsetMicGain        , sizeof(s8))
/*!
  \def E2P_AUDIO_ATV_MIC_GAIN
  Category: Audio\n
  Description: PCM recording microphone gain setting\n
  Default value: <AudioAtvMicGain>
*/
#define E2P_AUDIO_ATV_MIC_GAIN              E2P_RECORD( AudioAtvMicGain                  , sizeof(s8))
/*!
  \def E2P_AUDIO_FM_MIC_GAIN
  Category: Audio\n
  Description: PCM recording microphone gain setting\n
  Default value: <AudioFmMicGain>
*/
#define E2P_AUDIO_FM_MIC_GAIN               E2P_RECORD( AudioFmMicGain                   , sizeof(s8))
/*!
  \def E2P_AUDIO_VT_MIC_GAIN
  Category: Audio\n
  Description: video telephony microphone gain setting\n
  Default value: <AudioVtMicGain>
*/
#define E2P_AUDIO_VT_MIC_GAIN               E2P_RECORD( AudioVtMicGain                   , sizeof(s8))

/*!
  \def E2P_AUDIO_OUTPUT_DRV_HST_GAIN
  Category: Audio\n
  Description: PCM recording microphone gain setting\n
  Default value: <AudioOutputDriverHeadsetGain>
*/
#define E2P_AUDIO_OUTPUT_DRV_HST_GAIN       E2P_RECORD( AudioOutputDriverHeadsetGain         , sizeof(u8))
/*!
  \def E2P_AUDIO_OUTPUT_DRV_RCV_GAIN
  Category: Audio\n
  Description: Earphone gain setting\n
  Default value: <AudioOutputDriverReceiverGain>
*/
#define E2P_AUDIO_OUTPUT_DRV_RCV_GAIN       E2P_RECORD( AudioOutputDriverReceiverGain        , sizeof(u8))
/*!
  \def E2P_AUDIO_OUTPUT_DRV_LINE_GAIN
  Category: Audio\n
  Description: Lineout gain setting\n
  Default value: <AudioOutputDriverLineOutGain>
*/
#define E2P_AUDIO_OUTPUT_DRV_LINE_GAIN      E2P_RECORD( AudioOutputDriverLineOutGain         , sizeof(u8))
/*!
  \def E2P_AUDIO_OUTPUT_DRV_SPK_HST_GAIN
  Category: Audio\n
  Description: (Speaker)Earphone gain setting\n
  Default value: <AudioOutputDriverSpkHeadsetGain>
*/
#define E2P_AUDIO_OUTPUT_DRV_SPK_HST_GAIN   E2P_RECORD( AudioOutputDriverSpkHeadsetGain      , sizeof(u8))
/*!
  \def E2P_AUDIO_MEDIA_DRV_HST_GAIN
  Category: Audio\n
  Description: multi-media headset analog gain setting\n
  Default value: <AudioMediaDriverHeadsetGain>
*/
#define E2P_AUDIO_MEDIA_DRV_HST_GAIN        E2P_RECORD( AudioMediaDriverHeadsetGain          , sizeof(u8))
/*!
  \def E2P_AUDIO_MEDIA_DRV_RCV_GAIN
  Category: Audio\n
  Description: multi-media receiver analog gain setting\n
  Default value: <AudioMediaDriverReceiverGain>
*/
#define E2P_AUDIO_MEDIA_DRV_RCV_GAIN        E2P_RECORD( AudioMediaDriverReceiverGain         , sizeof(u8))
/*!
  \def E2P_AUDIO_MEDIA_DRV_LINE_GAIN
  Category: Audio\n
  Description: multi-media lineout analog gain setting\n
  Default value: <AudioMediaDriverLineOutGain>
*/
#define E2P_AUDIO_MEDIA_DRV_LINE_GAIN       E2P_RECORD( AudioMediaDriverLineOutGain          , sizeof(u8))
/*!
  \def E2P_AUDIO_MEDIA_DRV_SPK_HST_GAIN
  Category: Audio\n
  Description: (Speaker) multi-media headset analog gain setting\n
  Default value: <AudioMediaDriverSpkHeadsetGain>
*/
#define E2P_AUDIO_MEDIA_DRV_SPK_HST_GAIN    E2P_RECORD( AudioMediaDriverSpkHeadsetGain       , sizeof(u8))
/*!
  \def E2P_AUDIO_CLASSD_GAIN
  Category: Audio\n
  Description: classD gain setting\n
  Default value: <AudioClassDGain>
*/
#define E2P_AUDIO_CLASSD_GAIN               E2P_RECORD( AudioClassDGain                      , sizeof(u8))
/*!
  \def E2P_AUDIO_EXT_CLASSD_GAIN
  Category: Audio\n
  Description: classD gain setting\n
  Default value: <AudioExtClassDGain>
*/
#define E2P_AUDIO_EXT_CLASSD_GAIN           E2P_RECORD( AudioExtClassDGain                   , sizeof(u8))
/*!
  \def E2P_AUDIO_MEDIA_CLASSD_GAIN
  Category: Audio\n
  Description: classD gain setting\n
  Default value: <AudioMediaClassDGain>
*/
#define E2P_AUDIO_MEDIA_CLASSD_GAIN         E2P_RECORD( AudioMediaClassDGain                 , sizeof(u8))
/*!
  \def E2P_AUDIO_MEDIA_EXT_CLASSD_GAIN
  Category: Audio\n
  Description: classD gain setting\n
  Default value: <AudioMediaExtClassDGain>
*/
#define E2P_AUDIO_MEDIA_EXT_CLASSD_GAIN     E2P_RECORD( AudioMediaExtClassDGain              , sizeof(u8))
/*!
  \def E2P_AUDIO_MIC_BIAS_LEVEL
  Category: Audio\n
  Description: Mic bias level\n
  Default value: <AudioMicBiasLevel>
*/
#define E2P_AUDIO_MIC_BIAS_LEVEL            E2P_RECORD( AudioMicBiasLevel                    , sizeof(u8))
#ifdef __E2P_INDEX_SYM__
/*!
  \def E2P_AUDIO_DL_GAIN_HANDSFREE
  Category: Audio\n
  Description: Speaker phone profile downlink volume gain setting\n
  Default value: <AudioDLGainHandsfree>
*/
#define E2P_AUDIO_DL_GAIN_HANDSFREE         E2P_RECORD( AudioDLGainHandsfree          , 8 * sizeof(s8))
/*!
  \def E2P_AUDIO_DL_GAIN_HANDSET
  Category: Audio\n
  Description: Handset phone profile downlink volume gain setting\n
  Default value: <AudioDLGainHandset>
*/
#define E2P_AUDIO_DL_GAIN_HANDSET           E2P_RECORD( AudioDLGainHandset            , 8 * sizeof(s8))
/*!
  \def E2P_AUDIO_DL_GAIN_HEADSET
  Category: Audio\n
  Description: Headset phone profile downlink volume gain setting\n
  Default value: <AudioDLGainHeadset>
*/
#define E2P_AUDIO_DL_GAIN_HEADSET           E2P_RECORD( AudioDLGainHeadset            , 8 * sizeof(s8))
/*!
  \def E2P_AUDIO_DL_GAIN_BT
  Category: Audio\n
  Description: Reserved for Bluetooth phone profile downlink volume gain setting\n
  Default value: <AudioDLGainBT>
*/
#define E2P_AUDIO_DL_GAIN_BT                E2P_RECORD( AudioDLGainBT                 , 8 * sizeof(s8))
/*!
  \def E2P_AUDIO_FIR_COEFF_HANDSFREE
  Category: Audio\n
  Description: Speaker phone profile DSP downlink 31-tap pre-distortion FIR setting\n
  Default value: <AudioFirCoeffHandsfree>
*/
#define E2P_AUDIO_FIR_COEFF_HANDSFREE       E2P_RECORD( AudioFirCoeffHandsfree        , AUDIO_FIR_LENGTH * sizeof(u16))
/*!
  \def E2P_AUDIO_FIR_COEFF_HEADSET
  Category: Audio\n
  Description: Headset phone profile DSP downlink 31-tap pre-distortion FIR setting\n
  Default value: <AudioFirCoeffHeadset>
*/
#define E2P_AUDIO_FIR_COEFF_HEADSET         E2P_RECORD( AudioFirCoeffHeadset          , AUDIO_FIR_LENGTH * sizeof(u16))
/*!
  \def E2P_AUDIO_FIR_COEFF_BT
  Category: Audio\n
  Description: Bluetooth phone profile DSP downlink 31-tap pre-distortion FIR setting\n
  Default value: <AudioFirCoeffBT>
*/
#define E2P_AUDIO_FIR_COEFF_BT              E2P_RECORD( AudioFirCoeffBT               , AUDIO_FIR_LENGTH * sizeof(u16))
#else
/*!
  \def E2P_AUDIO_DL_GAIN_HANDSFREE
  Category: Audio\n
  Description: Speaker phone profile downlink volume gain setting\n
  Default value: <AudioDLGainHandsfree>
*/
#define E2P_AUDIO_DL_GAIN_HANDSFREE         E2P_RECORD( AudioDLGainHandsfree[0]          , 8 * sizeof(s8))
/*!
  \def E2P_AUDIO_DL_GAIN_HANDSET
  Category: Audio\n
  Description: Handset phone profile downlink volume gain setting\n
  Default value: <AudioDLGainHandset>
*/
#define E2P_AUDIO_DL_GAIN_HANDSET           E2P_RECORD( AudioDLGainHandset[0]            , 8 * sizeof(s8))
/*!
  \def E2P_AUDIO_DL_GAIN_HEADSET
  Category: Audio\n
  Description: Headset phone profile downlink volume gain setting\n
  Default value: <AudioDLGainHeadset>
*/
#define E2P_AUDIO_DL_GAIN_HEADSET           E2P_RECORD( AudioDLGainHeadset[0]            , 8 * sizeof(s8))
/*!
  \def E2P_AUDIO_DL_GAIN_BT
  Category: Audio\n
  Description: Reserved for Bluetooth phone profile downlink volume gain setting\n
  Default value: <AudioDLGainBT>
*/
#define E2P_AUDIO_DL_GAIN_BT                E2P_RECORD( AudioDLGainBT[0]                 , 8 * sizeof(s8))
/*!
  \def E2P_AUDIO_FIR_COEFF_HANDSFREE
  Category: Audio\n
  Description: Speaker phone profile DSP downlink 31-tap pre-distortion FIR setting\n
  Default value: <AudioFirCoeffHandsfree>
*/
#define E2P_AUDIO_FIR_COEFF_HANDSFREE       E2P_RECORD( AudioFirCoeffHandsfree[0]        , AUDIO_FIR_LENGTH * sizeof(u16))
/*!
  \def E2P_AUDIO_FIR_COEFF_HEADSET
  Category: Audio\n
  Description: Headset phone profile DSP downlink 31-tap pre-distortion FIR setting\n
  Default value: <AudioFirCoeffHeadset>
*/
#define E2P_AUDIO_FIR_COEFF_HEADSET         E2P_RECORD( AudioFirCoeffHeadset[0]          , AUDIO_FIR_LENGTH * sizeof(u16))
/*!
  \def E2P_AUDIO_FIR_COEFF_BT
  Category: Audio\n
  Description: Bluetooth phone profile DSP downlink 31-tap pre-distortion FIR setting\n
  Default value: <AudioFirCoeffBT>
*/
#define E2P_AUDIO_FIR_COEFF_BT              E2P_RECORD( AudioFirCoeffBT[0]               , AUDIO_FIR_LENGTH * sizeof(u16))
#endif
/*!
  \def E2P_AUDIO_UL_DPGA_AEC_HANDSFREE
  Category: Audio\n
  Description: Speaker phone profile AEC parameters setting\n
  Default value: <AudioULDpgaAecHandsfree>
*/
#define E2P_AUDIO_UL_DPGA_AEC_HANDSFREE     E2P_RECORD( AudioULDpgaAecHandsfree          , sizeof(E2PULDpgaAecParams))
/*!
  \def E2P_AUDIO_UL_DPGA_AEC_HANDSET
  Category: Audio\n
  Description:  Handset phone profile AEC parameters setting\n
  Default value: <AudioULDpgaAecHandset>
*/
#define E2P_AUDIO_UL_DPGA_AEC_HANDSET       E2P_RECORD( AudioULDpgaAecHandset            , sizeof(E2PULDpgaAecParams))
/*!
  \def E2P_AUDIO_UL_DPGA_AEC_HEADSET
  Category: Audio\n
  Description:  Headset phone profile AEC parameters setting\n
  Default value: <AudioULDpgaAecHeadset>
*/
#define E2P_AUDIO_UL_DPGA_AEC_HEADSET       E2P_RECORD( AudioULDpgaAecHeadset            , sizeof(E2PULDpgaAecParams))
/*!
  \def E2P_AUDIO_UL_DPGA_AEC_BT
  Category: Audio\n
  Description:  Bluetooth phone profile AEC parameters setting\n
  Default value: <AudioULDpgaAecBT>
*/
#define E2P_AUDIO_UL_DPGA_AEC_BT            E2P_RECORD( AudioULDpgaAecBT                 , sizeof(E2PULDpgaAecParams))
#ifdef __E2P_INDEX_SYM__
/*!
  \def E2P_AUDIO_ST_GAIN
  Category: Audio\n
  Description:  Each profile side tone volume gain setting\n
  Default value: <AudioSTGain>
*/
#define E2P_AUDIO_ST_GAIN                   E2P_RECORD( AudioSTGain                   , 4 * sizeof(s8))

#define E2P_FAC_PROD_RECORD                 E2P_RECORD( FacProdRecord                 , E2P_PROD_STATION_RECORD_LEN * sizeof(u8))
#define E2P_G_SENSOR_CALIBRATION            E2P_RECORD( GSensorCalibration            , 8 * sizeof(u8))
#define E2P_WIFI_MAC                        E2P_RECORD( WifiMac                       , 6 * sizeof(u8))
#else
/*!
  \def E2P_AUDIO_ST_GAIN
  Category: Audio\n
  Description:  Each profile side tone volume gain setting\n
  Default value: <AudioSTGain>
*/
#define E2P_AUDIO_ST_GAIN                   E2P_RECORD( AudioSTGain[0]                   , 4 * sizeof(s8))

#define E2P_FAC_PROD_RECORD                 E2P_RECORD( FacProdRecord[0]                 , E2P_PROD_STATION_RECORD_LEN * sizeof(u8))
#define E2P_G_SENSOR_CALIBRATION            E2P_RECORD( GSensorCalibration[0]            , 8 * sizeof(u8))
#define E2P_WIFI_MAC                        E2P_RECORD( WifiMac[0]                       , 6 * sizeof(u8))
#endif

#define E2P_DVGA8PSK_GSM900     E2P_RECORD( Dvga8PSKGSM900,   (NB_TX_LEV_LOW_BAND_8PSK)*sizeof(u8))
#define E2P_DVGA8PSK_DCS            E2P_RECORD( Dvga8PSKDCS,   (NB_TX_LEV_HIGH_BAND_8PSK)*sizeof(u8))
#define E2P_DVGA8PSK_PCS            E2P_RECORD( Dvga8PSKPCS,   (NB_TX_LEV_HIGH_BAND_8PSK)*sizeof(u8))
#define E2P_DVGA8PSK_GSM850     E2P_RECORD( Dvga8PSKGSM850,   (NB_TX_LEV_LOW_BAND_8PSK)*sizeof(u8))

#ifdef __E2P_INDEX_SYM__
#define E2P_AUDIO_MP3_GAIN_HANDSFREE        E2P_RECORD( AudioMp3GainHandsfree         , 8 * sizeof(s8))
#define E2P_AUDIO_3GP_GAIN_HANDSFREE        E2P_RECORD( Audio3gpGainHandsfree         , 8 * sizeof(s8))
#define E2P_AUDIO_IPTV_GAIN_HANDSFREE       E2P_RECORD( AudioIptvGainHandsfree        , 8 * sizeof(s8))
#define E2P_AUDIO_FM_GAIN_HANDSFREE         E2P_RECORD( AudioFmGainHandsfree          , 8 * sizeof(s8))
#define E2P_AUDIO_ATV_GAIN_HANDSFREE        E2P_RECORD( AudioAtvGainHandsfree         , 8 * sizeof(s8))
#define E2P_AUDIO_VT_GAIN_HANDSFREE         E2P_RECORD( AudioVtGainHandsfree          , 8 * sizeof(s8))
#define E2P_AUDIO_DTMF_GAIN_HANDSFREE       E2P_RECORD( AudioDtmfGainHandsfree        , 8 * sizeof(s8))
#define E2P_AUDIO_MP3_GAIN_HEADSET          E2P_RECORD( AudioMp3GainHeadset           , 8 * sizeof(s8))
#define E2P_AUDIO_3GP_GAIN_HEADSET          E2P_RECORD( Audio3gpGainHeadset           , 8 * sizeof(s8))
#define E2P_AUDIO_IPTV_GAIN_HEADSET         E2P_RECORD( AudioIptvGainHeadset          , 8 * sizeof(s8))
#define E2P_AUDIO_FM_GAIN_HEADSET           E2P_RECORD( AudioFmGainHeadset            , 8 * sizeof(s8))
#define E2P_AUDIO_ATV_GAIN_HEADSET          E2P_RECORD( AudioAtvGainHeadset           , 8 * sizeof(s8))
#define E2P_AUDIO_VT_GAIN_HEADSET           E2P_RECORD( AudioVtGainHeadset            , 8 * sizeof(s8))
#define E2P_AUDIO_DTMF_GAIN_HEADSET         E2P_RECORD( AudioDtmfGainHeadset          , 8 * sizeof(s8))
#define E2P_AUDIO_KEYPAD_TONE_GAIN          E2P_RECORD( AudioKeypadToneGain           , 4 * sizeof(s8))

//Yi-Lung: AudioRingToneGain
#define E2P_AUDIO_RING_TONE_GAIN_HANDSFREE        E2P_RECORD( AudioRingToneGainHandsfree         , 8 * sizeof(s8))
#define E2P_AUDIO_RING_TONE_GAIN_HEADSET            E2P_RECORD( AudioRingToneGainHeadset         , 8 * sizeof(s8))

#define E2P_PROT_VERSION                    E2P_RECORD( ProtVersion                   , 4 * sizeof(u8))
#define E2P_PROT_VALIDATE                   E2P_RECORD( ProtValidate                  , 4 * sizeof(u8))
#else
#define E2P_AUDIO_MP3_GAIN_HANDSFREE        E2P_RECORD( AudioMp3GainHandsfree[0]         , 8 * sizeof(s8))
#define E2P_AUDIO_3GP_GAIN_HANDSFREE        E2P_RECORD( Audio3gpGainHandsfree[0]         , 8 * sizeof(s8))
#define E2P_AUDIO_IPTV_GAIN_HANDSFREE       E2P_RECORD( AudioIptvGainHandsfree[0]        , 8 * sizeof(s8))
#define E2P_AUDIO_FM_GAIN_HANDSFREE         E2P_RECORD( AudioFmGainHandsfree[0]          , 8 * sizeof(s8))
#define E2P_AUDIO_ATV_GAIN_HANDSFREE        E2P_RECORD( AudioAtvGainHandsfree[0]         , 8 * sizeof(s8))
#define E2P_AUDIO_VT_GAIN_HANDSFREE         E2P_RECORD( AudioVtGainHandsfree[0]          , 8 * sizeof(s8))
#define E2P_AUDIO_DTMF_GAIN_HANDSFREE       E2P_RECORD( AudioDtmfGainHandsfree[0]        , 8 * sizeof(s8))
#define E2P_AUDIO_MP3_GAIN_HEADSET          E2P_RECORD( AudioMp3GainHeadset[0]           , 8 * sizeof(s8))
#define E2P_AUDIO_3GP_GAIN_HEADSET          E2P_RECORD( Audio3gpGainHeadset[0]           , 8 * sizeof(s8))
#define E2P_AUDIO_IPTV_GAIN_HEADSET         E2P_RECORD( AudioIptvGainHeadset[0]          , 8 * sizeof(s8))
#define E2P_AUDIO_FM_GAIN_HEADSET           E2P_RECORD( AudioFmGainHeadset[0]            , 8 * sizeof(s8))
#define E2P_AUDIO_ATV_GAIN_HEADSET          E2P_RECORD( AudioAtvGainHeadset[0]           , 8 * sizeof(s8))
#define E2P_AUDIO_VT_GAIN_HEADSET           E2P_RECORD( AudioVtGainHeadset[0]            , 8 * sizeof(s8))
#define E2P_AUDIO_DTMF_GAIN_HEADSET         E2P_RECORD( AudioDtmfGainHeadset[0]          , 8 * sizeof(s8))
#define E2P_AUDIO_KEYPAD_TONE_GAIN          E2P_RECORD( AudioKeypadToneGain[0]           , 4 * sizeof(s8))

//Yi-Lung: AudioRingToneGain
#define E2P_AUDIO_RING_TONE_GAIN_HANDSFREE        E2P_RECORD( AudioRingToneGainHandsfree[0]         , 8 * sizeof(s8))
#define E2P_AUDIO_RING_TONE_GAIN_HEADSET            E2P_RECORD( AudioRingToneGainHeadset[0]         , 8 * sizeof(s8))

#define E2P_PROT_VERSION                    E2P_RECORD( ProtVersion[0]                   , 4 * sizeof(u8))
#define E2P_PROT_VALIDATE                   E2P_RECORD( ProtValidate[0]                  , 4 * sizeof(u8))
#endif

#define E2P_MPRELEASE                      E2P_RECORD( MpRelease                        , sizeof(u8))
#define E2P_RAMDUMP                        E2P_RECORD( RamDumpFlag                   , sizeof(u32))

//Douglas : Add E2P Item
#ifdef __E2P_INDEX_SYM__
//First Ramping Profile
/*!
  \def E2P_RAMPUPGMSK_GSM900_H
  Category: RF\n
  Description:  Ramping Up Profile for GMSK GSM900 #1.\n
*/
#define E2P_RAMPUPGMSK_GSM900_H               E2P_RECORD( RampUpGMSKGSM900_H,   (NB_TXPWRRAMP)*sizeof(u16))
/*!
  \def E2P_RAMPDOWNGMSK_GSM900_H
  Category: RF\n
  Description:  Ramping Down Profile for GMSK GSM900 #1.\n
*/
#define E2P_RAMPDOWNGMSK_GSM900_H             E2P_RECORD( RampDownGMSKGSM900_H,   (NB_TXPWRRAMP)*sizeof(u16))
/*!
  \def E2P_RAMPUPGMSK_DCS_H
  Category: RF\n
  Description:  Ramping Up Profile for GMSK DCS #1.\n
*/
#define E2P_RAMPUPGMSK_DCS_H                  E2P_RECORD( RampUpGMSKDCS_H,      (NB_TXPWRRAMP)*sizeof(u16))
/*!
  \def E2P_RAMPDOWNGMSK_DCS_H
  Category: RF\n
  Description:  Ramping Down Profile for GMSK DCS #1.\n
*/
#define E2P_RAMPDOWNGMSK_DCS_H                E2P_RECORD( RampDownGMSKDCS_H,      (NB_TXPWRRAMP)*sizeof(u16))
/*!
  \def E2P_RAMPUPGMSK_PCS_H
  Category: RF\n
  Description:  Ramping Up Profile for GMSK PCS #1.\n
*/
#define E2P_RAMPUPGMSK_PCS_H                  E2P_RECORD( RampUpGMSKPCS_H,      (NB_TXPWRRAMP)*sizeof(u16))
/*!
  \def E2P_RAMPDOWNGMSK_PCS_H
  Category: RF\n
  Description:  Ramping Down Profile for GMSK PCS #1.\n
*/
#define E2P_RAMPDOWNGMSK_PCS_H                E2P_RECORD( RampDownGMSKPCS_H,      (NB_TXPWRRAMP)*sizeof(u16))
/*!
  \def E2P_RAMPUPGMSK_GSM850_H
  Category: RF\n
  Description:  Ramping Up Profile for GMSK GSM850 #1.\n
*/
#define E2P_RAMPUPGMSK_GSM850_H               E2P_RECORD( RampUpGMSKGSM850_H,   (NB_TXPWRRAMP)*sizeof(u16))
/*!
  \def E2P_RAMPDOWNGMSK_GSM850_H
  Category: RF\n
  Description:  Ramping Down Profile for GMSK GSM850 #1.\n
*/
#define E2P_RAMPDOWNGMSK_GSM850_H             E2P_RECORD( RampDownGMSKGSM850_H,   (NB_TXPWRRAMP)*sizeof(u16))

//Second Ramping Profile
/*!
  \def E2P_RAMPUPGMSK_GSM900_M
  Category: RF\n
  Description:  Ramping Up Profile for GMSK GSM900 #2.\n
*/
#define E2P_RAMPUPGMSK_GSM900_M               E2P_RECORD( RampUpGMSKGSM900_M,   (NB_TXPWRRAMP)*sizeof(u16))
/*!
  \def E2P_RAMPDOWNGMSK_GSM900_M
  Category: RF\n
  Description:  Ramping Down Profile for GMSK GSM900 #2.\n
*/
#define E2P_RAMPDOWNGMSK_GSM900_M             E2P_RECORD( RampDownGMSKGSM900_M,   (NB_TXPWRRAMP)*sizeof(u16))
/*!
  \def E2P_RAMPUPGMSK_DCS_M
  Category: RF\n
  Description:  Ramping Up Profile for GMSK DCS #2.\n
*/
#define E2P_RAMPUPGMSK_DCS_M                  E2P_RECORD( RampUpGMSKDCS_M,      (NB_TXPWRRAMP)*sizeof(u16))
/*!
  \def E2P_RAMPDOWNGMSK_DCS_M
  Category: RF\n
  Description:  Ramping Down Profile for GMSK DCS #2.\n
*/
#define E2P_RAMPDOWNGMSK_DCS_M                E2P_RECORD( RampDownGMSKDCS_M,      (NB_TXPWRRAMP)*sizeof(u16))
/*!
  \def E2P_RAMPUPGMSK_PCS_M
  Category: RF\n
  Description:  Ramping Up Profile for GMSK PCS #2.\n
*/
#define E2P_RAMPUPGMSK_PCS_M                  E2P_RECORD( RampUpGMSKPCS_M,      (NB_TXPWRRAMP)*sizeof(u16))
/*!
  \def E2P_RAMPDOWNGMSK_PCS_M
  Category: RF\n
  Description:  Ramping Down Profile for GMSK PCS #2.\n
*/
#define E2P_RAMPDOWNGMSK_PCS_M                E2P_RECORD( RampDownGMSKPCS_M,      (NB_TXPWRRAMP)*sizeof(u16))
/*!
  \def E2P_RAMPUPGMSK_GSM850_M
  Category: RF\n
  Description:  Ramping Up Profile for GMSK GSM850 #2.\n
*/
#define E2P_RAMPUPGMSK_GSM850_M               E2P_RECORD( RampUpGMSKGSM850_M,   (NB_TXPWRRAMP)*sizeof(u16))
/*!
  \def E2P_RAMPDOWNGMSK_GSM850_M
  Category: RF\n
  Description:  Ramping Down Profile for GMSK GSM850 #2.\n
*/
#define E2P_RAMPDOWNGMSK_GSM850_M             E2P_RECORD( RampDownGMSKGSM850_M,   (NB_TXPWRRAMP)*sizeof(u16))

//Third Ramping Profile
/*!
  \def E2P_RAMPUPGMSK_GSM900_L
  Category: RF\n
  Description:  Ramping Up Profile for GMSK GSM900 #3.\n
*/
#define E2P_RAMPUPGMSK_GSM900_L               E2P_RECORD( RampUpGMSKGSM900_L,   (NB_TXPWRRAMP)*sizeof(u16))
/*!
  \def E2P_RAMPDOWNGMSK_GSM900_L
  Category: RF\n
  Description:  Ramping Down Profile for GMSK GSM900 #3.\n
*/
#define E2P_RAMPDOWNGMSK_GSM900_L             E2P_RECORD( RampDownGMSKGSM900_L,   (NB_TXPWRRAMP)*sizeof(u16))
/*!
  \def E2P_RAMPUPGMSK_DCS_L
  Category: RF\n
  Description:  Ramping Up Profile for GMSK DCS #3.\n
*/
#define E2P_RAMPUPGMSK_DCS_L                  E2P_RECORD( RampUpGMSKDCS_L,      (NB_TXPWRRAMP)*sizeof(u16))
/*!
  \def E2P_RAMPDOWNGMSK_DCS_L
  Category: RF\n
  Description:  Ramping Down Profile for GMSK DCS #3.\n
*/
#define E2P_RAMPDOWNGMSK_DCS_L                E2P_RECORD( RampDownGMSKDCS_L,      (NB_TXPWRRAMP)*sizeof(u16))
/*!
  \def E2P_RAMPUPGMSK_PCS_L
  Category: RF\n
  Description:  Ramping Up Profile for GMSK PCS #3.\n
*/
#define E2P_RAMPUPGMSK_PCS_L                  E2P_RECORD( RampUpGMSKPCS_L,      (NB_TXPWRRAMP)*sizeof(u16))
/*!
  \def E2P_RAMPDOWNGMSK_PCS_L
  Category: RF\n
  Description:  Ramping Down Profile for GMSK PCS #3.\n
*/
#define E2P_RAMPDOWNGMSK_PCS_L                E2P_RECORD( RampDownGMSKPCS_L,      (NB_TXPWRRAMP)*sizeof(u16))
/*!
  \def E2P_RAMPUPGMSK_GSM850_L
  Category: RF\n
  Description:  Ramping Up Profile for GMSK GSM850 #3.\n
*/
#define E2P_RAMPUPGMSK_GSM850_L               E2P_RECORD( RampUpGMSKGSM850_L,   (NB_TXPWRRAMP)*sizeof(u16))
/*!
  \def E2P_RAMPDOWNGMSK_GSM850_L
  Category: RF\n
  Description:  Ramping Down Profile for GMSK GSM850 #3.\n
*/
#define E2P_RAMPDOWNGMSK_GSM850_L             E2P_RECORD( RampDownGMSKGSM850_L,   (NB_TXPWRRAMP)*sizeof(u16))

//First Ramping Profile
/*!
  \def E2P_RAMPUP8PSK_GSM900_H
  Category: RF\n
  Description:  Ramping Up Profile for 8PSK GSM900 #1.\n
*/
#define E2P_RAMPUP8PSK_GSM900_H               E2P_RECORD( RampUp8PSKGSM900_H,   (NB_TXPWRRAMP)*sizeof(u16))
/*!
  \def E2P_RAMPDOWN8PSK_GSM900_H
  Category: RF\n
  Description:  Ramping Down Profile for 8PSK GSM900 #1.\n
*/
#define E2P_RAMPDOWN8PSK_GSM900_H             E2P_RECORD( RampDown8PSKGSM900_H,   (NB_TXPWRRAMP)*sizeof(u16))
/*!
  \def E2P_RAMPUP8PSK_DCS_H
  Category: RF\n
  Description:  Ramping Up Profile for 8PSK DCS #1.\n
*/
#define E2P_RAMPUP8PSK_DCS_H                  E2P_RECORD( RampUp8PSKDCS_H,      (NB_TXPWRRAMP)*sizeof(u16))
/*!
  \def E2P_RAMPDOWN8PSK_DCS_H
  Category: RF\n
  Description:  Ramping Down Profile for 8PSK DCS #1.\n
*/
#define E2P_RAMPDOWN8PSK_DCS_H                E2P_RECORD( RampDown8PSKDCS_H,      (NB_TXPWRRAMP)*sizeof(u16))
/*!
  \def E2P_RAMPUP8PSK_PCS_H
  Category: RF\n
  Description:  Ramping Up Profile for 8PSK PCS #1.\n
*/
#define E2P_RAMPUP8PSK_PCS_H                  E2P_RECORD( RampUp8PSKPCS_H,      (NB_TXPWRRAMP)*sizeof(u16))
/*!
  \def E2P_RAMPDOWN8PSK_PCS_H
  Category: RF\n
  Description:  Ramping Down Profile for 8PSK PCS #1.\n
*/
#define E2P_RAMPDOWN8PSK_PCS_H                E2P_RECORD( RampDown8PSKPCS_H,      (NB_TXPWRRAMP)*sizeof(u16))
/*!
  \def E2P_RAMPUP8PSK_GSM850_H
  Category: RF\n
  Description:  Ramping Up Profile for 8PSK GSM850 #1.\n
*/
#define E2P_RAMPUP8PSK_GSM850_H               E2P_RECORD( RampUp8PSKGSM850_H,   (NB_TXPWRRAMP)*sizeof(u16))
/*!
  \def E2P_RAMPDOWN8PSK_GSM850_H
  Category: RF\n
  Description:  Ramping Down Profile for 8PSK GSM850 #1.\n
*/
#define E2P_RAMPDOWN8PSK_GSM850_H             E2P_RECORD( RampDown8PSKGSM850_H,   (NB_TXPWRRAMP)*sizeof(u16))

//Second Ramping Profile
/*!
  \def E2P_RAMPUP8PSK_GSM900_M
  Category: RF\n
  Description:  Ramping Up Profile for 8PSK GSM900 #2.\n
*/
#define E2P_RAMPUP8PSK_GSM900_M               E2P_RECORD( RampUp8PSKGSM900_M,   (NB_TXPWRRAMP)*sizeof(u16))
/*!
  \def E2P_RAMPDOWN8PSK_GSM900_M
  Category: RF\n
  Description:  Ramping Down Profile for 8PSK GSM900 #2.\n
*/
#define E2P_RAMPDOWN8PSK_GSM900_M             E2P_RECORD( RampDown8PSKGSM900_M,   (NB_TXPWRRAMP)*sizeof(u16))
/*!
  \def E2P_RAMPUP8PSK_DCS_M
  Category: RF\n
  Description:  Ramping Up Profile for 8PSK DCS #2.\n
*/
#define E2P_RAMPUP8PSK_DCS_M                  E2P_RECORD( RampUp8PSKDCS_M,      (NB_TXPWRRAMP)*sizeof(u16))
/*!
  \def E2P_RAMPDOWN8PSK_DCS_M
  Category: RF\n
  Description:  Ramping Down Profile for 8PSK DCS #2.\n
*/
#define E2P_RAMPDOWN8PSK_DCS_M                E2P_RECORD( RampDown8PSKDCS_M,      (NB_TXPWRRAMP)*sizeof(u16))
/*!
  \def E2P_RAMPUP8PSK_PCS_M
  Category: RF\n
  Description:  Ramping Up Profile for 8PSK PCS #2.\n
*/
#define E2P_RAMPUP8PSK_PCS_M                  E2P_RECORD( RampUp8PSKPCS_M,      (NB_TXPWRRAMP)*sizeof(u16))
/*!
  \def E2P_RAMPDOWN8PSK_PCS_M
  Category: RF\n
  Description:  Ramping Down Profile for 8PSK PCS #2.\n
*/
#define E2P_RAMPDOWN8PSK_PCS_M                E2P_RECORD( RampDown8PSKPCS_M,      (NB_TXPWRRAMP)*sizeof(u16))
/*!
  \def E2P_RAMPUP8PSK_GSM850_M
  Category: RF\n
  Description:  Ramping Up Profile for 8PSK GSM850 #2.\n
*/
#define E2P_RAMPUP8PSK_GSM850_M               E2P_RECORD( RampUp8PSKGSM850_M,   (NB_TXPWRRAMP)*sizeof(u16))
/*!
  \def E2P_RAMPDOWN8PSK_GSM850_M
  Category: RF\n
  Description:  Ramping Down Profile for 8PSK GSM850 #2.\n
*/
#define E2P_RAMPDOWN8PSK_GSM850_M             E2P_RECORD( RampDown8PSKGSM850_M,   (NB_TXPWRRAMP)*sizeof(u16))

//Third Ramping Profile
/*!
  \def E2P_RAMPUP8PSK_GSM900_L
  Category: RF\n
  Description:  Ramping Up Profile for 8PSK GSM900 #3.\n
*/
#define E2P_RAMPUP8PSK_GSM900_L               E2P_RECORD( RampUp8PSKGSM900_L,   (NB_TXPWRRAMP)*sizeof(u16))
/*!
  \def E2P_RAMPDOWN8PSK_GSM900_L
  Category: RF\n
  Description:  Ramping Down Profile for 8PSK GSM900 #3.\n
*/
#define E2P_RAMPDOWN8PSK_GSM900_L             E2P_RECORD( RampDown8PSKGSM900_L,   (NB_TXPWRRAMP)*sizeof(u16))
/*!
  \def E2P_RAMPUP8PSK_DCS_L
  Category: RF\n
  Description:  Ramping Up Profile for 8PSK DCS #3.\n
*/
#define E2P_RAMPUP8PSK_DCS_L                  E2P_RECORD( RampUp8PSKDCS_L,      (NB_TXPWRRAMP)*sizeof(u16))
/*!
  \def E2P_RAMPDOWN8PSK_DCS_L
  Category: RF\n
  Description:  Ramping Down Profile for 8PSK DCS #3.\n
*/
#define E2P_RAMPDOWN8PSK_DCS_L                E2P_RECORD( RampDown8PSKDCS_L,      (NB_TXPWRRAMP)*sizeof(u16))
/*!
  \def E2P_RAMPUP8PSK_PCS_L
  Category: RF\n
  Description:  Ramping Up Profile for 8PSK PCS #3.\n
*/
#define E2P_RAMPUP8PSK_PCS_L                  E2P_RECORD( RampUp8PSKPCS_L,      (NB_TXPWRRAMP)*sizeof(u16))
/*!
  \def E2P_RAMPDOWN8PSK_PCS_L
  Category: RF\n
  Description:  Ramping Down Profile for 8PSK PCS #3.\n
*/
#define E2P_RAMPDOWN8PSK_PCS_L                E2P_RECORD( RampDown8PSKPCS_L,      (NB_TXPWRRAMP)*sizeof(u16))
/*!
  \def E2P_RAMPUP8PSK_GSM850_L
  Category: RF\n
  Description:  Ramping Up Profile for 8PSK GSM850 #3.\n
*/
#define E2P_RAMPUP8PSK_GSM850_L               E2P_RECORD( RampUp8PSKGSM850_L,   (NB_TXPWRRAMP)*sizeof(u16))
/*!
  \def E2P_RAMPDOWN8PSK_GSM850_L
  Category: RF\n
  Description:  Ramping Down Profile for 8PSK GSM850 #3.\n
*/
#define E2P_RAMPDOWN8PSK_GSM850_L             E2P_RECORD( RampDown8PSKGSM850_L,   (NB_TXPWRRAMP)*sizeof(u16))


//Inter-Ramp Ramping Profile
/*!
  \def E2P_INTERRAMPGMSKGMSK_GSM900
  Category: RF\n
  Description:  Inter Ramping Profile for GMSK->GMSK GSM900.\n
*/
#define E2P_INTERRAMPGMSKGMSK_GSM900        E2P_RECORD( InterRampGMSKGMSKGSM900,    (NB_TXPWRRAMP)*sizeof(u16))
/*!
  \def E2P_INTERRAMPGMSKGMSK_DCS
  Category: RF\n
  Description:  Inter Ramping Profile for GMSK->GMSK DCS.\n
*/
#define E2P_INTERRAMPGMSKGMSK_DCS           E2P_RECORD( InterRampGMSKGMSKDCS,        (NB_TXPWRRAMP)*sizeof(u16))
/*!
  \def E2P_INTERRAMPGMSKGMSK_PCS
  Category: RF\n
  Description:  Inter Ramping Profile for GMSK->GMSK PCS.\n
*/
#define E2P_INTERRAMPGMSKGMSK_PCS           E2P_RECORD( InterRampGMSKGMSKPCS,        (NB_TXPWRRAMP)*sizeof(u16))
/*!
  \def E2P_INTERRAMPGMSKGMSK_GSM850
  Category: RF\n
  Description:  Inter Ramping Profile for GMSK->GMSK GSM850.\n
*/
#define E2P_INTERRAMPGMSKGMSK_GSM850        E2P_RECORD( InterRampGMSKGMSKGSM850,     (NB_TXPWRRAMP)*sizeof(u16))
/*!
  \def E2P_INTERRAMP8PSK8PSK_GSM900
  Category: RF\n
  Description:  Inter Ramping Profile for 8PSK->8PSK GSM900.\n
*/
#define E2P_INTERRAMP8PSK8PSK_GSM900        E2P_RECORD( InterRamp8PSK8PSKGSM900,    (NB_TXPWRRAMP)*sizeof(u16))
/*!
  \def E2P_INTERRAMP8PSK8PSK_DCS
  Category: RF\n
  Description:  Inter Ramping Profile for 8PSK->8PSK DCS.\n
*/
#define E2P_INTERRAMP8PSK8PSK_DCS           E2P_RECORD( InterRamp8PSK8PSKDCS,        (NB_TXPWRRAMP)*sizeof(u16))
/*!
  \def E2P_INTERRAMP8PSK8PSK_PCS
  Category: RF\n
  Description:  Inter Ramping Profile for 8PSK->8PSK PCS.\n
*/
#define E2P_INTERRAMP8PSK8PSK_PCS           E2P_RECORD( InterRamp8PSK8PSKPCS,        (NB_TXPWRRAMP)*sizeof(u16))
/*!
  \def E2P_INTERRAMP8PSK8PSK_GSM850
  Category: RF\n
  Description:  Inter Ramping Profile for 8PSK->8PSK GSM850.\n
*/
#define E2P_INTERRAMP8PSK8PSK_GSM850        E2P_RECORD( InterRamp8PSK8PSKGSM850,     (NB_TXPWRRAMP)*sizeof(u16))

#define E2P_SDK_DIAGLEVEL(i)           E2P_RECORD_OFFSET ( SDKDiagState, i, sizeof (u32))
#define E2P_MIXED_DIAGLEVEL(i)           E2P_RECORD_OFFSET ( MixedDiagState, i, sizeof (u32))
#define E2P_CAM_SENSOR_INDEX                E2P_RECORD( CamSensorIndex,              2 * sizeof(u32))
#else
//First Ramping Profile
/*!
  \def E2P_RAMPUPGMSK_GSM900_H
  Category: RF\n
  Description:  Ramping Up Profile for GMSK GSM900 #1.\n
*/
#define E2P_RAMPUPGMSK_GSM900_H               E2P_RECORD( RampUpGMSKGSM900_H[0],   (NB_TXPWRRAMP)*sizeof(u16))
/*!
  \def E2P_RAMPDOWNGMSK_GSM900_H
  Category: RF\n
  Description:  Ramping Down Profile for GMSK GSM900 #1.\n
*/
#define E2P_RAMPDOWNGMSK_GSM900_H             E2P_RECORD( RampDownGMSKGSM900_H[0],   (NB_TXPWRRAMP)*sizeof(u16))
/*!
  \def E2P_RAMPUPGMSK_DCS_H
  Category: RF\n
  Description:  Ramping Up Profile for GMSK DCS #1.\n
*/
#define E2P_RAMPUPGMSK_DCS_H                  E2P_RECORD( RampUpGMSKDCS_H[0],      (NB_TXPWRRAMP)*sizeof(u16))
/*!
  \def E2P_RAMPDOWNGMSK_DCS_H
  Category: RF\n
  Description:  Ramping Down Profile for GMSK DCS #1.\n
*/
#define E2P_RAMPDOWNGMSK_DCS_H                E2P_RECORD( RampDownGMSKDCS_H[0],      (NB_TXPWRRAMP)*sizeof(u16))
/*!
  \def E2P_RAMPUPGMSK_PCS_H
  Category: RF\n
  Description:  Ramping Up Profile for GMSK PCS #1.\n
*/
#define E2P_RAMPUPGMSK_PCS_H                  E2P_RECORD( RampUpGMSKPCS_H[0],      (NB_TXPWRRAMP)*sizeof(u16))
/*!
  \def E2P_RAMPDOWNGMSK_PCS_H
  Category: RF\n
  Description:  Ramping Down Profile for GMSK PCS #1.\n
*/
#define E2P_RAMPDOWNGMSK_PCS_H                E2P_RECORD( RampDownGMSKPCS_H[0],      (NB_TXPWRRAMP)*sizeof(u16))
/*!
  \def E2P_RAMPUPGMSK_GSM850_H
  Category: RF\n
  Description:  Ramping Up Profile for GMSK GSM850 #1.\n
*/
#define E2P_RAMPUPGMSK_GSM850_H               E2P_RECORD( RampUpGMSKGSM850_H[0],   (NB_TXPWRRAMP)*sizeof(u16))
/*!
  \def E2P_RAMPDOWNGMSK_GSM850_H
  Category: RF\n
  Description:  Ramping Down Profile for GMSK GSM850 #1.\n
*/
#define E2P_RAMPDOWNGMSK_GSM850_H             E2P_RECORD( RampDownGMSKGSM850_H[0],   (NB_TXPWRRAMP)*sizeof(u16))

//Second Ramping Profile
/*!
  \def E2P_RAMPUPGMSK_GSM900_M
  Category: RF\n
  Description:  Ramping Up Profile for GMSK GSM900 #2.\n
*/
#define E2P_RAMPUPGMSK_GSM900_M               E2P_RECORD( RampUpGMSKGSM900_M[0],   (NB_TXPWRRAMP)*sizeof(u16))
/*!
  \def E2P_RAMPDOWNGMSK_GSM900_M
  Category: RF\n
  Description:  Ramping Down Profile for GMSK GSM900 #2.\n
*/
#define E2P_RAMPDOWNGMSK_GSM900_M             E2P_RECORD( RampDownGMSKGSM900_M[0],   (NB_TXPWRRAMP)*sizeof(u16))
/*!
  \def E2P_RAMPUPGMSK_DCS_M
  Category: RF\n
  Description:  Ramping Up Profile for GMSK DCS #2.\n
*/
#define E2P_RAMPUPGMSK_DCS_M                  E2P_RECORD( RampUpGMSKDCS_M[0],      (NB_TXPWRRAMP)*sizeof(u16))
/*!
  \def E2P_RAMPDOWNGMSK_DCS_M
  Category: RF\n
  Description:  Ramping Down Profile for GMSK DCS #2.\n
*/
#define E2P_RAMPDOWNGMSK_DCS_M                E2P_RECORD( RampDownGMSKDCS_M[0],      (NB_TXPWRRAMP)*sizeof(u16))
/*!
  \def E2P_RAMPUPGMSK_PCS_M
  Category: RF\n
  Description:  Ramping Up Profile for GMSK PCS #2.\n
*/
#define E2P_RAMPUPGMSK_PCS_M                  E2P_RECORD( RampUpGMSKPCS_M[0],      (NB_TXPWRRAMP)*sizeof(u16))
/*!
  \def E2P_RAMPDOWNGMSK_PCS_M
  Category: RF\n
  Description:  Ramping Down Profile for GMSK PCS #2.\n
*/
#define E2P_RAMPDOWNGMSK_PCS_M                E2P_RECORD( RampDownGMSKPCS_M[0],      (NB_TXPWRRAMP)*sizeof(u16))
/*!
  \def E2P_RAMPUPGMSK_GSM850_M
  Category: RF\n
  Description:  Ramping Up Profile for GMSK GSM850 #2.\n
*/
#define E2P_RAMPUPGMSK_GSM850_M               E2P_RECORD( RampUpGMSKGSM850_M[0],   (NB_TXPWRRAMP)*sizeof(u16))
/*!
  \def E2P_RAMPDOWNGMSK_GSM850_M
  Category: RF\n
  Description:  Ramping Down Profile for GMSK GSM850 #2.\n
*/
#define E2P_RAMPDOWNGMSK_GSM850_M             E2P_RECORD( RampDownGMSKGSM850_M[0],   (NB_TXPWRRAMP)*sizeof(u16))

//Third Ramping Profile
/*!
  \def E2P_RAMPUPGMSK_GSM900_L
  Category: RF\n
  Description:  Ramping Up Profile for GMSK GSM900 #3.\n
*/
#define E2P_RAMPUPGMSK_GSM900_L               E2P_RECORD( RampUpGMSKGSM900_L[0],   (NB_TXPWRRAMP)*sizeof(u16))
/*!
  \def E2P_RAMPDOWNGMSK_GSM900_L
  Category: RF\n
  Description:  Ramping Down Profile for GMSK GSM900 #3.\n
*/
#define E2P_RAMPDOWNGMSK_GSM900_L             E2P_RECORD( RampDownGMSKGSM900_L[0],   (NB_TXPWRRAMP)*sizeof(u16))
/*!
  \def E2P_RAMPUPGMSK_DCS_L
  Category: RF\n
  Description:  Ramping Up Profile for GMSK DCS #3.\n
*/
#define E2P_RAMPUPGMSK_DCS_L                  E2P_RECORD( RampUpGMSKDCS_L[0],      (NB_TXPWRRAMP)*sizeof(u16))
/*!
  \def E2P_RAMPDOWNGMSK_DCS_L
  Category: RF\n
  Description:  Ramping Down Profile for GMSK DCS #3.\n
*/
#define E2P_RAMPDOWNGMSK_DCS_L                E2P_RECORD( RampDownGMSKDCS_L[0],      (NB_TXPWRRAMP)*sizeof(u16))
/*!
  \def E2P_RAMPUPGMSK_PCS_L
  Category: RF\n
  Description:  Ramping Up Profile for GMSK PCS #3.\n
*/
#define E2P_RAMPUPGMSK_PCS_L                  E2P_RECORD( RampUpGMSKPCS_L[0],      (NB_TXPWRRAMP)*sizeof(u16))
/*!
  \def E2P_RAMPDOWNGMSK_PCS_L
  Category: RF\n
  Description:  Ramping Down Profile for GMSK PCS #3.\n
*/
#define E2P_RAMPDOWNGMSK_PCS_L                E2P_RECORD( RampDownGMSKPCS_L[0],      (NB_TXPWRRAMP)*sizeof(u16))
/*!
  \def E2P_RAMPUPGMSK_GSM850_L
  Category: RF\n
  Description:  Ramping Up Profile for GMSK GSM850 #3.\n
*/
#define E2P_RAMPUPGMSK_GSM850_L               E2P_RECORD( RampUpGMSKGSM850_L[0],   (NB_TXPWRRAMP)*sizeof(u16))
/*!
  \def E2P_RAMPDOWNGMSK_GSM850_L
  Category: RF\n
  Description:  Ramping Down Profile for GMSK GSM850 #3.\n
*/
#define E2P_RAMPDOWNGMSK_GSM850_L             E2P_RECORD( RampDownGMSKGSM850_L[0],   (NB_TXPWRRAMP)*sizeof(u16))

//First Ramping Profile
/*!
  \def E2P_RAMPUP8PSK_GSM900_H
  Category: RF\n
  Description:  Ramping Up Profile for 8PSK GSM900 #1.\n
*/
#define E2P_RAMPUP8PSK_GSM900_H               E2P_RECORD( RampUp8PSKGSM900_H[0],   (NB_TXPWRRAMP)*sizeof(u16))
/*!
  \def E2P_RAMPDOWN8PSK_GSM900_H
  Category: RF\n
  Description:  Ramping Down Profile for 8PSK GSM900 #1.\n
*/
#define E2P_RAMPDOWN8PSK_GSM900_H             E2P_RECORD( RampDown8PSKGSM900_H[0],   (NB_TXPWRRAMP)*sizeof(u16))
/*!
  \def E2P_RAMPUP8PSK_DCS_H
  Category: RF\n
  Description:  Ramping Up Profile for 8PSK DCS #1.\n
*/
#define E2P_RAMPUP8PSK_DCS_H                  E2P_RECORD( RampUp8PSKDCS_H[0],      (NB_TXPWRRAMP)*sizeof(u16))
/*!
  \def E2P_RAMPDOWN8PSK_DCS_H
  Category: RF\n
  Description:  Ramping Down Profile for 8PSK DCS #1.\n
*/
#define E2P_RAMPDOWN8PSK_DCS_H                E2P_RECORD( RampDown8PSKDCS_H[0],      (NB_TXPWRRAMP)*sizeof(u16))
/*!
  \def E2P_RAMPUP8PSK_PCS_H
  Category: RF\n
  Description:  Ramping Up Profile for 8PSK PCS #1.\n
*/
#define E2P_RAMPUP8PSK_PCS_H                  E2P_RECORD( RampUp8PSKPCS_H[0],      (NB_TXPWRRAMP)*sizeof(u16))
/*!
  \def E2P_RAMPDOWN8PSK_PCS_H
  Category: RF\n
  Description:  Ramping Down Profile for 8PSK PCS #1.\n
*/
#define E2P_RAMPDOWN8PSK_PCS_H                E2P_RECORD( RampDown8PSKPCS_H[0],      (NB_TXPWRRAMP)*sizeof(u16))
/*!
  \def E2P_RAMPUP8PSK_GSM850_H
  Category: RF\n
  Description:  Ramping Up Profile for 8PSK GSM850 #1.\n
*/
#define E2P_RAMPUP8PSK_GSM850_H               E2P_RECORD( RampUp8PSKGSM850_H[0],   (NB_TXPWRRAMP)*sizeof(u16))
/*!
  \def E2P_RAMPDOWN8PSK_GSM850_H
  Category: RF\n
  Description:  Ramping Down Profile for 8PSK GSM850 #1.\n
*/
#define E2P_RAMPDOWN8PSK_GSM850_H             E2P_RECORD( RampDown8PSKGSM850_H[0],   (NB_TXPWRRAMP)*sizeof(u16))

//Second Ramping Profile
/*!
  \def E2P_RAMPUP8PSK_GSM900_M
  Category: RF\n
  Description:  Ramping Up Profile for 8PSK GSM900 #2.\n
*/
#define E2P_RAMPUP8PSK_GSM900_M               E2P_RECORD( RampUp8PSKGSM900_M[0],   (NB_TXPWRRAMP)*sizeof(u16))
/*!
  \def E2P_RAMPDOWN8PSK_GSM900_M
  Category: RF\n
  Description:  Ramping Down Profile for 8PSK GSM900 #2.\n
*/
#define E2P_RAMPDOWN8PSK_GSM900_M             E2P_RECORD( RampDown8PSKGSM900_M[0],   (NB_TXPWRRAMP)*sizeof(u16))
/*!
  \def E2P_RAMPUP8PSK_DCS_M
  Category: RF\n
  Description:  Ramping Up Profile for 8PSK DCS #2.\n
*/
#define E2P_RAMPUP8PSK_DCS_M                  E2P_RECORD( RampUp8PSKDCS_M[0],      (NB_TXPWRRAMP)*sizeof(u16))
/*!
  \def E2P_RAMPDOWN8PSK_DCS_M
  Category: RF\n
  Description:  Ramping Down Profile for 8PSK DCS #2.\n
*/
#define E2P_RAMPDOWN8PSK_DCS_M                E2P_RECORD( RampDown8PSKDCS_M[0],      (NB_TXPWRRAMP)*sizeof(u16))
/*!
  \def E2P_RAMPUP8PSK_PCS_M
  Category: RF\n
  Description:  Ramping Up Profile for 8PSK PCS #2.\n
*/
#define E2P_RAMPUP8PSK_PCS_M                  E2P_RECORD( RampUp8PSKPCS_M[0],      (NB_TXPWRRAMP)*sizeof(u16))
/*!
  \def E2P_RAMPDOWN8PSK_PCS_M
  Category: RF\n
  Description:  Ramping Down Profile for 8PSK PCS #2.\n
*/
#define E2P_RAMPDOWN8PSK_PCS_M                E2P_RECORD( RampDown8PSKPCS_M[0],      (NB_TXPWRRAMP)*sizeof(u16))
/*!
  \def E2P_RAMPUP8PSK_GSM850_M
  Category: RF\n
  Description:  Ramping Up Profile for 8PSK GSM850 #2.\n
*/
#define E2P_RAMPUP8PSK_GSM850_M               E2P_RECORD( RampUp8PSKGSM850_M[0],   (NB_TXPWRRAMP)*sizeof(u16))
/*!
  \def E2P_RAMPDOWN8PSK_GSM850_M
  Category: RF\n
  Description:  Ramping Down Profile for 8PSK GSM850 #2.\n
*/
#define E2P_RAMPDOWN8PSK_GSM850_M             E2P_RECORD( RampDown8PSKGSM850_M[0],   (NB_TXPWRRAMP)*sizeof(u16))

//Third Ramping Profile
/*!
  \def E2P_RAMPUP8PSK_GSM900_L
  Category: RF\n
  Description:  Ramping Up Profile for 8PSK GSM900 #3.\n
*/
#define E2P_RAMPUP8PSK_GSM900_L               E2P_RECORD( RampUp8PSKGSM900_L[0],   (NB_TXPWRRAMP)*sizeof(u16))
/*!
  \def E2P_RAMPDOWN8PSK_GSM900_L
  Category: RF\n
  Description:  Ramping Down Profile for 8PSK GSM900 #3.\n
*/
#define E2P_RAMPDOWN8PSK_GSM900_L             E2P_RECORD( RampDown8PSKGSM900_L[0],   (NB_TXPWRRAMP)*sizeof(u16))
/*!
  \def E2P_RAMPUP8PSK_DCS_L
  Category: RF\n
  Description:  Ramping Up Profile for 8PSK DCS #3.\n
*/
#define E2P_RAMPUP8PSK_DCS_L                  E2P_RECORD( RampUp8PSKDCS_L[0],      (NB_TXPWRRAMP)*sizeof(u16))
/*!
  \def E2P_RAMPDOWN8PSK_DCS_L
  Category: RF\n
  Description:  Ramping Down Profile for 8PSK DCS #3.\n
*/
#define E2P_RAMPDOWN8PSK_DCS_L                E2P_RECORD( RampDown8PSKDCS_L[0],      (NB_TXPWRRAMP)*sizeof(u16))
/*!
  \def E2P_RAMPUP8PSK_PCS_L
  Category: RF\n
  Description:  Ramping Up Profile for 8PSK PCS #3.\n
*/
#define E2P_RAMPUP8PSK_PCS_L                  E2P_RECORD( RampUp8PSKPCS_L[0],      (NB_TXPWRRAMP)*sizeof(u16))
/*!
  \def E2P_RAMPDOWN8PSK_PCS_L
  Category: RF\n
  Description:  Ramping Down Profile for 8PSK PCS #3.\n
*/
#define E2P_RAMPDOWN8PSK_PCS_L                E2P_RECORD( RampDown8PSKPCS_L[0],      (NB_TXPWRRAMP)*sizeof(u16))
/*!
  \def E2P_RAMPUP8PSK_GSM850_L
  Category: RF\n
  Description:  Ramping Up Profile for 8PSK GSM850 #3.\n
*/
#define E2P_RAMPUP8PSK_GSM850_L               E2P_RECORD( RampUp8PSKGSM850_L[0],   (NB_TXPWRRAMP)*sizeof(u16))
/*!
  \def E2P_RAMPDOWN8PSK_GSM850_L
  Category: RF\n
  Description:  Ramping Down Profile for 8PSK GSM850 #3.\n
*/
#define E2P_RAMPDOWN8PSK_GSM850_L             E2P_RECORD( RampDown8PSKGSM850_L[0],   (NB_TXPWRRAMP)*sizeof(u16))


//Inter-Ramp Ramping Profile
/*!
  \def E2P_INTERRAMPGMSKGMSK_GSM900
  Category: RF\n
  Description:  Inter Ramping Profile for GMSK->GMSK GSM900.\n
*/
#define E2P_INTERRAMPGMSKGMSK_GSM900        E2P_RECORD( InterRampGMSKGMSKGSM900[0],    (NB_TXPWRRAMP)*sizeof(u16))
/*!
  \def E2P_INTERRAMPGMSKGMSK_DCS
  Category: RF\n
  Description:  Inter Ramping Profile for GMSK->GMSK DCS.\n
*/
#define E2P_INTERRAMPGMSKGMSK_DCS           E2P_RECORD( InterRampGMSKGMSKDCS[0],        (NB_TXPWRRAMP)*sizeof(u16))
/*!
  \def E2P_INTERRAMPGMSKGMSK_PCS
  Category: RF\n
  Description:  Inter Ramping Profile for GMSK->GMSK PCS.\n
*/
#define E2P_INTERRAMPGMSKGMSK_PCS           E2P_RECORD( InterRampGMSKGMSKPCS[0],        (NB_TXPWRRAMP)*sizeof(u16))
/*!
  \def E2P_INTERRAMPGMSKGMSK_GSM850
  Category: RF\n
  Description:  Inter Ramping Profile for GMSK->GMSK GSM850.\n
*/
#define E2P_INTERRAMPGMSKGMSK_GSM850        E2P_RECORD( InterRampGMSKGMSKGSM850[0],     (NB_TXPWRRAMP)*sizeof(u16))
/*!
  \def E2P_INTERRAMP8PSK8PSK_GSM900
  Category: RF\n
  Description:  Inter Ramping Profile for 8PSK->8PSK GSM900.\n
*/
#define E2P_INTERRAMP8PSK8PSK_GSM900        E2P_RECORD( InterRamp8PSK8PSKGSM900[0],    (NB_TXPWRRAMP)*sizeof(u16))
/*!
  \def E2P_INTERRAMP8PSK8PSK_DCS
  Category: RF\n
  Description:  Inter Ramping Profile for 8PSK->8PSK DCS.\n
*/
#define E2P_INTERRAMP8PSK8PSK_DCS           E2P_RECORD( InterRamp8PSK8PSKDCS[0],        (NB_TXPWRRAMP)*sizeof(u16))
/*!
  \def E2P_INTERRAMP8PSK8PSK_PCS
  Category: RF\n
  Description:  Inter Ramping Profile for 8PSK->8PSK PCS.\n
*/
#define E2P_INTERRAMP8PSK8PSK_PCS           E2P_RECORD( InterRamp8PSK8PSKPCS[0],        (NB_TXPWRRAMP)*sizeof(u16))
/*!
  \def E2P_INTERRAMP8PSK8PSK_GSM850
  Category: RF\n
  Description:  Inter Ramping Profile for 8PSK->8PSK GSM850.\n
*/
#define E2P_INTERRAMP8PSK8PSK_GSM850        E2P_RECORD( InterRamp8PSK8PSKGSM850[0],     (NB_TXPWRRAMP)*sizeof(u16))

#define E2P_SDK_DIAGLEVEL(i)           E2P_RECORD_OFFSET ( SDKDiagState[0], i, sizeof (u32))
#define E2P_MIXED_DIAGLEVEL(i)           E2P_RECORD_OFFSET ( MixedDiagState[0], i, sizeof (u32))
#define E2P_CAM_SENSOR_INDEX                E2P_RECORD( CamSensorIndex[0],              2 * sizeof(u32))
#endif
#define E2P_CAMPRIXYAXISMIRROR                E2P_RECORD( CamPriXYAxisMirror,              sizeof(u32))
#define E2P_CAMSECXYAXISMIRROR                   E2P_RECORD( CamSecXYAxisMirror,              sizeof(u32))
#define E2P_CAMPRIROTATIONANGLE              E2P_RECORD( CamPriRotationAngle,              sizeof(u32))

#define E2P_CAMSECROTATIONANGLE                  E2P_RECORD( CamSecRotationAngle,             sizeof(u8))
#define E2P_RFPOWERADJUSTMENT_4BANDS                  E2P_RECORD( RFPower_4Bands,             sizeof(u8))
#define E2P_RFPOWERADJUSTMENT_GSM900_DCS1800                  E2P_RECORD( RFPower_GSM900_DCS1800,             sizeof(u8))
#define E2P_RFPOWERADJUSTMENT_PCS1900_GSM850                  E2P_RECORD( RFPower_PCS1900_GSM850,             sizeof(u8))

#define E2P_CAMMAXIMAGECAPTUREWIDTH         E2P_RECORD( CamMaxImageCaptureWidth,              sizeof(u16))
#define E2P_CAMMAXIMAGECAPTUREHEIGHT        E2P_RECORD( CamMaxImageCaptureHeight,              sizeof(u16))

/*!
  \def E2P_DISABLEERRORTRACEINFACMODE
  Category: BB\n
  Description: disable tmt trace function in factory mode\n
  Default value: <DisableErrorTraceInFacMode>
*/
#define E2P_DISABLEERRORTRACEINFACMODE                       E2P_RECORD( DisableErrorTraceInFacMode, sizeof(u8))

/*!
  \def E2P_LCM_MODULE_ID
  Category: BB\n
  Description: Set the LCM module ID\n
  Default value: <0xFFFF>
*/
#define E2P_LCM_MODULE_ID         E2P_RECORD(  LCMModuleID, sizeof (u16) )



/*!
  \def E2P_LCM_DRIVER_INDX
  Category: BB\n
  Description: Set the LCM Driver Index\n
  Default value: <0xFFFF>
*/
#ifdef __E2P_INDEX_SYM__
#define E2P_LCM_DRIVER_INDX_1         E2P_RECORD(  LCMDriverIndx, sizeof (u8) )
#define E2P_LCM_DRIVER_INDX_2         E2P_EXT_SYMBOL(LCMDriverIndx)+(1*sizeof(u8)), sizeof(u8)

#else
#define E2P_LCM_DRIVER_INDX_1         E2P_RECORD(  LCMDriverIndx[0], sizeof (u8) )
#define E2P_LCM_DRIVER_INDX_2         E2P_RECORD(  LCMDriverIndx[1], sizeof (u8) )
#endif



/*!
  \def E2P_BOOT_LOGO_INDEX
  Category: BB\n
  Description: set the index of boot logo\n
  Default value: <0>
*/
#define E2P_BOOT_LOGO_INDEX         E2P_RECORD(  BootUpLogoIndex, sizeof (u8) )

/*!
  \def E2P_LOGOID
  Category: BB\n
  Description: set the ID to let user to choose one of the boot logos\n
  Default value: <0>
*/
#define E2P_LOGOID                          E2P_RECORD( BootLogoID                     , sizeof(s8))


/*!
  \def E2P_LCM_MODULE_ID_CHKSUM
  Category: BB\n
  Description: E2P_LCM_MODULE_ID + E2P_LCM_MODULE_ID_CHKSUM = 0xFFFF\n
  Default value: <0x0>
*/
#define E2P_LCM_MODULE_ID_CHKSUM         E2P_RECORD(  LCMModuleIDChksum, sizeof (u16) )

/*
 Multimedia Capability Configuration (MCC)
 ck.wang @ 2010/04/29
 version 1.0
*/
#define E2P_MCC_VERSION                     E2P_RECORD(MccVersion                       , 4 * sizeof(u8))
#define E2P_MCC_RESERVED                    E2P_RECORD(MccReserved                      , 16 * sizeof(u8))
#define E2P_MCC_AUDIO_RECORDING             E2P_RECORD(MccAudioRecording                , 4 * sizeof(u8))
#define E2P_MCC_AUDIO_PLAYBACK              E2P_RECORD(MccAudioPlayback                 , 4 * sizeof(u8))
#define E2P_MCC_VIDEO_RECORDING             E2P_RECORD(MccVideoRecording                , 4 * sizeof(u8))
#define E2P_MCC_VIDEO_PLAYBACK              E2P_RECORD(MccVideoPlayback                 , 4 * sizeof(u8))
#define E2P_MCC_MAX_ROM_SIZE_EMU            E2P_RECORD(MccMaxRomSizeEmu                 , 4 * sizeof(u8))
#ifdef __E2P_INDEX_SYM__
#define E2P_MCC_RM_SCRAMBLEID				E2P_RECORD(RMScrambleID                 	, 24 * sizeof(u8))
#define E2P_MCC_KMV_SCRAMBLEID	            E2P_RECORD(KMVScrambleID               	, 20 * sizeof(u8))
#else
#define E2P_MCC_RM_SCRAMBLEID				E2P_RECORD(RMScrambleID[0]                 	, 24 * sizeof(u8))
#define E2P_MCC_KMV_SCRAMBLEID	            E2P_RECORD(KMVScrambleID[0]               	, 20 * sizeof(u8))
#endif
#define E2P_CUSTOBASE_1    E2P_RECORD( u8_CustoBase_1, sizeof(u8))
#define E2P_CUSTOBASE_2    E2P_RECORD( u8_CustoBase_2, sizeof(u8))

/*!
  \def E2P_AUDIO_MSTARAEC_PROFILE
  Category: Audio\n
  Description: Four profiles MstarAEC parameters setting\n
  Default value: <AudioMstarAecProfile>
*/
#define E2P_AUDIO_MSTARAEC_HANDSFREE    E2P_RECORD( AudioMstarAecHandsfree  , sizeof(E2PMstarAecParams))
#define E2P_AUDIO_MSTARAEC_HANDSET      E2P_RECORD( AudioMstarAecHandset    , sizeof(E2PMstarAecParams))
#define E2P_AUDIO_MSTARAEC_HEADSET      E2P_RECORD( AudioMstarAecHeadset    , sizeof(E2PMstarAecParams))
#define E2P_AUDIO_MSTARAEC_BT           E2P_RECORD( AudioMstarAecBT         , sizeof(E2PMstarAecParams))
/*!
  \def E2P_AUDIO_AEC_SELECTION
  Category: Audio\n
  Description: AEC selection for spirit or MstarAEC\n
  Default value: <AudioAecSelection>
*/
#define E2P_AUDIO_AEC_SELECTION         E2P_RECORD( AudioAecSelection          , sizeof(u32))
/*!
  \def E2P_AUDIO_AEC_ON
  Category: Audio\n
  Description: AEC on/off \n
  Default value: <AudioAecOn>
*/
#ifdef __E2P_INDEX_SYM__
#define E2P_AUDIO_AEC_ON         E2P_RECORD( AudioAecOn          , 4 * sizeof(u8))
#else
#define E2P_AUDIO_AEC_ON         E2P_RECORD( AudioAecOn[0]       , 4 * sizeof(u8))
#endif

typedef struct
{
 /*u16*/u32           Pos;
 u16           Size;
 #if defined (__SDK_SIMULATION__) &&  defined (__E2P_INDEX_SYM__)
  char *Variable;
 #endif
} e2p_Field_t;


extern const u16   e2p_UsefullSize;
extern const void *e2p_RemotePtr;
extern const u16   e2p_FirstErrorStoredOffset;
#if defined (__SDK_SIMULATION__) &&  defined (__E2P_INDEX_SYM__)
extern e2p_Field_t e2p_ParamForChkSum [];
extern u8   e2p_NbParamForChkSum;
#else
extern const e2p_Field_t e2p_ParamForChkSum [];
extern const u8    e2p_NbParamForChkSum;
#endif
DefExtern u16      e2p_TstPattern;
DefExtern u8       e2p_ChkSum;

#ifdef __NAND__

#ifdef __E2P_INDEX_SYM__
#define E2P_CUSCALIBRATIONDATA             E2P_RECORD( CusCalibrationData,                      200 * sizeof(u8))
#else
#define E2P_CUSCALIBRATIONDATA             E2P_RECORD( CusCalibrationData[0],                   200 * sizeof(u8))
#endif
/*++++++++++ Lib, App RO +++++++++++++++++*/

#define E2P_LASTCALLTIME                   E2P_RECORD( LastCallTime  ,                          sizeof(u32))

#define E2P_TOTALCALLTIME                  E2P_RECORD( TotalCallTime ,                          sizeof(u32))
#ifdef __E2P_INDEX_SYM__
#define E2P_LOCKPWD                        E2P_RECORD( LockPwd,                              sizeof(LockPwd_t))
#else
#define E2P_LOCKPWD                        E2P_RECORD( LockPwd[0],                              sizeof(LockPwd_t))
#endif
#define E2P_SMSCONVTAB                     E2P_RECORD( SmsConvTab,                              sizeof(u8))
#define E2P_LANGUAGE                       E2P_RECORD( Language,                                sizeof(u8))
#ifdef __E2P_INDEX_SYM__
#define E2P_GREETING                       E2P_RECORD( Greeting,                             sizeof(Greet_t))
#else
#define E2P_GREETING                       E2P_RECORD( Greeting[0],                             sizeof(Greet_t))
#endif
#define E2P_SMSCB_CUSTOM_FLAGS             E2P_RECORD( SmsCbCustomFlags,                        sizeof(u8))
#ifdef __E2P_INDEX_SYM__
#define E2P_NETSTR                         E2P_RECORD( NetStr,                               sizeof(NetStr_t))
#else
#define E2P_NETSTR                         E2P_RECORD( NetStr[0],                               sizeof(NetStr_t))
#endif
#define E2P_PRODTESTRES                    E2P_RECORD( ProdTestRes,                             sizeof(u32))
#ifdef __E2P_INDEX_SYM__
#define E2P_GREETING2                      E2P_RECORD( PadCGLGreeting2,                      sizeof(Greet2_t) )
#else
#define E2P_GREETING2                      E2P_RECORD( PadCGLGreeting2[0],                      sizeof(Greet2_t) )
#endif
#define E2P_SETTINGSEXT                    E2P_RECORD( SettingsExt ,                            sizeof(SettingsExt_bk2_t))
//#define E2P_STATUSEXT                      E2P_RECORD_RO( SettingsExt.Status,                      sizeof(u8))
//#define E2P_BACKLIGHTLENGTH                E2P_RECORD_RO( SettingsExt.BacklightLength,             sizeof(u8))
//#define E2P_ONEBEEPDELAY                   E2P_RECORD_RO( SettingsExt.OneBeepDelay,                sizeof(u8))
//#define E2P_STATUSEXT2                     E2P_RECORD_RO( SettingsExt.Status2,                     sizeof(u8))
#define E2P_SETTING_MODE                   E2P_RECORD( SettingMode,                             sizeof(u8))
#define E2P_TERMPROFILELEN                 E2P_RECORD( TerminalProfileLength,                   sizeof(u8))
#define E2P_RINGLEVELAUX                   E2P_RECORD( PadCGLRingLevelAux,                      sizeof(u8))
#define E2P_CUSTOMERKEY                    E2P_RECORD( CustomerKey,                             sizeof(u32))
#ifdef __E2P_INDEX_SYM__
#define E2P_CUSTOMLABEL                    E2P_RECORD( CustomLabel,                          sizeof(CustomLabel_t))
#else
#define E2P_CUSTOMLABEL                    E2P_RECORD( CustomLabel[0],                          sizeof(CustomLabel_t))
#endif
#define E2P_UART                           E2P_RECORD( Uart,                                    sizeof(u8))
#define E2P_VMLNBMAXASECLIENT              E2P_RECORD( VmlNbMaxASEClient,                       sizeof(u8))
#define E2P_ATDATARATE                     E2P_RECORD( AtDataRate,                              sizeof(u8))
#ifdef __E2P_INDEX_SYM__
#define E2P_MMTECC                         E2P_RECORD( Mmt_Ecc,                              E2P_DIM_MMT_ECC*3)
#else
#define E2P_MMTECC                         E2P_RECORD( Mmt_Ecc[0],                              E2P_DIM_MMT_ECC*3)
#endif
#define E2P_MSGWAIT_GROUP                  E2P_RECORD( message_waiting_group,                   sizeof(Message_waiting_group_bk2_t))
#define E2P_GPS_UNSOLICITED_MANAGEMENT     E2P_RECORD( GpsUnsolManagement,                      sizeof(u32))
#define E2P_LLCSETTINGS                    E2P_RECORD( LlcSettings,                             sizeof(u8))
#define E2P_REGCONTROLMODE                 E2P_RECORD( RegControlMode,                          sizeof(u8))
#define E2P_OPENATSTARTADDRESS             E2P_RECORD( OatStartAddr,                            sizeof(u32)  )
#ifdef __E2P_INDEX_SYM__
#define E2P_PHBADNCHECKSUM                 E2P_RECORD( PhbAdnChecksum,                       sizeof(u8)* E2P_DIM_CHECKSUM )
#else
#define E2P_PHBADNCHECKSUM                 E2P_RECORD( PhbAdnChecksum[0],                       sizeof(u8)* E2P_DIM_CHECKSUM )
#endif
#define E2P_ADNNEEDRELOAD                  E2P_RECORD( AdnNeedReload,                           sizeof(u8))
#define E2P_ADNNEEDSYNCTOMT                E2P_RECORD( AdnNeedSyncToMT,                         sizeof(u8))
#define E2P_SETTINGS_BK                    E2P_RECORD( Settings_BK,                             sizeof(Settings_bk2_t))
#define E2P_STATUSREPORT_BK                E2P_RECORD( StatusReport_BK,                         sizeof(u8))
#define E2P_NETMODE_BK                     E2P_RECORD( E2pNetMode_BK,                           sizeof(u8))
#ifdef __MSTAR_DUAL_SIM_E2P__
#define E2P_SMSCB_CUSTOM_FLAGS_2           E2P_RECORD( SmsCbCustomFlags_2,                      sizeof(u8))
#define E2P_GPS_UNSOLICITED_MANAGEMENT_2   E2P_RECORD( GpsUnsolManagement_2,                    sizeof(u32))
#ifdef __E2P_INDEX_SYM__
#define E2P_PHBADNCHECKSUM_2               E2P_RECORD( PhbAdnChecksum_2,                     sizeof(u8)* E2P_DIM_CHECKSUM )
#else
#define E2P_PHBADNCHECKSUM_2               E2P_RECORD( PhbAdnChecksum_2[0],                     sizeof(u8)* E2P_DIM_CHECKSUM )
#endif
#define E2P_ADNNEEDRELOAD_2                E2P_RECORD( AdnNeedReload_2,                         sizeof(u8))
#define E2P_ADNNEEDSYNCTOMT_2              E2P_RECORD( AdnNeedSyncToMT_2,                       sizeof(u8))
#define E2P_SETTINGS_2_BK                  E2P_RECORD( Settings_2_BK,                           sizeof(Settings_bk2_t))
#define E2P_STATUSREPORT_2_BK              E2P_RECORD( StatusReport_2_BK,                       sizeof(u8))
#define E2P_NETMODE_2_BK                   E2P_RECORD( E2pNetMode_2_BK,                         sizeof(u8))
#define E2P_COMMONGPRSSETTINGS_2           E2P_RECORD( CommonGprsSettings_2,                    sizeof(u8))
#endif //__MSTAR_DUAL_SIM_E2P__
//#define E2P_CFUQUERYPOWERON                E2P_RECORD( CFUQueryPowerOn,                         sizeof ( u8 ) )
//#define E2P_MMI_RUNMODE                    E2P_RECORD( MMIRunMode,                              sizeof(u8))

/*++++++++++ Stack RW +++++++++++++++++*/
#ifdef __E2P_INDEX_SYM__
#define E2P_NRAIFREESECTORRECORD           E2P_RECORD( NRAIFreeSectorRecord,                    32 * sizeof(u8))
#else
#define E2P_NRAIFREESECTORRECORD           E2P_RECORD( NRAIFreeSectorRecord[0],                    32 * sizeof(u8))
#endif
/*---------- Stack RW -----------------*/
#define E2P_RAINUMBEROFENTRIES             E2P_RECORD( RaiEntriesNumber,                         sizeof(u8) )
#else
#define E2P_RAI_RESERVE_TRASH              E2P_RECORD( RaiReserveTrash,                          sizeof(u8))
#define E2P_RAINUMBEROFENTRIESEXT          E2P_RECORD( RaiEntriesNumberExt,                      sizeof(u16) )
#endif // __NAND__

#undef DefExtern

#define E2P_BT_ACRUX2_CHIPVERSION          E2P_RECORD( BTAcrux2ChipVersion,                      sizeof(u32))

#define E2P_FM_SPECIAL_CARRIERON           E2P_RECORD( FmSpecialCarrierOn,                      sizeof(u8))
#define E2P_FM_SPECIAL_CARRIEROFF          E2P_RECORD( FmSpecialCarrierOff,                     sizeof(u8))

#define E2P_FM_IS_ANTENNA_SUPPORTED        E2P_RECORD( FmIsAntennaSupported,                    sizeof(u8))
#define E2P_FM_IS_RECORDING_SUPPORTED      E2P_RECORD( FmIsRecordingSupported,                  sizeof(u8))

#define E2P_SD_DRV_RELATED_CFG             E2P_RECORD( SDdrvRelatedCfg,                          sizeof(u16))
#define E2P_ENABLE_UARTPRINTF              E2P_RECORD( EnableUartPrintf,                         sizeof(u16))

#define E2P_HIDDEN_PARTITION_SHOWUP        E2P_RECORD( HiddenPartitionShowUp,                   sizeof(u8))

#define E2P_SYSTIMEZONE                    E2P_RECORD( SysTimeZone,                             sizeof(u8))

#endif  /* __E2P_STCK_HO__  */
