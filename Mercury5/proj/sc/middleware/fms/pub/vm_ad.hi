/**
 * \page AD (Applications and Data storage) Public Interface
 * 
 * \section intro_sec Introduction
 *
 * This document describes the AD (Applications and Data storage) Public Interface. This service can be used by the 
 * Application or the Middleware for the storage of applets, applications, and non-updatable data, like customization,
 * in the NOR flash.
 *
 *  <hr>
 * \section SectionMMI2EEPROM 1. Application/Middleware to AD
 *
 * \li \ref vm_adAllocate    
 * \li \ref vm_adWrite    
 * \li \ref vm_adResume    
 * \li \ref vm_adFinalise    
 * \li \ref vm_adRetrieve    
 * \li \ref vm_adFindInit    
 * \li \ref vm_adFindNext    
 * \li \ref vm_adInfo    
 * \li \ref vm_adStats    
 * \li \ref vm_adDelete    
 * \li \ref vm_adFormat    
 * \li \ref vm_adRecompactInit    
 * \li \ref vm_adRecompact    
 * \li \ref vm_adVolumeState    
 *
 *  <hr>
 * \section Usage 2. Usage
 *
 * \subsection WriteDate 2.1. Write data in an AD volume cell
 * 
 *  At first, the client should call \ref vm_adAllocate to allocate a cell of the desired size in the
 *  given volume. He will get a handle that can be used to write data in the created cell, with 
 *  \ref vm_adWrite, as many times as needed. Then, he can finalize the volume by calling \ref vm_adFinalise.\n
 *  If the writting is interrupted without having been finalized, it can be resumed with \ref vm_adResume. To use
 *  this function, the client should at first search for the desired cell ID with \ref vm_adFindInit and
 *  \ref vm_adFindNext. When the search success, the handle get from \ref vm_adFindNext can be used 
 *  as input handle of \ref vm_adResume.
 * 
 * \subsection Search 2.2. Search cells within a volume
 * 
 *  If the client wants to list the cells of a given volume, he should call \ref vm_adFindInit and
 *  \ref vm_adFindNext.\n
 *  If he just wants to retrieve a given cell in a given volume, he should call \ref vm_adRetrieve.
 *  To get information about a found cell, he should call \ref vm_adInfo with the handle set 
 *  by \ref vm_adFindNext or \ref vm_adRetrieve as input argument.
 * 
 * \subsection Recompaction 2.3. Recompaction
 * 
 *  If the volume is too much fragmented, space is lost. So recompaction can be necessary. \n
 *  To do so, the client should at first call \ref vm_adRecompactInit, then with the return handle, 
 *  call \ref vm_adRecompact until it returns 100.
 * 
 * \subsection Misc 2.4. Miscellaneous
 * 
 *  The client can delete a cell in a given volume. The handle of the cell should have been retrieved with 
 *  \ref vm_adFindNext or \ref vm_adRetrieve. \n
 *  He can also delete the whole volume with \ref vm_adFormat. \n
 *  The client can get information on a given volume with \ref vm_adStats. \n
 *  The client can get the state of a given volume with \ref vm_adVolumeState. \n
 * 
 *  <hr>
 *  \section Notes 3. Notes
 *
 * 
 *   
 */


/*!
 * \file  vm_ad.hi
 * \brief Application/Middleware to AD (Applications and Data storage) Public Interface
 *
 *  This file defines the AD public interface that is offered to the Application and to the Middleware.
 *
 *  The interface allows to :
 *   \li read/write Java applets, applications or other non updatable objects in the NOR flash
 *   \li retrieve these binaries in the NOR Flash.
 *
 */


#ifndef _79af2e73421b2df58050f3b0db71d5af_INCLUDED_VM_AD_HI
#define _79af2e73421b2df58050f3b0db71d5af_INCLUDED_VM_AD_HI

#include "mdl_vm_ad.h"

/****************************************************************************/
/* ERROR CODES                                                              */
/****************************************************************************/

#ifndef VM_FMS_OK

   #define VM_FMS_OK             0           ///< No error
   #define VM_FMS_UNDEFINED      0xFFFFFFFF  ///< Undefined error
   #define VM_FMS_BAD_ARGS       0xFFFFFFFE  ///< Bad arguments (null pointer, etc...) 
   #define VM_FMS_BAD_FUNCTION   0xFFFFFFFD  ///< Invalid function call 
   #define VM_FMS_FORBIDDEN      0xFFFFFFFC  ///< Access denied or illegal operation attempt 
   #define VM_FMS_OVERFLOW       0xFFFFFFF9  ///< Overflow (memory exhausted,...) 
   #define VM_FMS_REACHED_END    0xFFFFFFF6  ///< No more elements to enumerate 
   #define VM_FMS_NOT_AVAILABLE  0xFFFFFFF5  ///< Function not available (no initialisation done or operation not supported) 
   #define VM_FMS_CLEANING_REQD  0xFFFFFFF3  ///< A cleaning operation is required to perform the requested command 

   /* All other codes are internal or hardware related */

#endif /* VM_FMS_OK not defined */

/****************************************************************************/
/* TYPE DEFINITIONS                                                         */
/****************************************************************************/

/****************************************************************************/
/* EXPORTED FUNCTIONS                                                       */
/****************************************************************************/

#endif /* ! _79af2e73421b2df58050f3b0db71d5af_INCLUDED_VM_AD_HI   */
