///////////////////////////////////////////////////////////////////////////////////////////////////
/// @file   newLS.h
/// @author MStar Semiconductor Inc.
/// @brief  video application header file
///////////////////////////////////////////////////////////////////////////////////////////////////
#ifndef _NEWLS_H
#define _NEWLS_H


//------------------------------------------------------------------------------
// Defines
//------------------------------------------------------------------------------
#define LsBkNotiPeriod                  (3000)
#define IdxFileidSiz                    (10)

#define FileIdEntryCnt                  (20)
#define FileIDBUFsiz                    (IdxFileidSiz*FileIdEntryCnt)
#define MaxFATDIRSIZE                   (2*1024*1024)
#define MaxFilterCount                  (40)
#define extFilterBufSiz                 (256)

#define MAX_FILE_NAME_LENGTH            (262*2) //not including NULL
#define NULL_LENGTH                     (1*2)
#define MMI_MAX_FILE_NAME_LENGTH        (127*2)              //for unicode
#define FILENAMESIZE                    (2*(MAX_FILE_NAME_LENGTH+4*2))

#define LsCacheNum                      (2)

//------------------------------------------------------------------------------
// Macros
//------------------------------------------------------------------------------
#define chk32align(x) ((x%32)?0:1)


//------------------------------------------------------------------------------
// Type and Structure Declaration
//------------------------------------------------------------------------------
typedef struct 
{
    u32     ReqFileNumer;                                    
    u8  *   pFileInfoArray;
//    U32 FileInfoBUFsize;
    u8  *   pFilterBuffer;         
//    U16 FilterBufSize;
    u16 *   pDirPath; 
    u16 DirPathLen;    
}LS_Para_t;


/**
 *  @brief The data structure defines file info structure for ESL-EFS interfaces
 */
typedef struct
{
  u8                longName[MAX_FILE_NAME_LENGTH];  /**< Filename in Unicode with terminal character                              */
  u32               uniqueId[2];       /**< The entry ID generated by MMP                                            */
  u32               createdDate;    /**< Date-time to create the entry, the detail can be reference esl_EfsDate_t */
  u32               modifiedDate;   /**< Date-time to modify the entry, the detail can be reference esl_EfsDate_t */
  u32               size;           /**< Item size in bytes, if the entry is a folder, the value will be 0        */
  u8                attr;           /**< Entry attributes, the detail can be reference esl_EfsAttr_t              */
//u8                padding[3];     /**< Padding space for memory alignment                                       */

  u32               unixCTime;
  u32               unixMTime;
  u8                shortName[12 + 1];
  u8                extention[MAX_EXT_NAME_LEN + 1];
  u8                padding[3];  
} hdi_FsFileInfo_t;


typedef struct
{
  u32   count;     /**< Number of extension should be compared                                      */
  u16 * pExtList;  /**< Extension list in Unicode, please separate with '|' in wide character, too  */
  u32   minSize;
  u32   maxsize;
  u8    rdOnlySwitch;
  u8    hiddenSwitch;
  u8    systemSwitch;
  u8    folderSwitch;
  u8    archiveSwitch;
  u8    rev[11];
} Filter_t;

typedef enum
{
  LS_ATTR_FILTER_IGNORE = 0,  /**< Even what the value of the entry attribute, keep this entry    */
  LS_ATTR_FILTER_KEEP   = 1,  /**< If the attribute is equal the condition, keep this entry       */
  LS_ATTR_FILTER_OUT    = 2,  /**< If the attribute is equal the condition, skip this entry       */
} ls_AttrFilter_e;

typedef struct
{
  u32   count;     /**< Number of extension should be compared                                      */
  u16 * pExtList;  /**< Extension list in Unicode, please separate with '|' in wide character, too  */
  u16 *ExtNameBuf[MaxFilterCount];
//  U32 ext_len;
} ls_ExtFilter_t;

typedef struct
{
  u32   minSize;  /**< Define the min-size of filter  */
  u32   maxSize;  /**< Define the max-size of filter  */
}ls_SizeFilter_t;

typedef struct
{
  ls_AttrFilter_e   rdOnlySwitch;   /**< Used to switch if need to filter RD-Only attribute */
  ls_AttrFilter_e   hiddenSwitch;   /**< Used to switch if need to filter Hidden attribute  */
  ls_AttrFilter_e   systemSwitch;   /**< Used to switch if need to filter System attribute  */
  ls_AttrFilter_e   folderSwitch;   /**< Used to switch if need to filter Folder attribute  */
  ls_AttrFilter_e   archiveSwitch;  /**< Used to switch if need to filter Archive attribute */
} ls_AttrFilter_t;

typedef struct
{
  ls_ExtFilter_t    extFilter;  /**< Filter with extension name, if the count=0, this filter would be ignored                             */
  ls_SizeFilter_t   sizeFilter; /**< Filter with file size, if min=0 & max=0xFFFFFFFF, this filter would be ignored                       */
  ls_AttrFilter_t   attrFilter; /**< Filter with attribute, if all switches are ESL_EFS_ATTR_FILTER_IGNORE, this filter would be ignored  */
} LSFilter_t;


//LsFilter sizeof[76+4]
//ls_ExtFilter_t[48] ls_SizeFilter_t[8] ls_AttrFilter_t[20]

typedef struct
{
    u8 pu8dirpath[FILENAMESIZE/2];//512 byte
    u32 filter_exist; 
    LSFilter_t filter;
    U8 extFilterBuf[extFilterBufSiz];
    u32 u32filenum;
    u32 u32idxnum;
    u32 isTotalNum;//check file number is total in cache    
    time_t timestamp;
    u8 * pu8idxfileIDarray;
}LSCACHE;

//workaround
typedef struct
{
    u8  fire_async_notify;
    u16 opt;
    u16 mask;
    u8 no_filter;
    u16* path;
    LSFilter_t Filter;
    u8 async_single_file_del;
}async_del_para_t;


//------------------------------------------------------------------------------
// Extern Global Variabls
//------------------------------------------------------------------------------
//extern CFG_VARS_RW * const gpCfgVarRW;
extern efat_sem_t sem_rwNumInLsCache;
extern LSCACHE  LScache[LsCacheNum];
//extern u8 LSFileIDBUF[LsCacheNum][FileIDBUFsiz];

//------------------------------------------------------------------------------
// Extern Functions
//------------------------------------------------------------------------------
extern void unix2dos_date(efat_uint32  unix_timestamp,efat_uint16 *dos_time,efat_uint16 *dos_date);
extern void check_clean_lscache(const char * disk, const char * path);
extern void check_clean_lscache_with_mentry(mtabEntry  *mte, const char * path);
//extern void ls_static_var_init(void);


#endif // _NEWLS_H

